
my1004c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .default_config_page 00000064  08000100  08000100  00001100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .fconfig_page 00000100  08080000  08080000  00008000  2**8
                  ALLOC
  3 .text         00004bc8  08000164  08000164  00001164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000007a8  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  080054d4  080054d4  00007064  2**0
                  CONTENTS, READONLY
  6 .ARM          00000000  080054d4  080054d4  00007064  2**0
                  CONTENTS, READONLY
  7 .preinit_array 00000000  080054d4  080054d4  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  080054d4  080054d4  000064d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .fini_array   00000004  080054d8  080054d8  000064d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data         00000064  20000000  080054dc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000004dc  20000100  08005540  00007100  2**8
                  ALLOC
 12 ._user_heap_stack 00000604  200005dc  08005540  000075dc  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 14 .debug_info   000175c5  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dd8  00000000  00000000  0001e651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000081cb  00000000  00000000  00022429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000c98  00000000  00000000  0002a5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000ace  00000000  00000000  0002b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000149e6  00000000  00000000  0002bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014094  00000000  00000000  00040744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00051a77  00000000  00000000  000547d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000a624f  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000028dc  00000000  00000000  000a6294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  000a8b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000164 <__do_global_dtors_aux>:
 8000164:	b510      	push	{r4, lr}
 8000166:	4c06      	ldr	r4, [pc, #24]	@ (8000180 <__do_global_dtors_aux+0x1c>)
 8000168:	7823      	ldrb	r3, [r4, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d107      	bne.n	800017e <__do_global_dtors_aux+0x1a>
 800016e:	4b05      	ldr	r3, [pc, #20]	@ (8000184 <__do_global_dtors_aux+0x20>)
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <__do_global_dtors_aux+0x16>
 8000174:	4804      	ldr	r0, [pc, #16]	@ (8000188 <__do_global_dtors_aux+0x24>)
 8000176:	e000      	b.n	800017a <__do_global_dtors_aux+0x16>
 8000178:	bf00      	nop
 800017a:	2301      	movs	r3, #1
 800017c:	7023      	strb	r3, [r4, #0]
 800017e:	bd10      	pop	{r4, pc}
 8000180:	20000100 	.word	0x20000100
 8000184:	00000000 	.word	0x00000000
 8000188:	08004d14 	.word	0x08004d14

0800018c <frame_dummy>:
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <frame_dummy+0x14>)
 800018e:	b510      	push	{r4, lr}
 8000190:	2b00      	cmp	r3, #0
 8000192:	d003      	beq.n	800019c <frame_dummy+0x10>
 8000194:	4903      	ldr	r1, [pc, #12]	@ (80001a4 <frame_dummy+0x18>)
 8000196:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <frame_dummy+0x1c>)
 8000198:	e000      	b.n	800019c <frame_dummy+0x10>
 800019a:	bf00      	nop
 800019c:	bd10      	pop	{r4, pc}
 800019e:	46c0      	nop			@ (mov r8, r8)
 80001a0:	00000000 	.word	0x00000000
 80001a4:	20000104 	.word	0x20000104
 80001a8:	08004d14 	.word	0x08004d14

080001ac <strcmp>:
 80001ac:	7802      	ldrb	r2, [r0, #0]
 80001ae:	780b      	ldrb	r3, [r1, #0]
 80001b0:	2a00      	cmp	r2, #0
 80001b2:	d003      	beq.n	80001bc <strcmp+0x10>
 80001b4:	3001      	adds	r0, #1
 80001b6:	3101      	adds	r1, #1
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d0f7      	beq.n	80001ac <strcmp>
 80001bc:	1ad0      	subs	r0, r2, r3
 80001be:	4770      	bx	lr

080001c0 <strlen>:
 80001c0:	2300      	movs	r3, #0
 80001c2:	5cc2      	ldrb	r2, [r0, r3]
 80001c4:	3301      	adds	r3, #1
 80001c6:	2a00      	cmp	r2, #0
 80001c8:	d1fb      	bne.n	80001c2 <strlen+0x2>
 80001ca:	1e58      	subs	r0, r3, #1
 80001cc:	4770      	bx	lr
	...

080001d0 <__gnu_thumb1_case_shi>:
 80001d0:	b403      	push	{r0, r1}
 80001d2:	4671      	mov	r1, lr
 80001d4:	0849      	lsrs	r1, r1, #1
 80001d6:	0040      	lsls	r0, r0, #1
 80001d8:	0049      	lsls	r1, r1, #1
 80001da:	5e09      	ldrsh	r1, [r1, r0]
 80001dc:	0049      	lsls	r1, r1, #1
 80001de:	448e      	add	lr, r1
 80001e0:	bc03      	pop	{r0, r1}
 80001e2:	4770      	bx	lr

080001e4 <__udivsi3>:
 80001e4:	2200      	movs	r2, #0
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d374      	bcc.n	80002d6 <__udivsi3+0xf2>
 80001ec:	0903      	lsrs	r3, r0, #4
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d35f      	bcc.n	80002b2 <__udivsi3+0xce>
 80001f2:	0a03      	lsrs	r3, r0, #8
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d344      	bcc.n	8000282 <__udivsi3+0x9e>
 80001f8:	0b03      	lsrs	r3, r0, #12
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d328      	bcc.n	8000250 <__udivsi3+0x6c>
 80001fe:	0c03      	lsrs	r3, r0, #16
 8000200:	428b      	cmp	r3, r1
 8000202:	d30d      	bcc.n	8000220 <__udivsi3+0x3c>
 8000204:	22ff      	movs	r2, #255	@ 0xff
 8000206:	0209      	lsls	r1, r1, #8
 8000208:	ba12      	rev	r2, r2
 800020a:	0c03      	lsrs	r3, r0, #16
 800020c:	428b      	cmp	r3, r1
 800020e:	d302      	bcc.n	8000216 <__udivsi3+0x32>
 8000210:	1212      	asrs	r2, r2, #8
 8000212:	0209      	lsls	r1, r1, #8
 8000214:	d065      	beq.n	80002e2 <__udivsi3+0xfe>
 8000216:	0b03      	lsrs	r3, r0, #12
 8000218:	428b      	cmp	r3, r1
 800021a:	d319      	bcc.n	8000250 <__udivsi3+0x6c>
 800021c:	e000      	b.n	8000220 <__udivsi3+0x3c>
 800021e:	0a09      	lsrs	r1, r1, #8
 8000220:	0bc3      	lsrs	r3, r0, #15
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x46>
 8000226:	03cb      	lsls	r3, r1, #15
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	0b83      	lsrs	r3, r0, #14
 800022e:	428b      	cmp	r3, r1
 8000230:	d301      	bcc.n	8000236 <__udivsi3+0x52>
 8000232:	038b      	lsls	r3, r1, #14
 8000234:	1ac0      	subs	r0, r0, r3
 8000236:	4152      	adcs	r2, r2
 8000238:	0b43      	lsrs	r3, r0, #13
 800023a:	428b      	cmp	r3, r1
 800023c:	d301      	bcc.n	8000242 <__udivsi3+0x5e>
 800023e:	034b      	lsls	r3, r1, #13
 8000240:	1ac0      	subs	r0, r0, r3
 8000242:	4152      	adcs	r2, r2
 8000244:	0b03      	lsrs	r3, r0, #12
 8000246:	428b      	cmp	r3, r1
 8000248:	d301      	bcc.n	800024e <__udivsi3+0x6a>
 800024a:	030b      	lsls	r3, r1, #12
 800024c:	1ac0      	subs	r0, r0, r3
 800024e:	4152      	adcs	r2, r2
 8000250:	0ac3      	lsrs	r3, r0, #11
 8000252:	428b      	cmp	r3, r1
 8000254:	d301      	bcc.n	800025a <__udivsi3+0x76>
 8000256:	02cb      	lsls	r3, r1, #11
 8000258:	1ac0      	subs	r0, r0, r3
 800025a:	4152      	adcs	r2, r2
 800025c:	0a83      	lsrs	r3, r0, #10
 800025e:	428b      	cmp	r3, r1
 8000260:	d301      	bcc.n	8000266 <__udivsi3+0x82>
 8000262:	028b      	lsls	r3, r1, #10
 8000264:	1ac0      	subs	r0, r0, r3
 8000266:	4152      	adcs	r2, r2
 8000268:	0a43      	lsrs	r3, r0, #9
 800026a:	428b      	cmp	r3, r1
 800026c:	d301      	bcc.n	8000272 <__udivsi3+0x8e>
 800026e:	024b      	lsls	r3, r1, #9
 8000270:	1ac0      	subs	r0, r0, r3
 8000272:	4152      	adcs	r2, r2
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d301      	bcc.n	800027e <__udivsi3+0x9a>
 800027a:	020b      	lsls	r3, r1, #8
 800027c:	1ac0      	subs	r0, r0, r3
 800027e:	4152      	adcs	r2, r2
 8000280:	d2cd      	bcs.n	800021e <__udivsi3+0x3a>
 8000282:	09c3      	lsrs	r3, r0, #7
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__udivsi3+0xa8>
 8000288:	01cb      	lsls	r3, r1, #7
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0983      	lsrs	r3, r0, #6
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__udivsi3+0xb4>
 8000294:	018b      	lsls	r3, r1, #6
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0943      	lsrs	r3, r0, #5
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__udivsi3+0xc0>
 80002a0:	014b      	lsls	r3, r1, #5
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0903      	lsrs	r3, r0, #4
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__udivsi3+0xcc>
 80002ac:	010b      	lsls	r3, r1, #4
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	08c3      	lsrs	r3, r0, #3
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__udivsi3+0xd8>
 80002b8:	00cb      	lsls	r3, r1, #3
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0883      	lsrs	r3, r0, #2
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__udivsi3+0xe4>
 80002c4:	008b      	lsls	r3, r1, #2
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0843      	lsrs	r3, r0, #1
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__udivsi3+0xf0>
 80002d0:	004b      	lsls	r3, r1, #1
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	1a41      	subs	r1, r0, r1
 80002d8:	d200      	bcs.n	80002dc <__udivsi3+0xf8>
 80002da:	4601      	mov	r1, r0
 80002dc:	4152      	adcs	r2, r2
 80002de:	4610      	mov	r0, r2
 80002e0:	4770      	bx	lr
 80002e2:	e7ff      	b.n	80002e4 <__udivsi3+0x100>
 80002e4:	b501      	push	{r0, lr}
 80002e6:	2000      	movs	r0, #0
 80002e8:	f000 f806 	bl	80002f8 <__aeabi_idiv0>
 80002ec:	bd02      	pop	{r1, pc}
 80002ee:	46c0      	nop			@ (mov r8, r8)

080002f0 <__aeabi_uidivmod>:
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d0f7      	beq.n	80002e4 <__udivsi3+0x100>
 80002f4:	e776      	b.n	80001e4 <__udivsi3>
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_idiv0>:
 80002f8:	4770      	bx	lr
 80002fa:	46c0      	nop			@ (mov r8, r8)

080002fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002fc:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_CRC_Init+0x40>)
 8000300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000302:	2180      	movs	r1, #128	@ 0x80
 8000304:	0149      	lsls	r1, r1, #5
 8000306:	430a      	orrs	r2, r1
 8000308:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	400b      	ands	r3, r1
 800030e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000310:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <MX_CRC_Init+0x44>)
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	2160      	movs	r1, #96	@ 0x60
 8000318:	438a      	bics	r2, r1
 800031a:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	3120      	adds	r1, #32
 8000320:	438a      	bics	r2, r1
 8000322:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 8000324:	4a07      	ldr	r2, [pc, #28]	@ (8000344 <MX_CRC_Init+0x48>)
 8000326:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8000328:	689a      	ldr	r2, [r3, #8]
 800032a:	3968      	subs	r1, #104	@ 0x68
 800032c:	438a      	bics	r2, r1
 800032e:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 8000330:	2201      	movs	r2, #1
 8000332:	4252      	negs	r2, r2
 8000334:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000336:	b002      	add	sp, #8
 8000338:	4770      	bx	lr
 800033a:	46c0      	nop			@ (mov r8, r8)
 800033c:	40021000 	.word	0x40021000
 8000340:	40023000 	.word	0x40023000
 8000344:	04c11db7 	.word	0x04c11db7

08000348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800034a:	46de      	mov	lr, fp
 800034c:	4657      	mov	r7, sl
 800034e:	464e      	mov	r6, r9
 8000350:	4645      	mov	r5, r8
 8000352:	b5e0      	push	{r5, r6, r7, lr}
 8000354:	b08b      	sub	sp, #44	@ 0x2c
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000356:	af08      	add	r7, sp, #32
 8000358:	2208      	movs	r2, #8
 800035a:	2100      	movs	r1, #0
 800035c:	0038      	movs	r0, r7
 800035e:	f003 fc5b 	bl	8003c18 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	2218      	movs	r2, #24
 8000364:	2100      	movs	r1, #0
 8000366:	a802      	add	r0, sp, #8
 8000368:	f003 fc56 	bl	8003c18 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800036c:	4b74      	ldr	r3, [pc, #464]	@ (8000540 <MX_GPIO_Init+0x1f8>)
 800036e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000370:	2501      	movs	r5, #1
 8000372:	432a      	orrs	r2, r5
 8000374:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000378:	402a      	ands	r2, r5
 800037a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800037c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800037e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000380:	2102      	movs	r1, #2
 8000382:	4689      	mov	r9, r1
 8000384:	430a      	orrs	r2, r1
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800038a:	400b      	ands	r3, r1
 800038c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800038e:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000390:	26a0      	movs	r6, #160	@ 0xa0
 8000392:	05f6      	lsls	r6, r6, #23
 8000394:	000b      	movs	r3, r1
 8000396:	61b1      	str	r1, [r6, #24]
 8000398:	330e      	adds	r3, #14
 800039a:	469b      	mov	fp, r3
 800039c:	61b3      	str	r3, [r6, #24]
 800039e:	4b69      	ldr	r3, [pc, #420]	@ (8000544 <MX_GPIO_Init+0x1fc>)
 80003a0:	4698      	mov	r8, r3
 80003a2:	619d      	str	r5, [r3, #24]
 80003a4:	6199      	str	r1, [r3, #24]
 80003a6:	2380      	movs	r3, #128	@ 0x80
 80003a8:	005b      	lsls	r3, r3, #1
 80003aa:	61b3      	str	r3, [r6, #24]
 80003ac:	2180      	movs	r1, #128	@ 0x80
 80003ae:	0209      	lsls	r1, r1, #8
 80003b0:	61b1      	str	r1, [r6, #24]
 80003b2:	4640      	mov	r0, r8
 80003b4:	3bf8      	subs	r3, #248	@ 0xf8
 80003b6:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 80003b8:	4b63      	ldr	r3, [pc, #396]	@ (8000548 <MX_GPIO_Init+0x200>)
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	210f      	movs	r1, #15
 80003be:	438a      	bics	r2, r1
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	4961      	ldr	r1, [pc, #388]	@ (800054c <MX_GPIO_Init+0x204>)
 80003c6:	400a      	ands	r2, r1
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	4960      	ldr	r1, [pc, #384]	@ (8000550 <MX_GPIO_Init+0x208>)
 80003ce:	400a      	ands	r2, r1
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	68da      	ldr	r2, [r3, #12]
 80003d4:	21f0      	movs	r1, #240	@ 0xf0
 80003d6:	438a      	bics	r2, r1
 80003d8:	4658      	mov	r0, fp
 80003da:	4302      	orrs	r2, r0
 80003dc:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80003de:	68f3      	ldr	r3, [r6, #12]
 80003e0:	380d      	subs	r0, #13
 80003e2:	4682      	mov	sl, r0
 80003e4:	4383      	bics	r3, r0
 80003e6:	60f3      	str	r3, [r6, #12]
 80003e8:	68f3      	ldr	r3, [r6, #12]
 80003ea:	302d      	adds	r0, #45	@ 0x2d
 80003ec:	4383      	bics	r3, r0
 80003ee:	60f3      	str	r3, [r6, #12]
 80003f0:	68f3      	ldr	r3, [r6, #12]
 80003f2:	3930      	subs	r1, #48	@ 0x30
 80003f4:	438b      	bics	r3, r1
 80003f6:	60f3      	str	r3, [r6, #12]
 80003f8:	4644      	mov	r4, r8
 80003fa:	68e4      	ldr	r4, [r4, #12]
 80003fc:	4a55      	ldr	r2, [pc, #340]	@ (8000554 <MX_GPIO_Init+0x20c>)
 80003fe:	4014      	ands	r4, r2
 8000400:	2380      	movs	r3, #128	@ 0x80
 8000402:	00db      	lsls	r3, r3, #3
 8000404:	4323      	orrs	r3, r4
 8000406:	4644      	mov	r4, r8
 8000408:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800040a:	6833      	ldr	r3, [r6, #0]
 800040c:	4654      	mov	r4, sl
 800040e:	43a3      	bics	r3, r4
 8000410:	6033      	str	r3, [r6, #0]
 8000412:	6833      	ldr	r3, [r6, #0]
 8000414:	4383      	bics	r3, r0
 8000416:	6033      	str	r3, [r6, #0]
 8000418:	6833      	ldr	r3, [r6, #0]
 800041a:	438b      	bics	r3, r1
 800041c:	6033      	str	r3, [r6, #0]
 800041e:	4640      	mov	r0, r8
 8000420:	6803      	ldr	r3, [r0, #0]
 8000422:	4013      	ands	r3, r2
 8000424:	6003      	str	r3, [r0, #0]

  /**/
  LL_GPIO_SetPinMode(Button_GPIO_Port, Button_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000426:	9508      	str	r5, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000428:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800042a:	2400      	movs	r4, #0
 800042c:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800042e:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000430:	0038      	movs	r0, r7
 8000432:	f000 fc21 	bl	8000c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000436:	2304      	movs	r3, #4
 8000438:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800043a:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800043c:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800043e:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000440:	0038      	movs	r0, r7
 8000442:	f000 fc19 	bl	8000c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000446:	2308      	movs	r3, #8
 8000448:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800044a:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800044c:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800044e:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000450:	0038      	movs	r0, r7
 8000452:	f000 fc11 	bl	8000c78 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000456:	2020      	movs	r0, #32
 8000458:	9008      	str	r0, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800045a:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800045c:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800045e:	464a      	mov	r2, r9
 8000460:	71ba      	strb	r2, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000462:	0038      	movs	r0, r7
 8000464:	f000 fc08 	bl	8000c78 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000468:	464f      	mov	r7, r9
 800046a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800046c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800046e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000470:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000472:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000474:	af02      	add	r7, sp, #8
 8000476:	0039      	movs	r1, r7
 8000478:	0030      	movs	r0, r6
 800047a:	f000 fc61 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_PWR_Pin;
 800047e:	465f      	mov	r7, fp
 8000480:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000482:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000484:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000486:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000488:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_PWR_GPIO_Port, &GPIO_InitStruct);
 800048a:	af02      	add	r7, sp, #8
 800048c:	0039      	movs	r1, r7
 800048e:	0030      	movs	r0, r6
 8000490:	f000 fc56 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8000494:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000496:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000498:	4657      	mov	r7, sl
 800049a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800049c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800049e:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	0039      	movs	r1, r7
 80004a4:	4640      	mov	r0, r8
 80004a6:	f000 fc4b 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_RST_Pin;
 80004aa:	464f      	mov	r7, r9
 80004ac:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ae:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80004b0:	4657      	mov	r7, sl
 80004b2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80004b4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b6:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	0039      	movs	r1, r7
 80004bc:	4640      	mov	r0, r8
 80004be:	f000 fc3f 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Red_Pin;
 80004c2:	2280      	movs	r2, #128	@ 0x80
 80004c4:	0052      	lsls	r2, r2, #1
 80004c6:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004c8:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004ca:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004ce:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 80004d0:	0039      	movs	r1, r7
 80004d2:	0030      	movs	r0, r6
 80004d4:	f000 fc34 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_CS_Pin;
 80004d8:	2180      	movs	r1, #128	@ 0x80
 80004da:	0209      	lsls	r1, r1, #8
 80004dc:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004de:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004e0:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004e4:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_CS_GPIO_Port, &GPIO_InitStruct);
 80004e6:	0039      	movs	r1, r7
 80004e8:	0030      	movs	r0, r6
 80004ea:	f000 fc29 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Green_Pin;
 80004ee:	2308      	movs	r3, #8
 80004f0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004f2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004f4:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004f8:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 80004fa:	0039      	movs	r1, r7
 80004fc:	4640      	mov	r0, r8
 80004fe:	f000 fc1f 	bl	8000d40 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_PIN17_Pin;
 8000502:	465b      	mov	r3, fp
 8000504:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000506:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000508:	9506      	str	r5, [sp, #24]
  LL_GPIO_Init(M_PIN17_GPIO_Port, &GPIO_InitStruct);
 800050a:	0039      	movs	r1, r7
 800050c:	4640      	mov	r0, r8
 800050e:	f000 fc17 	bl	8000d40 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <MX_GPIO_Init+0x210>)
 8000514:	22c1      	movs	r2, #193	@ 0xc1
 8000516:	0092      	lsls	r2, r2, #2
 8000518:	5899      	ldr	r1, [r3, r2]
 800051a:	4810      	ldr	r0, [pc, #64]	@ (800055c <MX_GPIO_Init+0x214>)
 800051c:	4001      	ands	r1, r0
 800051e:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000520:	2020      	movs	r0, #32
 8000522:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000524:	5899      	ldr	r1, [r3, r2]
 8000526:	480e      	ldr	r0, [pc, #56]	@ (8000560 <MX_GPIO_Init+0x218>)
 8000528:	4001      	ands	r1, r0
 800052a:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800052c:	2240      	movs	r2, #64	@ 0x40
 800052e:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI2_3_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000530:	b00b      	add	sp, #44	@ 0x2c
 8000532:	bcf0      	pop	{r4, r5, r6, r7}
 8000534:	46bb      	mov	fp, r7
 8000536:	46b2      	mov	sl, r6
 8000538:	46a9      	mov	r9, r5
 800053a:	46a0      	mov	r8, r4
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	40021000 	.word	0x40021000
 8000544:	50000400 	.word	0x50000400
 8000548:	40010000 	.word	0x40010000
 800054c:	fffff0ff 	.word	0xfffff0ff
 8000550:	ffff0fff 	.word	0xffff0fff
 8000554:	fffff3ff 	.word	0xfffff3ff
 8000558:	e000e100 	.word	0xe000e100
 800055c:	ffff00ff 	.word	0xffff00ff
 8000560:	ff00ffff 	.word	0xff00ffff

08000564 <MX_RTC_Init>:
{
 8000564:	b510      	push	{r4, lr}
 8000566:	b084      	sub	sp, #16
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000568:	220c      	movs	r2, #12
 800056a:	2100      	movs	r1, #0
 800056c:	a801      	add	r0, sp, #4
 800056e:	f003 fb53 	bl	8003c18 <memset>
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 8000572:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <MX_RTC_Init+0x50>)
 8000574:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000576:	2380      	movs	r3, #128	@ 0x80
 8000578:	02db      	lsls	r3, r3, #11
 800057a:	430b      	orrs	r3, r1
 800057c:	6513      	str	r3, [r2, #80]	@ 0x50
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <MX_RTC_Init+0x54>)
 8000580:	21c0      	movs	r1, #192	@ 0xc0
 8000582:	0089      	lsls	r1, r1, #2
 8000584:	585a      	ldr	r2, [r3, r1]
 8000586:	480d      	ldr	r0, [pc, #52]	@ (80005bc <MX_RTC_Init+0x58>)
 8000588:	4002      	ands	r2, r0
 800058a:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058c:	2204      	movs	r2, #4
 800058e:	601a      	str	r2, [r3, #0]
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8000590:	2300      	movs	r3, #0
 8000592:	9301      	str	r3, [sp, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 8000594:	337f      	adds	r3, #127	@ 0x7f
 8000596:	9302      	str	r3, [sp, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 8000598:	3380      	adds	r3, #128	@ 0x80
 800059a:	9303      	str	r3, [sp, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800059c:	4c08      	ldr	r4, [pc, #32]	@ (80005c0 <MX_RTC_Init+0x5c>)
 800059e:	a901      	add	r1, sp, #4
 80005a0:	0020      	movs	r0, r4
 80005a2:	f000 fd57 	bl	8001054 <LL_RTC_Init>
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80005a6:	68a3      	ldr	r3, [r4, #8]
 80005a8:	2207      	movs	r2, #7
 80005aa:	4393      	bics	r3, r2
 80005ac:	60a3      	str	r3, [r4, #8]
}
 80005ae:	b004      	add	sp, #16
 80005b0:	bd10      	pop	{r4, pc}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	ff00ffff 	.word	0xff00ffff
 80005c0:	40002800 	.word	0x40002800

080005c4 <MX_SPI1_Init>:
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	46c6      	mov	lr, r8
 80005c8:	b500      	push	{lr}
 80005ca:	b092      	sub	sp, #72	@ 0x48
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80005cc:	2228      	movs	r2, #40	@ 0x28
 80005ce:	2100      	movs	r1, #0
 80005d0:	a808      	add	r0, sp, #32
 80005d2:	f003 fb21 	bl	8003c18 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d6:	2218      	movs	r2, #24
 80005d8:	2100      	movs	r1, #0
 80005da:	a802      	add	r0, sp, #8
 80005dc:	f003 fb1c 	bl	8003c18 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_SPI1_Init+0xcc>)
 80005e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	0149      	lsls	r1, r1, #5
 80005e8:	430a      	orrs	r2, r1
 80005ea:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ee:	400a      	ands	r2, r1
 80005f0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80005f2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80005f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80005f6:	2201      	movs	r2, #1
 80005f8:	4311      	orrs	r1, r2
 80005fa:	62d9      	str	r1, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fe:	401a      	ands	r2, r3
 8000600:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8000602:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000604:	2320      	movs	r3, #32
 8000606:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000608:	3b1e      	subs	r3, #30
 800060a:	4698      	mov	r8, r3
 800060c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	2603      	movs	r6, #3
 8000610:	9604      	str	r6, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000612:	25a0      	movs	r5, #160	@ 0xa0
 8000614:	05ed      	lsls	r5, r5, #23
 8000616:	a902      	add	r1, sp, #8
 8000618:	0028      	movs	r0, r5
 800061a:	f000 fb91 	bl	8000d40 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800061e:	2740      	movs	r7, #64	@ 0x40
 8000620:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000622:	4643      	mov	r3, r8
 8000624:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000626:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000628:	2400      	movs	r4, #0
 800062a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800062c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800062e:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	a902      	add	r1, sp, #8
 8000632:	0028      	movs	r0, r5
 8000634:	f000 fb84 	bl	8000d40 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000638:	2380      	movs	r3, #128	@ 0x80
 800063a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800063c:	4643      	mov	r3, r8
 800063e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000640:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000642:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000644:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000646:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	a902      	add	r1, sp, #8
 800064a:	0028      	movs	r0, r5
 800064c:	f000 fb78 	bl	8000d40 <LL_GPIO_Init>
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000650:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000652:	2382      	movs	r3, #130	@ 0x82
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	9309      	str	r3, [sp, #36]	@ 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000658:	940a      	str	r4, [sp, #40]	@ 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800065a:	940b      	str	r4, [sp, #44]	@ 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800065c:	940c      	str	r4, [sp, #48]	@ 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800065e:	33fc      	adds	r3, #252	@ 0xfc
 8000660:	930d      	str	r3, [sp, #52]	@ 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000662:	3be9      	subs	r3, #233	@ 0xe9
 8000664:	3bff      	subs	r3, #255	@ 0xff
 8000666:	930e      	str	r3, [sp, #56]	@ 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000668:	940f      	str	r4, [sp, #60]	@ 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800066a:	9410      	str	r4, [sp, #64]	@ 0x40
  SPI_InitStruct.CRCPoly = 7;
 800066c:	3b11      	subs	r3, #17
 800066e:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000670:	4c08      	ldr	r4, [pc, #32]	@ (8000694 <MX_SPI1_Init+0xd0>)
 8000672:	a908      	add	r1, sp, #32
 8000674:	0020      	movs	r0, r4
 8000676:	f000 fd15 	bl	80010a4 <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800067a:	6863      	ldr	r3, [r4, #4]
 800067c:	2210      	movs	r2, #16
 800067e:	4393      	bics	r3, r2
 8000680:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000682:	6823      	ldr	r3, [r4, #0]
 8000684:	433b      	orrs	r3, r7
 8000686:	6023      	str	r3, [r4, #0]
}
 8000688:	b012      	add	sp, #72	@ 0x48
 800068a:	bc80      	pop	{r7}
 800068c:	46b8      	mov	r8, r7
 800068e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000690:	40021000 	.word	0x40021000
 8000694:	40013000 	.word	0x40013000

08000698 <MX_USART2_UART_Init>:
{
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	b090      	sub	sp, #64	@ 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800069c:	221c      	movs	r2, #28
 800069e:	2100      	movs	r1, #0
 80006a0:	a809      	add	r0, sp, #36	@ 0x24
 80006a2:	f003 fab9 	bl	8003c18 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	2218      	movs	r2, #24
 80006a8:	2100      	movs	r1, #0
 80006aa:	a803      	add	r0, sp, #12
 80006ac:	f003 fab4 	bl	8003c18 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 80006b0:	4b36      	ldr	r3, [pc, #216]	@ (800078c <MX_USART2_UART_Init+0xf4>)
 80006b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0289      	lsls	r1, r1, #10
 80006b8:	430a      	orrs	r2, r1
 80006ba:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80006bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006be:	400a      	ands	r2, r1
 80006c0:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80006c2:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 80006c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006c6:	2402      	movs	r4, #2
 80006c8:	4322      	orrs	r2, r4
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80006cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ce:	4023      	ands	r3, r4
 80006d0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80006d2:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80006d4:	2340      	movs	r3, #64	@ 0x40
 80006d6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006d8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006da:	2603      	movs	r6, #3
 80006dc:	9605      	str	r6, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	4d2c      	ldr	r5, [pc, #176]	@ (8000790 <MX_USART2_UART_Init+0xf8>)
 80006e0:	a903      	add	r1, sp, #12
 80006e2:	0028      	movs	r0, r5
 80006e4:	f000 fb2c 	bl	8000d40 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006ec:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f0:	2400      	movs	r4, #0
 80006f2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006f4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80006f6:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f8:	a903      	add	r1, sp, #12
 80006fa:	0028      	movs	r0, r5
 80006fc:	f000 fb20 	bl	8000d40 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000700:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <MX_USART2_UART_Init+0xfc>)
 8000702:	21c7      	movs	r1, #199	@ 0xc7
 8000704:	0089      	lsls	r1, r1, #2
 8000706:	585a      	ldr	r2, [r3, r1]
 8000708:	20ff      	movs	r0, #255	@ 0xff
 800070a:	4382      	bics	r2, r0
 800070c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	2280      	movs	r2, #128	@ 0x80
 8000710:	0552      	lsls	r2, r2, #21
 8000712:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8000714:	23e1      	movs	r3, #225	@ 0xe1
 8000716:	025b      	lsls	r3, r3, #9
 8000718:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800071a:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800071c:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800071e:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000720:	230c      	movs	r3, #12
 8000722:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000724:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000726:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000728:	4c1b      	ldr	r4, [pc, #108]	@ (8000798 <MX_USART2_UART_Init+0x100>)
 800072a:	a909      	add	r1, sp, #36	@ 0x24
 800072c:	0020      	movs	r0, r4
 800072e:	f000 fd0b 	bl	8001148 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000732:	6863      	ldr	r3, [r4, #4]
 8000734:	4a19      	ldr	r2, [pc, #100]	@ (800079c <MX_USART2_UART_Init+0x104>)
 8000736:	4013      	ands	r3, r2
 8000738:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800073a:	68a3      	ldr	r3, [r4, #8]
 800073c:	222a      	movs	r2, #42	@ 0x2a
 800073e:	4393      	bics	r3, r2
 8000740:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000742:	6822      	ldr	r2, [r4, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	431a      	orrs	r2, r3
 8000748:	6022      	str	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800074a:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800074e:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8000752:	6820      	ldr	r0, [r4, #0]
 8000754:	2280      	movs	r2, #128	@ 0x80
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	4302      	orrs	r2, r0
 800075a:	6022      	str	r2, [r4, #0]
 800075c:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000760:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000764:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000768:	68a2      	ldr	r2, [r4, #8]
 800076a:	431a      	orrs	r2, r3
 800076c:	60a2      	str	r2, [r4, #8]
 800076e:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000772:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000776:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800077a:	6823      	ldr	r3, [r4, #0]
 800077c:	2120      	movs	r1, #32
 800077e:	430b      	orrs	r3, r1
 8000780:	6023      	str	r3, [r4, #0]
 8000782:	f382 8810 	msr	PRIMASK, r2
}
 8000786:	b010      	add	sp, #64	@ 0x40
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	40021000 	.word	0x40021000
 8000790:	50000400 	.word	0x50000400
 8000794:	e000e100 	.word	0xe000e100
 8000798:	40004400 	.word	0x40004400
 800079c:	ffffb7ff 	.word	0xffffb7ff

080007a0 <MX_I2C1_Init>:
{
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	46c6      	mov	lr, r8
 80007a4:	b500      	push	{lr}
 80007a6:	b090      	sub	sp, #64	@ 0x40
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80007a8:	221c      	movs	r2, #28
 80007aa:	2100      	movs	r1, #0
 80007ac:	a809      	add	r0, sp, #36	@ 0x24
 80007ae:	f003 fa33 	bl	8003c18 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	2218      	movs	r2, #24
 80007b4:	2100      	movs	r1, #0
 80007b6:	a803      	add	r0, sp, #12
 80007b8:	f003 fa2e 	bl	8003c18 <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 80007bc:	4c2b      	ldr	r4, [pc, #172]	@ (800086c <MX_I2C1_Init+0xcc>)
 80007be:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80007c0:	2601      	movs	r6, #1
 80007c2:	4333      	orrs	r3, r6
 80007c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80007c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80007c8:	4033      	ands	r3, r6
 80007ca:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80007cc:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007d4:	3bff      	subs	r3, #255	@ 0xff
 80007d6:	3bff      	subs	r3, #255	@ 0xff
 80007d8:	4698      	mov	r8, r3
 80007da:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2503      	movs	r5, #3
 80007de:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80007e0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007e2:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	27a0      	movs	r7, #160	@ 0xa0
 80007e6:	05ff      	lsls	r7, r7, #23
 80007e8:	a903      	add	r1, sp, #12
 80007ea:	0038      	movs	r0, r7
 80007ec:	f000 faa8 	bl	8000d40 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007f6:	4643      	mov	r3, r8
 80007f8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80007fc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007fe:	2500      	movs	r5, #0
 8000800:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000802:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	a903      	add	r1, sp, #12
 8000806:	0038      	movs	r0, r7
 8000808:	f000 fa9a 	bl	8000d40 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800080c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800080e:	2280      	movs	r2, #128	@ 0x80
 8000810:	0392      	lsls	r2, r2, #14
 8000812:	4313      	orrs	r3, r2
 8000814:	63a3      	str	r3, [r4, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000816:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000818:	4013      	ands	r3, r2
 800081a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800081c:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800081e:	4c14      	ldr	r4, [pc, #80]	@ (8000870 <MX_I2C1_Init+0xd0>)
 8000820:	6862      	ldr	r2, [r4, #4]
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	049b      	lsls	r3, r3, #18
 8000826:	4313      	orrs	r3, r2
 8000828:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800082a:	68e3      	ldr	r3, [r4, #12]
 800082c:	4a11      	ldr	r2, [pc, #68]	@ (8000874 <MX_I2C1_Init+0xd4>)
 800082e:	4013      	ands	r3, r2
 8000830:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000832:	6823      	ldr	r3, [r4, #0]
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <MX_I2C1_Init+0xd8>)
 8000836:	4013      	ands	r3, r2
 8000838:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	4a0f      	ldr	r2, [pc, #60]	@ (800087c <MX_I2C1_Init+0xdc>)
 800083e:	4013      	ands	r3, r2
 8000840:	6023      	str	r3, [r4, #0]
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000842:	9509      	str	r5, [sp, #36]	@ 0x24
  I2C_InitStruct.Timing = 0x00503D58;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_I2C1_Init+0xe0>)
 8000846:	930a      	str	r3, [sp, #40]	@ 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000848:	950b      	str	r5, [sp, #44]	@ 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 800084a:	950c      	str	r5, [sp, #48]	@ 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 800084c:	950d      	str	r5, [sp, #52]	@ 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 800084e:	950e      	str	r5, [sp, #56]	@ 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000850:	950f      	str	r5, [sp, #60]	@ 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000852:	a909      	add	r1, sp, #36	@ 0x24
 8000854:	0020      	movs	r0, r4
 8000856:	f000 facf 	bl	8000df8 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800085a:	68e3      	ldr	r3, [r4, #12]
 800085c:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <MX_I2C1_Init+0xe4>)
 800085e:	4013      	ands	r3, r2
 8000860:	60e3      	str	r3, [r4, #12]
}
 8000862:	b010      	add	sp, #64	@ 0x40
 8000864:	bc80      	pop	{r7}
 8000866:	46b8      	mov	r8, r7
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	40021000 	.word	0x40021000
 8000870:	40005400 	.word	0x40005400
 8000874:	ffff7fff 	.word	0xffff7fff
 8000878:	fff7ffff 	.word	0xfff7ffff
 800087c:	fffdffff 	.word	0xfffdffff
 8000880:	00503d58 	.word	0x00503d58
 8000884:	fffff801 	.word	0xfffff801

08000888 <SystemClock_Config>:
{
 8000888:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800088a:	4a46      	ldr	r2, [pc, #280]	@ (80009a4 <SystemClock_Config+0x11c>)
 800088c:	6813      	ldr	r3, [r2, #0]
 800088e:	2101      	movs	r1, #1
 8000890:	438b      	bics	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000894:	4b43      	ldr	r3, [pc, #268]	@ (80009a4 <SystemClock_Config+0x11c>)
 8000896:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000898:	07db      	lsls	r3, r3, #31
 800089a:	d4fb      	bmi.n	8000894 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800089c:	4942      	ldr	r1, [pc, #264]	@ (80009a8 <SystemClock_Config+0x120>)
 800089e:	680a      	ldr	r2, [r1, #0]
 80008a0:	4b42      	ldr	r3, [pc, #264]	@ (80009ac <SystemClock_Config+0x124>)
 80008a2:	401a      	ands	r2, r3
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	4313      	orrs	r3, r2
 80008aa:	600b      	str	r3, [r1, #0]
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 80008ac:	4b3e      	ldr	r3, [pc, #248]	@ (80009a8 <SystemClock_Config+0x120>)
 80008ae:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 80008b0:	06db      	lsls	r3, r3, #27
 80008b2:	d4fb      	bmi.n	80008ac <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008b4:	4a3e      	ldr	r2, [pc, #248]	@ (80009b0 <SystemClock_Config+0x128>)
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6013      	str	r3, [r2, #0]
}
 80008be:	e001      	b.n	80008c4 <SystemClock_Config+0x3c>
  while(LL_RCC_HSI_IsReady() != 1)
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d008      	beq.n	80008d6 <SystemClock_Config+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80008c4:	4b3a      	ldr	r3, [pc, #232]	@ (80009b0 <SystemClock_Config+0x128>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2104      	movs	r1, #4
 80008ca:	000b      	movs	r3, r1
 80008cc:	4013      	ands	r3, r2
 80008ce:	4211      	tst	r1, r2
 80008d0:	d0f6      	beq.n	80008c0 <SystemClock_Config+0x38>
 80008d2:	2301      	movs	r3, #1
 80008d4:	e7f4      	b.n	80008c0 <SystemClock_Config+0x38>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80008d6:	4a36      	ldr	r2, [pc, #216]	@ (80009b0 <SystemClock_Config+0x128>)
 80008d8:	6850      	ldr	r0, [r2, #4]
 80008da:	4936      	ldr	r1, [pc, #216]	@ (80009b4 <SystemClock_Config+0x12c>)
 80008dc:	4008      	ands	r0, r1
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	0149      	lsls	r1, r1, #5
 80008e2:	4301      	orrs	r1, r0
 80008e4:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80008e6:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80008e8:	2001      	movs	r0, #1
 80008ea:	4301      	orrs	r1, r0
 80008ec:	6511      	str	r1, [r2, #80]	@ 0x50
}
 80008ee:	e001      	b.n	80008f4 <SystemClock_Config+0x6c>
  while(LL_RCC_LSI_IsReady() != 1)
 80008f0:	2801      	cmp	r0, #1
 80008f2:	d008      	beq.n	8000906 <SystemClock_Config+0x7e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80008f4:	4a2e      	ldr	r2, [pc, #184]	@ (80009b0 <SystemClock_Config+0x128>)
 80008f6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80008f8:	2102      	movs	r1, #2
 80008fa:	0008      	movs	r0, r1
 80008fc:	4010      	ands	r0, r2
 80008fe:	4211      	tst	r1, r2
 8000900:	d0f6      	beq.n	80008f0 <SystemClock_Config+0x68>
 8000902:	0018      	movs	r0, r3
 8000904:	e7f4      	b.n	80008f0 <SystemClock_Config+0x68>
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8000906:	4a28      	ldr	r2, [pc, #160]	@ (80009a8 <SystemClock_Config+0x120>)
 8000908:	6811      	ldr	r1, [r2, #0]
 800090a:	2380      	movs	r3, #128	@ 0x80
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	430b      	orrs	r3, r1
 8000910:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
 8000912:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <SystemClock_Config+0x128>)
 8000914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000916:	22c0      	movs	r2, #192	@ 0xc0
 8000918:	0292      	lsls	r2, r2, #10
 800091a:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0292      	lsls	r2, r2, #10
 8000920:	4293      	cmp	r3, r2
 8000922:	d010      	beq.n	8000946 <SystemClock_Config+0xbe>
  * @rmtoll CSR         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <SystemClock_Config+0x128>)
 8000926:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8000928:	2280      	movs	r2, #128	@ 0x80
 800092a:	0312      	lsls	r2, r2, #12
 800092c:	430a      	orrs	r2, r1
 800092e:	651a      	str	r2, [r3, #80]	@ 0x50
  * @rmtoll CSR         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8000930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000932:	4921      	ldr	r1, [pc, #132]	@ (80009b8 <SystemClock_Config+0x130>)
 8000934:	400a      	ands	r2, r1
 8000936:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 8000938:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800093a:	4a20      	ldr	r2, [pc, #128]	@ (80009bc <SystemClock_Config+0x134>)
 800093c:	4011      	ands	r1, r2
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	0292      	lsls	r2, r2, #10
 8000942:	430a      	orrs	r2, r1
 8000944:	651a      	str	r2, [r3, #80]	@ 0x50
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 8000946:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <SystemClock_Config+0x128>)
 8000948:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	02d2      	lsls	r2, r2, #11
 800094e:	430a      	orrs	r2, r1
 8000950:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000952:	68da      	ldr	r2, [r3, #12]
 8000954:	21f0      	movs	r1, #240	@ 0xf0
 8000956:	438a      	bics	r2, r1
 8000958:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800095a:	68da      	ldr	r2, [r3, #12]
 800095c:	4918      	ldr	r1, [pc, #96]	@ (80009c0 <SystemClock_Config+0x138>)
 800095e:	400a      	ands	r2, r1
 8000960:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	4917      	ldr	r1, [pc, #92]	@ (80009c4 <SystemClock_Config+0x13c>)
 8000966:	400a      	ands	r2, r1
 8000968:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	2103      	movs	r1, #3
 800096e:	438a      	bics	r2, r1
 8000970:	3902      	subs	r1, #2
 8000972:	430a      	orrs	r2, r1
 8000974:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <SystemClock_Config+0x128>)
 8000978:	68da      	ldr	r2, [r3, #12]
 800097a:	230c      	movs	r3, #12
 800097c:	4013      	ands	r3, r2
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800097e:	2b04      	cmp	r3, #4
 8000980:	d1f9      	bne.n	8000976 <SystemClock_Config+0xee>
  LL_Init1msTick(16000000);
 8000982:	4c11      	ldr	r4, [pc, #68]	@ (80009c8 <SystemClock_Config+0x140>)
 8000984:	0020      	movs	r0, r4
 8000986:	f000 fc1f 	bl	80011c8 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 800098a:	0020      	movs	r0, r4
 800098c:	f000 fc40 	bl	8001210 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000990:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <SystemClock_Config+0x128>)
 8000992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000994:	210c      	movs	r1, #12
 8000996:	438a      	bics	r2, r1
 8000998:	64da      	str	r2, [r3, #76]	@ 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 800099a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800099c:	490b      	ldr	r1, [pc, #44]	@ (80009cc <SystemClock_Config+0x144>)
 800099e:	400a      	ands	r2, r1
 80009a0:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80009a2:	bd10      	pop	{r4, pc}
 80009a4:	40022000 	.word	0x40022000
 80009a8:	40007000 	.word	0x40007000
 80009ac:	ffffe7ff 	.word	0xffffe7ff
 80009b0:	40021000 	.word	0x40021000
 80009b4:	ffffe0ff 	.word	0xffffe0ff
 80009b8:	fff7ffff 	.word	0xfff7ffff
 80009bc:	fffcffff 	.word	0xfffcffff
 80009c0:	fffff8ff 	.word	0xfffff8ff
 80009c4:	ffffc7ff 	.word	0xffffc7ff
 80009c8:	00f42400 	.word	0x00f42400
 80009cc:	ffffcfff 	.word	0xffffcfff

080009d0 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <Error_Handler+0x2>

080009d4 <inittestapplication>:
{
 80009d4:	b570      	push	{r4, r5, r6, lr}
   a = decamutexon();
 80009d6:	f000 fde1 	bl	800159c <decamutexon>
 80009da:	0005      	movs	r5, r0
   port_set_dw1000_slowrate();
 80009dc:	f000 fd98 	bl	8001510 <port_set_dw1000_slowrate>
   devID = dwt_readdevid();
 80009e0:	f001 fc7a 	bl	80022d8 <dwt_readdevid>
   if(DWT_DEVICE_ID != devID)
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <inittestapplication+0x78>)
 80009e6:	4298      	cmp	r0, r3
 80009e8:	d006      	beq.n	80009f8 <inittestapplication+0x24>
       port_wakeup_dw1000();
 80009ea:	f000 fdfd 	bl	80015e8 <port_wakeup_dw1000>
       devID = dwt_readdevid();
 80009ee:	f001 fc73 	bl	80022d8 <dwt_readdevid>
       if (DWT_DEVICE_ID != devID){
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <inittestapplication+0x78>)
 80009f4:	4298      	cmp	r0, r3
 80009f6:	d123      	bne.n	8000a40 <inittestapplication+0x6c>
   result = instance_init( 1 );
 80009f8:	2001      	movs	r0, #1
 80009fa:	f002 f983 	bl	8002d04 <instance_init>
 80009fe:	1e04      	subs	r4, r0, #0
   if (0 > result) {
 8000a00:	db20      	blt.n	8000a44 <inittestapplication+0x70>
   port_set_dw1000_fastrate();
 8000a02:	f000 fda9 	bl	8001558 <port_set_dw1000_fastrate>
   devID = dwt_readdevid();
 8000a06:	f001 fc67 	bl	80022d8 <dwt_readdevid>
   if (DWT_DEVICE_ID != devID)   // Means it is NOT MP device
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <inittestapplication+0x78>)
 8000a0c:	4298      	cmp	r0, r3
 8000a0e:	d11b      	bne.n	8000a48 <inittestapplication+0x74>
   instance_config(app.pConfig) ;  // Set operating channel etc
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <inittestapplication+0x7c>)
 8000a12:	6818      	ldr	r0, [r3, #0]
 8000a14:	f002 f9d4 	bl	8002dc0 <instance_config>
   dwt_write32bitreg(EXT_SYNC_ID, EC_CTRL_OSTSM);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2024      	movs	r0, #36	@ 0x24
 8000a1e:	f001 fc98 	bl	8002352 <dwt_write32bitoffsetreg>
   dwt_writetxdata(FRAME_LEN, tx_frame, 0);
 8000a22:	490c      	ldr	r1, [pc, #48]	@ (8000a54 <inittestapplication+0x80>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	200c      	movs	r0, #12
 8000a28:	f001 fc11 	bl	800224e <dwt_writetxdata>
   dwt_writetxfctrl(FRAME_LEN, 0, 1);  // ranging enabled=1
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	200c      	movs	r0, #12
 8000a32:	f001 fcad 	bl	8002390 <dwt_writetxfctrl>
   decamutexoff(a); //enable ScenSor (EXT_IRQ) before starting
 8000a36:	0028      	movs	r0, r5
 8000a38:	f000 fdb2 	bl	80015a0 <decamutexoff>
}
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
    	   Error_Handler();
 8000a40:	f7ff ffc6 	bl	80009d0 <Error_Handler>
	   Error_Handler();
 8000a44:	f7ff ffc4 	bl	80009d0 <Error_Handler>
	   Error_Handler();
 8000a48:	f7ff ffc2 	bl	80009d0 <Error_Handler>
 8000a4c:	deca0130 	.word	0xdeca0130
 8000a50:	2000011c 	.word	0x2000011c
 8000a54:	20000000 	.word	0x20000000

08000a58 <main>:
{
 8000a58:	b510      	push	{r4, lr}
 8000a5a:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a5c:	4c33      	ldr	r4, [pc, #204]	@ (8000b2c <main+0xd4>)
 8000a5e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000a60:	2301      	movs	r3, #1
 8000a62:	431a      	orrs	r2, r3
 8000a64:	6362      	str	r2, [r4, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a66:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000a68:	4013      	ands	r3, r2
 8000a6a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a6c:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a6e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000a70:	2280      	movs	r2, #128	@ 0x80
 8000a72:	0552      	lsls	r2, r2, #21
 8000a74:	4313      	orrs	r3, r2
 8000a76:	63a3      	str	r3, [r4, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000a7e:	9b00      	ldr	r3, [sp, #0]
  SystemClock_Config();
 8000a80:	f7ff ff02 	bl	8000888 <SystemClock_Config>
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a84:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <main+0xd8>)
 8000a86:	2207      	movs	r2, #7
 8000a88:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a8a:	68e2      	ldr	r2, [r4, #12]
 8000a8c:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <main+0xdc>)
 8000a8e:	401a      	ands	r2, r3
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	021b      	lsls	r3, r3, #8
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60e3      	str	r3, [r4, #12]
  MX_GPIO_Init();
 8000a98:	f7ff fc56 	bl	8000348 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a9c:	f7ff fc2e 	bl	80002fc <MX_CRC_Init>
  MX_RTC_Init();
 8000aa0:	f7ff fd60 	bl	8000564 <MX_RTC_Init>
  MX_SPI1_Init();
 8000aa4:	f7ff fd8e 	bl	80005c4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000aa8:	f7ff fdf6 	bl	8000698 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000aac:	f7ff fe78 	bl	80007a0 <MX_I2C1_Init>
  memset(&app,0,sizeof(app));
 8000ab0:	4821      	ldr	r0, [pc, #132]	@ (8000b38 <main+0xe0>)
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f003 f8af 	bl	8003c18 <memset>
    reset_DW1000();
 8000aba:	f000 fd73 	bl	80015a4 <reset_DW1000>
    load_bssConfig();                 /**< load the RAM Configuration parameters from NVM block */
 8000abe:	f001 fb73 	bl	80021a8 <load_bssConfig>
    int result = inittestapplication();
 8000ac2:	f7ff ff87 	bl	80009d4 <inittestapplication>
    if ( result < 0 ){
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	db20      	blt.n	8000b0c <main+0xb4>
    app.blinkenable = 1;
 8000aca:	4a1b      	ldr	r2, [pc, #108]	@ (8000b38 <main+0xe0>)
 8000acc:	2301      	movs	r3, #1
 8000ace:	6053      	str	r3, [r2, #4]
    app.pcurrent_blink_interval_ms = &(app.pConfig->blink.interval_in_ms);
 8000ad0:	6813      	ldr	r3, [r2, #0]
 8000ad2:	0019      	movs	r1, r3
 8000ad4:	310c      	adds	r1, #12
 8000ad6:	6091      	str	r1, [r2, #8]
    if ( app.pConfig->blink.interval_in_ms == app.pConfig->blink.interval_slow_in_ms ) {
 8000ad8:	7b19      	ldrb	r1, [r3, #12]
 8000ada:	7b5a      	ldrb	r2, [r3, #13]
 8000adc:	0212      	lsls	r2, r2, #8
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	7b99      	ldrb	r1, [r3, #14]
 8000ae2:	0409      	lsls	r1, r1, #16
 8000ae4:	4311      	orrs	r1, r2
 8000ae6:	7bda      	ldrb	r2, [r3, #15]
 8000ae8:	0612      	lsls	r2, r2, #24
 8000aea:	430a      	orrs	r2, r1
 8000aec:	7c19      	ldrb	r1, [r3, #16]
 8000aee:	7c58      	ldrb	r0, [r3, #17]
 8000af0:	0200      	lsls	r0, r0, #8
 8000af2:	4308      	orrs	r0, r1
 8000af4:	7c99      	ldrb	r1, [r3, #18]
 8000af6:	0409      	lsls	r1, r1, #16
 8000af8:	4301      	orrs	r1, r0
 8000afa:	7cdb      	ldrb	r3, [r3, #19]
 8000afc:	061b      	lsls	r3, r3, #24
 8000afe:	430b      	orrs	r3, r1
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d005      	beq.n	8000b10 <main+0xb8>
  	  lis3dh_configure_int();
 8000b04:	f000 fe0a 	bl	800171c <lis3dh_configure_int>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b08:	b662      	cpsie	i
}
 8000b0a:	e009      	b.n	8000b20 <main+0xc8>
  	  Error_Handler();   // Failed to intialze SPI.
 8000b0c:	f7ff ff60 	bl	80009d0 <Error_Handler>
  	  lis3dh_powerdown();
 8000b10:	f002 fe1c 	bl	800374c <lis3dh_powerdown>
 8000b14:	e7f8      	b.n	8000b08 <main+0xb0>
		  process_uartmsg();
 8000b16:	f001 fab1 	bl	800207c <process_uartmsg>
		  LEDS_OFF(LED_BLUE_MASK);
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f000 fd9e 	bl	800165c <LEDS_OFF>
	  if( deca_uart_rx_data_ready() )
 8000b20:	f000 fc5e 	bl	80013e0 <deca_uart_rx_data_ready>
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d0fb      	beq.n	8000b20 <main+0xc8>
 8000b28:	e7f5      	b.n	8000b16 <main+0xbe>
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	e000e010 	.word	0xe000e010
 8000b34:	ffff7fff 	.word	0xffff7fff
 8000b38:	2000011c 	.word	0x2000011c

08000b3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler>

08000b3e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler>

08000b40 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	IncSysTick();
 8000b46:	f000 fcd5 	bl	80014f4 <IncSysTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4a:	bd10      	pop	{r4, pc}

08000b4c <RTC_IRQHandler>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b4c:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <RTC_IRQHandler+0x28>)
 8000b4e:	68d8      	ldr	r0, [r3, #12]
 8000b50:	22ff      	movs	r2, #255	@ 0xff
 8000b52:	4010      	ands	r0, r2
 8000b54:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <RTC_IRQHandler+0x2c>)
 8000b56:	4301      	orrs	r1, r0
 8000b58:	60d9      	str	r1, [r3, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b5a:	68d9      	ldr	r1, [r3, #12]
 8000b5c:	400a      	ands	r2, r1
 8000b5e:	4907      	ldr	r1, [pc, #28]	@ (8000b7c <RTC_IRQHandler+0x30>)
 8000b60:	430a      	orrs	r2, r1
 8000b62:	60da      	str	r2, [r3, #12]
  /* USER CODE END RTC_IRQn 0 */
  /* USER CODE BEGIN RTC_IRQn 1 */
	LL_RTC_ClearFlag_WUT(RTC);
	LL_RTC_ClearFlag_ALRA(RTC);

    EXTI->PR = EXTI_IMR_IM17;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <RTC_IRQHandler+0x34>)
 8000b66:	2280      	movs	r2, #128	@ 0x80
 8000b68:	0292      	lsls	r2, r2, #10
 8000b6a:	615a      	str	r2, [r3, #20]
	EXTI->PR = EXTI_IMR_IM20;
 8000b6c:	2280      	movs	r2, #128	@ 0x80
 8000b6e:	0352      	lsls	r2, r2, #13
 8000b70:	615a      	str	r2, [r3, #20]
  /* USER CODE END RTC_IRQn 1 */
}
 8000b72:	4770      	bx	lr
 8000b74:	40002800 	.word	0x40002800
 8000b78:	fffffb7f 	.word	0xfffffb7f
 8000b7c:	fffffe7f 	.word	0xfffffe7f
 8000b80:	40010400 	.word	0x40010400

08000b84 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000b84:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000b86:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <EXTI0_1_IRQHandler+0x18>)
 8000b88:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000b8a:	07db      	lsls	r3, r3, #31
 8000b8c:	d400      	bmi.n	8000b90 <EXTI0_1_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b8e:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000b90:	4b02      	ldr	r3, [pc, #8]	@ (8000b9c <EXTI0_1_IRQHandler+0x18>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	615a      	str	r2, [r3, #20]
    GPIO_EXTI0_Callback();
 8000b96:	f000 fe07 	bl	80017a8 <GPIO_EXTI0_Callback>
}
 8000b9a:	e7f8      	b.n	8000b8e <EXTI0_1_IRQHandler+0xa>
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000ba0:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <EXTI2_3_IRQHandler+0x2c>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8000ba6:	075b      	lsls	r3, r3, #29
 8000ba8:	d404      	bmi.n	8000bb4 <EXTI2_3_IRQHandler+0x14>
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <EXTI2_3_IRQHandler+0x2c>)
 8000bac:	695b      	ldr	r3, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
    GPIO_EXTI3_Callback();
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8000bae:	071b      	lsls	r3, r3, #28
 8000bb0:	d406      	bmi.n	8000bc0 <EXTI2_3_IRQHandler+0x20>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000bb2:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <EXTI2_3_IRQHandler+0x2c>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	615a      	str	r2, [r3, #20]
    GPIO_EXTI3_Callback();
 8000bba:	f000 fdef 	bl	800179c <GPIO_EXTI3_Callback>
 8000bbe:	e7f4      	b.n	8000baa <EXTI2_3_IRQHandler+0xa>
 8000bc0:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <EXTI2_3_IRQHandler+0x2c>)
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	615a      	str	r2, [r3, #20]
    dwt_isr();
 8000bc6:	f001 fedd 	bl	8002984 <dwt_isr>
}
 8000bca:	e7f2      	b.n	8000bb2 <EXTI2_3_IRQHandler+0x12>
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART2_IRQHandler();
 8000bd2:	f000 fe1b 	bl	800180c <UART2_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bd10      	pop	{r4, pc}

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b510      	push	{r4, lr}
 8000bda:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c10 <_sbrk+0x38>)
 8000bde:	490d      	ldr	r1, [pc, #52]	@ (8000c14 <_sbrk+0x3c>)
 8000be0:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <_sbrk+0x40>)
 8000be4:	6809      	ldr	r1, [r1, #0]
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d007      	beq.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	490b      	ldr	r1, [pc, #44]	@ (8000c18 <_sbrk+0x40>)
 8000bec:	6808      	ldr	r0, [r1, #0]
 8000bee:	18c3      	adds	r3, r0, r3
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d806      	bhi.n	8000c02 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000bf4:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <_sbrk+0x40>)
 8000bf6:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000bf8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000bfa:	4907      	ldr	r1, [pc, #28]	@ (8000c18 <_sbrk+0x40>)
 8000bfc:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <_sbrk+0x44>)
 8000bfe:	6008      	str	r0, [r1, #0]
 8000c00:	e7f3      	b.n	8000bea <_sbrk+0x12>
    errno = ENOMEM;
 8000c02:	f003 f823 	bl	8003c4c <__errno>
 8000c06:	230c      	movs	r3, #12
 8000c08:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	4240      	negs	r0, r0
 8000c0e:	e7f3      	b.n	8000bf8 <_sbrk+0x20>
 8000c10:	20002000 	.word	0x20002000
 8000c14:	00000400 	.word	0x00000400
 8000c18:	2000012c 	.word	0x2000012c
 8000c1c:	200005e0 	.word	0x200005e0

08000c20 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	4770      	bx	lr
	...

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c28:	f7ff fffa 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopForever+0xe>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopForever+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f003 f801 	bl	8003c58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff feff 	bl	8000a58 <main>

08000c5a <LoopForever>:

LoopForever:
    b LoopForever
 8000c5a:	e7fe      	b.n	8000c5a <LoopForever>
   ldr   r0, =_estack
 8000c5c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c68:	080054dc 	.word	0x080054dc
  ldr r2, =_sbss
 8000c6c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000c70:	200005dc 	.word	0x200005dc

08000c74 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC1_COMP_IRQHandler>
	...

08000c78 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000c7c:	7900      	ldrb	r0, [r0, #4]
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	d04e      	beq.n	8000d20 <LL_EXTI_Init+0xa8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	d055      	beq.n	8000d34 <LL_EXTI_Init+0xbc>
    {
      switch (EXTI_InitStruct->Mode)
 8000c88:	7958      	ldrb	r0, [r3, #5]
 8000c8a:	2801      	cmp	r0, #1
 8000c8c:	d01e      	beq.n	8000ccc <LL_EXTI_Init+0x54>
 8000c8e:	2802      	cmp	r0, #2
 8000c90:	d026      	beq.n	8000ce0 <LL_EXTI_Init+0x68>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d12e      	bne.n	8000cf4 <LL_EXTI_Init+0x7c>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000c96:	4929      	ldr	r1, [pc, #164]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000c98:	684c      	ldr	r4, [r1, #4]
 8000c9a:	4394      	bics	r4, r2
 8000c9c:	604c      	str	r4, [r1, #4]
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c9e:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000ca0:	680c      	ldr	r4, [r1, #0]
 8000ca2:	4322      	orrs	r2, r4
 8000ca4:	600a      	str	r2, [r1, #0]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ca6:	799a      	ldrb	r2, [r3, #6]
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d042      	beq.n	8000d32 <LL_EXTI_Init+0xba>
      {
        switch (EXTI_InitStruct->Trigger)
 8000cac:	2a02      	cmp	r2, #2
 8000cae:	d023      	beq.n	8000cf8 <LL_EXTI_Init+0x80>
 8000cb0:	2a03      	cmp	r2, #3
 8000cb2:	d02b      	beq.n	8000d0c <LL_EXTI_Init+0x94>
 8000cb4:	2a01      	cmp	r2, #1
 8000cb6:	d13f      	bne.n	8000d38 <LL_EXTI_Init+0xc0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cb8:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000cba:	4a20      	ldr	r2, [pc, #128]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000cbc:	68d1      	ldr	r1, [r2, #12]
 8000cbe:	43a1      	bics	r1, r4
 8000cc0:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cc2:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000cc4:	6891      	ldr	r1, [r2, #8]
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	6093      	str	r3, [r2, #8]
}
 8000cca:	e032      	b.n	8000d32 <LL_EXTI_Init+0xba>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000ccc:	491b      	ldr	r1, [pc, #108]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000cce:	6808      	ldr	r0, [r1, #0]
 8000cd0:	4390      	bics	r0, r2
 8000cd2:	6008      	str	r0, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000cd4:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000cd6:	6848      	ldr	r0, [r1, #4]
 8000cd8:	4302      	orrs	r2, r0
 8000cda:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000cdc:	2000      	movs	r0, #0
}
 8000cde:	e7e2      	b.n	8000ca6 <LL_EXTI_Init+0x2e>
  SET_BIT(EXTI->IMR, ExtiLine);
 8000ce0:	4916      	ldr	r1, [pc, #88]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000ce2:	6808      	ldr	r0, [r1, #0]
 8000ce4:	4302      	orrs	r2, r0
 8000ce6:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000ce8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000cea:	6848      	ldr	r0, [r1, #4]
 8000cec:	4302      	orrs	r2, r0
 8000cee:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000cf0:	2000      	movs	r0, #0
}
 8000cf2:	e7d8      	b.n	8000ca6 <LL_EXTI_Init+0x2e>
      switch (EXTI_InitStruct->Mode)
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	e7d6      	b.n	8000ca6 <LL_EXTI_Init+0x2e>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cf8:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000cfa:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000cfc:	6891      	ldr	r1, [r2, #8]
 8000cfe:	43a1      	bics	r1, r4
 8000d00:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d02:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000d04:	68d1      	ldr	r1, [r2, #12]
 8000d06:	430b      	orrs	r3, r1
 8000d08:	60d3      	str	r3, [r2, #12]
}
 8000d0a:	e012      	b.n	8000d32 <LL_EXTI_Init+0xba>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d0c:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000d10:	6894      	ldr	r4, [r2, #8]
 8000d12:	4321      	orrs	r1, r4
 8000d14:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d16:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000d18:	68d1      	ldr	r1, [r2, #12]
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	60d3      	str	r3, [r2, #12]
}
 8000d1e:	e008      	b.n	8000d32 <LL_EXTI_Init+0xba>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d20:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000d22:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <LL_EXTI_Init+0xc4>)
 8000d24:	6811      	ldr	r1, [r2, #0]
 8000d26:	43a1      	bics	r1, r4
 8000d28:	6011      	str	r1, [r2, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d2a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d2c:	6853      	ldr	r3, [r2, #4]
 8000d2e:	438b      	bics	r3, r1
 8000d30:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8000d32:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8000d34:	2000      	movs	r0, #0
 8000d36:	e7fc      	b.n	8000d32 <LL_EXTI_Init+0xba>
        switch (EXTI_InitStruct->Trigger)
 8000d38:	2001      	movs	r0, #1
 8000d3a:	e7fa      	b.n	8000d32 <LL_EXTI_Init+0xba>
 8000d3c:	40010400 	.word	0x40010400

08000d40 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8000d42:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d44:	e016      	b.n	8000d74 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d46:	690b      	ldr	r3, [r1, #16]
 8000d48:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000d4a:	68c4      	ldr	r4, [r0, #12]
 8000d4c:	002b      	movs	r3, r5
 8000d4e:	436b      	muls	r3, r5
 8000d50:	005e      	lsls	r6, r3, #1
 8000d52:	18f6      	adds	r6, r6, r3
 8000d54:	43f7      	mvns	r7, r6
 8000d56:	43b4      	bics	r4, r6
 8000d58:	4666      	mov	r6, ip
 8000d5a:	435e      	muls	r6, r3
 8000d5c:	4334      	orrs	r4, r6
 8000d5e:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d60:	684c      	ldr	r4, [r1, #4]
 8000d62:	2c02      	cmp	r4, #2
 8000d64:	d026      	beq.n	8000db4 <LL_GPIO_Init+0x74>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d66:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000d68:	6804      	ldr	r4, [r0, #0]
 8000d6a:	403c      	ands	r4, r7
 8000d6c:	436b      	muls	r3, r5
 8000d6e:	4323      	orrs	r3, r4
 8000d70:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8000d72:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d74:	680c      	ldr	r4, [r1, #0]
 8000d76:	0023      	movs	r3, r4
 8000d78:	40d3      	lsrs	r3, r2
 8000d7a:	d03b      	beq.n	8000df4 <LL_GPIO_Init+0xb4>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	0025      	movs	r5, r4
 8000d82:	401d      	ands	r5, r3
    if (currentpin)
 8000d84:	421c      	tst	r4, r3
 8000d86:	d0f4      	beq.n	8000d72 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d88:	684b      	ldr	r3, [r1, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d8da      	bhi.n	8000d46 <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d90:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000d92:	6883      	ldr	r3, [r0, #8]
 8000d94:	002c      	movs	r4, r5
 8000d96:	436c      	muls	r4, r5
 8000d98:	0066      	lsls	r6, r4, #1
 8000d9a:	1936      	adds	r6, r6, r4
 8000d9c:	43b3      	bics	r3, r6
 8000d9e:	437c      	muls	r4, r7
 8000da0:	4323      	orrs	r3, r4
 8000da2:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000da4:	680e      	ldr	r6, [r1, #0]
 8000da6:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000da8:	6843      	ldr	r3, [r0, #4]
 8000daa:	43b3      	bics	r3, r6
 8000dac:	4374      	muls	r4, r6
 8000dae:	4323      	orrs	r3, r4
 8000db0:	6043      	str	r3, [r0, #4]
}
 8000db2:	e7c8      	b.n	8000d46 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8000db4:	2dff      	cmp	r5, #255	@ 0xff
 8000db6:	d80d      	bhi.n	8000dd4 <LL_GPIO_Init+0x94>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000db8:	694c      	ldr	r4, [r1, #20]
 8000dba:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000dbc:	6a06      	ldr	r6, [r0, #32]
 8000dbe:	001c      	movs	r4, r3
 8000dc0:	436c      	muls	r4, r5
 8000dc2:	436c      	muls	r4, r5
 8000dc4:	0125      	lsls	r5, r4, #4
 8000dc6:	1b2d      	subs	r5, r5, r4
 8000dc8:	43ae      	bics	r6, r5
 8000dca:	4665      	mov	r5, ip
 8000dcc:	436c      	muls	r4, r5
 8000dce:	4334      	orrs	r4, r6
 8000dd0:	6204      	str	r4, [r0, #32]
}
 8000dd2:	e7c8      	b.n	8000d66 <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dd4:	694c      	ldr	r4, [r1, #20]
 8000dd6:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000dd8:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8000dda:	0a2d      	lsrs	r5, r5, #8
 8000ddc:	002c      	movs	r4, r5
 8000dde:	436c      	muls	r4, r5
 8000de0:	436c      	muls	r4, r5
 8000de2:	436c      	muls	r4, r5
 8000de4:	0125      	lsls	r5, r4, #4
 8000de6:	1b2d      	subs	r5, r5, r4
 8000de8:	43ae      	bics	r6, r5
 8000dea:	4665      	mov	r5, ip
 8000dec:	436c      	muls	r4, r5
 8000dee:	4334      	orrs	r4, r6
 8000df0:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8000df2:	e7b8      	b.n	8000d66 <LL_GPIO_Init+0x26>
  }


  return (SUCCESS);
}
 8000df4:	2000      	movs	r0, #0
 8000df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000df8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000df8:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000dfa:	6803      	ldr	r3, [r0, #0]
 8000dfc:	2501      	movs	r5, #1
 8000dfe:	43ab      	bics	r3, r5
 8000e00:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000e02:	688a      	ldr	r2, [r1, #8]
 8000e04:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000e06:	6803      	ldr	r3, [r0, #0]
 8000e08:	4e16      	ldr	r6, [pc, #88]	@ (8000e64 <LL_I2C_Init+0x6c>)
 8000e0a:	4033      	ands	r3, r6
 8000e0c:	0224      	lsls	r4, r4, #8
 8000e0e:	4322      	orrs	r2, r4
 8000e10:	4313      	orrs	r3, r2
 8000e12:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000e14:	684b      	ldr	r3, [r1, #4]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000e16:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e18:	6803      	ldr	r3, [r0, #0]
 8000e1a:	432b      	orrs	r3, r5
 8000e1c:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e1e:	6883      	ldr	r3, [r0, #8]
 8000e20:	4a11      	ldr	r2, [pc, #68]	@ (8000e68 <LL_I2C_Init+0x70>)
 8000e22:	4013      	ands	r3, r2
 8000e24:	6083      	str	r3, [r0, #8]
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000e26:	690a      	ldr	r2, [r1, #16]
 8000e28:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000e2a:	6883      	ldr	r3, [r0, #8]
 8000e2c:	0adb      	lsrs	r3, r3, #11
 8000e2e:	02db      	lsls	r3, r3, #11
 8000e30:	4322      	orrs	r2, r4
 8000e32:	4313      	orrs	r3, r2
 8000e34:	6083      	str	r3, [r0, #8]

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000e36:	690b      	ldr	r3, [r1, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d004      	beq.n	8000e46 <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e3c:	6882      	ldr	r2, [r0, #8]
 8000e3e:	2380      	movs	r3, #128	@ 0x80
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	4313      	orrs	r3, r2
 8000e44:	6083      	str	r3, [r0, #8]

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000e46:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000e48:	6802      	ldr	r2, [r0, #0]
 8000e4a:	4c08      	ldr	r4, [pc, #32]	@ (8000e6c <LL_I2C_Init+0x74>)
 8000e4c:	4022      	ands	r2, r4
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000e52:	694b      	ldr	r3, [r1, #20]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000e54:	6842      	ldr	r2, [r0, #4]
 8000e56:	4904      	ldr	r1, [pc, #16]	@ (8000e68 <LL_I2C_Init+0x70>)
 8000e58:	400a      	ands	r2, r1
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8000e5e:	2000      	movs	r0, #0
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	ffffe0ff 	.word	0xffffe0ff
 8000e68:	ffff7fff 	.word	0xffff7fff
 8000e6c:	ffcfffff 	.word	0xffcfffff

08000e70 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <RCC_GetHCLKClockFreq+0x14>)
 8000e72:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000e74:	0912      	lsrs	r2, r2, #4
 8000e76:	230f      	movs	r3, #15
 8000e78:	4013      	ands	r3, r2
 8000e7a:	4a03      	ldr	r2, [pc, #12]	@ (8000e88 <RCC_GetHCLKClockFreq+0x18>)
 8000e7c:	5cd3      	ldrb	r3, [r2, r3]
 8000e7e:	40d8      	lsrs	r0, r3
}
 8000e80:	4770      	bx	lr
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08004d4c 	.word	0x08004d4c

08000e8c <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <RCC_GetPCLK1ClockFreq+0x14>)
 8000e8e:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000e90:	0a12      	lsrs	r2, r2, #8
 8000e92:	2307      	movs	r3, #7
 8000e94:	4013      	ands	r3, r2
 8000e96:	4a03      	ldr	r2, [pc, #12]	@ (8000ea4 <RCC_GetPCLK1ClockFreq+0x18>)
 8000e98:	5cd3      	ldrb	r3, [r2, r3]
 8000e9a:	40d8      	lsrs	r0, r3
}
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	08004d44 	.word	0x08004d44

08000ea8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000ea8:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000eac:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000eae:	03db      	lsls	r3, r3, #15
 8000eb0:	d405      	bmi.n	8000ebe <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	06db      	lsls	r3, r3, #27
 8000eb8:	d512      	bpl.n	8000ee0 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000eba:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000ebc:	e000      	b.n	8000ec0 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000ebe:	480b      	ldr	r0, [pc, #44]	@ (8000eec <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000ec0:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000ec2:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000ec4:	0c92      	lsrs	r2, r2, #18
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	4013      	ands	r3, r2
 8000eca:	4a09      	ldr	r2, [pc, #36]	@ (8000ef0 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8000ed0:	68cb      	ldr	r3, [r1, #12]
 8000ed2:	0d9b      	lsrs	r3, r3, #22
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	4019      	ands	r1, r3
 8000ed8:	3101      	adds	r1, #1
 8000eda:	f7ff f983 	bl	80001e4 <__udivsi3>
}
 8000ede:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8000ee2:	e7ed      	b.n	8000ec0 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	003d0900 	.word	0x003d0900
 8000eec:	007a1200 	.word	0x007a1200
 8000ef0:	08004d38 	.word	0x08004d38
 8000ef4:	00f42400 	.word	0x00f42400

08000ef8 <RCC_GetSystemClockFreq>:
{
 8000ef8:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <RCC_GetSystemClockFreq+0x60>)
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	230c      	movs	r3, #12
 8000f00:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d023      	beq.n	8000f4e <RCC_GetSystemClockFreq+0x56>
 8000f06:	d809      	bhi.n	8000f1c <RCC_GetSystemClockFreq+0x24>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00c      	beq.n	8000f26 <RCC_GetSystemClockFreq+0x2e>
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	d114      	bne.n	8000f3a <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <RCC_GetSystemClockFreq+0x60>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	06db      	lsls	r3, r3, #27
 8000f16:	d51c      	bpl.n	8000f52 <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8000f18:	4810      	ldr	r0, [pc, #64]	@ (8000f5c <RCC_GetSystemClockFreq+0x64>)
 8000f1a:	e00d      	b.n	8000f38 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8000f1c:	2b0c      	cmp	r3, #12
 8000f1e:	d10c      	bne.n	8000f3a <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000f20:	f7ff ffc2 	bl	8000ea8 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8000f24:	e008      	b.n	8000f38 <RCC_GetSystemClockFreq+0x40>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <RCC_GetSystemClockFreq+0x60>)
 8000f28:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000f2a:	0b52      	lsrs	r2, r2, #13
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	4013      	ands	r3, r2
 8000f30:	3301      	adds	r3, #1
 8000f32:	2080      	movs	r0, #128	@ 0x80
 8000f34:	0200      	lsls	r0, r0, #8
 8000f36:	4098      	lsls	r0, r3
}
 8000f38:	bd10      	pop	{r4, pc}
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <RCC_GetSystemClockFreq+0x60>)
 8000f3c:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000f3e:	0b52      	lsrs	r2, r2, #13
 8000f40:	2307      	movs	r3, #7
 8000f42:	4013      	ands	r3, r2
 8000f44:	3301      	adds	r3, #1
 8000f46:	2080      	movs	r0, #128	@ 0x80
 8000f48:	0200      	lsls	r0, r0, #8
 8000f4a:	4098      	lsls	r0, r3
      break;
 8000f4c:	e7f4      	b.n	8000f38 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8000f4e:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <RCC_GetSystemClockFreq+0x68>)
 8000f50:	e7f2      	b.n	8000f38 <RCC_GetSystemClockFreq+0x40>
        frequency = HSI_VALUE;
 8000f52:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 8000f54:	e7f0      	b.n	8000f38 <RCC_GetSystemClockFreq+0x40>
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	003d0900 	.word	0x003d0900
 8000f60:	007a1200 	.word	0x007a1200
 8000f64:	00f42400 	.word	0x00f42400

08000f68 <LL_RCC_GetUSARTClockFreq>:
{
 8000f68:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000f6a:	280c      	cmp	r0, #12
 8000f6c:	d001      	beq.n	8000f72 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000f6e:	2000      	movs	r0, #0
}
 8000f70:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000f72:	4b19      	ldr	r3, [pc, #100]	@ (8000fd8 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	4003      	ands	r3, r0
 8000f78:	0400      	lsls	r0, r0, #16
 8000f7a:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000f7c:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <LL_RCC_GetUSARTClockFreq+0x74>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d008      	beq.n	8000f94 <LL_RCC_GetUSARTClockFreq+0x2c>
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <LL_RCC_GetUSARTClockFreq+0x78>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d012      	beq.n	8000fae <LL_RCC_GetUSARTClockFreq+0x46>
 8000f88:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d11a      	bne.n	8000fc4 <LL_RCC_GetUSARTClockFreq+0x5c>
        usart_frequency = RCC_GetSystemClockFreq();
 8000f8e:	f7ff ffb3 	bl	8000ef8 <RCC_GetSystemClockFreq>
        break;
 8000f92:	e7ed      	b.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4018      	ands	r0, r3
 8000f9e:	421a      	tst	r2, r3
 8000fa0:	d0e6      	beq.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	06db      	lsls	r3, r3, #27
 8000fa8:	d413      	bmi.n	8000fd2 <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8000faa:	480f      	ldr	r0, [pc, #60]	@ (8000fe8 <LL_RCC_GetUSARTClockFreq+0x80>)
 8000fac:	e7e0      	b.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <LL_RCC_GetUSARTClockFreq+0x70>)
 8000fb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fb2:	2380      	movs	r3, #128	@ 0x80
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	4018      	ands	r0, r3
 8000fba:	421a      	tst	r2, r3
 8000fbc:	d0d8      	beq.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8000fbe:	2080      	movs	r0, #128	@ 0x80
 8000fc0:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8000fc2:	e7d5      	b.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000fc4:	f7ff ff98 	bl	8000ef8 <RCC_GetSystemClockFreq>
 8000fc8:	f7ff ff52 	bl	8000e70 <RCC_GetHCLKClockFreq>
 8000fcc:	f7ff ff5e 	bl	8000e8c <RCC_GetPCLK1ClockFreq>
        break;
 8000fd0:	e7ce      	b.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <LL_RCC_GetUSARTClockFreq+0x84>)
 8000fd4:	e7cc      	b.n	8000f70 <LL_RCC_GetUSARTClockFreq+0x8>
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	000c0008 	.word	0x000c0008
 8000fe0:	000c000c 	.word	0x000c000c
 8000fe4:	000c0004 	.word	0x000c0004
 8000fe8:	00f42400 	.word	0x00f42400
 8000fec:	003d0900 	.word	0x003d0900

08000ff0 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8000ff0:	b510      	push	{r4, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	0004      	movs	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8000ff6:	23fa      	movs	r3, #250	@ 0xfa
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8000ffc:	68c3      	ldr	r3, [r0, #12]
 8000ffe:	065b      	lsls	r3, r3, #25
 8001000:	d423      	bmi.n	800104a <LL_RTC_EnterInitMode+0x5a>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001002:	2301      	movs	r3, #1
 8001004:	425b      	negs	r3, r3
 8001006:	60c3      	str	r3, [r0, #12]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8001008:	68c3      	ldr	r3, [r0, #12]
 800100a:	2240      	movs	r2, #64	@ 0x40
 800100c:	0011      	movs	r1, r2
 800100e:	4019      	ands	r1, r3
 8001010:	421a      	tst	r2, r3
 8001012:	d118      	bne.n	8001046 <LL_RTC_EnterInitMode+0x56>
        timeout --;
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
      if (timeout == 0U)
      {
        status = ERROR;
 8001014:	2000      	movs	r0, #0
    while ((timeout != 0U) && (tmp != 1U))
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d017      	beq.n	800104c <LL_RTC_EnterInitMode+0x5c>
 800101c:	2901      	cmp	r1, #1
 800101e:	d015      	beq.n	800104c <LL_RTC_EnterInitMode+0x5c>
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <LL_RTC_EnterInitMode+0x60>)
 8001022:	681b      	ldr	r3, [r3, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001024:	03db      	lsls	r3, r3, #15
 8001026:	d502      	bpl.n	800102e <LL_RTC_EnterInitMode+0x3e>
        timeout --;
 8001028:	9b01      	ldr	r3, [sp, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	68e3      	ldr	r3, [r4, #12]
 8001030:	2240      	movs	r2, #64	@ 0x40
 8001032:	0011      	movs	r1, r2
 8001034:	4019      	ands	r1, r3
 8001036:	421a      	tst	r2, r3
 8001038:	d000      	beq.n	800103c <LL_RTC_EnterInitMode+0x4c>
 800103a:	2101      	movs	r1, #1
      if (timeout == 0U)
 800103c:	9b01      	ldr	r3, [sp, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1e9      	bne.n	8001016 <LL_RTC_EnterInitMode+0x26>
        status = ERROR;
 8001042:	2001      	movs	r0, #1
 8001044:	e7e7      	b.n	8001016 <LL_RTC_EnterInitMode+0x26>
 8001046:	2101      	movs	r1, #1
 8001048:	e7e4      	b.n	8001014 <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 800104a:	2000      	movs	r0, #0
      }
    }
  }
  return status;
}
 800104c:	b002      	add	sp, #8
 800104e:	bd10      	pop	{r4, pc}
 8001050:	e000e010 	.word	0xe000e010

08001054 <LL_RTC_Init>:
{
 8001054:	b570      	push	{r4, r5, r6, lr}
 8001056:	0004      	movs	r4, r0
 8001058:	000d      	movs	r5, r1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800105a:	23ca      	movs	r3, #202	@ 0xca
 800105c:	6243      	str	r3, [r0, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800105e:	3b77      	subs	r3, #119	@ 0x77
 8001060:	6243      	str	r3, [r0, #36]	@ 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001062:	f7ff ffc5 	bl	8000ff0 <LL_RTC_EnterInitMode>
 8001066:	2801      	cmp	r0, #1
 8001068:	d016      	beq.n	8001098 <LL_RTC_Init+0x44>
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 800106a:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800106c:	68a2      	ldr	r2, [r4, #8]
 800106e:	2140      	movs	r1, #64	@ 0x40
 8001070:	438a      	bics	r2, r1
 8001072:	4313      	orrs	r3, r2
 8001074:	60a3      	str	r3, [r4, #8]
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001076:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	0bdb      	lsrs	r3, r3, #15
 800107c:	03db      	lsls	r3, r3, #15
 800107e:	4313      	orrs	r3, r2
 8001080:	6123      	str	r3, [r4, #16]
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001082:	686a      	ldr	r2, [r5, #4]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001084:	6923      	ldr	r3, [r4, #16]
 8001086:	4906      	ldr	r1, [pc, #24]	@ (80010a0 <LL_RTC_Init+0x4c>)
 8001088:	400b      	ands	r3, r1
 800108a:	0412      	lsls	r2, r2, #16
 800108c:	4313      	orrs	r3, r2
 800108e:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001090:	2381      	movs	r3, #129	@ 0x81
 8001092:	425b      	negs	r3, r3
 8001094:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8001096:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001098:	23ff      	movs	r3, #255	@ 0xff
 800109a:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800109c:	bd70      	pop	{r4, r5, r6, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	ff80ffff 	.word	0xff80ffff

080010a4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80010a4:	b510      	push	{r4, lr}
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80010a6:	6803      	ldr	r3, [r0, #0]
 80010a8:	065b      	lsls	r3, r3, #25
 80010aa:	d428      	bmi.n	80010fe <LL_SPI_Init+0x5a>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	4a15      	ldr	r2, [pc, #84]	@ (8001104 <LL_SPI_Init+0x60>)
 80010b0:	401a      	ands	r2, r3
 80010b2:	680b      	ldr	r3, [r1, #0]
 80010b4:	684c      	ldr	r4, [r1, #4]
 80010b6:	4323      	orrs	r3, r4
 80010b8:	688c      	ldr	r4, [r1, #8]
 80010ba:	4323      	orrs	r3, r4
 80010bc:	68cc      	ldr	r4, [r1, #12]
 80010be:	4323      	orrs	r3, r4
 80010c0:	690c      	ldr	r4, [r1, #16]
 80010c2:	4323      	orrs	r3, r4
 80010c4:	694c      	ldr	r4, [r1, #20]
 80010c6:	4323      	orrs	r3, r4
 80010c8:	698c      	ldr	r4, [r1, #24]
 80010ca:	4323      	orrs	r3, r4
 80010cc:	69cc      	ldr	r4, [r1, #28]
 80010ce:	4323      	orrs	r3, r4
 80010d0:	6a0c      	ldr	r4, [r1, #32]
 80010d2:	4323      	orrs	r3, r4
 80010d4:	4313      	orrs	r3, r2
 80010d6:	6003      	str	r3, [r0, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80010d8:	6843      	ldr	r3, [r0, #4]
 80010da:	2204      	movs	r2, #4
 80010dc:	4393      	bics	r3, r2
 80010de:	8aca      	ldrh	r2, [r1, #22]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80010e4:	6a0a      	ldr	r2, [r1, #32]
 80010e6:	2380      	movs	r3, #128	@ 0x80
 80010e8:	019b      	lsls	r3, r3, #6
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d001      	beq.n	80010f2 <LL_SPI_Init+0x4e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80010ee:	2000      	movs	r0, #0
 80010f0:	e006      	b.n	8001100 <LL_SPI_Init+0x5c>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80010f2:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	0c1b      	lsrs	r3, r3, #16
 80010f8:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 80010fa:	2000      	movs	r0, #0
}
 80010fc:	e000      	b.n	8001100 <LL_SPI_Init+0x5c>
  ErrorStatus status = ERROR;
 80010fe:	2001      	movs	r0, #1
#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 8001100:	bd10      	pop	{r4, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	ffff0040 	.word	0xffff0040

08001108 <LL_USART_SetBaudRate>:
{
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	0005      	movs	r5, r0
 800110c:	000c      	movs	r4, r1
 800110e:	0019      	movs	r1, r3
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001110:	2380      	movs	r3, #128	@ 0x80
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	429a      	cmp	r2, r3
 8001116:	d007      	beq.n	8001128 <LL_USART_SetBaudRate+0x20>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001118:	0848      	lsrs	r0, r1, #1
 800111a:	1900      	adds	r0, r0, r4
 800111c:	f7ff f862 	bl	80001e4 <__udivsi3>
 8001120:	0400      	lsls	r0, r0, #16
 8001122:	0c00      	lsrs	r0, r0, #16
 8001124:	60e8      	str	r0, [r5, #12]
}
 8001126:	bd70      	pop	{r4, r5, r6, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001128:	0064      	lsls	r4, r4, #1
 800112a:	0848      	lsrs	r0, r1, #1
 800112c:	1820      	adds	r0, r4, r0
 800112e:	f7ff f859 	bl	80001e4 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8001132:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <LL_USART_SetBaudRate+0x3c>)
 8001134:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001136:	0400      	lsls	r0, r0, #16
 8001138:	0c40      	lsrs	r0, r0, #17
 800113a:	2307      	movs	r3, #7
 800113c:	4003      	ands	r3, r0
 800113e:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8001140:	60eb      	str	r3, [r5, #12]
 8001142:	e7f0      	b.n	8001126 <LL_USART_SetBaudRate+0x1e>
 8001144:	0000fff0 	.word	0x0000fff0

08001148 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001148:	b570      	push	{r4, r5, r6, lr}
 800114a:	0004      	movs	r4, r0
 800114c:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800114e:	6803      	ldr	r3, [r0, #0]
 8001150:	07db      	lsls	r3, r3, #31
 8001152:	d42d      	bmi.n	80011b0 <LL_USART_Init+0x68>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001154:	6803      	ldr	r3, [r0, #0]
 8001156:	4a18      	ldr	r2, [pc, #96]	@ (80011b8 <LL_USART_Init+0x70>)
 8001158:	401a      	ands	r2, r3
 800115a:	684b      	ldr	r3, [r1, #4]
 800115c:	68c9      	ldr	r1, [r1, #12]
 800115e:	430b      	orrs	r3, r1
 8001160:	6929      	ldr	r1, [r5, #16]
 8001162:	430b      	orrs	r3, r1
 8001164:	69a9      	ldr	r1, [r5, #24]
 8001166:	430b      	orrs	r3, r1
 8001168:	4313      	orrs	r3, r2
 800116a:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800116c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800116e:	6842      	ldr	r2, [r0, #4]
 8001170:	4912      	ldr	r1, [pc, #72]	@ (80011bc <LL_USART_Init+0x74>)
 8001172:	400a      	ands	r2, r1
 8001174:	4313      	orrs	r3, r2
 8001176:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001178:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800117a:	6882      	ldr	r2, [r0, #8]
 800117c:	4910      	ldr	r1, [pc, #64]	@ (80011c0 <LL_USART_Init+0x78>)
 800117e:	400a      	ands	r2, r1
 8001180:	4313      	orrs	r3, r2
 8001182:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <LL_USART_Init+0x7c>)
 8001186:	4298      	cmp	r0, r3
 8001188:	d001      	beq.n	800118e <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 800118a:	2001      	movs	r0, #1
 800118c:	e011      	b.n	80011b2 <LL_USART_Init+0x6a>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800118e:	200c      	movs	r0, #12
 8001190:	f7ff feea 	bl	8000f68 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001194:	2800      	cmp	r0, #0
 8001196:	d00d      	beq.n	80011b4 <LL_USART_Init+0x6c>
        && (USART_InitStruct->BaudRate != 0U))
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <LL_USART_Init+0x5a>
  ErrorStatus status = ERROR;
 800119e:	2001      	movs	r0, #1
 80011a0:	e007      	b.n	80011b2 <LL_USART_Init+0x6a>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80011a2:	69aa      	ldr	r2, [r5, #24]
      LL_USART_SetBaudRate(USARTx,
 80011a4:	0001      	movs	r1, r0
 80011a6:	0020      	movs	r0, r4
 80011a8:	f7ff ffae 	bl	8001108 <LL_USART_SetBaudRate>
      status = SUCCESS;
 80011ac:	2000      	movs	r0, #0
 80011ae:	e000      	b.n	80011b2 <LL_USART_Init+0x6a>
  ErrorStatus status = ERROR;
 80011b0:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80011b4:	2001      	movs	r0, #1
 80011b6:	e7fc      	b.n	80011b2 <LL_USART_Init+0x6a>
 80011b8:	efff69f3 	.word	0xefff69f3
 80011bc:	ffffcfff 	.word	0xffffcfff
 80011c0:	fffffcff 	.word	0xfffffcff
 80011c4:	40004400 	.word	0x40004400

080011c8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80011c8:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011ca:	21fa      	movs	r1, #250	@ 0xfa
 80011cc:	0089      	lsls	r1, r1, #2
 80011ce:	f7ff f809 	bl	80001e4 <__udivsi3>
 80011d2:	3801      	subs	r0, #1
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <LL_Init1msTick+0x1c>)
 80011d6:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011dc:	3205      	adds	r2, #5
 80011de:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80011e0:	bd10      	pop	{r4, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80011e8:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <LL_mDelay+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80011f0:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80011f2:	1c43      	adds	r3, r0, #1
 80011f4:	d000      	beq.n	80011f8 <LL_mDelay+0x10>
  {
    Delay++;
 80011f6:	3001      	adds	r0, #1
  }

  while (Delay)
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d005      	beq.n	8001208 <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <LL_mDelay+0x24>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	03db      	lsls	r3, r3, #15
 8001202:	d5f9      	bpl.n	80011f8 <LL_mDelay+0x10>
    {
      Delay--;
 8001204:	3801      	subs	r0, #1
 8001206:	e7f7      	b.n	80011f8 <LL_mDelay+0x10>
    }
  }
}
 8001208:	b002      	add	sp, #8
 800120a:	4770      	bx	lr
 800120c:	e000e010 	.word	0xe000e010

08001210 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001210:	4b01      	ldr	r3, [pc, #4]	@ (8001218 <LL_SetSystemCoreClock+0x8>)
 8001212:	6018      	str	r0, [r3, #0]
}
 8001214:	4770      	bx	lr
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	2000000c 	.word	0x2000000c

0800121c <deca_sleep>:

#include <deca_device_api.h>
#include "port_platform.h"

void deca_sleep(unsigned int time_ms)
{
 800121c:	b510      	push	{r4, lr}
 800121e:	0004      	movs	r4, r0
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = portGetTickCount() + time_ms;
 8001220:	f000 f970 	bl	8001504 <portGetTickCount>
 8001224:	1904      	adds	r4, r0, r4
    while ((signed long)(portGetTickCount() - end) <= 0)
 8001226:	f000 f96d 	bl	8001504 <portGetTickCount>
 800122a:	1b00      	subs	r0, r0, r4
 800122c:	2800      	cmp	r0, #0
 800122e:	ddfa      	ble.n	8001226 <deca_sleep+0xa>
        ;
}
 8001230:	bd10      	pop	{r4, pc}
	...

08001234 <writetospi>:
 */
int writetospi(uint16       headerLength,
               const uint8  *headerBuffer,
               uint32       bodyLength,
               const uint8  *bodyBuffer)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001236:	0007      	movs	r7, r0
 8001238:	000e      	movs	r6, r1
 800123a:	0015      	movs	r5, r2
 800123c:	001c      	movs	r4, r3

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800123e:	f000 f9ad 	bl	800159c <decamutexon>
 8001242:	4684      	mov	ip, r0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <writetospi+0x90>)
 8001246:	2201      	movs	r2, #1
 8001248:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800124a:	e00f      	b.n	800126c <writetospi+0x38>

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line low */

    while(headerLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 800124c:	2900      	cmp	r1, #0
 800124e:	d108      	bne.n	8001262 <writetospi+0x2e>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001250:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <writetospi+0x94>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2202      	movs	r2, #2
 8001256:	0011      	movs	r1, r2
 8001258:	4019      	ands	r1, r3
 800125a:	421a      	tst	r2, r3
 800125c:	d0f6      	beq.n	800124c <writetospi+0x18>
 800125e:	2101      	movs	r1, #1
 8001260:	e7f4      	b.n	800124c <writetospi+0x18>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 8001262:	7832      	ldrb	r2, [r6, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001264:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <writetospi+0x94>)
 8001266:	731a      	strb	r2, [r3, #12]
 8001268:	3601      	adds	r6, #1
    while(headerLength--){
 800126a:	0007      	movs	r7, r0
 800126c:	1e78      	subs	r0, r7, #1
 800126e:	b280      	uxth	r0, r0
 8001270:	2f00      	cmp	r7, #0
 8001272:	d1ed      	bne.n	8001250 <writetospi+0x1c>
 8001274:	e00f      	b.n	8001296 <writetospi+0x62>
    }

    while(bodyLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <writetospi+0x58>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800127a:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <writetospi+0x94>)
 800127c:	6892      	ldr	r2, [r2, #8]
 800127e:	2102      	movs	r1, #2
 8001280:	000b      	movs	r3, r1
 8001282:	4013      	ands	r3, r2
 8001284:	4211      	tst	r1, r2
 8001286:	d0f6      	beq.n	8001276 <writetospi+0x42>
 8001288:	2301      	movs	r3, #1
 800128a:	e7f4      	b.n	8001276 <writetospi+0x42>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *bodyBuffer++);
 800128c:	7822      	ldrb	r2, [r4, #0]
  *spidr = TxData;
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <writetospi+0x94>)
 8001290:	731a      	strb	r2, [r3, #12]
 8001292:	3401      	adds	r4, #1
    while(bodyLength--){
 8001294:	0035      	movs	r5, r6
 8001296:	1e6e      	subs	r6, r5, #1
 8001298:	2d00      	cmp	r5, #0
 800129a:	d1ee      	bne.n	800127a <writetospi+0x46>
 800129c:	e001      	b.n	80012a2 <writetospi+0x6e>
    }

    // wait last transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 800129e:	2900      	cmp	r1, #0
 80012a0:	d008      	beq.n	80012b4 <writetospi+0x80>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <writetospi+0x94>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2280      	movs	r2, #128	@ 0x80
 80012a8:	0011      	movs	r1, r2
 80012aa:	4019      	ands	r1, r3
 80012ac:	421a      	tst	r2, r3
 80012ae:	d0f6      	beq.n	800129e <writetospi+0x6a>
 80012b0:	2101      	movs	r1, #1
 80012b2:	e7f4      	b.n	800129e <writetospi+0x6a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <writetospi+0x90>)
 80012b6:	2201      	movs	r2, #1
 80012b8:	619a      	str	r2, [r3, #24]
	{
	}

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line high */

    decamutexoff(stat);
 80012ba:	4660      	mov	r0, ip
 80012bc:	f000 f970 	bl	80015a0 <decamutexoff>
    return 0;
} // end writetospi()
 80012c0:	2000      	movs	r0, #0
 80012c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012c4:	50000400 	.word	0x50000400
 80012c8:	40013000 	.word	0x40013000

080012cc <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16      headerLength,
                const uint8 *headerBuffer,
                uint32      readlength,
                uint8       *readBuffer)
{
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	0005      	movs	r5, r0
 80012d0:	000f      	movs	r7, r1
 80012d2:	0016      	movs	r6, r2
 80012d4:	001c      	movs	r4, r3
    /* Blocking: Check whether previous transfer has been finished */

	// wait last transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 80012d6:	e001      	b.n	80012dc <readfromspi+0x10>
 80012d8:	2900      	cmp	r1, #0
 80012da:	d008      	beq.n	80012ee <readfromspi+0x22>
 80012dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <readfromspi+0xc8>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	0011      	movs	r1, r2
 80012e4:	4019      	ands	r1, r3
 80012e6:	421a      	tst	r2, r3
 80012e8:	d0f6      	beq.n	80012d8 <readfromspi+0xc>
 80012ea:	2101      	movs	r1, #1
 80012ec:	e7f4      	b.n	80012d8 <readfromspi+0xc>
	{
	}

	/* Process Locked */
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80012ee:	f000 f955 	bl	800159c <decamutexon>
  WRITE_REG(GPIOx->BRR, PinMask);
 80012f2:	4b29      	ldr	r3, [pc, #164]	@ (8001398 <readfromspi+0xcc>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012f8:	e00f      	b.n	800131a <readfromspi+0x4e>

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line low */

    /* Send header */
    while(headerLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	d108      	bne.n	8001310 <readfromspi+0x44>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012fe:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <readfromspi+0xc8>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2202      	movs	r2, #2
 8001304:	0015      	movs	r5, r2
 8001306:	401d      	ands	r5, r3
 8001308:	421a      	tst	r2, r3
 800130a:	d0f6      	beq.n	80012fa <readfromspi+0x2e>
 800130c:	2501      	movs	r5, #1
 800130e:	e7f4      	b.n	80012fa <readfromspi+0x2e>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 8001310:	783a      	ldrb	r2, [r7, #0]
  *spidr = TxData;
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <readfromspi+0xc8>)
 8001314:	731a      	strb	r2, [r3, #12]
 8001316:	3701      	adds	r7, #1
    while(headerLength--){
 8001318:	000d      	movs	r5, r1
 800131a:	1e69      	subs	r1, r5, #1
 800131c:	b289      	uxth	r1, r1
 800131e:	2d00      	cmp	r5, #0
 8001320:	d1ed      	bne.n	80012fe <readfromspi+0x32>
 8001322:	e001      	b.n	8001328 <readfromspi+0x5c>
    }
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 8001324:	2900      	cmp	r1, #0
 8001326:	d008      	beq.n	800133a <readfromspi+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <readfromspi+0xc8>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	2280      	movs	r2, #128	@ 0x80
 800132e:	0011      	movs	r1, r2
 8001330:	4019      	ands	r1, r3
 8001332:	421a      	tst	r2, r3
 8001334:	d0f6      	beq.n	8001324 <readfromspi+0x58>
 8001336:	2101      	movs	r1, #1
 8001338:	e7f4      	b.n	8001324 <readfromspi+0x58>
  return (*((__IO uint8_t *)&SPIx->DR));
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <readfromspi+0xc8>)
 800133c:	7b1b      	ldrb	r3, [r3, #12]
 800133e:	e01e      	b.n	800137e <readfromspi+0xb2>
    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
    {
        /* Wait until TXE flag is set to send data */
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8001340:	2a00      	cmp	r2, #0
 8001342:	d108      	bne.n	8001356 <readfromspi+0x8a>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <readfromspi+0xc8>)
 8001346:	6899      	ldr	r1, [r3, #8]
 8001348:	2302      	movs	r3, #2
 800134a:	001a      	movs	r2, r3
 800134c:	400a      	ands	r2, r1
 800134e:	420b      	tst	r3, r1
 8001350:	d0f6      	beq.n	8001340 <readfromspi+0x74>
 8001352:	2201      	movs	r2, #1
 8001354:	e7f4      	b.n	8001340 <readfromspi+0x74>
  *spidr = TxData;
 8001356:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <readfromspi+0xc8>)
 8001358:	2100      	movs	r1, #0
 800135a:	7319      	strb	r1, [r3, #12]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800135c:	e001      	b.n	8001362 <readfromspi+0x96>
    	LL_SPI_TransmitData8(SPI1, 0);   /* set output to 0 (MOSI), this is necessary for
        									e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
    	 	 	 	 	 	 	 	 	 */

        /* Wait until RXNE flag is set to read data */
    	while ( LL_SPI_IsActiveFlag_RXNE(SPI1) == 0 )
 800135e:	2d00      	cmp	r5, #0
 8001360:	d108      	bne.n	8001374 <readfromspi+0xa8>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001362:	4b0c      	ldr	r3, [pc, #48]	@ (8001394 <readfromspi+0xc8>)
 8001364:	6899      	ldr	r1, [r3, #8]
 8001366:	2301      	movs	r3, #1
 8001368:	001d      	movs	r5, r3
 800136a:	400d      	ands	r5, r1
 800136c:	420b      	tst	r3, r1
 800136e:	d0f6      	beq.n	800135e <readfromspi+0x92>
 8001370:	0015      	movs	r5, r2
 8001372:	e7f4      	b.n	800135e <readfromspi+0x92>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001374:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <readfromspi+0xc8>)
 8001376:	7b1b      	ldrb	r3, [r3, #12]
    	{
    	}

    	(*readBuffer++) = LL_SPI_ReceiveData8(SPI1);
 8001378:	7023      	strb	r3, [r4, #0]
 800137a:	3401      	adds	r4, #1
    while(readlength-- > 0)
 800137c:	003e      	movs	r6, r7
 800137e:	1e77      	subs	r7, r6, #1
 8001380:	2e00      	cmp	r6, #0
 8001382:	d1df      	bne.n	8001344 <readfromspi+0x78>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <readfromspi+0xcc>)
 8001386:	2201      	movs	r2, #1
 8001388:	619a      	str	r2, [r3, #24]
    }

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line high */

    /* Process Unlocked */
    decamutexoff(stat);
 800138a:	f000 f909 	bl	80015a0 <decamutexoff>
    return 0;
} // end readfromspi()
 800138e:	2000      	movs	r0, #0
 8001390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	40013000 	.word	0x40013000
 8001398:	50000400 	.word	0x50000400

0800139c <__io_putchar>:
 *                              Uart Configuration
 *
 ******************************************************************************/

int __io_putchar (int ch)
{
 800139c:	e001      	b.n	80013a2 <__io_putchar+0x6>
	// TODO need to implement timeout
	// or may be not...
	while ( !LL_USART_IsActiveFlag_TXE( USART2 ) );
 800139e:	2900      	cmp	r1, #0
 80013a0:	d108      	bne.n	80013b4 <__io_putchar+0x18>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <__io_putchar+0x24>)
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2280      	movs	r2, #128	@ 0x80
 80013a8:	0011      	movs	r1, r2
 80013aa:	4019      	ands	r1, r3
 80013ac:	421a      	tst	r2, r3
 80013ae:	d0f6      	beq.n	800139e <__io_putchar+0x2>
 80013b0:	2101      	movs	r1, #1
 80013b2:	e7f4      	b.n	800139e <__io_putchar+0x2>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80013b4:	23ff      	movs	r3, #255	@ 0xff
 80013b6:	4003      	ands	r3, r0
 80013b8:	4a01      	ldr	r2, [pc, #4]	@ (80013c0 <__io_putchar+0x24>)
 80013ba:	6293      	str	r3, [r2, #40]	@ 0x28
	LL_USART_TransmitData8(USART2, (uint8_t)ch);
	return ch;
}
 80013bc:	4770      	bx	lr
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	40004400 	.word	0x40004400

080013c4 <_write>:

int _write(int file, char *ptr, int len)
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	0016      	movs	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	2400      	movs	r4, #0
 80013ca:	e005      	b.n	80013d8 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80013cc:	1c4d      	adds	r5, r1, #1
 80013ce:	7808      	ldrb	r0, [r1, #0]
 80013d0:	f7ff ffe4 	bl	800139c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80013d6:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	42b4      	cmp	r4, r6
 80013da:	dbf7      	blt.n	80013cc <_write+0x8>
	}
	return len;
}
 80013dc:	0030      	movs	r0, r6
 80013de:	bd70      	pop	{r4, r5, r6, pc}

080013e0 <deca_uart_rx_data_ready>:

bool deca_uart_rx_data_ready(void)
{
    return uart_rx_data_ready;
 80013e0:	4b01      	ldr	r3, [pc, #4]	@ (80013e8 <deca_uart_rx_data_ready+0x8>)
 80013e2:	7818      	ldrb	r0, [r3, #0]
}
 80013e4:	4770      	bx	lr
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	20000130 	.word	0x20000130

080013ec <UART_RxCpltCallback>:

extern bool SerialData;

void UART_RxCpltCallback( uint8_t data )
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	0005      	movs	r5, r0

    /* Local echo*/
	__io_putchar((int)data);
 80013f0:	f7ff ffd4 	bl	800139c <__io_putchar>
	// wait for transmission complete
	while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 80013f4:	e001      	b.n	80013fa <UART_RxCpltCallback+0xe>
 80013f6:	2c00      	cmp	r4, #0
 80013f8:	d108      	bne.n	800140c <UART_RxCpltCallback+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80013fa:	4b24      	ldr	r3, [pc, #144]	@ (800148c <UART_RxCpltCallback+0xa0>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	2240      	movs	r2, #64	@ 0x40
 8001400:	0014      	movs	r4, r2
 8001402:	401c      	ands	r4, r3
 8001404:	421a      	tst	r2, r3
 8001406:	d0f6      	beq.n	80013f6 <UART_RxCpltCallback+0xa>
 8001408:	2401      	movs	r4, #1
 800140a:	e7f4      	b.n	80013f6 <UART_RxCpltCallback+0xa>

	SerialData = true;
 800140c:	4b20      	ldr	r3, [pc, #128]	@ (8001490 <UART_RxCpltCallback+0xa4>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]

    if ( !uart_rx_data_ready  )
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <UART_RxCpltCallback+0xa8>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d113      	bne.n	8001442 <UART_RxCpltCallback+0x56>
    {
    	/* to allow backspace in shell - thanks Yves, very useful feature */
    	if( data == '\b')
 800141a:	2d08      	cmp	r5, #8
 800141c:	d00d      	beq.n	800143a <UART_RxCpltCallback+0x4e>
    			while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
    			rx_buf_index--;// = rx_buf_index - 1;
    			rx_buf[rx_buf_index] = 0;
    		}
    	}
    	else if ( data == '\r' )
 800141e:	2d0d      	cmp	r5, #13
 8001420:	d02a      	beq.n	8001478 <UART_RxCpltCallback+0x8c>
            uart_rx_data_ready = true;
            rx_buf[rx_buf_index] = 0;
        }
        else
        {
        	rx_buf[rx_buf_index++] = data;
 8001422:	491d      	ldr	r1, [pc, #116]	@ (8001498 <UART_RxCpltCallback+0xac>)
 8001424:	680a      	ldr	r2, [r1, #0]
 8001426:	1c53      	adds	r3, r2, #1
 8001428:	600b      	str	r3, [r1, #0]
 800142a:	491c      	ldr	r1, [pc, #112]	@ (800149c <UART_RxCpltCallback+0xb0>)
 800142c:	548d      	strb	r5, [r1, r2]
        	//rx_buf_index = rx_buf_index + 1;

            if ( rx_buf_index >= RX_BUF_SIZE )
 800142e:	2bff      	cmp	r3, #255	@ 0xff
 8001430:	d907      	bls.n	8001442 <UART_RxCpltCallback+0x56>
            {
                uart_rx_data_ready = true;	         // buffer is full, signal to proceed it
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <UART_RxCpltCallback+0xa8>)
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    //printf("Callback: data=%c (0x%02X), index=%lu, ready=%d\n", data, data, rx_buf_index, uart_rx_data_ready);

}
 8001438:	e003      	b.n	8001442 <UART_RxCpltCallback+0x56>
    		if(rx_buf_index !=0)
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <UART_RxCpltCallback+0xac>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d100      	bne.n	8001444 <UART_RxCpltCallback+0x58>
}
 8001442:	bd70      	pop	{r4, r5, r6, pc}
    			__io_putchar((int)' ');
 8001444:	2020      	movs	r0, #32
 8001446:	f7ff ffa9 	bl	800139c <__io_putchar>
    			__io_putchar((int)'\b');
 800144a:	2008      	movs	r0, #8
 800144c:	f7ff ffa6 	bl	800139c <__io_putchar>
    			while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 8001450:	e001      	b.n	8001456 <UART_RxCpltCallback+0x6a>
 8001452:	2900      	cmp	r1, #0
 8001454:	d108      	bne.n	8001468 <UART_RxCpltCallback+0x7c>
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <UART_RxCpltCallback+0xa0>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	2240      	movs	r2, #64	@ 0x40
 800145c:	0011      	movs	r1, r2
 800145e:	4019      	ands	r1, r3
 8001460:	421a      	tst	r2, r3
 8001462:	d0f6      	beq.n	8001452 <UART_RxCpltCallback+0x66>
 8001464:	0021      	movs	r1, r4
 8001466:	e7f4      	b.n	8001452 <UART_RxCpltCallback+0x66>
    			rx_buf_index--;// = rx_buf_index - 1;
 8001468:	4a0b      	ldr	r2, [pc, #44]	@ (8001498 <UART_RxCpltCallback+0xac>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	3b01      	subs	r3, #1
 800146e:	6013      	str	r3, [r2, #0]
    			rx_buf[rx_buf_index] = 0;
 8001470:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <UART_RxCpltCallback+0xb0>)
 8001472:	2100      	movs	r1, #0
 8001474:	54d1      	strb	r1, [r2, r3]
 8001476:	e7e4      	b.n	8001442 <UART_RxCpltCallback+0x56>
            uart_rx_data_ready = true;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <UART_RxCpltCallback+0xa8>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
            rx_buf[rx_buf_index] = 0;
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <UART_RxCpltCallback+0xac>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <UART_RxCpltCallback+0xb0>)
 8001484:	2100      	movs	r1, #0
 8001486:	5499      	strb	r1, [r3, r2]
 8001488:	e7db      	b.n	8001442 <UART_RxCpltCallback+0x56>
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	40004400 	.word	0x40004400
 8001490:	2000023c 	.word	0x2000023c
 8001494:	20000130 	.word	0x20000130
 8001498:	20000134 	.word	0x20000134
 800149c:	20000138 	.word	0x20000138

080014a0 <port_tx_msg>:

void port_tx_msg(char *ptr, int len)
{
 80014a0:	b510      	push	{r4, lr}
 80014a2:	000a      	movs	r2, r1
	_write(0, (char *)ptr,len);
 80014a4:	0001      	movs	r1, r0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff ff8c 	bl	80013c4 <_write>
}
 80014ac:	bd10      	pop	{r4, pc}
	...

080014b0 <deca_uart_receive>:
 *
 * @param[in] address to buffer, max buffer size
 * @param[out] actual number of bytes in buffer
 * */
uint32_t deca_uart_receive( uint8_t * buffer, size_t size)
{
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	0005      	movs	r5, r0
 80014b4:	000c      	movs	r4, r1
  __ASM volatile ("cpsid i" : : : "memory");
 80014b6:	b672      	cpsid	i
	//printf("deca_uart_receive: rx_buf_index=%lu\r\n", rx_buf_index);
	__disable_irq();

    uint32_t count = rx_buf_index;
 80014b8:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <deca_uart_receive+0x38>)
 80014ba:	681e      	ldr	r6, [r3, #0]
    memcpy(buffer, rx_buf, MIN(rx_buf_index, size));
 80014bc:	0032      	movs	r2, r6
 80014be:	428e      	cmp	r6, r1
 80014c0:	d900      	bls.n	80014c4 <deca_uart_receive+0x14>
 80014c2:	000a      	movs	r2, r1
 80014c4:	4909      	ldr	r1, [pc, #36]	@ (80014ec <deca_uart_receive+0x3c>)
 80014c6:	0028      	movs	r0, r5
 80014c8:	f002 fbf4 	bl	8003cb4 <memcpy>
    rx_buf_index = 0;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <deca_uart_receive+0x38>)
 80014ce:	2700      	movs	r7, #0
 80014d0:	601f      	str	r7, [r3, #0]
    buffer[size-1] = 0;
 80014d2:	3c01      	subs	r4, #1
 80014d4:	192d      	adds	r5, r5, r4
 80014d6:	702f      	strb	r7, [r5, #0]
    uint8_t data = '\n';

    __io_putchar(data);
 80014d8:	200a      	movs	r0, #10
 80014da:	f7ff ff5f 	bl	800139c <__io_putchar>
    uart_rx_data_ready = false;
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <deca_uart_receive+0x40>)
 80014e0:	701f      	strb	r7, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014e2:	b662      	cpsie	i

	__enable_irq();

    return count;
}
 80014e4:	0030      	movs	r0, r6
 80014e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014e8:	20000134 	.word	0x20000134
 80014ec:	20000138 	.word	0x20000138
 80014f0:	20000130 	.word	0x20000130

080014f4 <IncSysTick>:
 *
 ******************************************************************************/

void IncSysTick()
{
	SysTickCount++;
 80014f4:	4a02      	ldr	r2, [pc, #8]	@ (8001500 <IncSysTick+0xc>)
 80014f6:	6813      	ldr	r3, [r2, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	6013      	str	r3, [r2, #0]
}
 80014fc:	4770      	bx	lr
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	20000238 	.word	0x20000238

08001504 <portGetTickCount>:
 *        The resolution of time32_incr is usually 1/1000 sec.
 * */
__INLINE uint32_t
portGetTickCount(void)
{
	return SysTickCount;
 8001504:	4b01      	ldr	r3, [pc, #4]	@ (800150c <portGetTickCount+0x8>)
 8001506:	6818      	ldr	r0, [r3, #0]
}
 8001508:	4770      	bx	lr
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	20000238 	.word	0x20000238

08001510 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   Function is used for re-initialize the SPI freq as 2MHz which does
 *          init state check
 * */
void port_set_dw1000_slowrate(void)
{
 8001510:	e001      	b.n	8001516 <port_set_dw1000_slowrate+0x6>
	// wait for current transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 8001512:	2900      	cmp	r1, #0
 8001514:	d008      	beq.n	8001528 <port_set_dw1000_slowrate+0x18>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <port_set_dw1000_slowrate+0x44>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2280      	movs	r2, #128	@ 0x80
 800151c:	0011      	movs	r1, r2
 800151e:	4019      	ands	r1, r3
 8001520:	421a      	tst	r2, r3
 8001522:	d0f6      	beq.n	8001512 <port_set_dw1000_slowrate+0x2>
 8001524:	2101      	movs	r1, #1
 8001526:	e7f4      	b.n	8001512 <port_set_dw1000_slowrate+0x2>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001528:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <port_set_dw1000_slowrate+0x44>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	07db      	lsls	r3, r3, #31
 800152e:	d501      	bpl.n	8001534 <port_set_dw1000_slowrate+0x24>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <port_set_dw1000_slowrate+0x44>)
 8001532:	7b1b      	ldrb	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <port_set_dw1000_slowrate+0x44>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	438a      	bics	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2038      	movs	r0, #56	@ 0x38
 8001542:	4382      	bics	r2, r0
 8001544:	3820      	subs	r0, #32
 8001546:	4302      	orrs	r2, r0
 8001548:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
	}

	LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV16 );
	LL_SPI_Enable(SPI1);
}
 8001550:	4770      	bx	lr
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	40013000 	.word	0x40013000

08001558 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 16MHz
 *
 * */
void port_set_dw1000_fastrate(void)
{
 8001558:	e001      	b.n	800155e <port_set_dw1000_fastrate+0x6>
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 800155a:	2900      	cmp	r1, #0
 800155c:	d008      	beq.n	8001570 <port_set_dw1000_fastrate+0x18>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <port_set_dw1000_fastrate+0x40>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	0011      	movs	r1, r2
 8001566:	4019      	ands	r1, r3
 8001568:	421a      	tst	r2, r3
 800156a:	d0f6      	beq.n	800155a <port_set_dw1000_fastrate+0x2>
 800156c:	2101      	movs	r1, #1
 800156e:	e7f4      	b.n	800155a <port_set_dw1000_fastrate+0x2>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001570:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <port_set_dw1000_fastrate+0x40>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	07db      	lsls	r3, r3, #31
 8001576:	d501      	bpl.n	800157c <port_set_dw1000_fastrate+0x24>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <port_set_dw1000_fastrate+0x40>)
 800157a:	7b1b      	ldrb	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <port_set_dw1000_fastrate+0x40>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2140      	movs	r1, #64	@ 0x40
 8001582:	438a      	bics	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2038      	movs	r0, #56	@ 0x38
 800158a:	4382      	bics	r2, r0
 800158c:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
	}

	LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV2 );
	LL_SPI_Enable(SPI1);
}
 8001594:	4770      	bx	lr
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	40013000 	.word	0x40013000

0800159c <decamutexon>:

decaIrqStatus_t decamutexon(void)
{
	// not yet implemented
	return 0;
}
 800159c:	2000      	movs	r0, #0
 800159e:	4770      	bx	lr

080015a0 <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t j)
{
	// not yet implemented
}
 80015a0:	4770      	bx	lr
	...

080015a4 <reset_DW1000>:
 *             In general it is output, but it also can be used to reset the digital
 *             part of DW1000 by driving this pin low.
 *             Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80015a4:	b570      	push	{r4, r5, r6, lr}
 80015a6:	b086      	sub	sp, #24
	LL_GPIO_InitTypeDef     GPIO_InitStruct;

    GPIO_InitStruct.Pin = DW_RST_Pin;
 80015a8:	2502      	movs	r5, #2
 80015aa:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ac:	2301      	movs	r3, #1
 80015ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015b0:	2400      	movs	r4, #0
 80015b2:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015b4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015b6:	9504      	str	r5, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015b8:	4e0a      	ldr	r6, [pc, #40]	@ (80015e4 <reset_DW1000+0x40>)
 80015ba:	4669      	mov	r1, sp
 80015bc:	0030      	movs	r0, r6
 80015be:	f7ff fbbf 	bl	8000d40 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BRR, PinMask);
 80015c2:	62b5      	str	r5, [r6, #40]	@ 0x28

    LL_GPIO_ResetOutputPin( DW_RST_GPIO_Port, DW_RST_Pin );

    LL_mDelay(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fe0f 	bl	80011e8 <LL_mDelay>

    GPIO_InitStruct.Pin = DW_RST_Pin;
 80015ca:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80015cc:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ce:	9404      	str	r4, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015d0:	4669      	mov	r1, sp
 80015d2:	0030      	movs	r0, r6
 80015d4:	f7ff fbb4 	bl	8000d40 <LL_GPIO_Init>

    LL_mDelay(5);
 80015d8:	2005      	movs	r0, #5
 80015da:	f7ff fe05 	bl	80011e8 <LL_mDelay>
}
 80015de:	b006      	add	sp, #24
 80015e0:	bd70      	pop	{r4, r5, r6, pc}
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	50000400 	.word	0x50000400

080015e8 <port_wakeup_dw1000>:

/* @fn        port_wakeup_dw1000
 * @brief    "slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	4c05      	ldr	r4, [pc, #20]	@ (8001600 <port_wakeup_dw1000+0x18>)
 80015ec:	2501      	movs	r5, #1
 80015ee:	62a5      	str	r5, [r4, #40]	@ 0x28
    LL_GPIO_ResetOutputPin( DW_CS_GPIO_Port, DW_CS_Pin );
    LL_mDelay(1);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fdf9 	bl	80011e8 <LL_mDelay>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015f6:	61a5      	str	r5, [r4, #24]
    LL_GPIO_SetOutputPin( DW_CS_GPIO_Port, DW_CS_Pin );
    LL_mDelay(7);
 80015f8:	2007      	movs	r0, #7
 80015fa:	f7ff fdf5 	bl	80011e8 <LL_mDelay>
}
 80015fe:	bd70      	pop	{r4, r5, r6, pc}
 8001600:	50000400 	.word	0x50000400

08001604 <LEDS_INVERT>:
// DWB1001/4 board has LEDs connected to the ground
// for DWB1001/4 board comment the next line
#define DWM1001_DEV

void LEDS_INVERT(uint32_t LEDS_MASK)
{
 8001604:	b510      	push	{r4, lr}
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 8001606:	07c3      	lsls	r3, r0, #31
 8001608:	d509      	bpl.n	800161e <LEDS_INVERT+0x1a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 800160a:	4913      	ldr	r1, [pc, #76]	@ (8001658 <LEDS_INVERT+0x54>)
 800160c:	694c      	ldr	r4, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800160e:	0423      	lsls	r3, r4, #16
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	0312      	lsls	r2, r2, #12
 8001614:	4013      	ands	r3, r2
 8001616:	2208      	movs	r2, #8
 8001618:	43a2      	bics	r2, r4
 800161a:	4313      	orrs	r3, r2
 800161c:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 800161e:	0783      	lsls	r3, r0, #30
 8001620:	d50a      	bpl.n	8001638 <LEDS_INVERT+0x34>
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001622:	21a0      	movs	r1, #160	@ 0xa0
 8001624:	05c9      	lsls	r1, r1, #23
 8001626:	694c      	ldr	r4, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001628:	0423      	lsls	r3, r4, #16
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	0292      	lsls	r2, r2, #10
 800162e:	4013      	ands	r3, r2
 8001630:	2202      	movs	r2, #2
 8001632:	43a2      	bics	r2, r4
 8001634:	4313      	orrs	r3, r2
 8001636:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 8001638:	0740      	lsls	r0, r0, #29
 800163a:	d50b      	bpl.n	8001654 <LEDS_INVERT+0x50>
  uint32_t odr = READ_REG(GPIOx->ODR);
 800163c:	21a0      	movs	r1, #160	@ 0xa0
 800163e:	05c9      	lsls	r1, r1, #23
 8001640:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001642:	0403      	lsls	r3, r0, #16
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	0452      	lsls	r2, r2, #17
 8001648:	4013      	ands	r3, r2
 800164a:	2280      	movs	r2, #128	@ 0x80
 800164c:	0052      	lsls	r2, r2, #1
 800164e:	4382      	bics	r2, r0
 8001650:	4313      	orrs	r3, r2
 8001652:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 8001654:	bd10      	pop	{r4, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	50000400 	.word	0x50000400

0800165c <LEDS_OFF>:
void LEDS_OFF(uint32_t LEDS_MASK)
#else
void LEDS_ON(uint32_t LEDS_MASK)
#endif // DWM1001_DEV
{
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 800165c:	07c3      	lsls	r3, r0, #31
 800165e:	d502      	bpl.n	8001666 <LEDS_OFF+0xa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001660:	4b08      	ldr	r3, [pc, #32]	@ (8001684 <LEDS_OFF+0x28>)
 8001662:	2208      	movs	r2, #8
 8001664:	619a      	str	r2, [r3, #24]
	    LL_GPIO_SetOutputPin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 8001666:	0783      	lsls	r3, r0, #30
 8001668:	d503      	bpl.n	8001672 <LEDS_OFF+0x16>
 800166a:	23a0      	movs	r3, #160	@ 0xa0
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	2202      	movs	r2, #2
 8001670:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetOutputPin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 8001672:	0740      	lsls	r0, r0, #29
 8001674:	d504      	bpl.n	8001680 <LEDS_OFF+0x24>
 8001676:	23a0      	movs	r3, #160	@ 0xa0
 8001678:	05db      	lsls	r3, r3, #23
 800167a:	2280      	movs	r2, #128	@ 0x80
 800167c:	0052      	lsls	r2, r2, #1
 800167e:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetOutputPin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 8001680:	4770      	bx	lr
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	50000400 	.word	0x50000400

08001688 <spi_device_init>:
 *
 */
bool spi_device_init(uint8_t bus, uint8_t cs)
{
	return false;
}
 8001688:	2000      	movs	r0, #0
 800168a:	4770      	bx	lr

0800168c <spi_transfer_pf>:
 *
 */
bool spi_transfer_pf(uint8_t bus, uint8_t cs, uint8_t * mosi, uint8_t * miso, uint16_t len)
{
	return false;
}
 800168c:	2000      	movs	r0, #0
 800168e:	4770      	bx	lr

08001690 <i2c_slave_read>:
/* @brief I2C tranfer for LIS3DH
 *
 */
bool i2c_slave_read(uint8_t bus, uint8_t addr, uint8_t reg,  uint8_t *data, uint16_t len)
{	// bus is not used in I2C transfer
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001692:	a805      	add	r0, sp, #20
 8001694:	8805      	ldrh	r5, [r0, #0]
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001696:	481d      	ldr	r0, [pc, #116]	@ (800170c <i2c_slave_read+0x7c>)
 8001698:	4308      	orrs	r0, r1
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800169a:	4c1d      	ldr	r4, [pc, #116]	@ (8001710 <i2c_slave_read+0x80>)
 800169c:	6866      	ldr	r6, [r4, #4]
 800169e:	4f1d      	ldr	r7, [pc, #116]	@ (8001714 <i2c_slave_read+0x84>)
 80016a0:	403e      	ands	r6, r7
 80016a2:	4330      	orrs	r0, r6
 80016a4:	6060      	str	r0, [r4, #4]
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 80016a6:	62a2      	str	r2, [r4, #40]	@ 0x28
}
 80016a8:	e001      	b.n	80016ae <i2c_slave_read+0x1e>
	LL_I2C_HandleTransfer(I2C1, addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
	LL_I2C_TransmitData8(I2C1, reg);


	while( !LL_I2C_IsActiveFlag_STOP(I2C1))
 80016aa:	2c00      	cmp	r4, #0
 80016ac:	d108      	bne.n	80016c0 <i2c_slave_read+0x30>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016ae:	4a18      	ldr	r2, [pc, #96]	@ (8001710 <i2c_slave_read+0x80>)
 80016b0:	6992      	ldr	r2, [r2, #24]
 80016b2:	2020      	movs	r0, #32
 80016b4:	0004      	movs	r4, r0
 80016b6:	4014      	ands	r4, r2
 80016b8:	4210      	tst	r0, r2
 80016ba:	d0f6      	beq.n	80016aa <i2c_slave_read+0x1a>
 80016bc:	2401      	movs	r4, #1
 80016be:	e7f4      	b.n	80016aa <i2c_slave_read+0x1a>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016c0:	4813      	ldr	r0, [pc, #76]	@ (8001710 <i2c_slave_read+0x80>)
 80016c2:	69c2      	ldr	r2, [r0, #28]
 80016c4:	2420      	movs	r4, #32
 80016c6:	4322      	orrs	r2, r4
 80016c8:	61c2      	str	r2, [r0, #28]
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016ca:	042a      	lsls	r2, r5, #16
 80016cc:	24ff      	movs	r4, #255	@ 0xff
 80016ce:	0424      	lsls	r4, r4, #16
 80016d0:	4022      	ands	r2, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80016d2:	430a      	orrs	r2, r1
 80016d4:	4910      	ldr	r1, [pc, #64]	@ (8001718 <i2c_slave_read+0x88>)
 80016d6:	4311      	orrs	r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80016d8:	6842      	ldr	r2, [r0, #4]
 80016da:	4c0e      	ldr	r4, [pc, #56]	@ (8001714 <i2c_slave_read+0x84>)
 80016dc:	4022      	ands	r2, r4
 80016de:	4311      	orrs	r1, r2
 80016e0:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <i2c_slave_read+0x80>)
 80016e4:	6992      	ldr	r2, [r2, #24]
 80016e6:	0692      	lsls	r2, r2, #26
 80016e8:	d408      	bmi.n	80016fc <i2c_slave_read+0x6c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <i2c_slave_read+0x80>)
 80016ec:	6992      	ldr	r2, [r2, #24]
 80016ee:	0752      	lsls	r2, r2, #29
 80016f0:	d5f7      	bpl.n	80016e2 <i2c_slave_read+0x52>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80016f2:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <i2c_slave_read+0x80>)
 80016f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24

 	while( !LL_I2C_IsActiveFlag_STOP(I2C1))
 	{
		if ( LL_I2C_IsActiveFlag_RXNE(I2C1) )
		{
			*data++ = LL_I2C_ReceiveData8(I2C1);
 80016f6:	701a      	strb	r2, [r3, #0]
 80016f8:	3301      	adds	r3, #1
 80016fa:	e7f2      	b.n	80016e2 <i2c_slave_read+0x52>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <i2c_slave_read+0x80>)
 80016fe:	69d3      	ldr	r3, [r2, #28]
 8001700:	2120      	movs	r1, #32
 8001702:	430b      	orrs	r3, r1
 8001704:	61d3      	str	r3, [r2, #28]
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);

	return false;
}
 8001706:	2000      	movs	r0, #0
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	02012000 	.word	0x02012000
 8001710:	40005400 	.word	0x40005400
 8001714:	fc008000 	.word	0xfc008000
 8001718:	02002400 	.word	0x02002400

0800171c <lis3dh_configure_int>:

/* @brief Init and configure LIS3DH to wake up MCU on movement event
 *
 */
void lis3dh_configure_int()
{
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	b089      	sub	sp, #36	@ 0x24
	lis3dh_sensor_t* sensor = lis3dh_get_device();
 8001720:	f002 f830 	bl	8003784 <lis3dh_get_device>
 8001724:	1e04      	subs	r4, r0, #0
		  if (sensor == NULL ) {
 8001726:	d031      	beq.n	800178c <lis3dh_configure_int+0x70>
		  }

		  // enable data interrupts on INT1
		  lis3dh_int_event_config_t event_config;

		  event_config.mode = lis3dh_wake_up;
 8001728:	a905      	add	r1, sp, #20
 800172a:	2300      	movs	r3, #0
 800172c:	700b      	strb	r3, [r1, #0]
		  // event_config.mode = lis3dh_free_fall;
		  // event_config.mode = lis3dh_6d_movement;
		  // event_config.mode = lis3dh_6d_position;
		  // event_config.mode = lis3dh_4d_movement;
		  // event_config.mode = lis3dh_4d_position;
		  event_config.threshold = 10;
 800172e:	220a      	movs	r2, #10
 8001730:	704a      	strb	r2, [r1, #1]
		  event_config.x_low_enabled  = false;
 8001732:	708b      	strb	r3, [r1, #2]
		  event_config.x_high_enabled = true;
 8001734:	2501      	movs	r5, #1
 8001736:	70cd      	strb	r5, [r1, #3]
		  event_config.y_low_enabled  = false;
 8001738:	710b      	strb	r3, [r1, #4]
		  event_config.y_high_enabled = true;
 800173a:	714d      	strb	r5, [r1, #5]
		  event_config.z_low_enabled  = false;
 800173c:	718b      	strb	r3, [r1, #6]
		  event_config.z_high_enabled = true;
 800173e:	71cd      	strb	r5, [r1, #7]
		  event_config.duration = 0;
 8001740:	724b      	strb	r3, [r1, #9]
		  event_config.latch = false;
 8001742:	720b      	strb	r3, [r1, #8]

		  lis3dh_set_int_event_config (sensor, &event_config, lis3dh_int_event1_gen);
 8001744:	2200      	movs	r2, #0
 8001746:	0020      	movs	r0, r4
 8001748:	f001 fe82 	bl	8003450 <lis3dh_set_int_event_config>
		  lis3dh_enable_int (sensor, lis3dh_int_event1, lis3dh_int1_signal, true);
 800174c:	2301      	movs	r3, #1
 800174e:	2200      	movs	r2, #0
 8001750:	2103      	movs	r1, #3
 8001752:	0020      	movs	r0, r4
 8001754:	f001 fdce 	bl	80032f4 <lis3dh_enable_int>


		  // configure HPF and reset the reference by dummy read
		  lis3dh_config_hpf (sensor, lis3dh_hpf_normal, 0, true, true, true, true);
 8001758:	9502      	str	r5, [sp, #8]
 800175a:	9501      	str	r5, [sp, #4]
 800175c:	9500      	str	r5, [sp, #0]
 800175e:	2301      	movs	r3, #1
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	0020      	movs	r0, r4
 8001766:	f001 ff9b 	bl	80036a0 <lis3dh_config_hpf>
		  lis3dh_get_hpf_ref (sensor);
 800176a:	0020      	movs	r0, r4
 800176c:	f001 fc43 	bl	8002ff6 <lis3dh_get_hpf_ref>

		  // LAST STEP: Finally set scale and mode to start measurements
		  lis3dh_set_scale(sensor, lis3dh_scale_2_g);
 8001770:	2100      	movs	r1, #0
 8001772:	0020      	movs	r0, r4
 8001774:	f001 fd95 	bl	80032a2 <lis3dh_set_scale>
		  lis3dh_set_mode (sensor, lis3dh_odr_10, lis3dh_high_res, true, true, true);
 8001778:	9501      	str	r5, [sp, #4]
 800177a:	9500      	str	r5, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	2202      	movs	r2, #2
 8001780:	2102      	movs	r1, #2
 8001782:	0020      	movs	r0, r4
 8001784:	f001 fd18 	bl	80031b8 <lis3dh_set_mode>
}
 8001788:	b009      	add	sp, #36	@ 0x24
 800178a:	bd30      	pop	{r4, r5, pc}
			  sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2132      	movs	r1, #50	@ 0x32
 8001790:	2000      	movs	r0, #0
 8001792:	f001 fc9d 	bl	80030d0 <lis3dh_init_sensor>
 8001796:	0004      	movs	r4, r0
 8001798:	e7c6      	b.n	8001728 <lis3dh_configure_int+0xc>
	...

0800179c <GPIO_EXTI3_Callback>:
 *
 ******************************************************************************/

void GPIO_EXTI3_Callback()
{
	gMotionDetInt = true;
 800179c:	4b01      	ldr	r3, [pc, #4]	@ (80017a4 <GPIO_EXTI3_Callback+0x8>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
}
 80017a2:	4770      	bx	lr
 80017a4:	2000023d 	.word	0x2000023d

080017a8 <GPIO_EXTI0_Callback>:

// Button SW2 interrupt handler
void GPIO_EXTI0_Callback()
{
 80017a8:	b510      	push	{r4, lr}
	LEDS_INVERT(LED_RED_MASK);
 80017aa:	2004      	movs	r0, #4
 80017ac:	f7ff ff2a 	bl	8001604 <LEDS_INVERT>
}
 80017b0:	bd10      	pop	{r4, pc}
	...

080017b4 <i2c_slave_write>:
*                              Power management section
 *
 ******************************************************************************/

bool i2c_slave_write(uint8_t bus, uint8_t addr, uint8_t  reg,  uint8_t *data, uint16_t len)
{
 80017b4:	b530      	push	{r4, r5, lr}
 80017b6:	a803      	add	r0, sp, #12
 80017b8:	8800      	ldrh	r0, [r0, #0]
	// bus is not used in I2C transfer

	LL_I2C_HandleTransfer(I2C1, addr, LL_I2C_ADDRSLAVE_7BIT, len + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
 80017ba:	3001      	adds	r0, #1
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017bc:	0400      	lsls	r0, r0, #16
 80017be:	24ff      	movs	r4, #255	@ 0xff
 80017c0:	0424      	lsls	r4, r4, #16
 80017c2:	4020      	ands	r0, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017c4:	4308      	orrs	r0, r1
 80017c6:	490e      	ldr	r1, [pc, #56]	@ (8001800 <i2c_slave_write+0x4c>)
 80017c8:	4301      	orrs	r1, r0
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80017ca:	480e      	ldr	r0, [pc, #56]	@ (8001804 <i2c_slave_write+0x50>)
 80017cc:	6844      	ldr	r4, [r0, #4]
 80017ce:	4d0e      	ldr	r5, [pc, #56]	@ (8001808 <i2c_slave_write+0x54>)
 80017d0:	402c      	ands	r4, r5
 80017d2:	4321      	orrs	r1, r4
 80017d4:	6041      	str	r1, [r0, #4]
  WRITE_REG(I2Cx->TXDR, Data);
 80017d6:	6282      	str	r2, [r0, #40]	@ 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80017d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <i2c_slave_write+0x50>)
 80017da:	6992      	ldr	r2, [r2, #24]
 80017dc:	0692      	lsls	r2, r2, #26
 80017de:	d408      	bmi.n	80017f2 <i2c_slave_write+0x3e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <i2c_slave_write+0x50>)
 80017e2:	6992      	ldr	r2, [r2, #24]
 80017e4:	0792      	lsls	r2, r2, #30
 80017e6:	d5f7      	bpl.n	80017d8 <i2c_slave_write+0x24>

	LL_I2C_TransmitData8(I2C1, reg);

	while( !LL_I2C_IsActiveFlag_STOP(I2C1)) {
		if ( LL_I2C_IsActiveFlag_TXIS(I2C1) ) {
			LL_I2C_TransmitData8(I2C1, *data++);
 80017e8:	7819      	ldrb	r1, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80017ea:	4a06      	ldr	r2, [pc, #24]	@ (8001804 <i2c_slave_write+0x50>)
 80017ec:	6291      	str	r1, [r2, #40]	@ 0x28
 80017ee:	3301      	adds	r3, #1
}
 80017f0:	e7f2      	b.n	80017d8 <i2c_slave_write+0x24>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <i2c_slave_write+0x50>)
 80017f4:	69d3      	ldr	r3, [r2, #28]
 80017f6:	2120      	movs	r1, #32
 80017f8:	430b      	orrs	r3, r1
 80017fa:	61d3      	str	r3, [r2, #28]
	}

	LL_I2C_ClearFlag_STOP(I2C1);

	return false;
}
 80017fc:	2000      	movs	r0, #0
 80017fe:	bd30      	pop	{r4, r5, pc}
 8001800:	02002000 	.word	0x02002000
 8001804:	40005400 	.word	0x40005400
 8001808:	fc008000 	.word	0xfc008000

0800180c <UART2_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */

void UART2_IRQHandler()
{
 800180c:	b570      	push	{r4, r5, r6, lr}
	  uint32_t isrflags   = READ_REG(USART2->ISR);
 800180e:	4a3f      	ldr	r2, [pc, #252]	@ (800190c <UART2_IRQHandler+0x100>)
 8001810:	69d3      	ldr	r3, [r2, #28]
	  uint32_t cr1its     = READ_REG(USART2->CR1);
 8001812:	6811      	ldr	r1, [r2, #0]
	  uint32_t cr3its     = READ_REG(USART2->CR3);
 8001814:	6892      	ldr	r2, [r2, #8]
	  uint32_t errorflags;
	  uint32_t errorcode = HAL_UART_ERROR_NONE;

	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
	  if (errorflags == 0U)
 8001816:	0718      	lsls	r0, r3, #28
 8001818:	d109      	bne.n	800182e <UART2_IRQHandler+0x22>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	    if (((isrflags & USART_ISR_RXNE) != 0U)
 800181a:	0698      	lsls	r0, r3, #26
 800181c:	d510      	bpl.n	8001840 <UART2_IRQHandler+0x34>
	        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800181e:	0688      	lsls	r0, r1, #26
 8001820:	d50e      	bpl.n	8001840 <UART2_IRQHandler+0x34>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001822:	4b3a      	ldr	r3, [pc, #232]	@ (800190c <UART2_IRQHandler+0x100>)
 8001824:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001826:	b2c0      	uxtb	r0, r0
	    {
	    	UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 8001828:	f7ff fde0 	bl	80013ec <UART_RxCpltCallback>
	    	return;
 800182c:	e014      	b.n	8001858 <UART2_IRQHandler+0x4c>
	    }
	  }

	  /* If some errors occur */
	  if ((errorflags != 0U)
	      && (((cr3its & USART_CR3_EIE) != 0U)
 800182e:	2001      	movs	r0, #1
 8001830:	0005      	movs	r5, r0
 8001832:	4015      	ands	r5, r2
 8001834:	4210      	tst	r0, r2
 8001836:	d110      	bne.n	800185a <UART2_IRQHandler+0x4e>
	          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001838:	3020      	adds	r0, #32
 800183a:	30ff      	adds	r0, #255	@ 0xff
 800183c:	4201      	tst	r1, r0
 800183e:	d10c      	bne.n	800185a <UART2_IRQHandler+0x4e>
	    }
	    return;
	  } /* End if some error occurs */

	  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
	  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001840:	02d8      	lsls	r0, r3, #11
 8001842:	d501      	bpl.n	8001848 <UART2_IRQHandler+0x3c>
 8001844:	0252      	lsls	r2, r2, #9
 8001846:	d44f      	bmi.n	80018e8 <UART2_IRQHandler+0xdc>
		  LL_USART_ClearFlag_WKUP( USART2 );
  	      return;
	  }

	  /* UART in mode Transmitter ------------------------------------------------*/
	  if (((isrflags & USART_ISR_TXE) != 0U)
 8001848:	061a      	lsls	r2, r3, #24
 800184a:	d501      	bpl.n	8001850 <UART2_IRQHandler+0x44>
	      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800184c:	060a      	lsls	r2, r1, #24
 800184e:	d403      	bmi.n	8001858 <UART2_IRQHandler+0x4c>
	    // Transmit callback placeholder
	    return;
	  }

	  /* UART in mode Transmitter (transmission end) -----------------------------*/
	  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001850:	065b      	lsls	r3, r3, #25
 8001852:	d501      	bpl.n	8001858 <UART2_IRQHandler+0x4c>
 8001854:	0649      	lsls	r1, r1, #25
 8001856:	d44c      	bmi.n	80018f2 <UART2_IRQHandler+0xe6>
		  LL_USART_DisableIT_TC( USART2 );

	    return;
	  }

}
 8001858:	bd70      	pop	{r4, r5, r6, pc}
	    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800185a:	2201      	movs	r2, #1
 800185c:	0014      	movs	r4, r2
 800185e:	401c      	ands	r4, r3
 8001860:	421a      	tst	r2, r3
 8001862:	d008      	beq.n	8001876 <UART2_IRQHandler+0x6a>
 8001864:	32ff      	adds	r2, #255	@ 0xff
 8001866:	000c      	movs	r4, r1
 8001868:	4014      	ands	r4, r2
 800186a:	4211      	tst	r1, r2
 800186c:	d003      	beq.n	8001876 <UART2_IRQHandler+0x6a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 800186e:	4a27      	ldr	r2, [pc, #156]	@ (800190c <UART2_IRQHandler+0x100>)
 8001870:	2001      	movs	r0, #1
 8001872:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_PE;
 8001874:	2401      	movs	r4, #1
	    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001876:	079a      	lsls	r2, r3, #30
 8001878:	d506      	bpl.n	8001888 <UART2_IRQHandler+0x7c>
 800187a:	2d00      	cmp	r5, #0
 800187c:	d004      	beq.n	8001888 <UART2_IRQHandler+0x7c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 800187e:	4a23      	ldr	r2, [pc, #140]	@ (800190c <UART2_IRQHandler+0x100>)
 8001880:	2002      	movs	r0, #2
 8001882:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_FE;
 8001884:	2204      	movs	r2, #4
 8001886:	4314      	orrs	r4, r2
	    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001888:	075a      	lsls	r2, r3, #29
 800188a:	d506      	bpl.n	800189a <UART2_IRQHandler+0x8e>
 800188c:	2d00      	cmp	r5, #0
 800188e:	d004      	beq.n	800189a <UART2_IRQHandler+0x8e>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8001890:	4a1e      	ldr	r2, [pc, #120]	@ (800190c <UART2_IRQHandler+0x100>)
 8001892:	2004      	movs	r0, #4
 8001894:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_NE;
 8001896:	2202      	movs	r2, #2
 8001898:	4314      	orrs	r4, r2
	    if (((isrflags & USART_ISR_ORE) != 0U)
 800189a:	071a      	lsls	r2, r3, #28
 800189c:	d51b      	bpl.n	80018d6 <UART2_IRQHandler+0xca>
	        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800189e:	068a      	lsls	r2, r1, #26
 80018a0:	d401      	bmi.n	80018a6 <UART2_IRQHandler+0x9a>
 80018a2:	2d00      	cmp	r5, #0
 80018a4:	d017      	beq.n	80018d6 <UART2_IRQHandler+0xca>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80018a6:	2208      	movs	r2, #8
 80018a8:	4818      	ldr	r0, [pc, #96]	@ (800190c <UART2_IRQHandler+0x100>)
 80018aa:	6202      	str	r2, [r0, #32]
	    	errorcode |= HAL_UART_ERROR_ORE;
 80018ac:	4314      	orrs	r4, r2
	      if (((isrflags & USART_ISR_RXNE) != 0U)
 80018ae:	069b      	lsls	r3, r3, #26
 80018b0:	d501      	bpl.n	80018b6 <UART2_IRQHandler+0xaa>
	          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80018b2:	0689      	lsls	r1, r1, #26
 80018b4:	d412      	bmi.n	80018dc <UART2_IRQHandler+0xd0>
	      if ((READ_BIT(USART2->CR3, USART_CR3_DMAR)) ||
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <UART2_IRQHandler+0x100>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	065b      	lsls	r3, r3, #25
 80018bc:	d401      	bmi.n	80018c2 <UART2_IRQHandler+0xb6>
 80018be:	0724      	lsls	r4, r4, #28
 80018c0:	d5ca      	bpl.n	8001858 <UART2_IRQHandler+0x4c>
	        if (READ_BIT(USART2->CR3, USART_CR3_DMAR))
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <UART2_IRQHandler+0x100>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	065b      	lsls	r3, r3, #25
 80018c8:	d5c6      	bpl.n	8001858 <UART2_IRQHandler+0x4c>
	          CLEAR_BIT(USART2->CR3, USART_CR3_DMAR);
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <UART2_IRQHandler+0x100>)
 80018cc:	6893      	ldr	r3, [r2, #8]
 80018ce:	2140      	movs	r1, #64	@ 0x40
 80018d0:	438b      	bics	r3, r1
 80018d2:	6093      	str	r3, [r2, #8]
	    return;
 80018d4:	e7c0      	b.n	8001858 <UART2_IRQHandler+0x4c>
	    if ( errorcode != HAL_UART_ERROR_NONE)
 80018d6:	2c00      	cmp	r4, #0
 80018d8:	d0be      	beq.n	8001858 <UART2_IRQHandler+0x4c>
 80018da:	e7e8      	b.n	80018ae <UART2_IRQHandler+0xa2>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <UART2_IRQHandler+0x100>)
 80018de:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80018e0:	b2c0      	uxtb	r0, r0
		    	UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 80018e2:	f7ff fd83 	bl	80013ec <UART_RxCpltCallback>
 80018e6:	e7e6      	b.n	80018b6 <UART2_IRQHandler+0xaa>
  WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <UART2_IRQHandler+0x100>)
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	0352      	lsls	r2, r2, #13
 80018ee:	621a      	str	r2, [r3, #32]
  	      return;
 80018f0:	e7b2      	b.n	8001858 <UART2_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018f2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018f6:	2301      	movs	r3, #1
 80018f8:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80018fc:	4a03      	ldr	r2, [pc, #12]	@ (800190c <UART2_IRQHandler+0x100>)
 80018fe:	6813      	ldr	r3, [r2, #0]
 8001900:	2040      	movs	r0, #64	@ 0x40
 8001902:	4383      	bics	r3, r0
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	f381 8810 	msr	PRIMASK, r1
	    return;
 800190a:	e7a5      	b.n	8001858 <UART2_IRQHandler+0x4c>
 800190c:	40004400 	.word	0x40004400

08001910 <Restart>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_ENABLE);
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <Restart+0x28>)
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <Restart+0x2c>)
 8001914:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <Restart+0x30>)
 8001918:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 800191e:	320a      	adds	r2, #10
 8001920:	609a      	str	r2, [r3, #8]
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return (READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U);
 8001922:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <Restart+0x28>)
 8001924:	68db      	ldr	r3, [r3, #12]
{
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
  LL_IWDG_SetReloadCounter(IWDG, 10);
  while (LL_IWDG_IsReady(IWDG) != 1)
 8001926:	075b      	lsls	r3, r3, #29
 8001928:	d1fb      	bne.n	8001922 <Restart+0x12>
  WRITE_REG(IWDGx->WINR, IWDG_WINR_WIN & Window);
 800192a:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <Restart+0x28>)
 800192c:	220a      	movs	r2, #10
 800192e:	611a      	str	r2, [r3, #16]
  WRITE_REG(IWDG->KR, LL_IWDG_KEY_RELOAD);
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <Restart+0x34>)
 8001932:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i

  LL_IWDG_SetWindow(IWDG, 10);
  LL_IWDG_ReloadCounter(IWDG);

  __disable_irq();
  while (1)
 8001936:	e7fe      	b.n	8001936 <Restart+0x26>
 8001938:	40003000 	.word	0x40003000
 800193c:	0000cccc 	.word	0x0000cccc
 8001940:	00005555 	.word	0x00005555
 8001944:	0000aaaa 	.word	0x0000aaaa

08001948 <cmd_onERROR>:

/*
 * @brief "error" will be sent if error during parser or command execution returned error
 * */
static void cmd_onERROR(const char *err, control_t *pcmd)
{
 8001948:	b530      	push	{r4, r5, lr}
 800194a:	4c15      	ldr	r4, [pc, #84]	@ (80019a0 <cmd_onERROR+0x58>)
 800194c:	44a5      	add	sp, r4
 800194e:	0004      	movs	r4, r0
	char str[MAX_STR_SIZE];

    strcpy(str, "error \r\n");
 8001950:	466a      	mov	r2, sp
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <cmd_onERROR+0x5c>)
 8001954:	cb21      	ldmia	r3!, {r0, r5}
 8001956:	c221      	stmia	r2!, {r0, r5}
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	7013      	strb	r3, [r2, #0]
    if ( strlen(err)< (sizeof(str)-6-3-1)) {
 800195c:	0020      	movs	r0, r4
 800195e:	f7fe fc2f 	bl	80001c0 <strlen>
 8001962:	23fb      	movs	r3, #251	@ 0xfb
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4298      	cmp	r0, r3
 8001968:	d30a      	bcc.n	8001980 <cmd_onERROR+0x38>
        strcpy(&str[6], err);
        strcpy(&str[6 + strlen(err)], "\r\n");
    }
    port_tx_msg(str, strlen(str));
 800196a:	4668      	mov	r0, sp
 800196c:	f7fe fc28 	bl	80001c0 <strlen>
 8001970:	0001      	movs	r1, r0
 8001972:	4668      	mov	r0, sp
 8001974:	f7ff fd94 	bl	80014a0 <port_tx_msg>
}
 8001978:	2381      	movs	r3, #129	@ 0x81
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	449d      	add	sp, r3
 800197e:	bd30      	pop	{r4, r5, pc}
        strcpy(&str[6], err);
 8001980:	0021      	movs	r1, r4
 8001982:	466b      	mov	r3, sp
 8001984:	1d98      	adds	r0, r3, #6
 8001986:	f002 f98d 	bl	8003ca4 <strcpy>
        strcpy(&str[6 + strlen(err)], "\r\n");
 800198a:	0020      	movs	r0, r4
 800198c:	f7fe fc18 	bl	80001c0 <strlen>
 8001990:	3006      	adds	r0, #6
 8001992:	4468      	add	r0, sp
 8001994:	4904      	ldr	r1, [pc, #16]	@ (80019a8 <cmd_onERROR+0x60>)
 8001996:	2203      	movs	r2, #3
 8001998:	f002 f98c 	bl	8003cb4 <memcpy>
 800199c:	e7e5      	b.n	800196a <cmd_onERROR+0x22>
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	fffffdfc 	.word	0xfffffdfc
 80019a4:	08004d5c 	.word	0x08004d5c
 80019a8:	08004d68 	.word	0x08004d68

080019ac <command_parser>:
 * @brief    checks if input "text" string in known "COMMAND" or "PARAMETER VALUE" format,
 *             checks their execution permissions, a VALUE range if restrictions and
 *             executes COMMAND or sets the PARAMETER to the VALUE
 * */
void command_parser(char *text)
{
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	46c6      	mov	lr, r8
 80019b0:	b500      	push	{lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	0005      	movs	r5, r0
    control_t   mcmd_console;
    control_t   *pcmd = &mcmd_console;
    command_t   *pk = NULL;

    memset (&mcmd_console, 0 , sizeof(mcmd_console));
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	a801      	add	r0, sp, #4
 80019bc:	f002 f92c 	bl	8003c18 <memset>

    pcmd->equal = _NO_COMMAND;
    pcmd->indx = 0;
 80019c0:	e006      	b.n	80019d0 <command_parser+0x24>

    do{
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 80019c2:	700a      	strb	r2, [r1, #0]
    }while(text[ ++pcmd->indx ]);
 80019c4:	9b01      	ldr	r3, [sp, #4]
 80019c6:	3301      	adds	r3, #1
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	5ceb      	ldrb	r3, [r5, r3]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <command_parser+0x3a>
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 80019d0:	9b01      	ldr	r3, [sp, #4]
 80019d2:	18e9      	adds	r1, r5, r3
 80019d4:	5cea      	ldrb	r2, [r5, r3]
 80019d6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <command_parser+0xe0>)
 80019d8:	5c98      	ldrb	r0, [r3, r2]
 80019da:	2303      	movs	r3, #3
 80019dc:	4003      	ands	r3, r0
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d1ef      	bne.n	80019c2 <command_parser+0x16>
 80019e2:	3a20      	subs	r2, #32
 80019e4:	e7ed      	b.n	80019c2 <command_parser+0x16>

    sscanf(text, CMD_FORMAT(MAX_COMMAND_SIZE), pcmd->cmd, &pcmd->val );
 80019e6:	492a      	ldr	r1, [pc, #168]	@ (8001a90 <command_parser+0xe4>)
 80019e8:	ab08      	add	r3, sp, #32
 80019ea:	aa03      	add	r2, sp, #12
 80019ec:	0028      	movs	r0, r5
 80019ee:	f002 f8e7 	bl	8003bc0 <siscanf>

    pcmd->indx = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	9301      	str	r3, [sp, #4]
    command_t   *pk = NULL;
 80019f6:	2600      	movs	r6, #0
    while (known_commands[pcmd->indx].name != NULL)
 80019f8:	e001      	b.n	80019fe <command_parser+0x52>
                pcmd->equal = _COMMAND_ALLOWED;
                break;
            }
        }

        pcmd->indx++;
 80019fa:	3401      	adds	r4, #1
 80019fc:	9401      	str	r4, [sp, #4]
    while (known_commands[pcmd->indx].name != NULL)
 80019fe:	9c01      	ldr	r4, [sp, #4]
 8001a00:	4a24      	ldr	r2, [pc, #144]	@ (8001a94 <command_parser+0xe8>)
 8001a02:	0063      	lsls	r3, r4, #1
 8001a04:	191b      	adds	r3, r3, r4
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	589f      	ldr	r7, [r3, r2]
 8001a0a:	2f00      	cmp	r7, #0
 8001a0c:	d01a      	beq.n	8001a44 <command_parser+0x98>
        pk = (command_t *) &known_commands[pcmd->indx];
 8001a0e:	0063      	lsls	r3, r4, #1
 8001a10:	191b      	adds	r3, r3, r4
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4e1f      	ldr	r6, [pc, #124]	@ (8001a94 <command_parser+0xe8>)
 8001a16:	199e      	adds	r6, r3, r6
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8001a18:	0039      	movs	r1, r7
 8001a1a:	a803      	add	r0, sp, #12
 8001a1c:	f7fe fbc6 	bl	80001ac <strcmp>
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1ea      	bne.n	80019fa <command_parser+0x4e>
            ( strlen(pcmd->cmd) == strlen(pk->name)) )
 8001a24:	a803      	add	r0, sp, #12
 8001a26:	f7fe fbcb 	bl	80001c0 <strlen>
 8001a2a:	4680      	mov	r8, r0
 8001a2c:	0038      	movs	r0, r7
 8001a2e:	f7fe fbc7 	bl	80001c0 <strlen>
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8001a32:	4580      	cmp	r8, r0
 8001a34:	d1e1      	bne.n	80019fa <command_parser+0x4e>
            pcmd->equal = _COMMAND_FOUND;
 8001a36:	2301      	movs	r3, #1
 8001a38:	9302      	str	r3, [sp, #8]
            if ( pk->mode == mANY )
 8001a3a:	6873      	ldr	r3, [r6, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1dc      	bne.n	80019fa <command_parser+0x4e>
                pcmd->equal = _COMMAND_ALLOWED;
 8001a40:	3302      	adds	r3, #2
 8001a42:	9302      	str	r3, [sp, #8]
    }


    switch (pcmd->equal)
 8001a44:	9b02      	ldr	r3, [sp, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d005      	beq.n	8001a56 <command_parser+0xaa>
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d008      	beq.n	8001a60 <command_parser+0xb4>
            break;
        }
        default:
            break;
    }
}
 8001a4e:	b00a      	add	sp, #40	@ 0x28
 8001a50:	bc80      	pop	{r7}
 8001a52:	46b8      	mov	r8, r7
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cmd_onERROR(" incompatible mode", pcmd);
 8001a56:	4810      	ldr	r0, [pc, #64]	@ (8001a98 <command_parser+0xec>)
 8001a58:	a901      	add	r1, sp, #4
 8001a5a:	f7ff ff75 	bl	8001948 <cmd_onERROR>
            break;
 8001a5e:	e7f6      	b.n	8001a4e <command_parser+0xa2>
            param_block_t *pbss = get_pbssConfig();
 8001a60:	f000 fbc2 	bl	80021e8 <get_pbssConfig>
 8001a64:	0001      	movs	r1, r0
            pcmd->ret = pk->fn(text, pbss, pcmd->val);
 8001a66:	68b3      	ldr	r3, [r6, #8]
 8001a68:	9a08      	ldr	r2, [sp, #32]
 8001a6a:	0028      	movs	r0, r5
 8001a6c:	4798      	blx	r3
 8001a6e:	1e04      	subs	r4, r0, #0
 8001a70:	9009      	str	r0, [sp, #36]	@ 0x24
            if (pcmd->ret)
 8001a72:	d006      	beq.n	8001a82 <command_parser+0xd6>
                port_tx_msg((char *)pcmd->ret, strlen(pcmd->ret));
 8001a74:	f7fe fba4 	bl	80001c0 <strlen>
 8001a78:	0001      	movs	r1, r0
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f7ff fd10 	bl	80014a0 <port_tx_msg>
 8001a80:	e7e5      	b.n	8001a4e <command_parser+0xa2>
                cmd_onERROR(" function", pcmd);
 8001a82:	4806      	ldr	r0, [pc, #24]	@ (8001a9c <command_parser+0xf0>)
 8001a84:	a901      	add	r1, sp, #4
 8001a86:	f7ff ff5f 	bl	8001948 <cmd_onERROR>
}
 8001a8a:	e7e0      	b.n	8001a4e <command_parser+0xa2>
 8001a8c:	08005385 	.word	0x08005385
 8001a90:	08004d6c 	.word	0x08004d6c
 8001a94:	0800503c 	.word	0x0800503c
 8001a98:	08004d74 	.word	0x08004d74
 8001a9c:	08004d88 	.word	0x08004d88

08001aa0 <f_txCode>:
    }
    return (ret);
}
REG_FN(f_txCode)
{
    pbss->dwt_config.txCode = (uint8_t)(val);
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	710a      	strb	r2, [r1, #4]
    pbss->dwt_config.rxCode = (uint8_t)(val);
 8001aa4:	714a      	strb	r2, [r1, #5]
    return (CMD_FN_RET_OK);
 8001aa6:	4801      	ldr	r0, [pc, #4]	@ (8001aac <f_txCode+0xc>)
}
 8001aa8:	4770      	bx	lr
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	08005138 	.word	0x08005138

08001ab0 <f_nsSFD>:
REG_FN(f_nsSFD)
{
    pbss->dwt_config.nsSFD = (val == 0)?(0):(1);
 8001ab0:	1e53      	subs	r3, r2, #1
 8001ab2:	419a      	sbcs	r2, r3
 8001ab4:	718a      	strb	r2, [r1, #6]
    return (CMD_FN_RET_OK);
 8001ab6:	4801      	ldr	r0, [pc, #4]	@ (8001abc <f_nsSFD+0xc>)
}     
 8001ab8:	4770      	bx	lr
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	08005138 	.word	0x08005138

08001ac0 <f_phrMode>:
    }
    return (ret);
}     
REG_FN(f_phrMode)
{
    pbss->dwt_config.phrMode = (val == 0)?(0):(1);
 8001ac0:	1e53      	subs	r3, r2, #1
 8001ac2:	419a      	sbcs	r2, r3
 8001ac4:	720a      	strb	r2, [r1, #8]
    return (CMD_FN_RET_OK);
 8001ac6:	4801      	ldr	r0, [pc, #4]	@ (8001acc <f_phrMode+0xc>)
}     
 8001ac8:	4770      	bx	lr
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	08005138 	.word	0x08005138

08001ad0 <f_sfdTO>:
REG_FN(f_sfdTO)
{
    pbss->dwt_config.sfdTO = (uint16_t)(val);
 8001ad0:	b293      	uxth	r3, r2
 8001ad2:	20ff      	movs	r0, #255	@ 0xff
 8001ad4:	4002      	ands	r2, r0
 8001ad6:	728a      	strb	r2, [r1, #10]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	72cb      	strb	r3, [r1, #11]
    return (CMD_FN_RET_OK);
 8001adc:	4800      	ldr	r0, [pc, #0]	@ (8001ae0 <f_sfdTO+0x10>)
}     
 8001ade:	4770      	bx	lr
 8001ae0:	08005138 	.word	0x08005138

08001ae4 <f_smartPowerEn>:
REG_FN(f_smartPowerEn)
{
    pbss->smartPowerEn = (val == 0)?(0):(1);
 8001ae4:	1e53      	subs	r3, r2, #1
 8001ae6:	419a      	sbcs	r2, r3
 8001ae8:	760a      	strb	r2, [r1, #24]
 8001aea:	2300      	movs	r3, #0
 8001aec:	764b      	strb	r3, [r1, #25]
    return (CMD_FN_RET_OK);
 8001aee:	4801      	ldr	r0, [pc, #4]	@ (8001af4 <f_smartPowerEn+0x10>)
}     
 8001af0:	4770      	bx	lr
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	08005138 	.word	0x08005138

08001af8 <f_interval_in_ms>:
REG_FN(f_interval_in_ms)
{
    pbss->blink.interval_in_ms = (uint32_t)(val);
 8001af8:	730a      	strb	r2, [r1, #12]
 8001afa:	0a13      	lsrs	r3, r2, #8
 8001afc:	734b      	strb	r3, [r1, #13]
 8001afe:	0c13      	lsrs	r3, r2, #16
 8001b00:	738b      	strb	r3, [r1, #14]
 8001b02:	0e12      	lsrs	r2, r2, #24
 8001b04:	73ca      	strb	r2, [r1, #15]
    return (CMD_FN_RET_OK);
 8001b06:	4801      	ldr	r0, [pc, #4]	@ (8001b0c <f_interval_in_ms+0x14>)
}     
 8001b08:	4770      	bx	lr
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	08005138 	.word	0x08005138

08001b10 <f_interval_slow_in_ms>:
REG_FN(f_interval_slow_in_ms)
{
    pbss->blink.interval_slow_in_ms = (uint32_t)(val);
 8001b10:	740a      	strb	r2, [r1, #16]
 8001b12:	0a13      	lsrs	r3, r2, #8
 8001b14:	744b      	strb	r3, [r1, #17]
 8001b16:	0c13      	lsrs	r3, r2, #16
 8001b18:	748b      	strb	r3, [r1, #18]
 8001b1a:	0e12      	lsrs	r2, r2, #24
 8001b1c:	74ca      	strb	r2, [r1, #19]
    return (CMD_FN_RET_OK);
 8001b1e:	4801      	ldr	r0, [pc, #4]	@ (8001b24 <f_interval_slow_in_ms+0x14>)
}     
 8001b20:	4770      	bx	lr
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	08005138 	.word	0x08005138

08001b28 <f_randomness>:
REG_FN(f_randomness)
{
    pbss->blink.randomness = (uint8_t)(val);
 8001b28:	750a      	strb	r2, [r1, #20]
    return (CMD_FN_RET_OK);
 8001b2a:	4801      	ldr	r0, [pc, #4]	@ (8001b30 <f_randomness+0x8>)
}     
 8001b2c:	4770      	bx	lr
 8001b2e:	46c0      	nop			@ (mov r8, r8)
 8001b30:	08005138 	.word	0x08005138

08001b34 <f_tcwm>:
    return (ret);
}

REG_FN(f_tcwm)
{
    return (CMD_FN_RET_OK);
 8001b34:	4800      	ldr	r0, [pc, #0]	@ (8001b38 <f_tcwm+0x4>)
}
 8001b36:	4770      	bx	lr
 8001b38:	08005138 	.word	0x08005138

08001b3c <f_tcfm>:

REG_FN(f_tcfm)
{
    return (CMD_FN_RET_OK);
 8001b3c:	4800      	ldr	r0, [pc, #0]	@ (8001b40 <f_tcfm+0x4>)
}
 8001b3e:	4770      	bx	lr
 8001b40:	08005138 	.word	0x08005138

08001b44 <f_chan>:
{
 8001b44:	b510      	push	{r4, lr}
 8001b46:	000c      	movs	r4, r1
 8001b48:	0010      	movs	r0, r2
    int tmp = chan_to_deca(val);
 8001b4a:	f001 fe21 	bl	8003790 <chan_to_deca>
    if(tmp>=0)
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	db02      	blt.n	8001b58 <f_chan+0x14>
      pbss->dwt_config.chan = tmp;
 8001b52:	7020      	strb	r0, [r4, #0]
      ret = CMD_FN_RET_OK;
 8001b54:	4801      	ldr	r0, [pc, #4]	@ (8001b5c <f_chan+0x18>)
}
 8001b56:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001b58:	2000      	movs	r0, #0
    return (ret);
 8001b5a:	e7fc      	b.n	8001b56 <f_chan+0x12>
 8001b5c:	08005138 	.word	0x08005138

08001b60 <f_prf>:
{
 8001b60:	b510      	push	{r4, lr}
 8001b62:	000c      	movs	r4, r1
 8001b64:	0010      	movs	r0, r2
    int tmp = prf_to_deca(val);
 8001b66:	f001 fe49 	bl	80037fc <prf_to_deca>
    if(tmp>=0)
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	db02      	blt.n	8001b74 <f_prf+0x14>
      pbss->dwt_config.prf = (uint8_t)(tmp);
 8001b6e:	7060      	strb	r0, [r4, #1]
      ret = CMD_FN_RET_OK;
 8001b70:	4801      	ldr	r0, [pc, #4]	@ (8001b78 <f_prf+0x18>)
}
 8001b72:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001b74:	2000      	movs	r0, #0
    return (ret);
 8001b76:	e7fc      	b.n	8001b72 <f_prf+0x12>
 8001b78:	08005138 	.word	0x08005138

08001b7c <f_plen>:
{
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	000c      	movs	r4, r1
 8001b80:	0010      	movs	r0, r2
    int tmp = plen_to_deca(val);
 8001b82:	f001 fe7f 	bl	8003884 <plen_to_deca>
    if(tmp>=0)
 8001b86:	2800      	cmp	r0, #0
 8001b88:	db02      	blt.n	8001b90 <f_plen+0x14>
      pbss->dwt_config.txPreambLength = (uint16_t)(tmp);
 8001b8a:	70a0      	strb	r0, [r4, #2]
      ret = CMD_FN_RET_OK;
 8001b8c:	4801      	ldr	r0, [pc, #4]	@ (8001b94 <f_plen+0x18>)
}
 8001b8e:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001b90:	2000      	movs	r0, #0
    return (ret);
 8001b92:	e7fc      	b.n	8001b8e <f_plen+0x12>
 8001b94:	08005138 	.word	0x08005138

08001b98 <f_rxPAC>:
{
 8001b98:	b510      	push	{r4, lr}
 8001b9a:	000c      	movs	r4, r1
 8001b9c:	0010      	movs	r0, r2
    int tmp = pac_to_deca(val);
 8001b9e:	f001 fe43 	bl	8003828 <pac_to_deca>
    if(tmp>=0)
 8001ba2:	2800      	cmp	r0, #0
 8001ba4:	db02      	blt.n	8001bac <f_rxPAC+0x14>
      pbss->dwt_config.rxPAC = (uint8_t)(tmp);
 8001ba6:	70e0      	strb	r0, [r4, #3]
      ret = CMD_FN_RET_OK;
 8001ba8:	4801      	ldr	r0, [pc, #4]	@ (8001bb0 <f_rxPAC+0x18>)
}
 8001baa:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001bac:	2000      	movs	r0, #0
    return (ret);
 8001bae:	e7fc      	b.n	8001baa <f_rxPAC+0x12>
 8001bb0:	08005138 	.word	0x08005138

08001bb4 <f_dataRate>:
{
 8001bb4:	b510      	push	{r4, lr}
 8001bb6:	000c      	movs	r4, r1
 8001bb8:	0010      	movs	r0, r2
    int tmp = bitrate_to_deca(val);
 8001bba:	f001 fdf5 	bl	80037a8 <bitrate_to_deca>
    if(tmp>=0)
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	db02      	blt.n	8001bc8 <f_dataRate+0x14>
      pbss->dwt_config.dataRate = (uint8_t)(tmp);
 8001bc2:	71e0      	strb	r0, [r4, #7]
      ret = CMD_FN_RET_OK;
 8001bc4:	4801      	ldr	r0, [pc, #4]	@ (8001bcc <f_dataRate+0x18>)
}     
 8001bc6:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001bc8:	2000      	movs	r0, #0
    return (ret);
 8001bca:	e7fc      	b.n	8001bc6 <f_dataRate+0x12>
 8001bcc:	08005138 	.word	0x08005138

08001bd0 <f_help_app>:
{
 8001bd0:	b511      	push	{r0, r4, lr}
 8001bd2:	b0ff      	sub	sp, #508	@ 0x1fc
    int        indx = 0;
 8001bd4:	2400      	movs	r4, #0
    while (known_commands[indx].name != NULL)
 8001bd6:	e00b      	b.n	8001bf0 <f_help_app+0x20>
        sprintf(str,"%s \r\n", known_commands[indx].name);
 8001bd8:	490a      	ldr	r1, [pc, #40]	@ (8001c04 <f_help_app+0x34>)
 8001bda:	4668      	mov	r0, sp
 8001bdc:	f001 ffce 	bl	8003b7c <siprintf>
        port_tx_msg((char*)str, strlen(str));
 8001be0:	4668      	mov	r0, sp
 8001be2:	f7fe faed 	bl	80001c0 <strlen>
 8001be6:	0001      	movs	r1, r0
 8001be8:	4668      	mov	r0, sp
 8001bea:	f7ff fc59 	bl	80014a0 <port_tx_msg>
        indx++;
 8001bee:	3401      	adds	r4, #1
    while (known_commands[indx].name != NULL)
 8001bf0:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <f_help_app+0x38>)
 8001bf2:	0063      	lsls	r3, r4, #1
 8001bf4:	191b      	adds	r3, r3, r4
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	589a      	ldr	r2, [r3, r2]
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d1ec      	bne.n	8001bd8 <f_help_app+0x8>
    return (ret);
 8001bfe:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <f_help_app+0x3c>)
}
 8001c00:	b07f      	add	sp, #508	@ 0x1fc
 8001c02:	bd12      	pop	{r1, r4, pc}
 8001c04:	08004d94 	.word	0x08004d94
 8001c08:	0800503c 	.word	0x0800503c
 8001c0c:	08005138 	.word	0x08005138

08001c10 <f_restore>:
/*
 * @brief restore NV configuration from defaults
 *
 * */
REG_FN(f_restore)
{
 8001c10:	b510      	push	{r4, lr}
	restore_nvm_fconfig();
 8001c12:	f000 faef 	bl	80021f4 <restore_nvm_fconfig>

	return (CMD_FN_RET_OK);
 8001c16:	4801      	ldr	r0, [pc, #4]	@ (8001c1c <f_restore+0xc>)
}
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	08005138 	.word	0x08005138

08001c20 <f_restart>:
/*
 * @brief restart the FW
 *
 * */
REG_FN(f_restart)
{
 8001c20:	b510      	push	{r4, lr}
	Restart();
 8001c22:	f7ff fe75 	bl	8001910 <Restart>
	return (CMD_FN_RET_OK);
 8001c26:	4801      	ldr	r0, [pc, #4]	@ (8001c2c <f_restart+0xc>)
}
 8001c28:	bd10      	pop	{r4, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	08005138 	.word	0x08005138

08001c30 <f_save>:
/*
 * @brief save configuration
 *
 * */
REG_FN(f_save)
{
 8001c30:	b510      	push	{r4, lr}
 8001c32:	0008      	movs	r0, r1
    save_bssConfig(pbss);
 8001c34:	f000 fa8e 	bl	8002154 <save_bssConfig>

    return (CMD_FN_RET_OK);
 8001c38:	4800      	ldr	r0, [pc, #0]	@ (8001c3c <f_save+0xc>)
}
 8001c3a:	bd10      	pop	{r4, pc}
 8001c3c:	08005138 	.word	0x08005138

08001c40 <f_decaTDoATag>:
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4c29      	ldr	r4, [pc, #164]	@ (8001ce8 <f_decaTDoATag+0xa8>)
 8001c44:	44a5      	add	sp, r4
    const char ver[] = FULL_VERSION;
 8001c46:	ac80      	add	r4, sp, #512	@ 0x200
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <f_decaTDoATag+0xac>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	9280      	str	r2, [sp, #512]	@ 0x200
 8001c4e:	889b      	ldrh	r3, [r3, #4]
 8001c50:	80a3      	strh	r3, [r4, #4]
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 8001c52:	4927      	ldr	r1, [pc, #156]	@ (8001cf0 <f_decaTDoATag+0xb0>)
 8001c54:	4a27      	ldr	r2, [pc, #156]	@ (8001cf4 <f_decaTDoATag+0xb4>)
 8001c56:	4668      	mov	r0, sp
 8001c58:	f001 ff90 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"{\"Info\":{\r\n");
 8001c5c:	4668      	mov	r0, sp
 8001c5e:	f7fe faaf 	bl	80001c0 <strlen>
 8001c62:	4468      	add	r0, sp
 8001c64:	4924      	ldr	r1, [pc, #144]	@ (8001cf8 <f_decaTDoATag+0xb8>)
 8001c66:	220c      	movs	r2, #12
 8001c68:	f002 f824 	bl	8003cb4 <memcpy>
    sprintf(&str[strlen(str)],"\"Device\":\"DWM1004C TDoA Tag\",\r\n");
 8001c6c:	4668      	mov	r0, sp
 8001c6e:	f7fe faa7 	bl	80001c0 <strlen>
 8001c72:	4468      	add	r0, sp
 8001c74:	4921      	ldr	r1, [pc, #132]	@ (8001cfc <f_decaTDoATag+0xbc>)
 8001c76:	2220      	movs	r2, #32
 8001c78:	f002 f81c 	bl	8003cb4 <memcpy>
    sprintf(&str[strlen(str)],"\"Version\":\"%s\",\r\n", ver);
 8001c7c:	4668      	mov	r0, sp
 8001c7e:	f7fe fa9f 	bl	80001c0 <strlen>
 8001c82:	491f      	ldr	r1, [pc, #124]	@ (8001d00 <f_decaTDoATag+0xc0>)
 8001c84:	4468      	add	r0, sp
 8001c86:	0022      	movs	r2, r4
 8001c88:	f001 ff78 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"Build\":\"%s %s\",\r\n", __DATE__, __TIME__ );
 8001c8c:	4668      	mov	r0, sp
 8001c8e:	f7fe fa97 	bl	80001c0 <strlen>
 8001c92:	4b1c      	ldr	r3, [pc, #112]	@ (8001d04 <f_decaTDoATag+0xc4>)
 8001c94:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <f_decaTDoATag+0xc8>)
 8001c96:	491d      	ldr	r1, [pc, #116]	@ (8001d0c <f_decaTDoATag+0xcc>)
 8001c98:	4468      	add	r0, sp
 8001c9a:	f001 ff6f 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"Driver\":\"%s\"}}", DW1000_DEVICE_DRIVER_VER_STRING );
 8001c9e:	4668      	mov	r0, sp
 8001ca0:	f7fe fa8e 	bl	80001c0 <strlen>
 8001ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d10 <f_decaTDoATag+0xd0>)
 8001ca6:	491b      	ldr	r1, [pc, #108]	@ (8001d14 <f_decaTDoATag+0xd4>)
 8001ca8:	4468      	add	r0, sp
 8001caa:	f001 ff67 	bl	8003b7c <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);   //add formatted 4X of length, this will erase first '{'
 8001cae:	4668      	mov	r0, sp
 8001cb0:	f7fe fa86 	bl	80001c0 <strlen>
 8001cb4:	1f82      	subs	r2, r0, #6
 8001cb6:	4918      	ldr	r1, [pc, #96]	@ (8001d18 <f_decaTDoATag+0xd8>)
 8001cb8:	466b      	mov	r3, sp
 8001cba:	1c98      	adds	r0, r3, #2
 8001cbc:	f001 ff5e 	bl	8003b7c <siprintf>
    str[hlen]='{';                            //restore the start bracket
 8001cc0:	237b      	movs	r3, #123	@ 0x7b
 8001cc2:	466a      	mov	r2, sp
 8001cc4:	7193      	strb	r3, [r2, #6]
    port_tx_msg(str, strlen(str));
 8001cc6:	4668      	mov	r0, sp
 8001cc8:	f7fe fa7a 	bl	80001c0 <strlen>
 8001ccc:	0001      	movs	r1, r0
 8001cce:	4668      	mov	r0, sp
 8001cd0:	f7ff fbe6 	bl	80014a0 <port_tx_msg>
    port_tx_msg("\r\n", 2);
 8001cd4:	4811      	ldr	r0, [pc, #68]	@ (8001d1c <f_decaTDoATag+0xdc>)
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	f7ff fbe2 	bl	80014a0 <port_tx_msg>
    return (ret);
 8001cdc:	4810      	ldr	r0, [pc, #64]	@ (8001d20 <f_decaTDoATag+0xe0>)
}
 8001cde:	2382      	movs	r3, #130	@ 0x82
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	449d      	add	sp, r3
 8001ce4:	bd10      	pop	{r4, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	fffffdf8 	.word	0xfffffdf8
 8001cec:	08004e50 	.word	0x08004e50
 8001cf0:	08004d9c 	.word	0x08004d9c
 8001cf4:	00005a5a 	.word	0x00005a5a
 8001cf8:	08004da4 	.word	0x08004da4
 8001cfc:	08004db0 	.word	0x08004db0
 8001d00:	08004dd0 	.word	0x08004dd0
 8001d04:	08004de4 	.word	0x08004de4
 8001d08:	08004df0 	.word	0x08004df0
 8001d0c:	08004dfc 	.word	0x08004dfc
 8001d10:	08004e10 	.word	0x08004e10
 8001d14:	08004e38 	.word	0x08004e38
 8001d18:	08004e48 	.word	0x08004e48
 8001d1c:	08004d68 	.word	0x08004d68
 8001d20:	08005138 	.word	0x08005138

08001d24 <f_jstat>:
{
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	46d6      	mov	lr, sl
 8001d28:	464f      	mov	r7, r9
 8001d2a:	4646      	mov	r6, r8
 8001d2c:	b5c0      	push	{r6, r7, lr}
 8001d2e:	4c7e      	ldr	r4, [pc, #504]	@ (8001f28 <f_jstat+0x204>)
 8001d30:	44a5      	add	sp, r4
 8001d32:	000c      	movs	r4, r1
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 8001d34:	497d      	ldr	r1, [pc, #500]	@ (8001f2c <f_jstat+0x208>)
 8001d36:	4a7e      	ldr	r2, [pc, #504]	@ (8001f30 <f_jstat+0x20c>)
 8001d38:	a806      	add	r0, sp, #24
 8001d3a:	f001 ff1f 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"{\"UWB PARAM\":{\r\n");
 8001d3e:	a806      	add	r0, sp, #24
 8001d40:	f7fe fa3e 	bl	80001c0 <strlen>
 8001d44:	ab06      	add	r3, sp, #24
 8001d46:	469c      	mov	ip, r3
 8001d48:	4460      	add	r0, ip
 8001d4a:	497a      	ldr	r1, [pc, #488]	@ (8001f34 <f_jstat+0x210>)
 8001d4c:	2211      	movs	r2, #17
 8001d4e:	f001 ffb1 	bl	8003cb4 <memcpy>
    sprintf(&str[strlen(str)],"\"CHAN\":%d,\r\n",deca_to_chan(pbss->dwt_config.chan));
 8001d52:	a806      	add	r0, sp, #24
 8001d54:	f7fe fa34 	bl	80001c0 <strlen>
 8001d58:	0005      	movs	r5, r0
 8001d5a:	7820      	ldrb	r0, [r4, #0]
 8001d5c:	f001 fd1f 	bl	800379e <deca_to_chan>
 8001d60:	0002      	movs	r2, r0
 8001d62:	4975      	ldr	r1, [pc, #468]	@ (8001f38 <f_jstat+0x214>)
 8001d64:	ab06      	add	r3, sp, #24
 8001d66:	1958      	adds	r0, r3, r5
 8001d68:	f001 ff08 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"PRF\":%d,\r\n", deca_to_prf (pbss->dwt_config.prf));
 8001d6c:	a806      	add	r0, sp, #24
 8001d6e:	f7fe fa27 	bl	80001c0 <strlen>
 8001d72:	0005      	movs	r5, r0
 8001d74:	7860      	ldrb	r0, [r4, #1]
 8001d76:	f001 fd4c 	bl	8003812 <deca_to_prf>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	496f      	ldr	r1, [pc, #444]	@ (8001f3c <f_jstat+0x218>)
 8001d7e:	ab06      	add	r3, sp, #24
 8001d80:	1958      	adds	r0, r3, r5
 8001d82:	f001 fefb 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"PLEN\":%d,\r\n",deca_to_plen(pbss->dwt_config.txPreambLength));
 8001d86:	a806      	add	r0, sp, #24
 8001d88:	f7fe fa1a 	bl	80001c0 <strlen>
 8001d8c:	0005      	movs	r5, r0
 8001d8e:	78a0      	ldrb	r0, [r4, #2]
 8001d90:	f001 fda6 	bl	80038e0 <deca_to_plen>
 8001d94:	0002      	movs	r2, r0
 8001d96:	496a      	ldr	r1, [pc, #424]	@ (8001f40 <f_jstat+0x21c>)
 8001d98:	ab06      	add	r3, sp, #24
 8001d9a:	1958      	adds	r0, r3, r5
 8001d9c:	f001 feee 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"DATARATE\":%d,\r\n",deca_to_bitrate(pbss->dwt_config.dataRate));
 8001da0:	a806      	add	r0, sp, #24
 8001da2:	f7fe fa0d 	bl	80001c0 <strlen>
 8001da6:	0005      	movs	r5, r0
 8001da8:	79e0      	ldrb	r0, [r4, #7]
 8001daa:	f001 fd13 	bl	80037d4 <deca_to_bitrate>
 8001dae:	0002      	movs	r2, r0
 8001db0:	4964      	ldr	r1, [pc, #400]	@ (8001f44 <f_jstat+0x220>)
 8001db2:	ab06      	add	r3, sp, #24
 8001db4:	1958      	adds	r0, r3, r5
 8001db6:	f001 fee1 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"TXCODE\":%d,\r\n",pbss->dwt_config.txCode);
 8001dba:	a806      	add	r0, sp, #24
 8001dbc:	f7fe fa00 	bl	80001c0 <strlen>
 8001dc0:	7922      	ldrb	r2, [r4, #4]
 8001dc2:	4961      	ldr	r1, [pc, #388]	@ (8001f48 <f_jstat+0x224>)
 8001dc4:	ab06      	add	r3, sp, #24
 8001dc6:	469c      	mov	ip, r3
 8001dc8:	4460      	add	r0, ip
 8001dca:	f001 fed7 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"PAC\":%d,\r\n", deca_to_pac (pbss->dwt_config.rxPAC));
 8001dce:	a806      	add	r0, sp, #24
 8001dd0:	f7fe f9f6 	bl	80001c0 <strlen>
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	78e0      	ldrb	r0, [r4, #3]
 8001dd8:	f001 fd3d 	bl	8003856 <deca_to_pac>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	495b      	ldr	r1, [pc, #364]	@ (8001f4c <f_jstat+0x228>)
 8001de0:	ab06      	add	r3, sp, #24
 8001de2:	1958      	adds	r0, r3, r5
 8001de4:	f001 feca 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"NSSFD\":%d,\r\n",pbss->dwt_config.nsSFD);
 8001de8:	a806      	add	r0, sp, #24
 8001dea:	f7fe f9e9 	bl	80001c0 <strlen>
 8001dee:	79a2      	ldrb	r2, [r4, #6]
 8001df0:	4957      	ldr	r1, [pc, #348]	@ (8001f50 <f_jstat+0x22c>)
 8001df2:	ab06      	add	r3, sp, #24
 8001df4:	469c      	mov	ip, r3
 8001df6:	4460      	add	r0, ip
 8001df8:	f001 fec0 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"PHRMODE\":%d,\r\n",pbss->dwt_config.phrMode);
 8001dfc:	a806      	add	r0, sp, #24
 8001dfe:	f7fe f9df 	bl	80001c0 <strlen>
 8001e02:	7a22      	ldrb	r2, [r4, #8]
 8001e04:	4953      	ldr	r1, [pc, #332]	@ (8001f54 <f_jstat+0x230>)
 8001e06:	ab06      	add	r3, sp, #24
 8001e08:	469c      	mov	ip, r3
 8001e0a:	4460      	add	r0, ip
 8001e0c:	f001 feb6 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"SMARTPOWER\":%d,\r\n",pbss->smartPowerEn);
 8001e10:	a806      	add	r0, sp, #24
 8001e12:	f7fe f9d5 	bl	80001c0 <strlen>
 8001e16:	7e23      	ldrb	r3, [r4, #24]
 8001e18:	7e62      	ldrb	r2, [r4, #25]
 8001e1a:	0212      	lsls	r2, r2, #8
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	494e      	ldr	r1, [pc, #312]	@ (8001f58 <f_jstat+0x234>)
 8001e20:	ab06      	add	r3, sp, #24
 8001e22:	469c      	mov	ip, r3
 8001e24:	4460      	add	r0, ip
 8001e26:	f001 fea9 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKFAST\":%lu,\r\n",pbss->blink.interval_in_ms);
 8001e2a:	a806      	add	r0, sp, #24
 8001e2c:	f7fe f9c8 	bl	80001c0 <strlen>
 8001e30:	7b23      	ldrb	r3, [r4, #12]
 8001e32:	7b62      	ldrb	r2, [r4, #13]
 8001e34:	0212      	lsls	r2, r2, #8
 8001e36:	431a      	orrs	r2, r3
 8001e38:	7ba3      	ldrb	r3, [r4, #14]
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	7be2      	ldrb	r2, [r4, #15]
 8001e40:	0612      	lsls	r2, r2, #24
 8001e42:	431a      	orrs	r2, r3
 8001e44:	4945      	ldr	r1, [pc, #276]	@ (8001f5c <f_jstat+0x238>)
 8001e46:	ab06      	add	r3, sp, #24
 8001e48:	469c      	mov	ip, r3
 8001e4a:	4460      	add	r0, ip
 8001e4c:	f001 fe96 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKSLOW\":%lu,\r\n",pbss->blink.interval_slow_in_ms);
 8001e50:	a806      	add	r0, sp, #24
 8001e52:	f7fe f9b5 	bl	80001c0 <strlen>
 8001e56:	7c23      	ldrb	r3, [r4, #16]
 8001e58:	7c62      	ldrb	r2, [r4, #17]
 8001e5a:	0212      	lsls	r2, r2, #8
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	7ca3      	ldrb	r3, [r4, #18]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	4313      	orrs	r3, r2
 8001e64:	7ce2      	ldrb	r2, [r4, #19]
 8001e66:	0612      	lsls	r2, r2, #24
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	493d      	ldr	r1, [pc, #244]	@ (8001f60 <f_jstat+0x23c>)
 8001e6c:	ab06      	add	r3, sp, #24
 8001e6e:	469c      	mov	ip, r3
 8001e70:	4460      	add	r0, ip
 8001e72:	f001 fe83 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"RANDOMNESS\":%d,\r\n",pbss->blink.randomness);
 8001e76:	a806      	add	r0, sp, #24
 8001e78:	f7fe f9a2 	bl	80001c0 <strlen>
 8001e7c:	7d22      	ldrb	r2, [r4, #20]
 8001e7e:	4939      	ldr	r1, [pc, #228]	@ (8001f64 <f_jstat+0x240>)
 8001e80:	ab06      	add	r3, sp, #24
 8001e82:	469c      	mov	ip, r3
 8001e84:	4460      	add	r0, ip
 8001e86:	f001 fe79 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"TAGIDSET\":%d,\r\n",pbss->tagIDset);
 8001e8a:	a806      	add	r0, sp, #24
 8001e8c:	f7fe f998 	bl	80001c0 <strlen>
 8001e90:	2322      	movs	r3, #34	@ 0x22
 8001e92:	5ce2      	ldrb	r2, [r4, r3]
 8001e94:	4934      	ldr	r1, [pc, #208]	@ (8001f68 <f_jstat+0x244>)
 8001e96:	ab06      	add	r3, sp, #24
 8001e98:	469c      	mov	ip, r3
 8001e9a:	4460      	add	r0, ip
 8001e9c:	f001 fe6e 	bl	8003b7c <siprintf>
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x}}",
 8001ea0:	a806      	add	r0, sp, #24
 8001ea2:	f7fe f98d 	bl	80001c0 <strlen>
                                               pbss->tagID[7], pbss->tagID[6], pbss->tagID[5], pbss->tagID[4],
 8001ea6:	2321      	movs	r3, #33	@ 0x21
 8001ea8:	5ce2      	ldrb	r2, [r4, r3]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	5ce3      	ldrb	r3, [r4, r3]
 8001eae:	469a      	mov	sl, r3
 8001eb0:	7fe5      	ldrb	r5, [r4, #31]
 8001eb2:	7fa6      	ldrb	r6, [r4, #30]
                                               pbss->tagID[3], pbss->tagID[2], pbss->tagID[1], pbss->tagID[0]);
 8001eb4:	7f67      	ldrb	r7, [r4, #29]
 8001eb6:	7f21      	ldrb	r1, [r4, #28]
 8001eb8:	468c      	mov	ip, r1
 8001eba:	7ee1      	ldrb	r1, [r4, #27]
 8001ebc:	4688      	mov	r8, r1
 8001ebe:	7ea4      	ldrb	r4, [r4, #26]
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x}}",
 8001ec0:	492a      	ldr	r1, [pc, #168]	@ (8001f6c <f_jstat+0x248>)
 8001ec2:	ab06      	add	r3, sp, #24
 8001ec4:	4699      	mov	r9, r3
 8001ec6:	4448      	add	r0, r9
 8001ec8:	9405      	str	r4, [sp, #20]
 8001eca:	4643      	mov	r3, r8
 8001ecc:	9304      	str	r3, [sp, #16]
 8001ece:	4663      	mov	r3, ip
 8001ed0:	9303      	str	r3, [sp, #12]
 8001ed2:	9702      	str	r7, [sp, #8]
 8001ed4:	9601      	str	r6, [sp, #4]
 8001ed6:	9500      	str	r5, [sp, #0]
 8001ed8:	4653      	mov	r3, sl
 8001eda:	f001 fe4f 	bl	8003b7c <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);//add formatted 4X of length, this will erase first '{'
 8001ede:	4648      	mov	r0, r9
 8001ee0:	f7fe f96e 	bl	80001c0 <strlen>
 8001ee4:	1f82      	subs	r2, r0, #6
 8001ee6:	4922      	ldr	r1, [pc, #136]	@ (8001f70 <f_jstat+0x24c>)
 8001ee8:	201a      	movs	r0, #26
 8001eea:	4468      	add	r0, sp
 8001eec:	f001 fe46 	bl	8003b7c <siprintf>
    str[hlen]='{';                            //restore the start bracket
 8001ef0:	464b      	mov	r3, r9
 8001ef2:	227b      	movs	r2, #123	@ 0x7b
 8001ef4:	719a      	strb	r2, [r3, #6]
    sprintf(&str[strlen(str)],"\r\n");
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f7fe f962 	bl	80001c0 <strlen>
 8001efc:	4448      	add	r0, r9
 8001efe:	491d      	ldr	r1, [pc, #116]	@ (8001f74 <f_jstat+0x250>)
 8001f00:	2203      	movs	r2, #3
 8001f02:	f001 fed7 	bl	8003cb4 <memcpy>
    port_tx_msg(str, strlen(str));
 8001f06:	4648      	mov	r0, r9
 8001f08:	f7fe f95a 	bl	80001c0 <strlen>
 8001f0c:	0001      	movs	r1, r0
 8001f0e:	4648      	mov	r0, r9
 8001f10:	f7ff fac6 	bl	80014a0 <port_tx_msg>
    return (CMD_FN_RET_OK);
 8001f14:	4818      	ldr	r0, [pc, #96]	@ (8001f78 <f_jstat+0x254>)
}
 8001f16:	2386      	movs	r3, #134	@ 0x86
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	449d      	add	sp, r3
 8001f1c:	bce0      	pop	{r5, r6, r7}
 8001f1e:	46ba      	mov	sl, r7
 8001f20:	46b1      	mov	r9, r6
 8001f22:	46a8      	mov	r8, r5
 8001f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	fffffde8 	.word	0xfffffde8
 8001f2c:	08004d9c 	.word	0x08004d9c
 8001f30:	00005a5a 	.word	0x00005a5a
 8001f34:	08004e58 	.word	0x08004e58
 8001f38:	08004e6c 	.word	0x08004e6c
 8001f3c:	08004e7c 	.word	0x08004e7c
 8001f40:	08004e88 	.word	0x08004e88
 8001f44:	08004e98 	.word	0x08004e98
 8001f48:	08004eac 	.word	0x08004eac
 8001f4c:	08004ebc 	.word	0x08004ebc
 8001f50:	08004ec8 	.word	0x08004ec8
 8001f54:	08004ed8 	.word	0x08004ed8
 8001f58:	08004ee8 	.word	0x08004ee8
 8001f5c:	08004efc 	.word	0x08004efc
 8001f60:	08004f10 	.word	0x08004f10
 8001f64:	08004f24 	.word	0x08004f24
 8001f68:	08004f38 	.word	0x08004f38
 8001f6c:	08004f4c 	.word	0x08004f4c
 8001f70:	08004e48 	.word	0x08004e48
 8001f74:	08004d68 	.word	0x08004d68
 8001f78:	08005138 	.word	0x08005138

08001f7c <f_stat>:
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
 8001f7e:	0004      	movs	r4, r0
 8001f80:	000d      	movs	r5, r1
 8001f82:	0016      	movs	r6, r2
    f_decaTDoATag(text, pbss, val);
 8001f84:	f7ff fe5c 	bl	8001c40 <f_decaTDoATag>
    f_jstat(text, pbss, val);
 8001f88:	0032      	movs	r2, r6
 8001f8a:	0029      	movs	r1, r5
 8001f8c:	0020      	movs	r0, r4
 8001f8e:	f7ff fec9 	bl	8001d24 <f_jstat>
    return (ret);
 8001f92:	4801      	ldr	r0, [pc, #4]	@ (8001f98 <f_stat+0x1c>)
}
 8001f94:	bd70      	pop	{r4, r5, r6, pc}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	08005138 	.word	0x08005138

08001f9c <waitForCommand>:
 *
 * @return  COMMAND_READY : the data for future processing can be found in app.local_buff : app.local_buff_len
 *          NO_DATA : no command yet
 */
uart_data_e waitForCommand(uint8_t *pBuf, uint16_t len)
{
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	0005      	movs	r5, r0
 8001fa0:	000c      	movs	r4, r1
    static uint8_t cmdLen = 0;
    static uint8_t cmdBuf[COM_RX_BUF_SIZE]; /**< slow command buffer : small size */

    ret = NO_DATA;

    if (len <= 2)
 8001fa2:	2902      	cmp	r1, #2
 8001fa4:	d841      	bhi.n	800202a <waitForCommand+0x8e>
    {/* "slow" command mode: Human interface. Wait until '\r' or '\n' */
        if (cmdLen == 0)
 8001fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <waitForCommand+0xc4>)
 8001fa8:	781c      	ldrb	r4, [r3, #0]
 8001faa:	2c00      	cmp	r4, #0
 8001fac:	d00f      	beq.n	8001fce <waitForCommand+0x32>
        {
            memset(cmdBuf, 0, sizeof(cmdBuf));
        }

        if (cmdLen < (sizeof(local_buff) - 1))
 8001fae:	2c3e      	cmp	r4, #62	@ 0x3e
 8001fb0:	d832      	bhi.n	8002018 <waitForCommand+0x7c>
        {
            if (*pBuf == '\n' || *pBuf == '\r')
 8001fb2:	782b      	ldrb	r3, [r5, #0]
 8001fb4:	2b0a      	cmp	r3, #10
 8001fb6:	d010      	beq.n	8001fda <waitForCommand+0x3e>
 8001fb8:	2b0d      	cmp	r3, #13
 8001fba:	d00e      	beq.n	8001fda <waitForCommand+0x3e>

                    ret = COMMAND_READY;
                    cmdLen = 0;
                }
            }
            else if (*pBuf == '\b') //erase of a char in the terminal
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d01c      	beq.n	8001ffa <waitForCommand+0x5e>
                }

            }
            else
            {
                cmdBuf[cmdLen] = *pBuf;
 8001fc0:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <waitForCommand+0xc8>)
 8001fc2:	5513      	strb	r3, [r2, r4]
                cmdLen++;
 8001fc4:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <waitForCommand+0xc4>)
 8001fc6:	3401      	adds	r4, #1
 8001fc8:	701c      	strb	r4, [r3, #0]
    ret = NO_DATA;
 8001fca:	2400      	movs	r4, #0
 8001fcc:	e03d      	b.n	800204a <waitForCommand+0xae>
            memset(cmdBuf, 0, sizeof(cmdBuf));
 8001fce:	4825      	ldr	r0, [pc, #148]	@ (8002064 <waitForCommand+0xc8>)
 8001fd0:	2240      	movs	r2, #64	@ 0x40
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	f001 fe20 	bl	8003c18 <memset>
 8001fd8:	e7e9      	b.n	8001fae <waitForCommand+0x12>
                if (cmdLen > 0)
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d035      	beq.n	800204a <waitForCommand+0xae>
                    memcpy(local_buff, cmdBuf, cmdLen);
 8001fde:	4d22      	ldr	r5, [pc, #136]	@ (8002068 <waitForCommand+0xcc>)
 8001fe0:	4920      	ldr	r1, [pc, #128]	@ (8002064 <waitForCommand+0xc8>)
 8001fe2:	0022      	movs	r2, r4
 8001fe4:	0028      	movs	r0, r5
 8001fe6:	f001 fe65 	bl	8003cb4 <memcpy>
                    local_buff_length = cmdLen;
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <waitForCommand+0xd0>)
 8001fec:	801c      	strh	r4, [r3, #0]
                    local_buff[cmdLen] = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	552b      	strb	r3, [r5, r4]
                    cmdLen = 0;
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <waitForCommand+0xc4>)
 8001ff4:	7013      	strb	r3, [r2, #0]
                    ret = COMMAND_READY;
 8001ff6:	2401      	movs	r4, #1
 8001ff8:	e027      	b.n	800204a <waitForCommand+0xae>
                if (cmdLen > 0)
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	d025      	beq.n	800204a <waitForCommand+0xae>
                    --cmdLen;
 8001ffe:	3c01      	subs	r4, #1
 8002000:	b2e4      	uxtb	r4, r4
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <waitForCommand+0xc4>)
 8002004:	701c      	strb	r4, [r3, #0]
                    cmdBuf[cmdLen] = 0;
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <waitForCommand+0xc8>)
 8002008:	2200      	movs	r2, #0
 800200a:	551a      	strb	r2, [r3, r4]
                    port_tx_msg("\033[K", 3);
 800200c:	4818      	ldr	r0, [pc, #96]	@ (8002070 <waitForCommand+0xd4>)
 800200e:	2103      	movs	r1, #3
 8002010:	f7ff fa46 	bl	80014a0 <port_tx_msg>
    ret = NO_DATA;
 8002014:	2400      	movs	r4, #0
 8002016:	e018      	b.n	800204a <waitForCommand+0xae>
            }
        }
        else
        {
            /* error in command protocol : flush everything */
            port_tx_msg("\r\n", 2);
 8002018:	4816      	ldr	r0, [pc, #88]	@ (8002074 <waitForCommand+0xd8>)
 800201a:	2102      	movs	r1, #2
 800201c:	f7ff fa40 	bl	80014a0 <port_tx_msg>
            cmdLen = 0;
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <waitForCommand+0xc4>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 8002026:	2400      	movs	r4, #0
 8002028:	e00f      	b.n	800204a <waitForCommand+0xae>
        }
    }
    else
    {/* "fast" command mode : assume every data buffer is "COMMAND_READY" */

        if (len < (sizeof(local_buff) - 1))
 800202a:	293e      	cmp	r1, #62	@ 0x3e
 800202c:	d80f      	bhi.n	800204e <waitForCommand+0xb2>
        {
            memcpy(local_buff, pBuf, len);
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <waitForCommand+0xcc>)
 8002030:	000a      	movs	r2, r1
 8002032:	0001      	movs	r1, r0
 8002034:	001d      	movs	r5, r3
 8002036:	0018      	movs	r0, r3
 8002038:	f001 fe3c 	bl	8003cb4 <memcpy>

            local_buff_length = len;
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <waitForCommand+0xd0>)
 800203e:	801c      	strh	r4, [r3, #0]
            local_buff[len] = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	552b      	strb	r3, [r5, r4]
            cmdLen = 0;
 8002044:	4a06      	ldr	r2, [pc, #24]	@ (8002060 <waitForCommand+0xc4>)
 8002046:	7013      	strb	r3, [r2, #0]

            ret = COMMAND_READY;
 8002048:	2401      	movs	r4, #1
            cmdLen = 0;
        }
    }

    return (ret);
}
 800204a:	0020      	movs	r0, r4
 800204c:	bd70      	pop	{r4, r5, r6, pc}
            port_tx_msg( "Error: \r\n", 2);
 800204e:	480a      	ldr	r0, [pc, #40]	@ (8002078 <waitForCommand+0xdc>)
 8002050:	2102      	movs	r1, #2
 8002052:	f7ff fa25 	bl	80014a0 <port_tx_msg>
            cmdLen = 0;
 8002056:	4b02      	ldr	r3, [pc, #8]	@ (8002060 <waitForCommand+0xc4>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 800205c:	2400      	movs	r4, #0
 800205e:	e7f4      	b.n	800204a <waitForCommand+0xae>
 8002060:	20000280 	.word	0x20000280
 8002064:	20000240 	.word	0x20000240
 8002068:	20000284 	.word	0x20000284
 800206c:	20000282 	.word	0x20000282
 8002070:	0800502c 	.word	0x0800502c
 8002074:	08004d68 	.word	0x08004d68
 8002078:	08005030 	.word	0x08005030

0800207c <process_uartmsg>:
 *        into UART_COMMAND mode and perform operation
 *        based on uart input.
 * @param[in] void
 * */
void process_uartmsg(void)
{
 800207c:	b500      	push	{lr}
 800207e:	b091      	sub	sp, #68	@ 0x44
    uint8_t rx_buf[COM_RX_BUF_SIZE];
    int uartLen, res;

    memset(rx_buf,0,sizeof(rx_buf));
 8002080:	2240      	movs	r2, #64	@ 0x40
 8002082:	2100      	movs	r1, #0
 8002084:	4668      	mov	r0, sp
 8002086:	f001 fdc7 	bl	8003c18 <memset>
    uartLen = deca_uart_receive( rx_buf, COM_RX_BUF_SIZE );
 800208a:	2140      	movs	r1, #64	@ 0x40
 800208c:	4668      	mov	r0, sp
 800208e:	f7ff fa0f 	bl	80014b0 <deca_uart_receive>
    
    if(uartLen > 0)
 8002092:	2800      	cmp	r0, #0
 8002094:	dc01      	bgt.n	800209a <process_uartmsg+0x1e>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
          local_buff[len+1] = 0;
          command_parser((char *)local_buff);            //parse and execute the command
      }
    }
}
 8002096:	b011      	add	sp, #68	@ 0x44
 8002098:	bd00      	pop	{pc}
      res = waitForCommand(rx_buf, uartLen);
 800209a:	b281      	uxth	r1, r0
 800209c:	4668      	mov	r0, sp
 800209e:	f7ff ff7d 	bl	8001f9c <waitForCommand>
      if (res == COMMAND_READY)
 80020a2:	2801      	cmp	r0, #1
 80020a4:	d1f7      	bne.n	8002096 <process_uartmsg+0x1a>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <process_uartmsg+0x44>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80020ae:	d900      	bls.n	80020b2 <process_uartmsg+0x36>
 80020b0:	233f      	movs	r3, #63	@ 0x3f
          local_buff[len+1] = 0;
 80020b2:	3301      	adds	r3, #1
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <process_uartmsg+0x48>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	54c2      	strb	r2, [r0, r3]
          command_parser((char *)local_buff);            //parse and execute the command
 80020ba:	f7ff fc77 	bl	80019ac <command_parser>
}
 80020be:	e7ea      	b.n	8002096 <process_uartmsg+0x1a>
 80020c0:	20000282 	.word	0x20000282
 80020c4:	20000284 	.word	0x20000284

080020c8 <LockEeprom>:
/* Static functions */

/* Lock the EEPROM: */
static void LockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <LockEeprom+0x1c>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	07db      	lsls	r3, r3, #31
 80020ce:	d4fb      	bmi.n	80020c8 <LockEeprom>
   {
   }

   FLASH->PECR = FLASH->PECR & ~(FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* disable flash interrupts */
 80020d0:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <LockEeprom+0x1c>)
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <LockEeprom+0x20>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
   FLASH->PECR = FLASH->PECR | FLASH_PECR_PELOCK; /* Lock memory with PELOCK */
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]
}
 80020e2:	4770      	bx	lr
 80020e4:	40022000 	.word	0x40022000
 80020e8:	fffcffff 	.word	0xfffcffff

080020ec <UnlockEeprom>:
#define FLASH_OPTKEY2              ((uint32_t)0x24252627U) /*!< Flash option key2: used with FLASH_OPTKEY1 to
																unlock the write access to the option byte block */

static void UnlockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <UnlockEeprom+0x28>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	07db      	lsls	r3, r3, #31
 80020f2:	d4fb      	bmi.n	80020ec <UnlockEeprom>
   {
   }

   if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0) /* If PELOCK is locked */
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <UnlockEeprom+0x28>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	07db      	lsls	r3, r3, #31
 80020fa:	d504      	bpl.n	8002106 <UnlockEeprom+0x1a>
   {
      FLASH->PEKEYR = FLASH_PEKEY1; /* Unlock PELOCK */
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <UnlockEeprom+0x28>)
 80020fe:	4a06      	ldr	r2, [pc, #24]	@ (8002118 <UnlockEeprom+0x2c>)
 8002100:	60da      	str	r2, [r3, #12]
      FLASH->PEKEYR = FLASH_PEKEY2;
 8002102:	4a06      	ldr	r2, [pc, #24]	@ (800211c <UnlockEeprom+0x30>)
 8002104:	60da      	str	r2, [r3, #12]
   }
   FLASH->PECR = FLASH->PECR | (FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* enable flash interrupts */
 8002106:	4a03      	ldr	r2, [pc, #12]	@ (8002114 <UnlockEeprom+0x28>)
 8002108:	6851      	ldr	r1, [r2, #4]
 800210a:	23c0      	movs	r3, #192	@ 0xc0
 800210c:	029b      	lsls	r3, r3, #10
 800210e:	430b      	orrs	r3, r1
 8002110:	6053      	str	r3, [r2, #4]
}
 8002112:	4770      	bx	lr
 8002114:	40022000 	.word	0x40022000
 8002118:	89abcdef 	.word	0x89abcdef
 800211c:	02030405 	.word	0x02030405

08002120 <EepromProgram>:
* Retval None
*/
static void EepromProgram(uint32_t * addr, const uint32_t ee_data)
{
/* NOTE: The EEPROM must be unlocked and the flash interrupts must have been enabled prior to calling this function.*/
   *addr = ee_data; /* write data to EEPROM */
 8002120:	6001      	str	r1, [r0, #0]
   __WFI();
 8002122:	bf30      	wfi
   if (*addr != ee_data)
   {
   }
}
 8002124:	4770      	bx	lr
	...

08002128 <CRC8_Calculate>:

static uint8_t CRC8_Calculate( uint8_t * pdata, uint32_t size)
{
 8002128:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800212a:	4a09      	ldr	r2, [pc, #36]	@ (8002150 <CRC8_Calculate+0x28>)
 800212c:	6893      	ldr	r3, [r2, #8]
 800212e:	2401      	movs	r4, #1
 8002130:	4323      	orrs	r3, r4
 8002132:	6093      	str	r3, [r2, #8]
}
 8002134:	e004      	b.n	8002140 <CRC8_Calculate+0x18>

	LL_CRC_ResetCRCCalculationUnit(CRC);
	while ( size-- > 0)
	{
		LL_CRC_FeedData8(CRC, *pdata++);
 8002136:	7801      	ldrb	r1, [r0, #0]
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 8002138:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <CRC8_Calculate+0x28>)
 800213a:	7011      	strb	r1, [r2, #0]
	while ( size-- > 0)
 800213c:	0019      	movs	r1, r3
		LL_CRC_FeedData8(CRC, *pdata++);
 800213e:	3001      	adds	r0, #1
	while ( size-- > 0)
 8002140:	1e4b      	subs	r3, r1, #1
 8002142:	2900      	cmp	r1, #0
 8002144:	d1f7      	bne.n	8002136 <CRC8_Calculate+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (8 bits).
  */
__STATIC_INLINE uint8_t LL_CRC_ReadData8(const CRC_TypeDef *CRCx)
{
  return (uint8_t)READ_REG(CRCx->DR);
 8002146:	4b02      	ldr	r3, [pc, #8]	@ (8002150 <CRC8_Calculate+0x28>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	b2c0      	uxtb	r0, r0
	}
	return LL_CRC_ReadData8(CRC);
}
 800214c:	bd10      	pop	{r4, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	40023000 	.word	0x40023000

08002154 <save_bssConfig>:
/* @brief    Writes buffer to the nonvolatile config location &FConfig
 * assumes data fold to page
 *
 */
void save_bssConfig( const param_block_t * pbuf)
{
 8002154:	b510      	push	{r4, lr}
 8002156:	b0c0      	sub	sp, #256	@ 0x100
 8002158:	0004      	movs	r4, r0
	CRCprotected_param_t temp_protected_config;
	memset(&temp_protected_config.free, 0xFF, sizeof(temp_protected_config.free));
 800215a:	229c      	movs	r2, #156	@ 0x9c
 800215c:	21ff      	movs	r1, #255	@ 0xff
 800215e:	a819      	add	r0, sp, #100	@ 0x64
 8002160:	f001 fd5a 	bl	8003c18 <memset>
	memcpy(&temp_protected_config.params, pbuf, sizeof(temp_protected_config.params));
 8002164:	2263      	movs	r2, #99	@ 0x63
 8002166:	0021      	movs	r1, r4
 8002168:	4668      	mov	r0, sp
 800216a:	f001 fda3 	bl	8003cb4 <memcpy>

	temp_protected_config.CRC8 = CRC8_Calculate( (uint8_t *) &temp_protected_config.params, sizeof(temp_protected_config.params));
 800216e:	2163      	movs	r1, #99	@ 0x63
 8002170:	4668      	mov	r0, sp
 8002172:	f7ff ffd9 	bl	8002128 <CRC8_Calculate>
 8002176:	2363      	movs	r3, #99	@ 0x63
 8002178:	466a      	mov	r2, sp
 800217a:	54d0      	strb	r0, [r2, r3]
 800217c:	b672      	cpsid	i
		// extra dword to fit the rest of
		num_dwords++;
	}

	__disable_irq();
    UnlockEeprom();
 800217e:	f7ff ffb5 	bl	80020ec <UnlockEeprom>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8002182:	2400      	movs	r4, #0
 8002184:	e007      	b.n	8002196 <save_bssConfig+0x42>
    {
    	EepromProgram(FConfig_dword_pointer + i, current_dword_pointer[i] );
 8002186:	00a0      	lsls	r0, r4, #2
 8002188:	466b      	mov	r3, sp
 800218a:	5819      	ldr	r1, [r3, r0]
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <save_bssConfig+0x50>)
 800218e:	18c0      	adds	r0, r0, r3
 8002190:	f7ff ffc6 	bl	8002120 <EepromProgram>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8002194:	3401      	adds	r4, #1
 8002196:	2c3f      	cmp	r4, #63	@ 0x3f
 8002198:	d9f5      	bls.n	8002186 <save_bssConfig+0x32>
    }
    LockEeprom();
 800219a:	f7ff ff95 	bl	80020c8 <LockEeprom>
  __ASM volatile ("cpsie i" : : : "memory");
 800219e:	b662      	cpsie	i
    __enable_irq();
}
 80021a0:	b040      	add	sp, #256	@ 0x100
 80021a2:	bd10      	pop	{r4, pc}
 80021a4:	08080000 	.word	0x08080000

080021a8 <load_bssConfig>:

void load_bssConfig(void)
{
 80021a8:	b510      	push	{r4, lr}
	uint8_t tempCRC = CRC8_Calculate( (uint8_t *) &FConfig.params, sizeof(FConfig.params));
 80021aa:	4c0b      	ldr	r4, [pc, #44]	@ (80021d8 <load_bssConfig+0x30>)
 80021ac:	2163      	movs	r1, #99	@ 0x63
 80021ae:	0020      	movs	r0, r4
 80021b0:	f7ff ffba 	bl	8002128 <CRC8_Calculate>

	if ( tempCRC != FConfig.CRC8 ) {
 80021b4:	2363      	movs	r3, #99	@ 0x63
 80021b6:	5ce3      	ldrb	r3, [r4, r3]
 80021b8:	4283      	cmp	r3, r0
 80021ba:	d108      	bne.n	80021ce <load_bssConfig+0x26>
		save_bssConfig( &defaultFConfig);
	}

	memcpy(&tmpConfig, &FConfig.params, sizeof(tmpConfig));
 80021bc:	4c07      	ldr	r4, [pc, #28]	@ (80021dc <load_bssConfig+0x34>)
 80021be:	4906      	ldr	r1, [pc, #24]	@ (80021d8 <load_bssConfig+0x30>)
 80021c0:	2263      	movs	r2, #99	@ 0x63
 80021c2:	0020      	movs	r0, r4
 80021c4:	f001 fd76 	bl	8003cb4 <memcpy>
    app.pConfig = &tmpConfig;
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <load_bssConfig+0x38>)
 80021ca:	601c      	str	r4, [r3, #0]
}
 80021cc:	bd10      	pop	{r4, pc}
		save_bssConfig( &defaultFConfig);
 80021ce:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <load_bssConfig+0x3c>)
 80021d0:	f7ff ffc0 	bl	8002154 <save_bssConfig>
 80021d4:	e7f2      	b.n	80021bc <load_bssConfig+0x14>
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	08080000 	.word	0x08080000
 80021dc:	20000300 	.word	0x20000300
 80021e0:	2000011c 	.word	0x2000011c
 80021e4:	08000100 	.word	0x08000100

080021e8 <get_pbssConfig>:

param_block_t *get_pbssConfig(void)
{
  return app.pConfig;
 80021e8:	4b01      	ldr	r3, [pc, #4]	@ (80021f0 <get_pbssConfig+0x8>)
 80021ea:	6818      	ldr	r0, [r3, #0]
}
 80021ec:	4770      	bx	lr
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	2000011c 	.word	0x2000011c

080021f4 <restore_nvm_fconfig>:
/* @fn       restore_nvm_fconfig
 * @brief    init main program run-time configuration parameters from NVM
 *           assumes that memory model .text and .bss the same
 * */
void restore_nvm_fconfig(void)
{    
 80021f4:	b510      	push	{r4, lr}
	save_bssConfig( &defaultFConfig);
 80021f6:	4803      	ldr	r0, [pc, #12]	@ (8002204 <restore_nvm_fconfig+0x10>)
 80021f8:	f7ff ffac 	bl	8002154 <save_bssConfig>
    load_bssConfig();
 80021fc:	f7ff ffd4 	bl	80021a8 <load_bssConfig>
}
 8002200:	bd10      	pop	{r4, pc}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	08000100 	.word	0x08000100

08002208 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8002208:	b530      	push	{r4, r5, lr}
 800220a:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800220c:	2900      	cmp	r1, #0
 800220e:	d10a      	bne.n	8002226 <dwt_writetodevice+0x1e>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002210:	3980      	subs	r1, #128	@ 0x80
 8002212:	4301      	orrs	r1, r0
 8002214:	a801      	add	r0, sp, #4
 8002216:	7001      	strb	r1, [r0, #0]
 8002218:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800221a:	b280      	uxth	r0, r0
 800221c:	a901      	add	r1, sp, #4
 800221e:	f7ff f809 	bl	8001234 <writetospi>
} // end dwt_writetodevice()
 8002222:	b003      	add	sp, #12
 8002224:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8002226:	2440      	movs	r4, #64	@ 0x40
 8002228:	4264      	negs	r4, r4
 800222a:	4320      	orrs	r0, r4
 800222c:	ac01      	add	r4, sp, #4
 800222e:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002230:	297f      	cmp	r1, #127	@ 0x7f
 8002232:	d802      	bhi.n	800223a <dwt_writetodevice+0x32>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002234:	7061      	strb	r1, [r4, #1]
 8002236:	2002      	movs	r0, #2
 8002238:	e7ef      	b.n	800221a <dwt_writetodevice+0x12>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800223a:	b2cd      	uxtb	r5, r1
 800223c:	ac01      	add	r4, sp, #4
 800223e:	2080      	movs	r0, #128	@ 0x80
 8002240:	4240      	negs	r0, r0
 8002242:	4328      	orrs	r0, r5
 8002244:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8002246:	09c9      	lsrs	r1, r1, #7
 8002248:	70a1      	strb	r1, [r4, #2]
 800224a:	2003      	movs	r0, #3
 800224c:	e7e5      	b.n	800221a <dwt_writetodevice+0x12>

0800224e <dwt_writetxdata>:
{
 800224e:	b510      	push	{r4, lr}
 8002250:	000b      	movs	r3, r1
 8002252:	0011      	movs	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 8002254:	1814      	adds	r4, r2, r0
 8002256:	2280      	movs	r2, #128	@ 0x80
 8002258:	00d2      	lsls	r2, r2, #3
 800225a:	4294      	cmp	r4, r2
 800225c:	dc05      	bgt.n	800226a <dwt_writetxdata+0x1c>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800225e:	1e82      	subs	r2, r0, #2
 8002260:	2009      	movs	r0, #9
 8002262:	f7ff ffd1 	bl	8002208 <dwt_writetodevice>
        return DWT_SUCCESS;
 8002266:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8002268:	bd10      	pop	{r4, pc}
        return DWT_ERROR;
 800226a:	2001      	movs	r0, #1
 800226c:	4240      	negs	r0, r0
 800226e:	e7fb      	b.n	8002268 <dwt_writetxdata+0x1a>

08002270 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8002270:	b530      	push	{r4, r5, lr}
 8002272:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002274:	2900      	cmp	r1, #0
 8002276:	d108      	bne.n	800228a <dwt_readfromdevice+0x1a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002278:	a901      	add	r1, sp, #4
 800227a:	7008      	strb	r0, [r1, #0]
 800227c:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800227e:	b280      	uxth	r0, r0
 8002280:	a901      	add	r1, sp, #4
 8002282:	f7ff f823 	bl	80012cc <readfromspi>
} // end dwt_readfromdevice()
 8002286:	b003      	add	sp, #12
 8002288:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800228a:	2440      	movs	r4, #64	@ 0x40
 800228c:	4320      	orrs	r0, r4
 800228e:	ac01      	add	r4, sp, #4
 8002290:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002292:	297f      	cmp	r1, #127	@ 0x7f
 8002294:	d802      	bhi.n	800229c <dwt_readfromdevice+0x2c>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002296:	7061      	strb	r1, [r4, #1]
 8002298:	2002      	movs	r0, #2
 800229a:	e7f0      	b.n	800227e <dwt_readfromdevice+0xe>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800229c:	b2cd      	uxtb	r5, r1
 800229e:	ac01      	add	r4, sp, #4
 80022a0:	2080      	movs	r0, #128	@ 0x80
 80022a2:	4240      	negs	r0, r0
 80022a4:	4328      	orrs	r0, r5
 80022a6:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80022a8:	09c9      	lsrs	r1, r1, #7
 80022aa:	70a1      	strb	r1, [r4, #2]
 80022ac:	2003      	movs	r0, #3
 80022ae:	e7e6      	b.n	800227e <dwt_readfromdevice+0xe>

080022b0 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80022b0:	b500      	push	{lr}
 80022b2:	b083      	sub	sp, #12
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80022b4:	b289      	uxth	r1, r1
 80022b6:	b280      	uxth	r0, r0
 80022b8:	ab01      	add	r3, sp, #4
 80022ba:	2204      	movs	r2, #4
 80022bc:	f7ff ffd8 	bl	8002270 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80022c0:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 80022c2:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 80022c4:	e004      	b.n	80022d0 <dwt_read32bitoffsetreg+0x20>
    {
        regval = (regval << 8) + buffer[j] ;
 80022c6:	0200      	lsls	r0, r0, #8
 80022c8:	aa01      	add	r2, sp, #4
 80022ca:	5cd2      	ldrb	r2, [r2, r3]
 80022cc:	1880      	adds	r0, r0, r2
    for (j = 3 ; j >= 0 ; j --)
 80022ce:	3b01      	subs	r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	daf8      	bge.n	80022c6 <dwt_read32bitoffsetreg+0x16>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 80022d4:	b003      	add	sp, #12
 80022d6:	bd00      	pop	{pc}

080022d8 <dwt_readdevid>:
{
 80022d8:	b510      	push	{r4, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80022da:	2100      	movs	r1, #0
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff ffe7 	bl	80022b0 <dwt_read32bitoffsetreg>
}
 80022e2:	bd10      	pop	{r4, pc}

080022e4 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 80022e4:	b500      	push	{lr}
 80022e6:	b083      	sub	sp, #12
    uint16  regval = 0 ;
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80022e8:	b289      	uxth	r1, r1
 80022ea:	b280      	uxth	r0, r0
 80022ec:	ab01      	add	r3, sp, #4
 80022ee:	2202      	movs	r2, #2
 80022f0:	f7ff ffbe 	bl	8002270 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 80022f4:	466b      	mov	r3, sp
 80022f6:	7958      	ldrb	r0, [r3, #5]
 80022f8:	0200      	lsls	r0, r0, #8
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	18c0      	adds	r0, r0, r3
 80022fe:	b280      	uxth	r0, r0
    return regval ;

} // end dwt_read16bitoffsetreg()
 8002300:	b003      	add	sp, #12
 8002302:	bd00      	pop	{pc}

08002304 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8002304:	b510      	push	{r4, lr}
 8002306:	b082      	sub	sp, #8
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002308:	466b      	mov	r3, sp
 800230a:	1ddc      	adds	r4, r3, #7
 800230c:	b289      	uxth	r1, r1
 800230e:	b280      	uxth	r0, r0
 8002310:	0023      	movs	r3, r4
 8002312:	2201      	movs	r2, #1
 8002314:	f7ff ffac 	bl	8002270 <dwt_readfromdevice>

    return regval ;
 8002318:	7820      	ldrb	r0, [r4, #0]
}
 800231a:	b002      	add	sp, #8
 800231c:	bd10      	pop	{r4, pc}

0800231e <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800231e:	b500      	push	{lr}
 8002320:	b083      	sub	sp, #12
 8002322:	466b      	mov	r3, sp
 8002324:	3307      	adds	r3, #7
 8002326:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002328:	b289      	uxth	r1, r1
 800232a:	b280      	uxth	r0, r0
 800232c:	2201      	movs	r2, #1
 800232e:	f7ff ff6b 	bl	8002208 <dwt_writetodevice>
}
 8002332:	b003      	add	sp, #12
 8002334:	bd00      	pop	{pc}

08002336 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8002336:	b500      	push	{lr}
 8002338:	b083      	sub	sp, #12
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800233a:	466b      	mov	r3, sp
 800233c:	711a      	strb	r2, [r3, #4]
    buffer[1] = regval >> 8 ;
 800233e:	0a12      	lsrs	r2, r2, #8
 8002340:	715a      	strb	r2, [r3, #5]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002342:	b289      	uxth	r1, r1
 8002344:	b280      	uxth	r0, r0
 8002346:	ab01      	add	r3, sp, #4
 8002348:	2202      	movs	r2, #2
 800234a:	f7ff ff5d 	bl	8002208 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800234e:	b003      	add	sp, #12
 8002350:	bd00      	pop	{pc}

08002352 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8002352:	b510      	push	{r4, lr}
 8002354:	b082      	sub	sp, #8
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8002356:	2300      	movs	r3, #0
 8002358:	e003      	b.n	8002362 <dwt_write32bitoffsetreg+0x10>
    {
        buffer[j] = regval & 0xff ;
 800235a:	ac01      	add	r4, sp, #4
 800235c:	54e2      	strb	r2, [r4, r3]
        regval >>= 8 ;
 800235e:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 8002360:	3301      	adds	r3, #1
 8002362:	2b03      	cmp	r3, #3
 8002364:	ddf9      	ble.n	800235a <dwt_write32bitoffsetreg+0x8>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002366:	b289      	uxth	r1, r1
 8002368:	b280      	uxth	r0, r0
 800236a:	ab01      	add	r3, sp, #4
 800236c:	2204      	movs	r2, #4
 800236e:	f7ff ff4b 	bl	8002208 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002372:	b002      	add	sp, #8
 8002374:	bd10      	pop	{r4, pc}

08002376 <dwt_configuretxrf>:
{
 8002376:	b510      	push	{r4, lr}
 8002378:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 800237a:	7802      	ldrb	r2, [r0, #0]
 800237c:	210b      	movs	r1, #11
 800237e:	202a      	movs	r0, #42	@ 0x2a
 8002380:	f7ff ffcd 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8002384:	6862      	ldr	r2, [r4, #4]
 8002386:	2100      	movs	r1, #0
 8002388:	201e      	movs	r0, #30
 800238a:	f7ff ffe2 	bl	8002352 <dwt_write32bitoffsetreg>
}
 800238e:	bd10      	pop	{r4, pc}

08002390 <dwt_writetxfctrl>:
{
 8002390:	b510      	push	{r4, lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <dwt_writetxfctrl+0x1c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4318      	orrs	r0, r3
 800239a:	0589      	lsls	r1, r1, #22
 800239c:	4308      	orrs	r0, r1
 800239e:	03d2      	lsls	r2, r2, #15
 80023a0:	4302      	orrs	r2, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 80023a2:	2100      	movs	r1, #0
 80023a4:	2008      	movs	r0, #8
 80023a6:	f7ff ffd4 	bl	8002352 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80023aa:	bd10      	pop	{r4, pc}
 80023ac:	20000010 	.word	0x20000010

080023b0 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 80023b0:	b510      	push	{r4, lr}
 80023b2:	0002      	movs	r2, r0
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80023b4:	2104      	movs	r1, #4
 80023b6:	202d      	movs	r0, #45	@ 0x2d
 80023b8:	f7ff ffbd 	bl	8002336 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80023bc:	2203      	movs	r2, #3
 80023be:	2106      	movs	r1, #6
 80023c0:	202d      	movs	r0, #45	@ 0x2d
 80023c2:	f7ff ffac 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80023c6:	2200      	movs	r2, #0
 80023c8:	2106      	movs	r1, #6
 80023ca:	202d      	movs	r0, #45	@ 0x2d
 80023cc:	f7ff ffa7 	bl	800231e <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80023d0:	210a      	movs	r1, #10
 80023d2:	202d      	movs	r0, #45	@ 0x2d
 80023d4:	f7ff ff6c 	bl	80022b0 <dwt_read32bitoffsetreg>

    // Return the 32bit of read data
    return ret_data;
}
 80023d8:	bd10      	pop	{r4, pc}

080023da <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80023da:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80023dc:	2200      	movs	r2, #0
 80023de:	2102      	movs	r1, #2
 80023e0:	202c      	movs	r0, #44	@ 0x2c
 80023e2:	f7ff ff9c 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80023e6:	2202      	movs	r2, #2
 80023e8:	2102      	movs	r1, #2
 80023ea:	202c      	movs	r0, #44	@ 0x2c
 80023ec:	f7ff ff97 	bl	800231e <dwt_write8bitoffsetreg>
}
 80023f0:	bd10      	pop	{r4, pc}
	...

080023f4 <dwt_configuresleep>:
 * output parameters
 *
 * no return value
 */
void dwt_configuresleep(uint16 mode, uint8 wake)
{
 80023f4:	b510      	push	{r4, lr}
 80023f6:	000c      	movs	r4, r1
    // Add predefined sleep settings before writing the mode
    mode |= pdw1000local->sleep_mode;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <dwt_configuresleep+0x20>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	8ada      	ldrh	r2, [r3, #22]
 80023fe:	4302      	orrs	r2, r0
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, mode);
 8002400:	2100      	movs	r1, #0
 8002402:	202c      	movs	r0, #44	@ 0x2c
 8002404:	f7ff ff97 	bl	8002336 <dwt_write16bitoffsetreg>

    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, wake);
 8002408:	0022      	movs	r2, r4
 800240a:	2106      	movs	r1, #6
 800240c:	202c      	movs	r0, #44	@ 0x2c
 800240e:	f7ff ff86 	bl	800231e <dwt_write8bitoffsetreg>
}
 8002412:	bd10      	pop	{r4, pc}
 8002414:	20000010 	.word	0x20000010

08002418 <dwt_entersleepaftertx>:
 * output parameters
 *
 * no return value
 */
void dwt_entersleepaftertx(int enable)
{
 8002418:	b510      	push	{r4, lr}
 800241a:	0004      	movs	r4, r0
    uint32 reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 800241c:	2104      	movs	r1, #4
 800241e:	2036      	movs	r0, #54	@ 0x36
 8002420:	f7ff ff46 	bl	80022b0 <dwt_read32bitoffsetreg>
 8002424:	0002      	movs	r2, r0
    // Set the auto TX -> sleep bit
    if(enable)
 8002426:	2c00      	cmp	r4, #0
 8002428:	d007      	beq.n	800243a <dwt_entersleepaftertx+0x22>
    {
        reg |= PMSC_CTRL1_ATXSLP;
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	431a      	orrs	r2, r3
    }
    else
    {
        reg &= ~(PMSC_CTRL1_ATXSLP);
    }
    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 8002430:	2104      	movs	r1, #4
 8002432:	2036      	movs	r0, #54	@ 0x36
 8002434:	f7ff ff8d 	bl	8002352 <dwt_write32bitoffsetreg>
}
 8002438:	bd10      	pop	{r4, pc}
        reg &= ~(PMSC_CTRL1_ATXSLP);
 800243a:	4b01      	ldr	r3, [pc, #4]	@ (8002440 <dwt_entersleepaftertx+0x28>)
 800243c:	401a      	ands	r2, r3
 800243e:	e7f7      	b.n	8002430 <dwt_entersleepaftertx+0x18>
 8002440:	fffff7ff 	.word	0xfffff7ff

08002444 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002444:	b510      	push	{r4, lr}
 8002446:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8002448:	226d      	movs	r2, #109	@ 0x6d
 800244a:	4909      	ldr	r1, [pc, #36]	@ (8002470 <_dwt_configlde+0x2c>)
 800244c:	202e      	movs	r0, #46	@ 0x2e
 800244e:	f7ff ff66 	bl	800231e <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002452:	2c00      	cmp	r4, #0
 8002454:	d005      	beq.n	8002462 <_dwt_configlde+0x1e>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8002456:	4a07      	ldr	r2, [pc, #28]	@ (8002474 <_dwt_configlde+0x30>)
 8002458:	4907      	ldr	r1, [pc, #28]	@ (8002478 <_dwt_configlde+0x34>)
 800245a:	202e      	movs	r0, #46	@ 0x2e
 800245c:	f7ff ff6b 	bl	8002336 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8002460:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8002462:	4a06      	ldr	r2, [pc, #24]	@ (800247c <_dwt_configlde+0x38>)
 8002464:	4904      	ldr	r1, [pc, #16]	@ (8002478 <_dwt_configlde+0x34>)
 8002466:	202e      	movs	r0, #46	@ 0x2e
 8002468:	f7ff ff65 	bl	8002336 <dwt_write16bitoffsetreg>
}
 800246c:	e7f8      	b.n	8002460 <_dwt_configlde+0x1c>
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	00000806 	.word	0x00000806
 8002474:	00000607 	.word	0x00000607
 8002478:	00001806 	.word	0x00001806
 800247c:	00001607 	.word	0x00001607

08002480 <dwt_configure>:
{
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002482:	46ce      	mov	lr, r9
 8002484:	4647      	mov	r7, r8
 8002486:	b580      	push	{r7, lr}
 8002488:	0004      	movs	r4, r0
    uint8 chan = config->chan ;
 800248a:	7806      	ldrb	r6, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800248c:	7942      	ldrb	r2, [r0, #5]
 800248e:	4b7f      	ldr	r3, [pc, #508]	@ (800268c <dwt_configure+0x20c>)
 8002490:	0052      	lsls	r2, r2, #1
 8002492:	5ad7      	ldrh	r7, [r2, r3]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8002494:	7845      	ldrb	r5, [r0, #1]
 8002496:	3d01      	subs	r5, #1
 8002498:	b2ed      	uxtb	r5, r5
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800249a:	2e04      	cmp	r6, #4
 800249c:	d100      	bne.n	80024a0 <dwt_configure+0x20>
 800249e:	e0d0      	b.n	8002642 <dwt_configure+0x1c2>
 80024a0:	2e07      	cmp	r6, #7
 80024a2:	d100      	bne.n	80024a6 <dwt_configure+0x26>
 80024a4:	e0ca      	b.n	800263c <dwt_configure+0x1bc>
 80024a6:	2300      	movs	r3, #0
 80024a8:	4698      	mov	r8, r3
    if(DWT_BR_110K == config->dataRate)
 80024aa:	79e3      	ldrb	r3, [r4, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d000      	beq.n	80024b2 <dwt_configure+0x32>
 80024b0:	e0ca      	b.n	8002648 <dwt_configure+0x1c8>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80024b2:	4b77      	ldr	r3, [pc, #476]	@ (8002690 <dwt_configure+0x210>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	6911      	ldr	r1, [r2, #16]
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	03db      	lsls	r3, r3, #15
 80024bc:	430b      	orrs	r3, r1
 80024be:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80024c0:	08ff      	lsrs	r7, r7, #3
    pdw1000local->longFrames = config->phrMode ;
 80024c2:	4b73      	ldr	r3, [pc, #460]	@ (8002690 <dwt_configure+0x210>)
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	7a23      	ldrb	r3, [r4, #8]
 80024c8:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80024ca:	690a      	ldr	r2, [r1, #16]
 80024cc:	4b71      	ldr	r3, [pc, #452]	@ (8002694 <dwt_configure+0x214>)
 80024ce:	401a      	ands	r2, r3
 80024d0:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80024d2:	7a23      	ldrb	r3, [r4, #8]
 80024d4:	041b      	lsls	r3, r3, #16
 80024d6:	20c0      	movs	r0, #192	@ 0xc0
 80024d8:	0280      	lsls	r0, r0, #10
 80024da:	4003      	ands	r3, r0
 80024dc:	431a      	orrs	r2, r3
 80024de:	610a      	str	r2, [r1, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80024e0:	2100      	movs	r1, #0
 80024e2:	2004      	movs	r0, #4
 80024e4:	f7ff ff35 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80024e8:	003a      	movs	r2, r7
 80024ea:	496b      	ldr	r1, [pc, #428]	@ (8002698 <dwt_configure+0x218>)
 80024ec:	202e      	movs	r0, #46	@ 0x2e
 80024ee:	f7ff ff22 	bl	8002336 <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 80024f2:	0028      	movs	r0, r5
 80024f4:	f7ff ffa6 	bl	8002444 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 80024f8:	4b68      	ldr	r3, [pc, #416]	@ (800269c <dwt_configure+0x21c>)
 80024fa:	5d9b      	ldrb	r3, [r3, r6]
 80024fc:	4699      	mov	r9, r3
 80024fe:	4b68      	ldr	r3, [pc, #416]	@ (80026a0 <dwt_configure+0x220>)
 8002500:	464a      	mov	r2, r9
 8002502:	0097      	lsls	r7, r2, #2
 8002504:	58fa      	ldr	r2, [r7, r3]
 8002506:	2107      	movs	r1, #7
 8002508:	202b      	movs	r0, #43	@ 0x2b
 800250a:	f7ff ff22 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800250e:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <dwt_configure+0x224>)
 8002510:	464a      	mov	r2, r9
 8002512:	5c9a      	ldrb	r2, [r3, r2]
 8002514:	210b      	movs	r1, #11
 8002516:	202b      	movs	r0, #43	@ 0x2b
 8002518:	f7ff ff01 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800251c:	4b62      	ldr	r3, [pc, #392]	@ (80026a8 <dwt_configure+0x228>)
 800251e:	4642      	mov	r2, r8
 8002520:	5c9a      	ldrb	r2, [r3, r2]
 8002522:	210b      	movs	r1, #11
 8002524:	2028      	movs	r0, #40	@ 0x28
 8002526:	f7ff fefa 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800252a:	4b60      	ldr	r3, [pc, #384]	@ (80026ac <dwt_configure+0x22c>)
 800252c:	58fa      	ldr	r2, [r7, r3]
 800252e:	210c      	movs	r1, #12
 8002530:	2028      	movs	r0, #40	@ 0x28
 8002532:	f7ff ff0e 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8002536:	79e3      	ldrb	r3, [r4, #7]
 8002538:	79a1      	ldrb	r1, [r4, #6]
 800253a:	4a5d      	ldr	r2, [pc, #372]	@ (80026b0 <dwt_configure+0x230>)
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	185b      	adds	r3, r3, r1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	5a9a      	ldrh	r2, [r3, r2]
 8002544:	2102      	movs	r1, #2
 8002546:	2027      	movs	r0, #39	@ 0x27
 8002548:	f7ff fef5 	bl	8002336 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <dwt_configure+0x234>)
 800254e:	006a      	lsls	r2, r5, #1
 8002550:	5ad2      	ldrh	r2, [r2, r3]
 8002552:	2104      	movs	r1, #4
 8002554:	2027      	movs	r0, #39	@ 0x27
 8002556:	f7ff feee 	bl	8002336 <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 800255a:	79e3      	ldrb	r3, [r4, #7]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d100      	bne.n	8002562 <dwt_configure+0xe2>
 8002560:	e079      	b.n	8002656 <dwt_configure+0x1d6>
        if(config->txPreambLength == DWT_PLEN_64)
 8002562:	78a3      	ldrb	r3, [r4, #2]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d100      	bne.n	800256a <dwt_configure+0xea>
 8002568:	e07b      	b.n	8002662 <dwt_configure+0x1e2>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800256a:	2220      	movs	r2, #32
 800256c:	2106      	movs	r1, #6
 800256e:	2027      	movs	r0, #39	@ 0x27
 8002570:	f7ff fee1 	bl	8002336 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002574:	2228      	movs	r2, #40	@ 0x28
 8002576:	2126      	movs	r1, #38	@ 0x26
 8002578:	2027      	movs	r0, #39	@ 0x27
 800257a:	f7ff fed0 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800257e:	78e1      	ldrb	r1, [r4, #3]
 8002580:	4a4d      	ldr	r2, [pc, #308]	@ (80026b8 <dwt_configure+0x238>)
 8002582:	00ab      	lsls	r3, r5, #2
 8002584:	185b      	adds	r3, r3, r1
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	589a      	ldr	r2, [r3, r2]
 800258a:	2108      	movs	r1, #8
 800258c:	2027      	movs	r0, #39	@ 0x27
 800258e:	f7ff fee0 	bl	8002352 <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 8002592:	8963      	ldrh	r3, [r4, #10]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <dwt_configure+0x11c>
        config->sfdTO = DWT_SFDTOC_DEF;
 8002598:	4b48      	ldr	r3, [pc, #288]	@ (80026bc <dwt_configure+0x23c>)
 800259a:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800259c:	8962      	ldrh	r2, [r4, #10]
 800259e:	2120      	movs	r1, #32
 80025a0:	2027      	movs	r0, #39	@ 0x27
 80025a2:	f7ff fec8 	bl	8002336 <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80025a6:	4f46      	ldr	r7, [pc, #280]	@ (80026c0 <dwt_configure+0x240>)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	210c      	movs	r1, #12
 80025ac:	2023      	movs	r0, #35	@ 0x23
 80025ae:	f7ff fed0 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80025b2:	006d      	lsls	r5, r5, #1
 80025b4:	197f      	adds	r7, r7, r5
 80025b6:	88ba      	ldrh	r2, [r7, #4]
 80025b8:	2104      	movs	r1, #4
 80025ba:	2023      	movs	r0, #35	@ 0x23
 80025bc:	f7ff febb 	bl	8002336 <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 80025c0:	79a3      	ldrb	r3, [r4, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d158      	bne.n	8002678 <dwt_configure+0x1f8>
    uint8 useDWnsSFD = 0;
 80025c6:	0019      	movs	r1, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80025c8:	220f      	movs	r2, #15
 80025ca:	4032      	ands	r2, r6
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80025cc:	0136      	lsls	r6, r6, #4
 80025ce:	20ff      	movs	r0, #255	@ 0xff
 80025d0:	4030      	ands	r0, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80025d2:	4302      	orrs	r2, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80025d4:	7860      	ldrb	r0, [r4, #1]
 80025d6:	0480      	lsls	r0, r0, #18
 80025d8:	25c0      	movs	r5, #192	@ 0xc0
 80025da:	032d      	lsls	r5, r5, #12
 80025dc:	4028      	ands	r0, r5
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80025de:	4302      	orrs	r2, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	20c0      	movs	r0, #192	@ 0xc0
 80025e4:	0380      	lsls	r0, r0, #14
 80025e6:	4003      	ands	r3, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80025e8:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80025ea:	044b      	lsls	r3, r1, #17
 80025ec:	2180      	movs	r1, #128	@ 0x80
 80025ee:	0289      	lsls	r1, r1, #10
 80025f0:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80025f2:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 80025f4:	7923      	ldrb	r3, [r4, #4]
 80025f6:	059b      	lsls	r3, r3, #22
 80025f8:	21f8      	movs	r1, #248	@ 0xf8
 80025fa:	04c9      	lsls	r1, r1, #19
 80025fc:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80025fe:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8002600:	7963      	ldrb	r3, [r4, #5]
 8002602:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002604:	431a      	orrs	r2, r3
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8002606:	2100      	movs	r1, #0
 8002608:	201f      	movs	r0, #31
 800260a:	f7ff fea2 	bl	8002352 <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800260e:	78a2      	ldrb	r2, [r4, #2]
 8002610:	7863      	ldrb	r3, [r4, #1]
 8002612:	431a      	orrs	r2, r3
 8002614:	0412      	lsls	r2, r2, #16
 8002616:	79e3      	ldrb	r3, [r4, #7]
 8002618:	035b      	lsls	r3, r3, #13
 800261a:	491d      	ldr	r1, [pc, #116]	@ (8002690 <dwt_configure+0x210>)
 800261c:	6809      	ldr	r1, [r1, #0]
 800261e:	431a      	orrs	r2, r3
 8002620:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8002622:	2100      	movs	r1, #0
 8002624:	2008      	movs	r0, #8
 8002626:	f7ff fe94 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800262a:	2242      	movs	r2, #66	@ 0x42
 800262c:	2100      	movs	r1, #0
 800262e:	200d      	movs	r0, #13
 8002630:	f7ff fe75 	bl	800231e <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8002634:	bcc0      	pop	{r6, r7}
 8002636:	46b9      	mov	r9, r7
 8002638:	46b0      	mov	r8, r6
 800263a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800263c:	2301      	movs	r3, #1
 800263e:	4698      	mov	r8, r3
 8002640:	e733      	b.n	80024aa <dwt_configure+0x2a>
 8002642:	2301      	movs	r3, #1
 8002644:	4698      	mov	r8, r3
 8002646:	e730      	b.n	80024aa <dwt_configure+0x2a>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <dwt_configure+0x210>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	6913      	ldr	r3, [r2, #16]
 800264e:	491d      	ldr	r1, [pc, #116]	@ (80026c4 <dwt_configure+0x244>)
 8002650:	400b      	ands	r3, r1
 8002652:	6113      	str	r3, [r2, #16]
 8002654:	e735      	b.n	80024c2 <dwt_configure+0x42>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8002656:	2264      	movs	r2, #100	@ 0x64
 8002658:	2106      	movs	r1, #6
 800265a:	2027      	movs	r0, #39	@ 0x27
 800265c:	f7ff fe6b 	bl	8002336 <dwt_write16bitoffsetreg>
 8002660:	e78d      	b.n	800257e <dwt_configure+0xfe>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8002662:	2210      	movs	r2, #16
 8002664:	2106      	movs	r1, #6
 8002666:	2027      	movs	r0, #39	@ 0x27
 8002668:	f7ff fe65 	bl	8002336 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800266c:	2210      	movs	r2, #16
 800266e:	2126      	movs	r1, #38	@ 0x26
 8002670:	2027      	movs	r0, #39	@ 0x27
 8002672:	f7ff fe54 	bl	800231e <dwt_write8bitoffsetreg>
 8002676:	e782      	b.n	800257e <dwt_configure+0xfe>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8002678:	79e3      	ldrb	r3, [r4, #7]
 800267a:	4a13      	ldr	r2, [pc, #76]	@ (80026c8 <dwt_configure+0x248>)
 800267c:	5cd2      	ldrb	r2, [r2, r3]
 800267e:	2100      	movs	r1, #0
 8002680:	2021      	movs	r0, #33	@ 0x21
 8002682:	f7ff fe4c 	bl	800231e <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 8002686:	2101      	movs	r1, #1
        nsSfd_result = 3 ;
 8002688:	2303      	movs	r3, #3
 800268a:	e79d      	b.n	80025c8 <dwt_configure+0x148>
 800268c:	0800517c 	.word	0x0800517c
 8002690:	20000010 	.word	0x20000010
 8002694:	fffcffff 	.word	0xfffcffff
 8002698:	00002804 	.word	0x00002804
 800269c:	08005228 	.word	0x08005228
 80026a0:	080051f8 	.word	0x080051f8
 80026a4:	080051f0 	.word	0x080051f0
 80026a8:	080051ec 	.word	0x080051ec
 80026ac:	08005210 	.word	0x08005210
 80026b0:	080051d4 	.word	0x080051d4
 80026b4:	080051d0 	.word	0x080051d0
 80026b8:	080051b0 	.word	0x080051b0
 80026bc:	00001041 	.word	0x00001041
 80026c0:	080051e4 	.word	0x080051e4
 80026c4:	ffbfffff 	.word	0xffbfffff
 80026c8:	080051e0 	.word	0x080051e0

080026cc <dwt_setsmarttxpower>:
 * output parameters
 *
 * no return value
 */
void dwt_setsmarttxpower(int enable)
{
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	0004      	movs	r4, r0
    // Config system register
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <dwt_setsmarttxpower+0x44>)
 80026d2:	681d      	ldr	r5, [r3, #0]
 80026d4:	2100      	movs	r1, #0
 80026d6:	2004      	movs	r0, #4
 80026d8:	f7ff fdea 	bl	80022b0 <dwt_read32bitoffsetreg>
 80026dc:	6128      	str	r0, [r5, #16]

    // Disable smart power configuration
    if(enable)
 80026de:	2c00      	cmp	r4, #0
 80026e0:	d00d      	beq.n	80026fe <dwt_setsmarttxpower+0x32>
    {
        pdw1000local->sysCFGreg &= ~(SYS_CFG_DIS_STXP) ;
 80026e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <dwt_setsmarttxpower+0x44>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	6913      	ldr	r3, [r2, #16]
 80026e8:	490a      	ldr	r1, [pc, #40]	@ (8002714 <dwt_setsmarttxpower+0x48>)
 80026ea:	400b      	ands	r3, r1
 80026ec:	6113      	str	r3, [r2, #16]
    else
    {
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <dwt_setsmarttxpower+0x44>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	2100      	movs	r1, #0
 80026f6:	2004      	movs	r0, #4
 80026f8:	f7ff fe2b 	bl	8002352 <dwt_write32bitoffsetreg>
}
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
 80026fe:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <dwt_setsmarttxpower+0x44>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	6911      	ldr	r1, [r2, #16]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	02db      	lsls	r3, r3, #11
 8002708:	430b      	orrs	r3, r1
 800270a:	6113      	str	r3, [r2, #16]
 800270c:	e7ef      	b.n	80026ee <dwt_setsmarttxpower+0x22>
 800270e:	46c0      	nop			@ (mov r8, r8)
 8002710:	20000010 	.word	0x20000010
 8002714:	fffbffff 	.word	0xfffbffff

08002718 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 8002718:	b510      	push	{r4, lr}
    pdw1000local->cbTxDone = cbTxDone;
 800271a:	4c03      	ldr	r4, [pc, #12]	@ (8002728 <dwt_setcallbacks+0x10>)
 800271c:	6824      	ldr	r4, [r4, #0]
 800271e:	62a0      	str	r0, [r4, #40]	@ 0x28
    pdw1000local->cbRxOk = cbRxOk;
 8002720:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 8002722:	6322      	str	r2, [r4, #48]	@ 0x30
    pdw1000local->cbRxErr = cbRxErr;
 8002724:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8002726:	bd10      	pop	{r4, pc}
 8002728:	20000010 	.word	0x20000010

0800272c <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	0004      	movs	r4, r0
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8002730:	07c3      	lsls	r3, r0, #31
 8002732:	d52e      	bpl.n	8002792 <dwt_setleds+0x66>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8002734:	2100      	movs	r1, #0
 8002736:	2026      	movs	r0, #38	@ 0x26
 8002738:	f7ff fdba 	bl	80022b0 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <dwt_setleds+0x7c>)
 800273e:	4018      	ands	r0, r3
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8002740:	22a0      	movs	r2, #160	@ 0xa0
 8002742:	0152      	lsls	r2, r2, #5
 8002744:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8002746:	2100      	movs	r1, #0
 8002748:	2026      	movs	r0, #38	@ 0x26
 800274a:	f7ff fe02 	bl	8002352 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 800274e:	2100      	movs	r1, #0
 8002750:	2036      	movs	r0, #54	@ 0x36
 8002752:	f7ff fdad 	bl	80022b0 <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 8002756:	2284      	movs	r2, #132	@ 0x84
 8002758:	0412      	lsls	r2, r2, #16
 800275a:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 800275c:	2100      	movs	r1, #0
 800275e:	2036      	movs	r0, #54	@ 0x36
 8002760:	f7ff fdf7 	bl	8002352 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8002764:	2302      	movs	r3, #2
 8002766:	001d      	movs	r5, r3
 8002768:	4025      	ands	r5, r4
 800276a:	4223      	tst	r3, r4
 800276c:	d10f      	bne.n	800278e <dwt_setleds+0x62>
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 800276e:	2488      	movs	r4, #136	@ 0x88
 8002770:	0064      	lsls	r4, r4, #1
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8002772:	0022      	movs	r2, r4
 8002774:	2128      	movs	r1, #40	@ 0x28
 8002776:	2036      	movs	r0, #54	@ 0x36
 8002778:	f7ff fdeb 	bl	8002352 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 800277c:	2d00      	cmp	r5, #0
 800277e:	d012      	beq.n	80027a6 <dwt_setleds+0x7a>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8002780:	4a0a      	ldr	r2, [pc, #40]	@ (80027ac <dwt_setleds+0x80>)
 8002782:	4022      	ands	r2, r4
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8002784:	2128      	movs	r1, #40	@ 0x28
 8002786:	2036      	movs	r0, #54	@ 0x36
 8002788:	f7ff fde3 	bl	8002352 <dwt_write32bitoffsetreg>
 800278c:	e00b      	b.n	80027a6 <dwt_setleds+0x7a>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 800278e:	4c08      	ldr	r4, [pc, #32]	@ (80027b0 <dwt_setleds+0x84>)
 8002790:	e7ef      	b.n	8002772 <dwt_setleds+0x46>
        }
    }
    else
    {
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8002792:	2100      	movs	r1, #0
 8002794:	2026      	movs	r0, #38	@ 0x26
 8002796:	f7ff fd8b 	bl	80022b0 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800279a:	4a03      	ldr	r2, [pc, #12]	@ (80027a8 <dwt_setleds+0x7c>)
 800279c:	4002      	ands	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 800279e:	2100      	movs	r1, #0
 80027a0:	2026      	movs	r0, #38	@ 0x26
 80027a2:	f7ff fdd6 	bl	8002352 <dwt_write32bitoffsetreg>
    }
}
 80027a6:	bd70      	pop	{r4, r5, r6, pc}
 80027a8:	ffffc3ff 	.word	0xffffc3ff
 80027ac:	fff0ffff 	.word	0xfff0ffff
 80027b0:	000f0110 	.word	0x000f0110

080027b4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 80027b4:	b510      	push	{r4, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	0004      	movs	r4, r0
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 80027ba:	ab01      	add	r3, sp, #4
 80027bc:	2202      	movs	r2, #2
 80027be:	2100      	movs	r1, #0
 80027c0:	2036      	movs	r0, #54	@ 0x36
 80027c2:	f7ff fd55 	bl	8002270 <dwt_readfromdevice>
    switch(clocks)
 80027c6:	2c0e      	cmp	r4, #14
 80027c8:	d80a      	bhi.n	80027e0 <_dwt_enableclocks+0x2c>
 80027ca:	00a4      	lsls	r4, r4, #2
 80027cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002880 <_dwt_enableclocks+0xcc>)
 80027ce:	591b      	ldr	r3, [r3, r4]
 80027d0:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80027d2:	ab01      	add	r3, sp, #4
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 80027d8:	785a      	ldrb	r2, [r3, #1]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	705a      	strb	r2, [r3, #1]
        break;
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80027e0:	ab01      	add	r3, sp, #4
 80027e2:	2201      	movs	r2, #1
 80027e4:	2100      	movs	r1, #0
 80027e6:	2036      	movs	r0, #54	@ 0x36
 80027e8:	f7ff fd0e 	bl	8002208 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 80027ec:	466b      	mov	r3, sp
 80027ee:	3305      	adds	r3, #5
 80027f0:	2201      	movs	r2, #1
 80027f2:	2101      	movs	r1, #1
 80027f4:	2036      	movs	r0, #54	@ 0x36
 80027f6:	f7ff fd07 	bl	8002208 <dwt_writetodevice>

} // end _dwt_enableclocks()
 80027fa:	b002      	add	sp, #8
 80027fc:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
 80027fe:	aa01      	add	r2, sp, #4
 8002800:	7813      	ldrb	r3, [r2, #0]
 8002802:	2103      	movs	r1, #3
 8002804:	438b      	bics	r3, r1
 8002806:	2101      	movs	r1, #1
 8002808:	430b      	orrs	r3, r1
 800280a:	7013      	strb	r3, [r2, #0]
        break;
 800280c:	e7e8      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800280e:	aa01      	add	r2, sp, #4
 8002810:	7813      	ldrb	r3, [r2, #0]
 8002812:	2103      	movs	r1, #3
 8002814:	438b      	bics	r3, r1
 8002816:	2102      	movs	r1, #2
 8002818:	430b      	orrs	r3, r1
 800281a:	7013      	strb	r3, [r2, #0]
        break;
 800281c:	e7e0      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800281e:	aa01      	add	r2, sp, #4
 8002820:	7813      	ldrb	r3, [r2, #0]
 8002822:	214c      	movs	r1, #76	@ 0x4c
 8002824:	438b      	bics	r3, r1
 8002826:	2148      	movs	r1, #72	@ 0x48
 8002828:	430b      	orrs	r3, r1
 800282a:	7013      	strb	r3, [r2, #0]
            reg[1] = 0x80 | reg[1];
 800282c:	7851      	ldrb	r1, [r2, #1]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	425b      	negs	r3, r3
 8002832:	430b      	orrs	r3, r1
 8002834:	7053      	strb	r3, [r2, #1]
        break;
 8002836:	e7d3      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[0] = reg[0] & 0xb3;
 8002838:	ab01      	add	r3, sp, #4
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	214c      	movs	r1, #76	@ 0x4c
 800283e:	438a      	bics	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8002842:	7859      	ldrb	r1, [r3, #1]
 8002844:	227f      	movs	r2, #127	@ 0x7f
 8002846:	400a      	ands	r2, r1
 8002848:	705a      	strb	r2, [r3, #1]
        break;
 800284a:	e7c9      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[1] = 0x02 | reg[1];
 800284c:	aa01      	add	r2, sp, #4
 800284e:	7853      	ldrb	r3, [r2, #1]
 8002850:	2102      	movs	r1, #2
 8002852:	430b      	orrs	r3, r1
 8002854:	7053      	strb	r3, [r2, #1]
        break;
 8002856:	e7c3      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[1] = reg[1] & 0xfd;
 8002858:	aa01      	add	r2, sp, #4
 800285a:	7853      	ldrb	r3, [r2, #1]
 800285c:	2102      	movs	r1, #2
 800285e:	438b      	bics	r3, r1
 8002860:	7053      	strb	r3, [r2, #1]
        break;
 8002862:	e7bd      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002864:	aa01      	add	r2, sp, #4
 8002866:	7813      	ldrb	r3, [r2, #0]
 8002868:	2130      	movs	r1, #48	@ 0x30
 800286a:	438b      	bics	r3, r1
 800286c:	2120      	movs	r1, #32
 800286e:	430b      	orrs	r3, r1
 8002870:	7013      	strb	r3, [r2, #0]
        break;
 8002872:	e7b5      	b.n	80027e0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x01;
 8002874:	ab01      	add	r3, sp, #4
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800287a:	3202      	adds	r2, #2
 800287c:	705a      	strb	r2, [r3, #1]
        break;
 800287e:	e7af      	b.n	80027e0 <_dwt_enableclocks+0x2c>
 8002880:	08005140 	.word	0x08005140

08002884 <dwt_otpread>:
{
 8002884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002886:	46c6      	mov	lr, r8
 8002888:	b500      	push	{lr}
 800288a:	4680      	mov	r8, r0
 800288c:	000f      	movs	r7, r1
 800288e:	0016      	movs	r6, r2
    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: Set system clock to XTAL - this is necessary to make sure the values read by _dwt_otpread are reliable
 8002890:	2000      	movs	r0, #0
 8002892:	f7ff ff8f 	bl	80027b4 <_dwt_enableclocks>
    for(i=0; i<length; i++)
 8002896:	2400      	movs	r4, #0
 8002898:	e008      	b.n	80028ac <dwt_otpread+0x28>
        array[i] = _dwt_otpread(address + i) ;
 800289a:	00a5      	lsls	r5, r4, #2
 800289c:	197d      	adds	r5, r7, r5
 800289e:	4643      	mov	r3, r8
 80028a0:	1918      	adds	r0, r3, r4
 80028a2:	b280      	uxth	r0, r0
 80028a4:	f7ff fd84 	bl	80023b0 <_dwt_otpread>
 80028a8:	6028      	str	r0, [r5, #0]
    for(i=0; i<length; i++)
 80028aa:	3401      	adds	r4, #1
 80028ac:	42a6      	cmp	r6, r4
 80028ae:	dcf4      	bgt.n	800289a <dwt_otpread+0x16>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Restore system clock to PLL
 80028b0:	2001      	movs	r0, #1
 80028b2:	f7ff ff7f 	bl	80027b4 <_dwt_enableclocks>
}
 80028b6:	bc80      	pop	{r7}
 80028b8:	46b8      	mov	r8, r7
 80028ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028bc <_dwt_loaducodefromrom>:
{
 80028bc:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_LDE);
 80028be:	200e      	movs	r0, #14
 80028c0:	f7ff ff78 	bl	80027b4 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	0212      	lsls	r2, r2, #8
 80028c8:	2106      	movs	r1, #6
 80028ca:	202d      	movs	r0, #45	@ 0x2d
 80028cc:	f7ff fd33 	bl	8002336 <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fe fca3 	bl	800121c <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80028d6:	2001      	movs	r0, #1
 80028d8:	f7ff ff6c 	bl	80027b4 <_dwt_enableclocks>
}
 80028dc:	bd10      	pop	{r4, pc}

080028de <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80028de:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7ff ff67 	bl	80027b4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80028e6:	2200      	movs	r2, #0
 80028e8:	2104      	movs	r1, #4
 80028ea:	2036      	movs	r0, #54	@ 0x36
 80028ec:	f7ff fd23 	bl	8002336 <dwt_write16bitoffsetreg>
}
 80028f0:	bd10      	pop	{r4, pc}

080028f2 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 80028f2:	b510      	push	{r4, lr}
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80028f4:	2103      	movs	r1, #3
 80028f6:	200f      	movs	r0, #15
 80028f8:	f7ff fd04 	bl	8002304 <dwt_read8bitoffsetreg>

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 80028fc:	0043      	lsls	r3, r0, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 80028fe:	4058      	eors	r0, r3
 8002900:	0600      	lsls	r0, r0, #24
 8002902:	d400      	bmi.n	8002906 <dwt_syncrxbufptrs+0x14>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 8002904:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002906:	2201      	movs	r2, #1
 8002908:	2103      	movs	r1, #3
 800290a:	200d      	movs	r0, #13
 800290c:	f7ff fd07 	bl	800231e <dwt_write8bitoffsetreg>
}
 8002910:	e7f8      	b.n	8002904 <dwt_syncrxbufptrs+0x12>
	...

08002914 <dwt_forcetrxoff>:
{
 8002914:	b570      	push	{r4, r5, r6, lr}
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8002916:	2100      	movs	r1, #0
 8002918:	200e      	movs	r0, #14
 800291a:	f7ff fcc9 	bl	80022b0 <dwt_read32bitoffsetreg>
 800291e:	0005      	movs	r5, r0
    stat = decamutexon() ;
 8002920:	f7fe fe3c 	bl	800159c <decamutexon>
 8002924:	0004      	movs	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	200e      	movs	r0, #14
 800292c:	f7ff fd11 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8002930:	2240      	movs	r2, #64	@ 0x40
 8002932:	2100      	movs	r1, #0
 8002934:	200d      	movs	r0, #13
 8002936:	f7ff fcf2 	bl	800231e <dwt_write8bitoffsetreg>
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 800293a:	4a0a      	ldr	r2, [pc, #40]	@ (8002964 <dwt_forcetrxoff+0x50>)
 800293c:	2100      	movs	r1, #0
 800293e:	200f      	movs	r0, #15
 8002940:	f7ff fd07 	bl	8002352 <dwt_write32bitoffsetreg>
    dwt_syncrxbufptrs();
 8002944:	f7ff ffd5 	bl	80028f2 <dwt_syncrxbufptrs>
    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8002948:	002a      	movs	r2, r5
 800294a:	2100      	movs	r1, #0
 800294c:	200e      	movs	r0, #14
 800294e:	f7ff fd00 	bl	8002352 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 8002952:	0020      	movs	r0, r4
 8002954:	f7fe fe24 	bl	80015a0 <decamutexoff>
    pdw1000local->wait4resp = 0;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <dwt_forcetrxoff+0x54>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	755a      	strb	r2, [r3, #21]
} // end deviceforcetrxoff()
 8002960:	bd70      	pop	{r4, r5, r6, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	2427fff8 	.word	0x2427fff8
 8002968:	20000010 	.word	0x20000010

0800296c <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 800296c:	b510      	push	{r4, lr}
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 800296e:	22e0      	movs	r2, #224	@ 0xe0
 8002970:	2103      	movs	r1, #3
 8002972:	2036      	movs	r0, #54	@ 0x36
 8002974:	f7ff fcd3 	bl	800231e <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002978:	22f0      	movs	r2, #240	@ 0xf0
 800297a:	2103      	movs	r1, #3
 800297c:	2036      	movs	r0, #54	@ 0x36
 800297e:	f7ff fcce 	bl	800231e <dwt_write8bitoffsetreg>
}
 8002982:	bd10      	pop	{r4, pc}

08002984 <dwt_isr>:
{
 8002984:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 8002986:	4b53      	ldr	r3, [pc, #332]	@ (8002ad4 <dwt_isr+0x150>)
 8002988:	681d      	ldr	r5, [r3, #0]
 800298a:	2100      	movs	r1, #0
 800298c:	200f      	movs	r0, #15
 800298e:	f7ff fc8f 	bl	80022b0 <dwt_read32bitoffsetreg>
 8002992:	0004      	movs	r4, r0
 8002994:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
 8002996:	0443      	lsls	r3, r0, #17
 8002998:	d40a      	bmi.n	80029b0 <dwt_isr+0x2c>
    if(status & SYS_STATUS_TXFRS)
 800299a:	0623      	lsls	r3, r4, #24
 800299c:	d455      	bmi.n	8002a4a <dwt_isr+0xc6>
    if(status & SYS_STATUS_ALL_RX_TO)
 800299e:	2388      	movs	r3, #136	@ 0x88
 80029a0:	039b      	lsls	r3, r3, #14
 80029a2:	421c      	tst	r4, r3
 80029a4:	d16a      	bne.n	8002a7c <dwt_isr+0xf8>
    if(status & SYS_STATUS_ALL_RX_ERR)
 80029a6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad8 <dwt_isr+0x154>)
 80029a8:	421c      	tst	r4, r3
 80029aa:	d000      	beq.n	80029ae <dwt_isr+0x2a>
 80029ac:	e07c      	b.n	8002aa8 <dwt_isr+0x124>
}
 80029ae:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 80029b0:	22de      	movs	r2, #222	@ 0xde
 80029b2:	01d2      	lsls	r2, r2, #7
 80029b4:	2100      	movs	r1, #0
 80029b6:	200f      	movs	r0, #15
 80029b8:	f7ff fccb 	bl	8002352 <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
 80029bc:	4d45      	ldr	r5, [pc, #276]	@ (8002ad4 <dwt_isr+0x150>)
 80029be:	682a      	ldr	r2, [r5, #0]
 80029c0:	2324      	movs	r3, #36	@ 0x24
 80029c2:	2100      	movs	r1, #0
 80029c4:	54d1      	strb	r1, [r2, r3]
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 80029c6:	2010      	movs	r0, #16
 80029c8:	f7ff fc8c 	bl	80022e4 <dwt_read16bitoffsetreg>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 80029cc:	0582      	lsls	r2, r0, #22
 80029ce:	0d92      	lsrs	r2, r2, #22
        if(pdw1000local->longFrames == 0)
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	7a99      	ldrb	r1, [r3, #10]
 80029d4:	2900      	cmp	r1, #0
 80029d6:	d101      	bne.n	80029dc <dwt_isr+0x58>
            len &= RX_FINFO_RXFLEN_MASK;
 80029d8:	227f      	movs	r2, #127	@ 0x7f
 80029da:	4002      	ands	r2, r0
        pdw1000local->cbData.datalength = len;
 80029dc:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
 80029de:	0400      	lsls	r0, r0, #16
 80029e0:	d41f      	bmi.n	8002a22 <dwt_isr+0x9e>
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
 80029e2:	3322      	adds	r3, #34	@ 0x22
 80029e4:	2202      	movs	r2, #2
 80029e6:	2100      	movs	r1, #0
 80029e8:	2011      	movs	r0, #17
 80029ea:	f7ff fc41 	bl	8002270 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 80029ee:	0723      	lsls	r3, r4, #28
 80029f0:	d505      	bpl.n	80029fe <dwt_isr+0x7a>
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <dwt_isr+0x150>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2322      	movs	r3, #34	@ 0x22
 80029f8:	5cd3      	ldrb	r3, [r2, r3]
 80029fa:	069b      	lsls	r3, r3, #26
 80029fc:	d517      	bpl.n	8002a2e <dwt_isr+0xaa>
        if(pdw1000local->cbRxOk != NULL)
 80029fe:	4b35      	ldr	r3, [pc, #212]	@ (8002ad4 <dwt_isr+0x150>)
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <dwt_isr+0x88>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
 8002a08:	301c      	adds	r0, #28
 8002a0a:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
 8002a0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ad4 <dwt_isr+0x150>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	7d1b      	ldrb	r3, [r3, #20]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0c1      	beq.n	800299a <dwt_isr+0x16>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 8002a16:	2201      	movs	r2, #1
 8002a18:	2103      	movs	r1, #3
 8002a1a:	200d      	movs	r0, #13
 8002a1c:	f7ff fc7f 	bl	800231e <dwt_write8bitoffsetreg>
 8002a20:	e7bb      	b.n	800299a <dwt_isr+0x16>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8002a22:	2124      	movs	r1, #36	@ 0x24
 8002a24:	5c5a      	ldrb	r2, [r3, r1]
 8002a26:	2001      	movs	r0, #1
 8002a28:	4302      	orrs	r2, r0
 8002a2a:	545a      	strb	r2, [r3, r1]
 8002a2c:	e7d9      	b.n	80029e2 <dwt_isr+0x5e>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 8002a2e:	2208      	movs	r2, #8
 8002a30:	2100      	movs	r1, #0
 8002a32:	200f      	movs	r0, #15
 8002a34:	f7ff fc8d 	bl	8002352 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8002a38:	4b26      	ldr	r3, [pc, #152]	@ (8002ad4 <dwt_isr+0x150>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	2108      	movs	r1, #8
 8002a40:	438a      	bics	r2, r1
 8002a42:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 8002a44:	2200      	movs	r2, #0
 8002a46:	755a      	strb	r2, [r3, #21]
 8002a48:	e7d9      	b.n	80029fe <dwt_isr+0x7a>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 8002a4a:	22f8      	movs	r2, #248	@ 0xf8
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f7ff fc7f 	bl	8002352 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
 8002a54:	0723      	lsls	r3, r4, #28
 8002a56:	d504      	bpl.n	8002a62 <dwt_isr+0xde>
 8002a58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad4 <dwt_isr+0x150>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	7d5b      	ldrb	r3, [r3, #21]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <dwt_isr+0xee>
        if(pdw1000local->cbTxDone != NULL)
 8002a62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <dwt_isr+0x150>)
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d098      	beq.n	800299e <dwt_isr+0x1a>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
 8002a6c:	301c      	adds	r0, #28
 8002a6e:	4798      	blx	r3
 8002a70:	e795      	b.n	800299e <dwt_isr+0x1a>
            dwt_forcetrxoff(); // Turn the RX off
 8002a72:	f7ff ff4f 	bl	8002914 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 8002a76:	f7ff ff79 	bl	800296c <dwt_rxreset>
 8002a7a:	e7f2      	b.n	8002a62 <dwt_isr+0xde>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 8002a7c:	2280      	movs	r2, #128	@ 0x80
 8002a7e:	0292      	lsls	r2, r2, #10
 8002a80:	2100      	movs	r1, #0
 8002a82:	200f      	movs	r0, #15
 8002a84:	f7ff fc65 	bl	8002352 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8002a88:	4d12      	ldr	r5, [pc, #72]	@ (8002ad4 <dwt_isr+0x150>)
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 8002a90:	f7ff ff40 	bl	8002914 <dwt_forcetrxoff>
        dwt_rxreset();
 8002a94:	f7ff ff6a 	bl	800296c <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
 8002a98:	6828      	ldr	r0, [r5, #0]
 8002a9a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d100      	bne.n	8002aa2 <dwt_isr+0x11e>
 8002aa0:	e781      	b.n	80029a6 <dwt_isr+0x22>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
 8002aa2:	301c      	adds	r0, #28
 8002aa4:	4798      	blx	r3
 8002aa6:	e77e      	b.n	80029a6 <dwt_isr+0x22>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	2100      	movs	r1, #0
 8002aac:	200f      	movs	r0, #15
 8002aae:	f7ff fc50 	bl	8002352 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8002ab2:	4c08      	ldr	r4, [pc, #32]	@ (8002ad4 <dwt_isr+0x150>)
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 8002aba:	f7ff ff2b 	bl	8002914 <dwt_forcetrxoff>
        dwt_rxreset();
 8002abe:	f7ff ff55 	bl	800296c <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
 8002ac2:	6820      	ldr	r0, [r4, #0]
 8002ac4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d100      	bne.n	8002acc <dwt_isr+0x148>
 8002aca:	e770      	b.n	80029ae <dwt_isr+0x2a>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 8002acc:	301c      	adds	r0, #28
 8002ace:	4798      	blx	r3
}
 8002ad0:	e76d      	b.n	80029ae <dwt_isr+0x2a>
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	20000010 	.word	0x20000010
 8002ad8:	24059000 	.word	0x24059000

08002adc <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8002adc:	b510      	push	{r4, lr}
    _dwt_disablesequencing();
 8002ade:	f7ff fefe 	bl	80028de <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	202c      	movs	r0, #44	@ 0x2c
 8002ae8:	f7ff fc25 	bl	8002336 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8002aec:	2200      	movs	r2, #0
 8002aee:	2106      	movs	r1, #6
 8002af0:	202c      	movs	r0, #44	@ 0x2c
 8002af2:	f7ff fc14 	bl	800231e <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002af6:	f7ff fc70 	bl	80023da <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2103      	movs	r1, #3
 8002afe:	2036      	movs	r0, #54	@ 0x36
 8002b00:	f7ff fc0d 	bl	800231e <dwt_write8bitoffsetreg>
    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
//    deca_sleep(1);

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002b04:	22f0      	movs	r2, #240	@ 0xf0
 8002b06:	2103      	movs	r1, #3
 8002b08:	2036      	movs	r0, #54	@ 0x36
 8002b0a:	f7ff fc08 	bl	800231e <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8002b0e:	4b02      	ldr	r3, [pc, #8]	@ (8002b18 <dwt_softreset+0x3c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	755a      	strb	r2, [r3, #21]
}
 8002b16:	bd10      	pop	{r4, pc}
 8002b18:	20000010 	.word	0x20000010

08002b1c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8002b1c:	b510      	push	{r4, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8002b1e:	221f      	movs	r2, #31
 8002b20:	4002      	ands	r2, r0
 8002b22:	2360      	movs	r3, #96	@ 0x60
 8002b24:	431a      	orrs	r2, r3
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	210e      	movs	r1, #14
 8002b2a:	202b      	movs	r0, #43	@ 0x2b
 8002b2c:	f7ff fbf7 	bl	800231e <dwt_write8bitoffsetreg>
}
 8002b30:	bd10      	pop	{r4, pc}
	...

08002b34 <dwt_initialise>:
{
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	0004      	movs	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8002b38:	4b6c      	ldr	r3, [pc, #432]	@ (8002cec <dwt_initialise+0x1b8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8002b40:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8002b42:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
 8002b44:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8002b46:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8002b4a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002b4c:	f7ff fbc4 	bl	80022d8 <dwt_readdevid>
 8002b50:	4b67      	ldr	r3, [pc, #412]	@ (8002cf0 <dwt_initialise+0x1bc>)
 8002b52:	4298      	cmp	r0, r3
 8002b54:	d000      	beq.n	8002b58 <dwt_initialise+0x24>
 8002b56:	e0c6      	b.n	8002ce6 <dwt_initialise+0x1b2>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8002b58:	2302      	movs	r3, #2
 8002b5a:	001d      	movs	r5, r3
 8002b5c:	4025      	ands	r5, r4
 8002b5e:	4223      	tst	r3, r4
 8002b60:	d020      	beq.n	8002ba4 <dwt_initialise+0x70>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8002b62:	2d00      	cmp	r5, #0
 8002b64:	d002      	beq.n	8002b6c <dwt_initialise+0x38>
 8002b66:	23f8      	movs	r3, #248	@ 0xf8
 8002b68:	4223      	tst	r3, r4
 8002b6a:	d102      	bne.n	8002b72 <dwt_initialise+0x3e>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7ff fe21 	bl	80027b4 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8002b72:	2204      	movs	r2, #4
 8002b74:	2100      	movs	r1, #0
 8002b76:	2024      	movs	r0, #36	@ 0x24
 8002b78:	f7ff fbd1 	bl	800231e <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
 8002b7c:	2d00      	cmp	r5, #0
 8002b7e:	d121      	bne.n	8002bc4 <dwt_initialise+0x90>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002b80:	2004      	movs	r0, #4
 8002b82:	f7ff fc15 	bl	80023b0 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 8002b86:	23ff      	movs	r3, #255	@ 0xff
 8002b88:	4203      	tst	r3, r0
 8002b8a:	d10e      	bne.n	8002baa <dwt_initialise+0x76>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8002b8c:	2d00      	cmp	r5, #0
 8002b8e:	d028      	beq.n	8002be2 <dwt_initialise+0xae>
 8002b90:	230a      	movs	r3, #10
 8002b92:	4023      	ands	r3, r4
 8002b94:	2b0a      	cmp	r3, #10
 8002b96:	d024      	beq.n	8002be2 <dwt_initialise+0xae>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8002b98:	4b54      	ldr	r3, [pc, #336]	@ (8002cec <dwt_initialise+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	72da      	strb	r2, [r3, #11]
    uint16 otp_xtaltrim_and_rev = 0;
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	e026      	b.n	8002bf2 <dwt_initialise+0xbe>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8002ba4:	f7ff ff9a 	bl	8002adc <dwt_softreset>
 8002ba8:	e7db      	b.n	8002b62 <dwt_initialise+0x2e>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8002baa:	2202      	movs	r2, #2
 8002bac:	2112      	movs	r1, #18
 8002bae:	202d      	movs	r0, #45	@ 0x2d
 8002bb0:	f7ff fbb5 	bl	800231e <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8002bb4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cec <dwt_initialise+0x1b8>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	8ad1      	ldrh	r1, [r2, #22]
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	015b      	lsls	r3, r3, #5
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	82d3      	strh	r3, [r2, #22]
 8002bc2:	e7e3      	b.n	8002b8c <dwt_initialise+0x58>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8002bc4:	2130      	movs	r1, #48	@ 0x30
 8002bc6:	2028      	movs	r0, #40	@ 0x28
 8002bc8:	f7ff fb72 	bl	80022b0 <dwt_read32bitoffsetreg>
 8002bcc:	4b49      	ldr	r3, [pc, #292]	@ (8002cf4 <dwt_initialise+0x1c0>)
 8002bce:	4298      	cmp	r0, r3
 8002bd0:	d0dc      	beq.n	8002b8c <dwt_initialise+0x58>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8002bd2:	4b46      	ldr	r3, [pc, #280]	@ (8002cec <dwt_initialise+0x1b8>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	8ad1      	ldrh	r1, [r2, #22]
 8002bd8:	2380      	movs	r3, #128	@ 0x80
 8002bda:	015b      	lsls	r3, r3, #5
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	82d3      	strh	r3, [r2, #22]
 8002be0:	e7d4      	b.n	8002b8c <dwt_initialise+0x58>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8002be2:	201e      	movs	r0, #30
 8002be4:	f7ff fbe4 	bl	80023b0 <_dwt_otpread>
 8002be8:	b280      	uxth	r0, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8002bea:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <dwt_initialise+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0a02      	lsrs	r2, r0, #8
 8002bf0:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
 8002bf2:	2d00      	cmp	r5, #0
 8002bf4:	d105      	bne.n	8002c02 <dwt_initialise+0xce>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8002bf6:	06c3      	lsls	r3, r0, #27
 8002bf8:	d100      	bne.n	8002bfc <dwt_initialise+0xc8>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8002bfa:	2010      	movs	r0, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8002bfc:	b2c0      	uxtb	r0, r0
 8002bfe:	f7ff ff8d 	bl	8002b1c <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
 8002c02:	06e3      	lsls	r3, r4, #27
 8002c04:	d43d      	bmi.n	8002c82 <dwt_initialise+0x14e>
        pdw1000local->partID = 0;
 8002c06:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
 8002c0e:	06a3      	lsls	r3, r4, #26
 8002c10:	d43e      	bmi.n	8002c90 <dwt_initialise+0x15c>
        pdw1000local->lotID = 0;
 8002c12:	4b36      	ldr	r3, [pc, #216]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
 8002c1a:	0663      	lsls	r3, r4, #25
 8002c1c:	d43f      	bmi.n	8002c9e <dwt_initialise+0x16a>
        pdw1000local->vBatP = 0;
 8002c1e:	4b33      	ldr	r3, [pc, #204]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 8002c26:	0623      	lsls	r3, r4, #24
 8002c28:	d440      	bmi.n	8002cac <dwt_initialise+0x178>
        pdw1000local->tempP = 0;
 8002c2a:	4b30      	ldr	r3, [pc, #192]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 8002c32:	2d00      	cmp	r5, #0
 8002c34:	d14d      	bne.n	8002cd2 <dwt_initialise+0x19e>
        if(DWT_LOADUCODE & config)
 8002c36:	07e4      	lsls	r4, r4, #31
 8002c38:	d53f      	bpl.n	8002cba <dwt_initialise+0x186>
            _dwt_loaducodefromrom();
 8002c3a:	f7ff fe3f 	bl	80028bc <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	8ad1      	ldrh	r1, [r2, #22]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f7ff fdb1 	bl	80027b4 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8002c52:	2200      	movs	r2, #0
 8002c54:	210a      	movs	r1, #10
 8002c56:	202c      	movs	r0, #44	@ 0x2c
 8002c58:	f7ff fb61 	bl	800231e <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8002c5c:	4c23      	ldr	r4, [pc, #140]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c5e:	6825      	ldr	r5, [r4, #0]
 8002c60:	2100      	movs	r1, #0
 8002c62:	2004      	movs	r0, #4
 8002c64:	f7ff fb24 	bl	80022b0 <dwt_read32bitoffsetreg>
 8002c68:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8002c6a:	6824      	ldr	r4, [r4, #0]
 8002c6c:	8a62      	ldrh	r2, [r4, #18]
 8002c6e:	2303      	movs	r3, #3
 8002c70:	4013      	ands	r3, r2
 8002c72:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8002c74:	2100      	movs	r1, #0
 8002c76:	2008      	movs	r0, #8
 8002c78:	f7ff fb1a 	bl	80022b0 <dwt_read32bitoffsetreg>
 8002c7c:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
 8002c7e:	2000      	movs	r0, #0
} // end dwt_initialise()
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002c82:	4b1a      	ldr	r3, [pc, #104]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c84:	681e      	ldr	r6, [r3, #0]
 8002c86:	2006      	movs	r0, #6
 8002c88:	f7ff fb92 	bl	80023b0 <_dwt_otpread>
 8002c8c:	6030      	str	r0, [r6, #0]
 8002c8e:	e7be      	b.n	8002c0e <dwt_initialise+0xda>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002c90:	4b16      	ldr	r3, [pc, #88]	@ (8002cec <dwt_initialise+0x1b8>)
 8002c92:	681e      	ldr	r6, [r3, #0]
 8002c94:	2007      	movs	r0, #7
 8002c96:	f7ff fb8b 	bl	80023b0 <_dwt_otpread>
 8002c9a:	6070      	str	r0, [r6, #4]
 8002c9c:	e7bd      	b.n	8002c1a <dwt_initialise+0xe6>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8002c9e:	2008      	movs	r0, #8
 8002ca0:	f7ff fb86 	bl	80023b0 <_dwt_otpread>
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <dwt_initialise+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	7218      	strb	r0, [r3, #8]
 8002caa:	e7bc      	b.n	8002c26 <dwt_initialise+0xf2>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8002cac:	2009      	movs	r0, #9
 8002cae:	f7ff fb7f 	bl	80023b0 <_dwt_otpread>
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cec <dwt_initialise+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	7258      	strb	r0, [r3, #9]
 8002cb8:	e7bb      	b.n	8002c32 <dwt_initialise+0xfe>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8002cba:	2105      	movs	r1, #5
 8002cbc:	2036      	movs	r0, #54	@ 0x36
 8002cbe:	f7ff fb11 	bl	80022e4 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <dwt_initialise+0x1c4>)
 8002cc4:	4018      	ands	r0, r3
 8002cc6:	b282      	uxth	r2, r0
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8002cc8:	2105      	movs	r1, #5
 8002cca:	2036      	movs	r0, #54	@ 0x36
 8002ccc:	f7ff fb33 	bl	8002336 <dwt_write16bitoffsetreg>
 8002cd0:	e7bc      	b.n	8002c4c <dwt_initialise+0x118>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8002cd2:	0764      	lsls	r4, r4, #29
 8002cd4:	d4ba      	bmi.n	8002c4c <dwt_initialise+0x118>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8002cd6:	4b05      	ldr	r3, [pc, #20]	@ (8002cec <dwt_initialise+0x1b8>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	8ad1      	ldrh	r1, [r2, #22]
 8002cdc:	2380      	movs	r3, #128	@ 0x80
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	82d3      	strh	r3, [r2, #22]
 8002ce4:	e7b2      	b.n	8002c4c <dwt_initialise+0x118>
        return DWT_ERROR ;
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	4240      	negs	r0, r0
 8002cea:	e7c9      	b.n	8002c80 <dwt_initialise+0x14c>
 8002cec:	20000010 	.word	0x20000010
 8002cf0:	deca0130 	.word	0xdeca0130
 8002cf4:	88888888 	.word	0x88888888
 8002cf8:	fffffdff 	.word	0xfffffdff

08002cfc <instance_txcallback>:
 *
 * */
void instance_txcallback(const dwt_cb_data_t *txd)
{
    //empty function
}
 8002cfc:	4770      	bx	lr

08002cfe <instance_rxgood>:
 *
 * */
void instance_rxgood(const dwt_cb_data_t *rxd)
{
   //empty function
}
 8002cfe:	4770      	bx	lr

08002d00 <instance_rxtimeout>:
 *
 * */
void instance_rxtimeout(const dwt_cb_data_t *rxd)
{
    //empty function
}
 8002d00:	4770      	bx	lr

08002d02 <instance_rxerror>:
 *
 * */
void instance_rxerror(const dwt_cb_data_t *rxd)
{
    //empty function
}
 8002d02:	4770      	bx	lr

08002d04 <instance_init>:
{
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	0006      	movs	r6, r0
    param_block_t * pbss = get_pbssConfig();
 8002d08:	f7ff fa6e 	bl	80021e8 <get_pbssConfig>
 8002d0c:	0005      	movs	r5, r0
    instance_data.testAppState = TA_INIT ;
 8002d0e:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <instance_init+0xa0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    dwt_softreset();
 8002d14:	f7ff fee2 	bl	8002adc <dwt_softreset>
    result = dwt_initialise( DWT_READ_OTP_PID ) ;
 8002d18:	2010      	movs	r0, #16
 8002d1a:	f7ff ff0b 	bl	8002b34 <dwt_initialise>
 8002d1e:	0004      	movs	r4, r0
    if (sleep_enable) {
 8002d20:	2e00      	cmp	r6, #0
 8002d22:	d030      	beq.n	8002d86 <instance_init+0x82>
        dwt_configuresleep(AON_WCFG_ONW_LLDE | DWT_PRESRV_SLEEP|DWT_CONFIG ,
 8002d24:	2094      	movs	r0, #148	@ 0x94
 8002d26:	2105      	movs	r1, #5
 8002d28:	0100      	lsls	r0, r0, #4
 8002d2a:	f7ff fb63 	bl	80023f4 <dwt_configuresleep>
    dwt_setleds(3);
 8002d2e:	2003      	movs	r0, #3
 8002d30:	f7ff fcfc 	bl	800272c <dwt_setleds>
    dwt_setsmarttxpower( (pbss->smartPowerEn != 0) );
 8002d34:	7e2a      	ldrb	r2, [r5, #24]
 8002d36:	7e68      	ldrb	r0, [r5, #25]
 8002d38:	0200      	lsls	r0, r0, #8
 8002d3a:	4310      	orrs	r0, r2
 8002d3c:	1e43      	subs	r3, r0, #1
 8002d3e:	4198      	sbcs	r0, r3
 8002d40:	f7ff fcc4 	bl	80026cc <dwt_setsmarttxpower>
    if((ref.power == 0) && (ref.pgcnt == 0) && (ref.temp == 0) && (ref.pgdly == 0))
 8002d44:	4b18      	ldr	r3, [pc, #96]	@ (8002da8 <instance_init+0xa4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d108      	bne.n	8002d5e <instance_init+0x5a>
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <instance_init+0xa4>)
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <instance_init+0xa8>)
 8002d52:	421a      	tst	r2, r3
 8002d54:	d103      	bne.n	8002d5e <instance_init+0x5a>
 8002d56:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <instance_init+0xa4>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d019      	beq.n	8002d92 <instance_init+0x8e>
    dwt_entersleepaftertx(1);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7ff fb5a 	bl	8002418 <dwt_entersleepaftertx>
    if (DWT_SUCCESS != result)
 8002d64:	2c00      	cmp	r4, #0
 8002d66:	d119      	bne.n	8002d9c <instance_init+0x98>
    dwt_setcallbacks(instance_txcallback,
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <instance_init+0xac>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <instance_init+0xb0>)
 8002d6c:	4912      	ldr	r1, [pc, #72]	@ (8002db8 <instance_init+0xb4>)
 8002d6e:	4813      	ldr	r0, [pc, #76]	@ (8002dbc <instance_init+0xb8>)
 8002d70:	f7ff fcd2 	bl	8002718 <dwt_setcallbacks>
    instance_data.frame_sn = 0;
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <instance_init+0xa0>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	759a      	strb	r2, [r3, #22]
    instance_data.timeron = 0;
 8002d7a:	769a      	strb	r2, [r3, #26]
    instance_data.event[0] = 0;
 8002d7c:	75da      	strb	r2, [r3, #23]
    instance_data.event[1] = 0;
 8002d7e:	761a      	strb	r2, [r3, #24]
    instance_data.eventCnt = 0;
 8002d80:	765a      	strb	r2, [r3, #25]
}
 8002d82:	0020      	movs	r0, r4
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
        dwt_configuresleep(AON_WCFG_ONW_LLDE | DWT_PRESRV_SLEEP|DWT_CONFIG ,
 8002d86:	2094      	movs	r0, #148	@ 0x94
 8002d88:	2104      	movs	r1, #4
 8002d8a:	0100      	lsls	r0, r0, #4
 8002d8c:	f7ff fb32 	bl	80023f4 <dwt_configuresleep>
 8002d90:	e7cd      	b.n	8002d2e <instance_init+0x2a>
      tvc_otp_read_txcfgref(&ref, pbss->dwt_config.chan);
 8002d92:	7829      	ldrb	r1, [r5, #0]
 8002d94:	4804      	ldr	r0, [pc, #16]	@ (8002da8 <instance_init+0xa4>)
 8002d96:	f000 fdc3 	bl	8003920 <tvc_otp_read_txcfgref>
 8002d9a:	e7e0      	b.n	8002d5e <instance_init+0x5a>
        return (DWT_ERROR) ;        // device initialize has failed
 8002d9c:	2401      	movs	r4, #1
 8002d9e:	4264      	negs	r4, r4
 8002da0:	e7ef      	b.n	8002d82 <instance_init+0x7e>
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	2000039c 	.word	0x2000039c
 8002da8:	200003c0 	.word	0x200003c0
 8002dac:	ffff00ff 	.word	0xffff00ff
 8002db0:	08002d03 	.word	0x08002d03
 8002db4:	08002d01 	.word	0x08002d01
 8002db8:	08002cff 	.word	0x08002cff
 8002dbc:	08002cfd 	.word	0x08002cfd

08002dc0 <instance_config>:
{
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	0004      	movs	r4, r0
    dwt_configure(&pbss->dwt_config) ;
 8002dc6:	f7ff fb5b 	bl	8002480 <dwt_configure>
    configTx.PGdly = ref.pgdly;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <instance_config+0x3c>)
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	4669      	mov	r1, sp
 8002dd0:	700a      	strb	r2, [r1, #0]
    configTx.power = ref.power;
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	9101      	str	r1, [sp, #4]
    if(pbss->smartPowerEn == 0)
 8002dd6:	7e22      	ldrb	r2, [r4, #24]
 8002dd8:	7e63      	ldrb	r3, [r4, #25]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	d107      	bne.n	8002df0 <instance_config+0x30>
        uint32 pow = configTx.power & 0xff;
 8002de0:	22ff      	movs	r2, #255	@ 0xff
 8002de2:	400a      	ands	r2, r1
        configTx.power = (pow << 24) + (pow << 16) + (pow << 8) + pow;
 8002de4:	0211      	lsls	r1, r2, #8
 8002de6:	188b      	adds	r3, r1, r2
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	185b      	adds	r3, r3, r1
 8002dec:	189b      	adds	r3, r3, r2
 8002dee:	9301      	str	r3, [sp, #4]
    dwt_configuretxrf(&configTx);
 8002df0:	4668      	mov	r0, sp
 8002df2:	f7ff fac0 	bl	8002376 <dwt_configuretxrf>
}
 8002df6:	b002      	add	sp, #8
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	200003c0 	.word	0x200003c0

08002e00 <lis3dh_i2c_read>:


#define I2C_AUTO_INCREMENT (0x80)

static bool lis3dh_i2c_read(lis3dh_sensor_t* dev, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002e00:	b530      	push	{r4, r5, lr}
 8002e02:	b083      	sub	sp, #12
 8002e04:	0004      	movs	r4, r0
 8002e06:	000d      	movs	r5, r1
    if (!dev || !data) return false;
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	d019      	beq.n	8002e40 <lis3dh_i2c_read+0x40>
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	d019      	beq.n	8002e44 <lis3dh_i2c_read+0x44>

    debug_dev ("Read %d byte from i2c slave register %02x.", __FUNCTION__, dev, len, reg);

    if (len > 1)
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d903      	bls.n	8002e1c <lis3dh_i2c_read+0x1c>
        reg |= I2C_AUTO_INCREMENT;
 8002e14:	2180      	movs	r1, #128	@ 0x80
 8002e16:	4249      	negs	r1, r1
 8002e18:	430d      	orrs	r5, r1
 8002e1a:	b2ed      	uxtb	r5, r5
    
    int result = i2c_slave_read(dev->bus, dev->addr, reg, data, len);
 8002e1c:	7961      	ldrb	r1, [r4, #5]
 8002e1e:	7920      	ldrb	r0, [r4, #4]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	0013      	movs	r3, r2
 8002e24:	002a      	movs	r2, r5
 8002e26:	f7fe fc33 	bl	8001690 <i2c_slave_read>

    if (result)
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	d102      	bne.n	8002e34 <lis3dh_i2c_read+0x34>
    for (int i=0; i < len; i++)
        printf("%02x ", data[i]);
    printf("\n");
#   endif

    return true;
 8002e2e:	2001      	movs	r0, #1
}
 8002e30:	b003      	add	sp, #12
 8002e32:	bd30      	pop	{r4, r5, pc}
        dev->error_code |= (result == -EBUSY) ? LIS3DH_I2C_BUSY : LIS3DH_I2C_READ_FAILED;
 8002e34:	6823      	ldr	r3, [r4, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	6023      	str	r3, [r4, #0]
        return false;
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	e7f7      	b.n	8002e30 <lis3dh_i2c_read+0x30>
    if (!dev || !data) return false;
 8002e40:	2000      	movs	r0, #0
 8002e42:	e7f5      	b.n	8002e30 <lis3dh_i2c_read+0x30>
 8002e44:	2000      	movs	r0, #0
 8002e46:	e7f3      	b.n	8002e30 <lis3dh_i2c_read+0x30>

08002e48 <lis3dh_spi_read>:
{
 8002e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e4a:	46ce      	mov	lr, r9
 8002e4c:	4647      	mov	r7, r8
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b083      	sub	sp, #12
 8002e52:	0006      	movs	r6, r0
 8002e54:	0015      	movs	r5, r2
 8002e56:	001c      	movs	r4, r3
    if (!dev || !data) return false;
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d03b      	beq.n	8002ed4 <lis3dh_spi_read+0x8c>
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d03b      	beq.n	8002ed8 <lis3dh_spi_read+0x90>
    if (len >= LIS3DH_SPI_BUF_SIZE)
 8002e60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e62:	d909      	bls.n	8002e78 <lis3dh_spi_read+0x30>
        dev->error_code |= LIS3DH_SPI_BUFFER_OVERFLOW;
 8002e64:	6803      	ldr	r3, [r0, #0]
 8002e66:	2206      	movs	r2, #6
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	6003      	str	r3, [r0, #0]
        return false;
 8002e6c:	2000      	movs	r0, #0
}
 8002e6e:	b003      	add	sp, #12
 8002e70:	bcc0      	pop	{r6, r7}
 8002e72:	46b9      	mov	r9, r7
 8002e74:	46b0      	mov	r8, r6
 8002e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t addr = (reg & 0x3f) | LIS3DH_SPI_READ_FLAG | LIS3DH_SPI_AUTO_INC_FLAG;
 8002e78:	2340      	movs	r3, #64	@ 0x40
 8002e7a:	425b      	negs	r3, r3
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4698      	mov	r8, r3
    memset (mosi, 0xff, LIS3DH_SPI_BUF_SIZE);
 8002e82:	4f16      	ldr	r7, [pc, #88]	@ (8002edc <lis3dh_spi_read+0x94>)
 8002e84:	2240      	movs	r2, #64	@ 0x40
 8002e86:	21ff      	movs	r1, #255	@ 0xff
 8002e88:	0038      	movs	r0, r7
 8002e8a:	f000 fec5 	bl	8003c18 <memset>
    memset (miso, 0xff, LIS3DH_SPI_BUF_SIZE);
 8002e8e:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <lis3dh_spi_read+0x98>)
 8002e90:	2240      	movs	r2, #64	@ 0x40
 8002e92:	21ff      	movs	r1, #255	@ 0xff
 8002e94:	4699      	mov	r9, r3
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 febe 	bl	8003c18 <memset>
    mosi[0] = addr;
 8002e9c:	4643      	mov	r3, r8
 8002e9e:	703b      	strb	r3, [r7, #0]
    if (!spi_transfer_pf (dev->bus, dev->cs, mosi, miso, len+1))
 8002ea0:	79b1      	ldrb	r1, [r6, #6]
 8002ea2:	7930      	ldrb	r0, [r6, #4]
 8002ea4:	1c63      	adds	r3, r4, #1
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	464b      	mov	r3, r9
 8002eac:	003a      	movs	r2, r7
 8002eae:	f7fe fbed 	bl	800168c <spi_transfer_pf>
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d001      	beq.n	8002eba <lis3dh_spi_read+0x72>
    for (int i=0; i < len; i++)
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	e009      	b.n	8002ece <lis3dh_spi_read+0x86>
        dev->error_code |= LIS3DH_SPI_READ_FAILED;
 8002eba:	6833      	ldr	r3, [r6, #0]
 8002ebc:	2205      	movs	r2, #5
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	6033      	str	r3, [r6, #0]
        return false;
 8002ec2:	e7d4      	b.n	8002e6e <lis3dh_spi_read+0x26>
      data[i] = miso[i+1];
 8002ec4:	1c4b      	adds	r3, r1, #1
 8002ec6:	4a06      	ldr	r2, [pc, #24]	@ (8002ee0 <lis3dh_spi_read+0x98>)
 8002ec8:	5cd2      	ldrb	r2, [r2, r3]
 8002eca:	546a      	strb	r2, [r5, r1]
    for (int i=0; i < len; i++)
 8002ecc:	0019      	movs	r1, r3
 8002ece:	428c      	cmp	r4, r1
 8002ed0:	dcf8      	bgt.n	8002ec4 <lis3dh_spi_read+0x7c>
 8002ed2:	e7cc      	b.n	8002e6e <lis3dh_spi_read+0x26>
    if (!dev || !data) return false;
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	e7ca      	b.n	8002e6e <lis3dh_spi_read+0x26>
 8002ed8:	2000      	movs	r0, #0
 8002eda:	e7c8      	b.n	8002e6e <lis3dh_spi_read+0x26>
 8002edc:	20000450 	.word	0x20000450
 8002ee0:	20000410 	.word	0x20000410

08002ee4 <lis3dh_spi_write>:
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	0006      	movs	r6, r0
 8002eea:	0008      	movs	r0, r1
    if (!dev || !data) return false;
 8002eec:	2e00      	cmp	r6, #0
 8002eee:	d02b      	beq.n	8002f48 <lis3dh_spi_write+0x64>
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	d02b      	beq.n	8002f4c <lis3dh_spi_write+0x68>
    uint8_t addr = (reg & 0x3f) | LIS3DH_SPI_WRITE_FLAG | LIS3DH_SPI_AUTO_INC_FLAG;
 8002ef4:	213f      	movs	r1, #63	@ 0x3f
 8002ef6:	4001      	ands	r1, r0
 8002ef8:	2040      	movs	r0, #64	@ 0x40
 8002efa:	4301      	orrs	r1, r0
 8002efc:	b2c9      	uxtb	r1, r1
    if (len >= LIS3DH_SPI_BUF_SIZE)
 8002efe:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f00:	d803      	bhi.n	8002f0a <lis3dh_spi_write+0x26>
    mosi[0] = addr;
 8002f02:	4813      	ldr	r0, [pc, #76]	@ (8002f50 <lis3dh_spi_write+0x6c>)
 8002f04:	7001      	strb	r1, [r0, #0]
    for (int i = 0; i < len; i++)
 8002f06:	2100      	movs	r1, #0
 8002f08:	e00a      	b.n	8002f20 <lis3dh_spi_write+0x3c>
        dev->error_code |= LIS3DH_SPI_BUFFER_OVERFLOW;
 8002f0a:	6833      	ldr	r3, [r6, #0]
 8002f0c:	2206      	movs	r2, #6
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	6033      	str	r3, [r6, #0]
        return false;
 8002f12:	2000      	movs	r0, #0
 8002f14:	e011      	b.n	8002f3a <lis3dh_spi_write+0x56>
        mosi[i+1] = data[i];
 8002f16:	1854      	adds	r4, r2, r1
 8002f18:	3101      	adds	r1, #1
 8002f1a:	7825      	ldrb	r5, [r4, #0]
 8002f1c:	4c0c      	ldr	r4, [pc, #48]	@ (8002f50 <lis3dh_spi_write+0x6c>)
 8002f1e:	5465      	strb	r5, [r4, r1]
    for (int i = 0; i < len; i++)
 8002f20:	428b      	cmp	r3, r1
 8002f22:	dcf8      	bgt.n	8002f16 <lis3dh_spi_write+0x32>
    if (!spi_transfer_pf (dev->bus, dev->cs, mosi, NULL, len+1))
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <lis3dh_spi_write+0x6c>)
 8002f26:	79b1      	ldrb	r1, [r6, #6]
 8002f28:	7930      	ldrb	r0, [r6, #4]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2300      	movs	r3, #0
 8002f32:	f7fe fbab 	bl	800168c <spi_transfer_pf>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d001      	beq.n	8002f3e <lis3dh_spi_write+0x5a>
}
 8002f3a:	b002      	add	sp, #8
 8002f3c:	bd70      	pop	{r4, r5, r6, pc}
        dev->error_code |= LIS3DH_SPI_WRITE_FAILED;
 8002f3e:	6833      	ldr	r3, [r6, #0]
 8002f40:	2204      	movs	r2, #4
 8002f42:	4313      	orrs	r3, r2
 8002f44:	6033      	str	r3, [r6, #0]
        return false;
 8002f46:	e7f8      	b.n	8002f3a <lis3dh_spi_write+0x56>
    if (!dev || !data) return false;
 8002f48:	2000      	movs	r0, #0
 8002f4a:	e7f6      	b.n	8002f3a <lis3dh_spi_write+0x56>
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e7f4      	b.n	8002f3a <lis3dh_spi_write+0x56>
 8002f50:	200003d0 	.word	0x200003d0

08002f54 <lis3dh_i2c_write>:


static bool lis3dh_i2c_write(lis3dh_sensor_t* dev, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002f54:	b530      	push	{r4, r5, lr}
 8002f56:	b083      	sub	sp, #12
 8002f58:	0004      	movs	r4, r0
 8002f5a:	000d      	movs	r5, r1
    if (!dev || !data) return false;
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d019      	beq.n	8002f94 <lis3dh_i2c_write+0x40>
 8002f60:	2a00      	cmp	r2, #0
 8002f62:	d019      	beq.n	8002f98 <lis3dh_i2c_write+0x44>

    debug_dev ("Write %d byte to i2c slave register %02x.", __FUNCTION__, dev, len, reg);

    if (len > 1)
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d903      	bls.n	8002f70 <lis3dh_i2c_write+0x1c>
        reg |= I2C_AUTO_INCREMENT;
 8002f68:	2180      	movs	r1, #128	@ 0x80
 8002f6a:	4249      	negs	r1, r1
 8002f6c:	430d      	orrs	r5, r1
 8002f6e:	b2ed      	uxtb	r5, r5

    int result = i2c_slave_write(dev->bus, dev->addr, reg, data, len);
 8002f70:	7961      	ldrb	r1, [r4, #5]
 8002f72:	7920      	ldrb	r0, [r4, #4]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	0013      	movs	r3, r2
 8002f78:	002a      	movs	r2, r5
 8002f7a:	f7fe fc1b 	bl	80017b4 <i2c_slave_write>

    if (result)
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d102      	bne.n	8002f88 <lis3dh_i2c_write+0x34>
    for (int i=0; i < len; i++)
        printf("%02x ", data[i]);
    printf("\n");
#   endif

    return true;
 8002f82:	2001      	movs	r0, #1
}
 8002f84:	b003      	add	sp, #12
 8002f86:	bd30      	pop	{r4, r5, pc}
        dev->error_code |= (result == -EBUSY) ? LIS3DH_I2C_BUSY : LIS3DH_I2C_WRITE_FAILED;
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	6023      	str	r3, [r4, #0]
        return false;
 8002f90:	2000      	movs	r0, #0
 8002f92:	e7f7      	b.n	8002f84 <lis3dh_i2c_write+0x30>
    if (!dev || !data) return false;
 8002f94:	2000      	movs	r0, #0
 8002f96:	e7f5      	b.n	8002f84 <lis3dh_i2c_write+0x30>
 8002f98:	2000      	movs	r0, #0
 8002f9a:	e7f3      	b.n	8002f84 <lis3dh_i2c_write+0x30>

08002f9c <lis3dh_reg_read>:
{
 8002f9c:	b510      	push	{r4, lr}
    if (!dev || !data) return false;
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d00a      	beq.n	8002fb8 <lis3dh_reg_read+0x1c>
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	d00a      	beq.n	8002fbc <lis3dh_reg_read+0x20>
    return (dev->addr) ? lis3dh_i2c_read (dev, reg, data, len)
 8002fa6:	7944      	ldrb	r4, [r0, #5]
                       : lis3dh_spi_read (dev, reg, data, len);
 8002fa8:	2c00      	cmp	r4, #0
 8002faa:	d002      	beq.n	8002fb2 <lis3dh_reg_read+0x16>
    return (dev->addr) ? lis3dh_i2c_read (dev, reg, data, len)
 8002fac:	f7ff ff28 	bl	8002e00 <lis3dh_i2c_read>
}
 8002fb0:	bd10      	pop	{r4, pc}
                       : lis3dh_spi_read (dev, reg, data, len);
 8002fb2:	f7ff ff49 	bl	8002e48 <lis3dh_spi_read>
 8002fb6:	e7fb      	b.n	8002fb0 <lis3dh_reg_read+0x14>
    if (!dev || !data) return false;
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e7f9      	b.n	8002fb0 <lis3dh_reg_read+0x14>
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	e7f7      	b.n	8002fb0 <lis3dh_reg_read+0x14>

08002fc0 <lis3dh_is_available>:
{
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	1e04      	subs	r4, r0, #0
    if (!dev)
 8002fc6:	d013      	beq.n	8002ff0 <lis3dh_is_available+0x30>
    dev->error_code = LIS3DH_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6003      	str	r3, [r0, #0]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_WHO_AM_I, &chip_id, 1))
 8002fcc:	3301      	adds	r3, #1
 8002fce:	466a      	mov	r2, sp
 8002fd0:	3207      	adds	r2, #7
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f7ff ffe2 	bl	8002f9c <lis3dh_reg_read>
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d00a      	beq.n	8002ff2 <lis3dh_is_available+0x32>
    if (chip_id != LIS3DH_CHIP_ID)
 8002fdc:	466b      	mov	r3, sp
 8002fde:	3307      	adds	r3, #7
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b33      	cmp	r3, #51	@ 0x33
 8002fe4:	d005      	beq.n	8002ff2 <lis3dh_is_available+0x32>
        dev->error_code = LIS3DH_WRONG_CHIP_ID;
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	6023      	str	r3, [r4, #0]
        return false;
 8002fec:	2000      	movs	r0, #0
 8002fee:	e000      	b.n	8002ff2 <lis3dh_is_available+0x32>
		return false;
 8002ff0:	2000      	movs	r0, #0
}
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd10      	pop	{r4, pc}

08002ff6 <lis3dh_get_hpf_ref>:
{
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	1e04      	subs	r4, r0, #0
    if (!dev) return 0;
 8002ffc:	d014      	beq.n	8003028 <lis3dh_get_hpf_ref+0x32>
    dev->error_code = LIS3DH_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	6003      	str	r3, [r0, #0]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_REFERENCE, (uint8_t*)&ref, 1))
 8003002:	3301      	adds	r3, #1
 8003004:	466a      	mov	r2, sp
 8003006:	3207      	adds	r2, #7
 8003008:	2126      	movs	r1, #38	@ 0x26
 800300a:	f7ff ffc7 	bl	8002f9c <lis3dh_reg_read>
 800300e:	2800      	cmp	r0, #0
 8003010:	d004      	beq.n	800301c <lis3dh_get_hpf_ref+0x26>
    return ref;
 8003012:	466b      	mov	r3, sp
 8003014:	2007      	movs	r0, #7
 8003016:	5618      	ldrsb	r0, [r3, r0]
}
 8003018:	b002      	add	sp, #8
 800301a:	bd10      	pop	{r4, pc}
        dev->error_code |= LIS3DH_CONFIG_HPF_FAILED;
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	2390      	movs	r3, #144	@ 0x90
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	4313      	orrs	r3, r2
 8003024:	6023      	str	r3, [r4, #0]
        return 0;
 8003026:	e7f7      	b.n	8003018 <lis3dh_get_hpf_ref+0x22>
    if (!dev) return 0;
 8003028:	2000      	movs	r0, #0
 800302a:	e7f5      	b.n	8003018 <lis3dh_get_hpf_ref+0x22>

0800302c <lis3dh_reg_write>:
{
 800302c:	b510      	push	{r4, lr}
    if (!dev || !data) return false;
 800302e:	2800      	cmp	r0, #0
 8003030:	d00a      	beq.n	8003048 <lis3dh_reg_write+0x1c>
 8003032:	2a00      	cmp	r2, #0
 8003034:	d00a      	beq.n	800304c <lis3dh_reg_write+0x20>
    return (dev->addr) ? lis3dh_i2c_write (dev, reg, data, len)
 8003036:	7944      	ldrb	r4, [r0, #5]
                       : lis3dh_spi_write (dev, reg, data, len);
 8003038:	2c00      	cmp	r4, #0
 800303a:	d002      	beq.n	8003042 <lis3dh_reg_write+0x16>
    return (dev->addr) ? lis3dh_i2c_write (dev, reg, data, len)
 800303c:	f7ff ff8a 	bl	8002f54 <lis3dh_i2c_write>
}
 8003040:	bd10      	pop	{r4, pc}
                       : lis3dh_spi_write (dev, reg, data, len);
 8003042:	f7ff ff4f 	bl	8002ee4 <lis3dh_spi_write>
 8003046:	e7fb      	b.n	8003040 <lis3dh_reg_write+0x14>
    if (!dev || !data) return false;
 8003048:	2000      	movs	r0, #0
 800304a:	e7f9      	b.n	8003040 <lis3dh_reg_write+0x14>
 800304c:	2000      	movs	r0, #0
 800304e:	e7f7      	b.n	8003040 <lis3dh_reg_write+0x14>

08003050 <lis3dh_reset>:
{
 8003050:	b510      	push	{r4, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	1e04      	subs	r4, r0, #0
    if (!dev) return false;
 8003056:	d039      	beq.n	80030cc <lis3dh_reset+0x7c>
    dev->error_code = LIS3DH_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	6003      	str	r3, [r0, #0]
    uint8_t reg[8] = { 0 };
 800305c:	2208      	movs	r2, #8
 800305e:	2100      	movs	r1, #0
 8003060:	4668      	mov	r0, sp
 8003062:	f000 fdd9 	bl	8003c18 <memset>
    lis3dh_reg_write (dev, LIS3DH_REG_TEMP_CFG , reg, 8);
 8003066:	2308      	movs	r3, #8
 8003068:	466a      	mov	r2, sp
 800306a:	211f      	movs	r1, #31
 800306c:	0020      	movs	r0, r4
 800306e:	f7ff ffdd 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_FIFO_CTRL, reg, 1);
 8003072:	2301      	movs	r3, #1
 8003074:	466a      	mov	r2, sp
 8003076:	212e      	movs	r1, #46	@ 0x2e
 8003078:	0020      	movs	r0, r4
 800307a:	f7ff ffd7 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT1_CFG , reg, 1);
 800307e:	2301      	movs	r3, #1
 8003080:	466a      	mov	r2, sp
 8003082:	2130      	movs	r1, #48	@ 0x30
 8003084:	0020      	movs	r0, r4
 8003086:	f7ff ffd1 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT1_THS , reg, 2);
 800308a:	2302      	movs	r3, #2
 800308c:	466a      	mov	r2, sp
 800308e:	2132      	movs	r1, #50	@ 0x32
 8003090:	0020      	movs	r0, r4
 8003092:	f7ff ffcb 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT2_CFG , reg, 1);
 8003096:	2301      	movs	r3, #1
 8003098:	466a      	mov	r2, sp
 800309a:	2134      	movs	r1, #52	@ 0x34
 800309c:	0020      	movs	r0, r4
 800309e:	f7ff ffc5 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT2_THS , reg, 2);
 80030a2:	2302      	movs	r3, #2
 80030a4:	466a      	mov	r2, sp
 80030a6:	2136      	movs	r1, #54	@ 0x36
 80030a8:	0020      	movs	r0, r4
 80030aa:	f7ff ffbf 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_CLICK_CFG, reg, 1);
 80030ae:	2301      	movs	r3, #1
 80030b0:	466a      	mov	r2, sp
 80030b2:	2138      	movs	r1, #56	@ 0x38
 80030b4:	0020      	movs	r0, r4
 80030b6:	f7ff ffb9 	bl	800302c <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_CLICK_THS, reg, 4);
 80030ba:	2304      	movs	r3, #4
 80030bc:	466a      	mov	r2, sp
 80030be:	213a      	movs	r1, #58	@ 0x3a
 80030c0:	0020      	movs	r0, r4
 80030c2:	f7ff ffb3 	bl	800302c <lis3dh_reg_write>
    return true;
 80030c6:	2001      	movs	r0, #1
}
 80030c8:	b002      	add	sp, #8
 80030ca:	bd10      	pop	{r4, pc}
    if (!dev) return false;
 80030cc:	2000      	movs	r0, #0
 80030ce:	e7fb      	b.n	80030c8 <lis3dh_reset+0x78>

080030d0 <lis3dh_init_sensor>:
{
 80030d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030d2:	b083      	sub	sp, #12
 80030d4:	0007      	movs	r7, r0
 80030d6:	000e      	movs	r6, r1
 80030d8:	0015      	movs	r5, r2
    if ((dev = malloc (sizeof(lis3dh_sensor_t))) == NULL)
 80030da:	200c      	movs	r0, #12
 80030dc:	f000 fc88 	bl	80039f0 <malloc>
 80030e0:	1e04      	subs	r4, r0, #0
 80030e2:	d064      	beq.n	80031ae <lis3dh_init_sensor+0xde>
    sensor = dev;
 80030e4:	4b33      	ldr	r3, [pc, #204]	@ (80031b4 <lis3dh_init_sensor+0xe4>)
 80030e6:	6018      	str	r0, [r3, #0]
    dev->bus    = bus;
 80030e8:	7107      	strb	r7, [r0, #4]
    dev->addr   = addr;
 80030ea:	7146      	strb	r6, [r0, #5]
    dev->cs     = cs;
 80030ec:	7185      	strb	r5, [r0, #6]
    dev->error_code = LIS3DH_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	6003      	str	r3, [r0, #0]
    dev->scale      = lis3dh_scale_2_g;
 80030f2:	71c3      	strb	r3, [r0, #7]
    dev->fifo_mode  = lis3dh_bypass;
 80030f4:	7243      	strb	r3, [r0, #9]
    dev->fifo_first = true;
 80030f6:	3301      	adds	r3, #1
 80030f8:	7283      	strb	r3, [r0, #10]
    if (!addr && !spi_device_init (bus, cs))
 80030fa:	2e00      	cmp	r6, #0
 80030fc:	d105      	bne.n	800310a <lis3dh_init_sensor+0x3a>
 80030fe:	0029      	movs	r1, r5
 8003100:	0038      	movs	r0, r7
 8003102:	f7fe fac1 	bl	8001688 <spi_device_init>
 8003106:	2800      	cmp	r0, #0
 8003108:	d038      	beq.n	800317c <lis3dh_init_sensor+0xac>
    if (!lis3dh_is_available (dev))
 800310a:	0020      	movs	r0, r4
 800310c:	f7ff ff58 	bl	8002fc0 <lis3dh_is_available>
 8003110:	2800      	cmp	r0, #0
 8003112:	d03b      	beq.n	800318c <lis3dh_init_sensor+0xbc>
    if (!lis3dh_reset(dev))
 8003114:	0020      	movs	r0, r4
 8003116:	f7ff ff9b 	bl	8003050 <lis3dh_reset>
 800311a:	2800      	cmp	r0, #0
 800311c:	d03e      	beq.n	800319c <lis3dh_init_sensor+0xcc>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, lis3dh_scale_2_g);
 800311e:	2301      	movs	r3, #1
 8003120:	aa01      	add	r2, sp, #4
 8003122:	2123      	movs	r1, #35	@ 0x23
 8003124:	0020      	movs	r0, r4
 8003126:	f7ff ff39 	bl	8002f9c <lis3dh_reg_read>
 800312a:	2800      	cmp	r0, #0
 800312c:	d03e      	beq.n	80031ac <lis3dh_init_sensor+0xdc>
 800312e:	466b      	mov	r3, sp
 8003130:	791b      	ldrb	r3, [r3, #4]
 8003132:	2230      	movs	r2, #48	@ 0x30
 8003134:	4393      	bics	r3, r2
 8003136:	466a      	mov	r2, sp
 8003138:	7113      	strb	r3, [r2, #4]
 800313a:	2301      	movs	r3, #1
 800313c:	aa01      	add	r2, sp, #4
 800313e:	2123      	movs	r1, #35	@ 0x23
 8003140:	0020      	movs	r0, r4
 8003142:	f7ff ff73 	bl	800302c <lis3dh_reg_write>
 8003146:	2800      	cmp	r0, #0
 8003148:	d030      	beq.n	80031ac <lis3dh_init_sensor+0xdc>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, BDU, 1);
 800314a:	2301      	movs	r3, #1
 800314c:	aa01      	add	r2, sp, #4
 800314e:	2123      	movs	r1, #35	@ 0x23
 8003150:	0020      	movs	r0, r4
 8003152:	f7ff ff23 	bl	8002f9c <lis3dh_reg_read>
 8003156:	2800      	cmp	r0, #0
 8003158:	d00e      	beq.n	8003178 <lis3dh_init_sensor+0xa8>
 800315a:	466b      	mov	r3, sp
 800315c:	791a      	ldrb	r2, [r3, #4]
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	425b      	negs	r3, r3
 8003162:	4313      	orrs	r3, r2
 8003164:	466a      	mov	r2, sp
 8003166:	7113      	strb	r3, [r2, #4]
 8003168:	2301      	movs	r3, #1
 800316a:	aa01      	add	r2, sp, #4
 800316c:	2123      	movs	r1, #35	@ 0x23
 800316e:	0020      	movs	r0, r4
 8003170:	f7ff ff5c 	bl	800302c <lis3dh_reg_write>
 8003174:	2800      	cmp	r0, #0
 8003176:	d11a      	bne.n	80031ae <lis3dh_init_sensor+0xde>
 8003178:	2400      	movs	r4, #0
 800317a:	e018      	b.n	80031ae <lis3dh_init_sensor+0xde>
        free (dev);
 800317c:	0020      	movs	r0, r4
 800317e:	f000 fc41 	bl	8003a04 <free>
        sensor = NULL;
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <lis3dh_init_sensor+0xe4>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
        return NULL;
 8003188:	2400      	movs	r4, #0
 800318a:	e010      	b.n	80031ae <lis3dh_init_sensor+0xde>
        free (dev);
 800318c:	0020      	movs	r0, r4
 800318e:	f000 fc39 	bl	8003a04 <free>
        sensor = NULL;
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <lis3dh_init_sensor+0xe4>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
        return NULL;
 8003198:	2400      	movs	r4, #0
 800319a:	e008      	b.n	80031ae <lis3dh_init_sensor+0xde>
        free (dev);
 800319c:	0020      	movs	r0, r4
 800319e:	f000 fc31 	bl	8003a04 <free>
        sensor = NULL;
 80031a2:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <lis3dh_init_sensor+0xe4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
        return NULL;
 80031a8:	2400      	movs	r4, #0
 80031aa:	e000      	b.n	80031ae <lis3dh_init_sensor+0xde>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, lis3dh_scale_2_g);
 80031ac:	2400      	movs	r4, #0
}
 80031ae:	0020      	movs	r0, r4
 80031b0:	b003      	add	sp, #12
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b4:	20000490 	.word	0x20000490

080031b8 <lis3dh_set_mode>:
{
 80031b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ba:	46d6      	mov	lr, sl
 80031bc:	4647      	mov	r7, r8
 80031be:	b580      	push	{r7, lr}
 80031c0:	b085      	sub	sp, #20
 80031c2:	0004      	movs	r4, r0
 80031c4:	9101      	str	r1, [sp, #4]
 80031c6:	0015      	movs	r5, r2
 80031c8:	001e      	movs	r6, r3
 80031ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	469a      	mov	sl, r3
 80031d0:	ab0d      	add	r3, sp, #52	@ 0x34
 80031d2:	781f      	ldrb	r7, [r3, #0]
    if (!dev) return false;
 80031d4:	2800      	cmp	r0, #0
 80031d6:	d009      	beq.n	80031ec <lis3dh_set_mode+0x34>
    dev->error_code = LIS3DH_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	6003      	str	r3, [r0, #0]
    dev->res = res;
 80031dc:	7202      	strb	r2, [r0, #8]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_CTRL1, (uint8_t*)&reg, 1))
 80031de:	3301      	adds	r3, #1
 80031e0:	aa03      	add	r2, sp, #12
 80031e2:	2120      	movs	r1, #32
 80031e4:	f7ff feda 	bl	8002f9c <lis3dh_reg_read>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d105      	bne.n	80031f8 <lis3dh_set_mode+0x40>
}
 80031ec:	2000      	movs	r0, #0
 80031ee:	b005      	add	sp, #20
 80031f0:	bcc0      	pop	{r6, r7}
 80031f2:	46ba      	mov	sl, r7
 80031f4:	46b0      	mov	r8, r6
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    old_odr = reg.ODR;
 80031f8:	ab03      	add	r3, sp, #12
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	0910      	lsrs	r0, r2, #4
 80031fe:	4680      	mov	r8, r0
    reg.Xen  = x;
 8003200:	2101      	movs	r1, #1
 8003202:	400e      	ands	r6, r1
 8003204:	2001      	movs	r0, #1
 8003206:	4382      	bics	r2, r0
 8003208:	4332      	orrs	r2, r6
 800320a:	701a      	strb	r2, [r3, #0]
    reg.Yen  = y;
 800320c:	4652      	mov	r2, sl
 800320e:	400a      	ands	r2, r1
 8003210:	0052      	lsls	r2, r2, #1
 8003212:	7818      	ldrb	r0, [r3, #0]
 8003214:	2602      	movs	r6, #2
 8003216:	43b0      	bics	r0, r6
 8003218:	4302      	orrs	r2, r0
 800321a:	701a      	strb	r2, [r3, #0]
    reg.Zen  = z;
 800321c:	003a      	movs	r2, r7
 800321e:	400a      	ands	r2, r1
 8003220:	0092      	lsls	r2, r2, #2
 8003222:	7818      	ldrb	r0, [r3, #0]
 8003224:	3602      	adds	r6, #2
 8003226:	43b0      	bics	r0, r6
 8003228:	4302      	orrs	r2, r0
 800322a:	701a      	strb	r2, [r3, #0]
    reg.ODR  = odr;
 800322c:	9f01      	ldr	r7, [sp, #4]
 800322e:	0138      	lsls	r0, r7, #4
 8003230:	b2d6      	uxtb	r6, r2
 8003232:	220f      	movs	r2, #15
 8003234:	4032      	ands	r2, r6
 8003236:	4302      	orrs	r2, r0
 8003238:	701a      	strb	r2, [r3, #0]
    reg.LPen = (res == lis3dh_low_power);
 800323a:	426a      	negs	r2, r5
 800323c:	416a      	adcs	r2, r5
 800323e:	4011      	ands	r1, r2
 8003240:	00c9      	lsls	r1, r1, #3
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	2008      	movs	r0, #8
 8003246:	4382      	bics	r2, r0
 8003248:	430a      	orrs	r2, r1
 800324a:	701a      	strb	r2, [r3, #0]
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4,
 800324c:	2301      	movs	r3, #1
 800324e:	aa02      	add	r2, sp, #8
 8003250:	2123      	movs	r1, #35	@ 0x23
 8003252:	0020      	movs	r0, r4
 8003254:	f7ff fea2 	bl	8002f9c <lis3dh_reg_read>
 8003258:	2800      	cmp	r0, #0
 800325a:	d0c7      	beq.n	80031ec <lis3dh_set_mode+0x34>
 800325c:	3d02      	subs	r5, #2
 800325e:	426b      	negs	r3, r5
 8003260:	415d      	adcs	r5, r3
 8003262:	00ed      	lsls	r5, r5, #3
 8003264:	ab02      	add	r3, sp, #8
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	4393      	bics	r3, r2
 800326c:	432b      	orrs	r3, r5
 800326e:	aa02      	add	r2, sp, #8
 8003270:	7013      	strb	r3, [r2, #0]
 8003272:	2301      	movs	r3, #1
 8003274:	2123      	movs	r1, #35	@ 0x23
 8003276:	0020      	movs	r0, r4
 8003278:	f7ff fed8 	bl	800302c <lis3dh_reg_write>
 800327c:	2800      	cmp	r0, #0
 800327e:	d0b5      	beq.n	80031ec <lis3dh_set_mode+0x34>
    if (!lis3dh_reg_write (dev, LIS3DH_REG_CTRL1, (uint8_t*)&reg, 1))
 8003280:	2301      	movs	r3, #1
 8003282:	aa03      	add	r2, sp, #12
 8003284:	2120      	movs	r1, #32
 8003286:	0020      	movs	r0, r4
 8003288:	f7ff fed0 	bl	800302c <lis3dh_reg_write>
 800328c:	2800      	cmp	r0, #0
 800328e:	d0ad      	beq.n	80031ec <lis3dh_set_mode+0x34>
    if (old_odr == lis3dh_power_down && odr != lis3dh_power_down)
 8003290:	4643      	mov	r3, r8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1aa      	bne.n	80031ec <lis3dh_set_mode+0x34>
 8003296:	2f00      	cmp	r7, #0
 8003298:	d0a8      	beq.n	80031ec <lis3dh_set_mode+0x34>
    	LL_mDelay(100);
 800329a:	2064      	movs	r0, #100	@ 0x64
 800329c:	f7fd ffa4 	bl	80011e8 <LL_mDelay>
 80032a0:	e7a4      	b.n	80031ec <lis3dh_set_mode+0x34>

080032a2 <lis3dh_set_scale>:
{
 80032a2:	b530      	push	{r4, r5, lr}
 80032a4:	b083      	sub	sp, #12
 80032a6:	0004      	movs	r4, r0
 80032a8:	000d      	movs	r5, r1
    if (!dev) return false;
 80032aa:	2800      	cmp	r0, #0
 80032ac:	d01f      	beq.n	80032ee <lis3dh_set_scale+0x4c>
    dev->error_code = LIS3DH_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	6003      	str	r3, [r0, #0]
    dev->scale = scale;
 80032b2:	71c1      	strb	r1, [r0, #7]
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, scale);
 80032b4:	3301      	adds	r3, #1
 80032b6:	aa01      	add	r2, sp, #4
 80032b8:	2123      	movs	r1, #35	@ 0x23
 80032ba:	f7ff fe6f 	bl	8002f9c <lis3dh_reg_read>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d102      	bne.n	80032c8 <lis3dh_set_scale+0x26>
 80032c2:	2000      	movs	r0, #0
}
 80032c4:	b003      	add	sp, #12
 80032c6:	bd30      	pop	{r4, r5, pc}
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, scale);
 80032c8:	2203      	movs	r2, #3
 80032ca:	402a      	ands	r2, r5
 80032cc:	0112      	lsls	r2, r2, #4
 80032ce:	466b      	mov	r3, sp
 80032d0:	791b      	ldrb	r3, [r3, #4]
 80032d2:	2130      	movs	r1, #48	@ 0x30
 80032d4:	438b      	bics	r3, r1
 80032d6:	4313      	orrs	r3, r2
 80032d8:	466a      	mov	r2, sp
 80032da:	7113      	strb	r3, [r2, #4]
 80032dc:	2301      	movs	r3, #1
 80032de:	aa01      	add	r2, sp, #4
 80032e0:	390d      	subs	r1, #13
 80032e2:	0020      	movs	r0, r4
 80032e4:	f7ff fea2 	bl	800302c <lis3dh_reg_write>
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d1eb      	bne.n	80032c4 <lis3dh_set_scale+0x22>
 80032ec:	e7e9      	b.n	80032c2 <lis3dh_set_scale+0x20>
    if (!dev) return false;
 80032ee:	2000      	movs	r0, #0
 80032f0:	e7e8      	b.n	80032c4 <lis3dh_set_scale+0x22>
	...

080032f4 <lis3dh_enable_int>:
{
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	46ce      	mov	lr, r9
 80032f8:	4647      	mov	r7, r8
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b083      	sub	sp, #12
 80032fe:	0004      	movs	r4, r0
 8003300:	000f      	movs	r7, r1
 8003302:	0015      	movs	r5, r2
 8003304:	001e      	movs	r6, r3
    if (!dev) return false;
 8003306:	2800      	cmp	r0, #0
 8003308:	d100      	bne.n	800330c <lis3dh_enable_int+0x18>
 800330a:	e09d      	b.n	8003448 <lis3dh_enable_int+0x154>
    dev->error_code = LIS3DH_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	6003      	str	r3, [r0, #0]
    if (type == lis3dh_int_data_ready     ||
 8003310:	2902      	cmp	r1, #2
 8003312:	d906      	bls.n	8003322 <lis3dh_enable_int+0x2e>
    else if (signal == lis3dh_int1_signal)
 8003314:	2a00      	cmp	r2, #0
 8003316:	d117      	bne.n	8003348 <lis3dh_enable_int+0x54>
        addr = LIS3DH_REG_CTRL3;
 8003318:	3322      	adds	r3, #34	@ 0x22
 800331a:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl3;
 800331c:	ab01      	add	r3, sp, #4
 800331e:	4699      	mov	r9, r3
 8003320:	e003      	b.n	800332a <lis3dh_enable_int+0x36>
        addr = LIS3DH_REG_CTRL3;
 8003322:	2322      	movs	r3, #34	@ 0x22
 8003324:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl3;
 8003326:	ab01      	add	r3, sp, #4
 8003328:	4699      	mov	r9, r3
    if (!lis3dh_reg_read (dev, addr, reg, 1))
 800332a:	2301      	movs	r3, #1
 800332c:	464a      	mov	r2, r9
 800332e:	4641      	mov	r1, r8
 8003330:	0020      	movs	r0, r4
 8003332:	f7ff fe33 	bl	8002f9c <lis3dh_reg_read>
 8003336:	2800      	cmp	r0, #0
 8003338:	d00a      	beq.n	8003350 <lis3dh_enable_int+0x5c>
    switch (type)
 800333a:	2f05      	cmp	r7, #5
 800333c:	d900      	bls.n	8003340 <lis3dh_enable_int+0x4c>
 800333e:	e078      	b.n	8003432 <lis3dh_enable_int+0x13e>
 8003340:	00bf      	lsls	r7, r7, #2
 8003342:	4b42      	ldr	r3, [pc, #264]	@ (800344c <lis3dh_enable_int+0x158>)
 8003344:	59db      	ldr	r3, [r3, r7]
 8003346:	469f      	mov	pc, r3
        addr = LIS3DH_REG_CTRL6;
 8003348:	2325      	movs	r3, #37	@ 0x25
 800334a:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl6;
 800334c:	46e9      	mov	r9, sp
 800334e:	e7ec      	b.n	800332a <lis3dh_enable_int+0x36>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 8003350:	6822      	ldr	r2, [r4, #0]
 8003352:	23e0      	movs	r3, #224	@ 0xe0
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	4313      	orrs	r3, r2
 8003358:	6023      	str	r3, [r4, #0]
        return false;
 800335a:	e010      	b.n	800337e <lis3dh_enable_int+0x8a>
        case lis3dh_int_data_ready:     ctrl3.IT_DRDY1 = value;
 800335c:	aa01      	add	r2, sp, #4
 800335e:	2101      	movs	r1, #1
 8003360:	4031      	ands	r1, r6
 8003362:	0109      	lsls	r1, r1, #4
 8003364:	7813      	ldrb	r3, [r2, #0]
 8003366:	2010      	movs	r0, #16
 8003368:	4383      	bics	r3, r0
 800336a:	430b      	orrs	r3, r1
 800336c:	7013      	strb	r3, [r2, #0]
    if (!lis3dh_reg_write (dev, addr, reg, 1))
 800336e:	2301      	movs	r3, #1
 8003370:	464a      	mov	r2, r9
 8003372:	4641      	mov	r1, r8
 8003374:	0020      	movs	r0, r4
 8003376:	f7ff fe59 	bl	800302c <lis3dh_reg_write>
 800337a:	2800      	cmp	r0, #0
 800337c:	d05e      	beq.n	800343c <lis3dh_enable_int+0x148>
}
 800337e:	b003      	add	sp, #12
 8003380:	bcc0      	pop	{r6, r7}
 8003382:	46b9      	mov	r9, r7
 8003384:	46b0      	mov	r8, r6
 8003386:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case lis3dh_int_fifo_watermark: ctrl3.I1_WTM1 = value;
 8003388:	aa01      	add	r2, sp, #4
 800338a:	2101      	movs	r1, #1
 800338c:	4031      	ands	r1, r6
 800338e:	0089      	lsls	r1, r1, #2
 8003390:	7813      	ldrb	r3, [r2, #0]
 8003392:	2004      	movs	r0, #4
 8003394:	4383      	bics	r3, r0
 8003396:	430b      	orrs	r3, r1
 8003398:	7013      	strb	r3, [r2, #0]
                                        break;
 800339a:	e7e8      	b.n	800336e <lis3dh_enable_int+0x7a>
        case lis3dh_int_fifo_overrun:   ctrl3.I1_OVERRUN = value;
 800339c:	aa01      	add	r2, sp, #4
 800339e:	2101      	movs	r1, #1
 80033a0:	4031      	ands	r1, r6
 80033a2:	0049      	lsls	r1, r1, #1
 80033a4:	7813      	ldrb	r3, [r2, #0]
 80033a6:	2002      	movs	r0, #2
 80033a8:	4383      	bics	r3, r0
 80033aa:	430b      	orrs	r3, r1
 80033ac:	7013      	strb	r3, [r2, #0]
                                        break;
 80033ae:	e7de      	b.n	800336e <lis3dh_enable_int+0x7a>
        case lis3dh_int_event1:         if (signal == lis3dh_int1_signal)
 80033b0:	2d00      	cmp	r5, #0
 80033b2:	d109      	bne.n	80033c8 <lis3dh_enable_int+0xd4>
                                            ctrl3.I1_AOI1 = value;
 80033b4:	aa01      	add	r2, sp, #4
 80033b6:	2101      	movs	r1, #1
 80033b8:	4031      	ands	r1, r6
 80033ba:	0189      	lsls	r1, r1, #6
 80033bc:	7813      	ldrb	r3, [r2, #0]
 80033be:	2040      	movs	r0, #64	@ 0x40
 80033c0:	4383      	bics	r3, r0
 80033c2:	430b      	orrs	r3, r1
 80033c4:	7013      	strb	r3, [r2, #0]
 80033c6:	e7d2      	b.n	800336e <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_AOI1 = value;
 80033c8:	2201      	movs	r2, #1
 80033ca:	4032      	ands	r2, r6
 80033cc:	0192      	lsls	r2, r2, #6
 80033ce:	466b      	mov	r3, sp
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2140      	movs	r1, #64	@ 0x40
 80033d4:	438b      	bics	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	466a      	mov	r2, sp
 80033da:	7013      	strb	r3, [r2, #0]
 80033dc:	e7c7      	b.n	800336e <lis3dh_enable_int+0x7a>
        case lis3dh_int_event2:         if (signal == lis3dh_int1_signal)
 80033de:	2d00      	cmp	r5, #0
 80033e0:	d109      	bne.n	80033f6 <lis3dh_enable_int+0x102>
                                            ctrl3.I1_AOI2 = value;
 80033e2:	aa01      	add	r2, sp, #4
 80033e4:	2101      	movs	r1, #1
 80033e6:	4031      	ands	r1, r6
 80033e8:	0149      	lsls	r1, r1, #5
 80033ea:	7813      	ldrb	r3, [r2, #0]
 80033ec:	2020      	movs	r0, #32
 80033ee:	4383      	bics	r3, r0
 80033f0:	430b      	orrs	r3, r1
 80033f2:	7013      	strb	r3, [r2, #0]
 80033f4:	e7bb      	b.n	800336e <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_AOI2 = value;
 80033f6:	2201      	movs	r2, #1
 80033f8:	4032      	ands	r2, r6
 80033fa:	0152      	lsls	r2, r2, #5
 80033fc:	466b      	mov	r3, sp
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2120      	movs	r1, #32
 8003402:	438b      	bics	r3, r1
 8003404:	4313      	orrs	r3, r2
 8003406:	466a      	mov	r2, sp
 8003408:	7013      	strb	r3, [r2, #0]
 800340a:	e7b0      	b.n	800336e <lis3dh_enable_int+0x7a>
        case lis3dh_int_click:          if (signal == lis3dh_int1_signal)
 800340c:	2d00      	cmp	r5, #0
 800340e:	d107      	bne.n	8003420 <lis3dh_enable_int+0x12c>
                                            ctrl3.I1_CLICK = value;
 8003410:	ab01      	add	r3, sp, #4
 8003412:	01f2      	lsls	r2, r6, #7
 8003414:	7819      	ldrb	r1, [r3, #0]
 8003416:	267f      	movs	r6, #127	@ 0x7f
 8003418:	400e      	ands	r6, r1
 800341a:	4316      	orrs	r6, r2
 800341c:	701e      	strb	r6, [r3, #0]
 800341e:	e7a6      	b.n	800336e <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_CLICK = value;
 8003420:	01f6      	lsls	r6, r6, #7
 8003422:	466b      	mov	r3, sp
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	237f      	movs	r3, #127	@ 0x7f
 8003428:	4013      	ands	r3, r2
 800342a:	4333      	orrs	r3, r6
 800342c:	466a      	mov	r2, sp
 800342e:	7013      	strb	r3, [r2, #0]
 8003430:	e79d      	b.n	800336e <lis3dh_enable_int+0x7a>
        default: dev->error_code = LIS3DH_WRONG_INT_TYPE; 
 8003432:	23a0      	movs	r3, #160	@ 0xa0
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	6023      	str	r3, [r4, #0]
                 return false;
 8003438:	2000      	movs	r0, #0
 800343a:	e7a0      	b.n	800337e <lis3dh_enable_int+0x8a>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	23e0      	movs	r3, #224	@ 0xe0
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4313      	orrs	r3, r2
 8003444:	6023      	str	r3, [r4, #0]
        return false;
 8003446:	e79a      	b.n	800337e <lis3dh_enable_int+0x8a>
    if (!dev) return false;
 8003448:	2000      	movs	r0, #0
 800344a:	e798      	b.n	800337e <lis3dh_enable_int+0x8a>
 800344c:	08005230 	.word	0x08005230

08003450 <lis3dh_set_int_event_config>:
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	46ce      	mov	lr, r9
 8003454:	4647      	mov	r7, r8
 8003456:	b580      	push	{r7, lr}
 8003458:	b083      	sub	sp, #12
 800345a:	0005      	movs	r5, r0
 800345c:	000c      	movs	r4, r1
 800345e:	0016      	movs	r6, r2
    if (!dev || !config) return false;
 8003460:	2800      	cmp	r0, #0
 8003462:	d100      	bne.n	8003466 <lis3dh_set_int_event_config+0x16>
 8003464:	e115      	b.n	8003692 <lis3dh_set_int_event_config+0x242>
 8003466:	2900      	cmp	r1, #0
 8003468:	d100      	bne.n	800346c <lis3dh_set_int_event_config+0x1c>
 800346a:	e114      	b.n	8003696 <lis3dh_set_int_event_config+0x246>
    dev->error_code = LIS3DH_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	6003      	str	r3, [r0, #0]
    intx_cfg.XLIE = config->x_low_enabled;
 8003470:	7888      	ldrb	r0, [r1, #2]
 8003472:	ab01      	add	r3, sp, #4
 8003474:	2101      	movs	r1, #1
 8003476:	4008      	ands	r0, r1
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	2701      	movs	r7, #1
 800347c:	43ba      	bics	r2, r7
 800347e:	4302      	orrs	r2, r0
 8003480:	701a      	strb	r2, [r3, #0]
    intx_cfg.XHIE = config->x_high_enabled;
 8003482:	78e0      	ldrb	r0, [r4, #3]
 8003484:	4008      	ands	r0, r1
 8003486:	0040      	lsls	r0, r0, #1
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	3701      	adds	r7, #1
 800348c:	43ba      	bics	r2, r7
 800348e:	4302      	orrs	r2, r0
 8003490:	701a      	strb	r2, [r3, #0]
    intx_cfg.YLIE = config->y_low_enabled;
 8003492:	7920      	ldrb	r0, [r4, #4]
 8003494:	4008      	ands	r0, r1
 8003496:	0080      	lsls	r0, r0, #2
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	3702      	adds	r7, #2
 800349c:	43ba      	bics	r2, r7
 800349e:	4302      	orrs	r2, r0
 80034a0:	701a      	strb	r2, [r3, #0]
    intx_cfg.YHIE = config->y_high_enabled;
 80034a2:	7960      	ldrb	r0, [r4, #5]
 80034a4:	4008      	ands	r0, r1
 80034a6:	00c0      	lsls	r0, r0, #3
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	3704      	adds	r7, #4
 80034ac:	43ba      	bics	r2, r7
 80034ae:	4302      	orrs	r2, r0
 80034b0:	701a      	strb	r2, [r3, #0]
    intx_cfg.ZLIE = config->z_low_enabled;
 80034b2:	79a0      	ldrb	r0, [r4, #6]
 80034b4:	4008      	ands	r0, r1
 80034b6:	0100      	lsls	r0, r0, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	3708      	adds	r7, #8
 80034bc:	43ba      	bics	r2, r7
 80034be:	4302      	orrs	r2, r0
 80034c0:	701a      	strb	r2, [r3, #0]
    intx_cfg.ZHIE = config->z_high_enabled;
 80034c2:	79e2      	ldrb	r2, [r4, #7]
 80034c4:	4011      	ands	r1, r2
 80034c6:	0149      	lsls	r1, r1, #5
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	2020      	movs	r0, #32
 80034cc:	4382      	bics	r2, r0
 80034ce:	4311      	orrs	r1, r2
 80034d0:	7019      	strb	r1, [r3, #0]
    switch (config->mode)
 80034d2:	7823      	ldrb	r3, [r4, #0]
 80034d4:	2b05      	cmp	r3, #5
 80034d6:	d852      	bhi.n	800357e <lis3dh_set_int_event_config+0x12e>
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4a70      	ldr	r2, [pc, #448]	@ (800369c <lis3dh_set_int_event_config+0x24c>)
 80034dc:	58d3      	ldr	r3, [r2, r3]
 80034de:	469f      	mov	pc, r3
 80034e0:	2300      	movs	r3, #0
 80034e2:	4699      	mov	r9, r3
        case lis3dh_6d_position : intx_cfg.AOI = 1; intx_cfg.SIXD = 1; break;
 80034e4:	ab01      	add	r3, sp, #4
 80034e6:	7819      	ldrb	r1, [r3, #0]
 80034e8:	2280      	movs	r2, #128	@ 0x80
 80034ea:	4252      	negs	r2, r2
 80034ec:	430a      	orrs	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	2140      	movs	r1, #64	@ 0x40
 80034f4:	430a      	orrs	r2, r1
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e00a      	b.n	8003510 <lis3dh_set_int_event_config+0xc0>
    switch (config->mode)
 80034fa:	2300      	movs	r3, #0
 80034fc:	4699      	mov	r9, r3
        case lis3dh_6d_movement : intx_cfg.AOI = 0; intx_cfg.SIXD = 1; break;
 80034fe:	ab01      	add	r3, sp, #4
 8003500:	7819      	ldrb	r1, [r3, #0]
 8003502:	227f      	movs	r2, #127	@ 0x7f
 8003504:	400a      	ands	r2, r1
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	2140      	movs	r1, #64	@ 0x40
 800350c:	430a      	orrs	r2, r1
 800350e:	701a      	strb	r2, [r3, #0]
    uint8_t intx_cfg_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_CFG : LIS3DH_REG_INT2_CFG;
 8003510:	2e00      	cmp	r6, #0
 8003512:	d137      	bne.n	8003584 <lis3dh_set_int_event_config+0x134>
 8003514:	2132      	movs	r1, #50	@ 0x32
 8003516:	2330      	movs	r3, #48	@ 0x30
 8003518:	4698      	mov	r8, r3
    uint8_t intx_dur_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_DUR : LIS3DH_REG_INT2_DUR;
 800351a:	2733      	movs	r7, #51	@ 0x33
        !lis3dh_reg_write (dev, intx_ths_addr, &config->threshold, 1) ||
 800351c:	1c62      	adds	r2, r4, #1
 800351e:	2301      	movs	r3, #1
 8003520:	0028      	movs	r0, r5
 8003522:	f7ff fd83 	bl	800302c <lis3dh_reg_write>
    if (// write the thresholds to registers IG_THS_*
 8003526:	2800      	cmp	r0, #0
 8003528:	d131      	bne.n	800358e <lis3dh_set_int_event_config+0x13e>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 800352a:	682a      	ldr	r2, [r5, #0]
 800352c:	23e0      	movs	r3, #224	@ 0xe0
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4313      	orrs	r3, r2
 8003532:	602b      	str	r3, [r5, #0]
        return false;
 8003534:	2000      	movs	r0, #0
}
 8003536:	b003      	add	sp, #12
 8003538:	bcc0      	pop	{r6, r7}
 800353a:	46b9      	mov	r9, r7
 800353c:	46b0      	mov	r8, r6
 800353e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case lis3dh_wake_up     : intx_cfg.AOI = 0; intx_cfg.SIXD = 0; break;
 8003540:	ab01      	add	r3, sp, #4
 8003542:	7819      	ldrb	r1, [r3, #0]
 8003544:	227f      	movs	r2, #127	@ 0x7f
 8003546:	400a      	ands	r2, r1
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	2140      	movs	r1, #64	@ 0x40
 800354e:	438a      	bics	r2, r1
 8003550:	701a      	strb	r2, [r3, #0]
    bool d4d_int = false;
 8003552:	2300      	movs	r3, #0
 8003554:	4699      	mov	r9, r3
        case lis3dh_wake_up     : intx_cfg.AOI = 0; intx_cfg.SIXD = 0; break;
 8003556:	e7db      	b.n	8003510 <lis3dh_set_int_event_config+0xc0>
        case lis3dh_free_fall   : intx_cfg.AOI = 1; intx_cfg.SIXD = 0; break;
 8003558:	ab01      	add	r3, sp, #4
 800355a:	7819      	ldrb	r1, [r3, #0]
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	4252      	negs	r2, r2
 8003560:	430a      	orrs	r2, r1
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	2140      	movs	r1, #64	@ 0x40
 8003568:	438a      	bics	r2, r1
 800356a:	701a      	strb	r2, [r3, #0]
    bool d4d_int = false;
 800356c:	2300      	movs	r3, #0
 800356e:	4699      	mov	r9, r3
        case lis3dh_free_fall   : intx_cfg.AOI = 1; intx_cfg.SIXD = 0; break;
 8003570:	e7ce      	b.n	8003510 <lis3dh_set_int_event_config+0xc0>
        case lis3dh_4d_movement : d4d_int = true;
 8003572:	2301      	movs	r3, #1
 8003574:	4699      	mov	r9, r3
 8003576:	e7c2      	b.n	80034fe <lis3dh_set_int_event_config+0xae>
        case lis3dh_4d_position : d4d_int = true;
 8003578:	2301      	movs	r3, #1
 800357a:	4699      	mov	r9, r3
 800357c:	e7b2      	b.n	80034e4 <lis3dh_set_int_event_config+0x94>
    switch (config->mode)
 800357e:	2300      	movs	r3, #0
 8003580:	4699      	mov	r9, r3
 8003582:	e7c5      	b.n	8003510 <lis3dh_set_int_event_config+0xc0>
 8003584:	2136      	movs	r1, #54	@ 0x36
 8003586:	2334      	movs	r3, #52	@ 0x34
 8003588:	4698      	mov	r8, r3
    uint8_t intx_dur_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_DUR : LIS3DH_REG_INT2_DUR;
 800358a:	2737      	movs	r7, #55	@ 0x37
 800358c:	e7c6      	b.n	800351c <lis3dh_set_int_event_config+0xcc>
        !lis3dh_reg_write (dev, intx_dur_addr, &config->duration, 1) ||
 800358e:	2301      	movs	r3, #1
 8003590:	0022      	movs	r2, r4
 8003592:	3209      	adds	r2, #9
 8003594:	0039      	movs	r1, r7
 8003596:	0028      	movs	r0, r5
 8003598:	f7ff fd48 	bl	800302c <lis3dh_reg_write>
        !lis3dh_reg_write (dev, intx_ths_addr, &config->threshold, 1) ||
 800359c:	2800      	cmp	r0, #0
 800359e:	d0c4      	beq.n	800352a <lis3dh_set_int_event_config+0xda>
        !lis3dh_reg_write (dev, intx_cfg_addr, (uint8_t*)&intx_cfg, 1))
 80035a0:	2301      	movs	r3, #1
 80035a2:	aa01      	add	r2, sp, #4
 80035a4:	4641      	mov	r1, r8
 80035a6:	0028      	movs	r0, r5
 80035a8:	f7ff fd40 	bl	800302c <lis3dh_reg_write>
        !lis3dh_reg_write (dev, intx_dur_addr, &config->duration, 1) ||
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d0bc      	beq.n	800352a <lis3dh_set_int_event_config+0xda>
    if (gen == lis3dh_int_event1_gen)
 80035b0:	2e00      	cmp	r6, #0
 80035b2:	d137      	bne.n	8003624 <lis3dh_set_int_event_config+0x1d4>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, LIR_INT1, config->latch);
 80035b4:	2301      	movs	r3, #1
 80035b6:	466a      	mov	r2, sp
 80035b8:	2124      	movs	r1, #36	@ 0x24
 80035ba:	0028      	movs	r0, r5
 80035bc:	f7ff fcee 	bl	8002f9c <lis3dh_reg_read>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d101      	bne.n	80035c8 <lis3dh_set_int_event_config+0x178>
 80035c4:	2000      	movs	r0, #0
 80035c6:	e7b6      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 80035c8:	7a23      	ldrb	r3, [r4, #8]
 80035ca:	2201      	movs	r2, #1
 80035cc:	401a      	ands	r2, r3
 80035ce:	00d2      	lsls	r2, r2, #3
 80035d0:	466b      	mov	r3, sp
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2108      	movs	r1, #8
 80035d6:	438b      	bics	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	466a      	mov	r2, sp
 80035dc:	7013      	strb	r3, [r2, #0]
 80035de:	2301      	movs	r3, #1
 80035e0:	311c      	adds	r1, #28
 80035e2:	0028      	movs	r0, r5
 80035e4:	f7ff fd22 	bl	800302c <lis3dh_reg_write>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	d0eb      	beq.n	80035c4 <lis3dh_set_int_event_config+0x174>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, D4D_INT1, d4d_int);
 80035ec:	2301      	movs	r3, #1
 80035ee:	466a      	mov	r2, sp
 80035f0:	2124      	movs	r1, #36	@ 0x24
 80035f2:	0028      	movs	r0, r5
 80035f4:	f7ff fcd2 	bl	8002f9c <lis3dh_reg_read>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d101      	bne.n	8003600 <lis3dh_set_int_event_config+0x1b0>
 80035fc:	2000      	movs	r0, #0
 80035fe:	e79a      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 8003600:	464b      	mov	r3, r9
 8003602:	009a      	lsls	r2, r3, #2
 8003604:	466b      	mov	r3, sp
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2104      	movs	r1, #4
 800360a:	438b      	bics	r3, r1
 800360c:	4313      	orrs	r3, r2
 800360e:	466a      	mov	r2, sp
 8003610:	7013      	strb	r3, [r2, #0]
 8003612:	2301      	movs	r3, #1
 8003614:	3120      	adds	r1, #32
 8003616:	0028      	movs	r0, r5
 8003618:	f7ff fd08 	bl	800302c <lis3dh_reg_write>
 800361c:	2800      	cmp	r0, #0
 800361e:	d000      	beq.n	8003622 <lis3dh_set_int_event_config+0x1d2>
 8003620:	e789      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 8003622:	e7eb      	b.n	80035fc <lis3dh_set_int_event_config+0x1ac>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, LIR_INT2, config->latch);
 8003624:	2301      	movs	r3, #1
 8003626:	466a      	mov	r2, sp
 8003628:	2124      	movs	r1, #36	@ 0x24
 800362a:	0028      	movs	r0, r5
 800362c:	f7ff fcb6 	bl	8002f9c <lis3dh_reg_read>
 8003630:	2800      	cmp	r0, #0
 8003632:	d101      	bne.n	8003638 <lis3dh_set_int_event_config+0x1e8>
 8003634:	2000      	movs	r0, #0
 8003636:	e77e      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 8003638:	7a23      	ldrb	r3, [r4, #8]
 800363a:	2201      	movs	r2, #1
 800363c:	401a      	ands	r2, r3
 800363e:	0052      	lsls	r2, r2, #1
 8003640:	466b      	mov	r3, sp
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2102      	movs	r1, #2
 8003646:	438b      	bics	r3, r1
 8003648:	4313      	orrs	r3, r2
 800364a:	466a      	mov	r2, sp
 800364c:	7013      	strb	r3, [r2, #0]
 800364e:	2301      	movs	r3, #1
 8003650:	3122      	adds	r1, #34	@ 0x22
 8003652:	0028      	movs	r0, r5
 8003654:	f7ff fcea 	bl	800302c <lis3dh_reg_write>
 8003658:	2800      	cmp	r0, #0
 800365a:	d0eb      	beq.n	8003634 <lis3dh_set_int_event_config+0x1e4>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, D4D_INT2, d4d_int);
 800365c:	2301      	movs	r3, #1
 800365e:	466a      	mov	r2, sp
 8003660:	2124      	movs	r1, #36	@ 0x24
 8003662:	0028      	movs	r0, r5
 8003664:	f7ff fc9a 	bl	8002f9c <lis3dh_reg_read>
 8003668:	2800      	cmp	r0, #0
 800366a:	d101      	bne.n	8003670 <lis3dh_set_int_event_config+0x220>
 800366c:	2000      	movs	r0, #0
 800366e:	e762      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 8003670:	466b      	mov	r3, sp
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2201      	movs	r2, #1
 8003676:	4393      	bics	r3, r2
 8003678:	464a      	mov	r2, r9
 800367a:	4313      	orrs	r3, r2
 800367c:	466a      	mov	r2, sp
 800367e:	7013      	strb	r3, [r2, #0]
 8003680:	2301      	movs	r3, #1
 8003682:	2124      	movs	r1, #36	@ 0x24
 8003684:	0028      	movs	r0, r5
 8003686:	f7ff fcd1 	bl	800302c <lis3dh_reg_write>
 800368a:	2800      	cmp	r0, #0
 800368c:	d000      	beq.n	8003690 <lis3dh_set_int_event_config+0x240>
 800368e:	e752      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 8003690:	e7ec      	b.n	800366c <lis3dh_set_int_event_config+0x21c>
    if (!dev || !config) return false;
 8003692:	2000      	movs	r0, #0
 8003694:	e74f      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 8003696:	2000      	movs	r0, #0
 8003698:	e74d      	b.n	8003536 <lis3dh_set_int_event_config+0xe6>
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	08005248 	.word	0x08005248

080036a0 <lis3dh_config_hpf>:
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	46ce      	mov	lr, r9
 80036a4:	4647      	mov	r7, r8
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b083      	sub	sp, #12
 80036aa:	0004      	movs	r4, r0
 80036ac:	0016      	movs	r6, r2
 80036ae:	aa0a      	add	r2, sp, #40	@ 0x28
 80036b0:	7812      	ldrb	r2, [r2, #0]
 80036b2:	4691      	mov	r9, r2
 80036b4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80036b6:	7817      	ldrb	r7, [r2, #0]
 80036b8:	aa0c      	add	r2, sp, #48	@ 0x30
 80036ba:	7815      	ldrb	r5, [r2, #0]
    if (!dev) return false;
 80036bc:	2800      	cmp	r0, #0
 80036be:	d043      	beq.n	8003748 <lis3dh_config_hpf+0xa8>
    dev->error_code = LIS3DH_OK;
 80036c0:	2200      	movs	r2, #0
 80036c2:	6002      	str	r2, [r0, #0]
    reg.HPM  = mode;
 80036c4:	aa01      	add	r2, sp, #4
 80036c6:	0189      	lsls	r1, r1, #6
 80036c8:	468c      	mov	ip, r1
 80036ca:	7811      	ldrb	r1, [r2, #0]
 80036cc:	4688      	mov	r8, r1
 80036ce:	213f      	movs	r1, #63	@ 0x3f
 80036d0:	4640      	mov	r0, r8
 80036d2:	4001      	ands	r1, r0
 80036d4:	4660      	mov	r0, ip
 80036d6:	4301      	orrs	r1, r0
 80036d8:	7011      	strb	r1, [r2, #0]
    reg.HPCF = cutoff;
 80036da:	2103      	movs	r1, #3
 80036dc:	400e      	ands	r6, r1
 80036de:	0136      	lsls	r6, r6, #4
 80036e0:	7811      	ldrb	r1, [r2, #0]
 80036e2:	2030      	movs	r0, #48	@ 0x30
 80036e4:	4381      	bics	r1, r0
 80036e6:	4331      	orrs	r1, r6
 80036e8:	7011      	strb	r1, [r2, #0]
    reg.FDS  = data;
 80036ea:	2101      	movs	r1, #1
 80036ec:	400b      	ands	r3, r1
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	7816      	ldrb	r6, [r2, #0]
 80036f2:	3828      	subs	r0, #40	@ 0x28
 80036f4:	4386      	bics	r6, r0
 80036f6:	4333      	orrs	r3, r6
 80036f8:	7013      	strb	r3, [r2, #0]
    reg.HPCLICK = click;
 80036fa:	4648      	mov	r0, r9
 80036fc:	4008      	ands	r0, r1
 80036fe:	0080      	lsls	r0, r0, #2
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2604      	movs	r6, #4
 8003704:	43b3      	bics	r3, r6
 8003706:	4303      	orrs	r3, r0
 8003708:	7013      	strb	r3, [r2, #0]
    reg.HPIS1   = int1;
 800370a:	400f      	ands	r7, r1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2001      	movs	r0, #1
 8003710:	4383      	bics	r3, r0
 8003712:	433b      	orrs	r3, r7
 8003714:	7013      	strb	r3, [r2, #0]
    reg.HPIS2   = int2;
 8003716:	4029      	ands	r1, r5
 8003718:	0049      	lsls	r1, r1, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3001      	adds	r0, #1
 800371e:	4383      	bics	r3, r0
 8003720:	430b      	orrs	r3, r1
 8003722:	7013      	strb	r3, [r2, #0]
    if (!lis3dh_reg_write (dev, LIS3DH_REG_CTRL2, (uint8_t*)&reg, 1))
 8003724:	2301      	movs	r3, #1
 8003726:	2121      	movs	r1, #33	@ 0x21
 8003728:	0020      	movs	r0, r4
 800372a:	f7ff fc7f 	bl	800302c <lis3dh_reg_write>
 800372e:	2800      	cmp	r0, #0
 8003730:	d004      	beq.n	800373c <lis3dh_config_hpf+0x9c>
}
 8003732:	b003      	add	sp, #12
 8003734:	bcc0      	pop	{r6, r7}
 8003736:	46b9      	mov	r9, r7
 8003738:	46b0      	mov	r8, r6
 800373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dev->error_code |= LIS3DH_CONFIG_HPF_FAILED;
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	2390      	movs	r3, #144	@ 0x90
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	4313      	orrs	r3, r2
 8003744:	6023      	str	r3, [r4, #0]
        return false;
 8003746:	e7f4      	b.n	8003732 <lis3dh_config_hpf+0x92>
    if (!dev) return false;
 8003748:	2000      	movs	r0, #0
 800374a:	e7f2      	b.n	8003732 <lis3dh_config_hpf+0x92>

0800374c <lis3dh_powerdown>:

void lis3dh_powerdown()
{
 800374c:	b500      	push	{lr}
 800374e:	b083      	sub	sp, #12
	if (sensor == NULL ) {
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <lis3dh_powerdown+0x34>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <lis3dh_powerdown+0x22>
		sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
	}

    lis3dh_set_mode (sensor, lis3dh_power_down, lis3dh_low_power, false, false, false);
 8003758:	4b09      	ldr	r3, [pc, #36]	@ (8003780 <lis3dh_powerdown+0x34>)
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	f7ff fd27 	bl	80031b8 <lis3dh_set_mode>
//    lis3dh_power_OFF();
}
 800376a:	b003      	add	sp, #12
 800376c:	bd00      	pop	{pc}
		sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	2132      	movs	r1, #50	@ 0x32
 8003772:	2000      	movs	r0, #0
 8003774:	f7ff fcac 	bl	80030d0 <lis3dh_init_sensor>
 8003778:	4b01      	ldr	r3, [pc, #4]	@ (8003780 <lis3dh_powerdown+0x34>)
 800377a:	6018      	str	r0, [r3, #0]
 800377c:	e7ec      	b.n	8003758 <lis3dh_powerdown+0xc>
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	20000490 	.word	0x20000490

08003784 <lis3dh_get_device>:
 */


lis3dh_sensor_t* lis3dh_get_device()
{
		return sensor;
 8003784:	4b01      	ldr	r3, [pc, #4]	@ (800378c <lis3dh_get_device+0x8>)
 8003786:	6818      	ldr	r0, [r3, #0]
}
 8003788:	4770      	bx	lr
 800378a:	46c0      	nop			@ (mov r8, r8)
 800378c:	20000490 	.word	0x20000490

08003790 <chan_to_deca>:

/* Channel */
// Only channels 2 and 5 are supported
int chan_to_deca(int i)
{
    switch (i)
 8003790:	2802      	cmp	r0, #2
 8003792:	d003      	beq.n	800379c <chan_to_deca+0xc>
 8003794:	2805      	cmp	r0, #5
 8003796:	d001      	beq.n	800379c <chan_to_deca+0xc>
    case 2 :
        return 2;
    case 5 :
        return 5;
    default :
        return -1;
 8003798:	2001      	movs	r0, #1
 800379a:	4240      	negs	r0, r0
    }
}
 800379c:	4770      	bx	lr

0800379e <deca_to_chan>:

int deca_to_chan(int i)
{
 800379e:	b510      	push	{r4, lr}
    return(chan_to_deca(i));
 80037a0:	f7ff fff6 	bl	8003790 <chan_to_deca>
}
 80037a4:	bd10      	pop	{r4, pc}
	...

080037a8 <bitrate_to_deca>:


/* Bitrate */
int bitrate_to_deca(int i)
{
    switch (i)
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <bitrate_to_deca+0x24>)
 80037aa:	4298      	cmp	r0, r3
 80037ac:	d006      	beq.n	80037bc <bitrate_to_deca+0x14>
 80037ae:	4b08      	ldr	r3, [pc, #32]	@ (80037d0 <bitrate_to_deca+0x28>)
 80037b0:	4298      	cmp	r0, r3
 80037b2:	d005      	beq.n	80037c0 <bitrate_to_deca+0x18>
 80037b4:	286e      	cmp	r0, #110	@ 0x6e
 80037b6:	d105      	bne.n	80037c4 <bitrate_to_deca+0x1c>
 80037b8:	2000      	movs	r0, #0
 80037ba:	e002      	b.n	80037c2 <bitrate_to_deca+0x1a>
    {
    case 110 :
        return DWT_BR_110K;
    case 850 :
        return DWT_BR_850K;
 80037bc:	2001      	movs	r0, #1
 80037be:	e000      	b.n	80037c2 <bitrate_to_deca+0x1a>
    case 6810 :
        return DWT_BR_6M8;
 80037c0:	2002      	movs	r0, #2
    default :
        return -1;
    }
}
 80037c2:	4770      	bx	lr
        return -1;
 80037c4:	2001      	movs	r0, #1
 80037c6:	4240      	negs	r0, r0
 80037c8:	e7fb      	b.n	80037c2 <bitrate_to_deca+0x1a>
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	00000352 	.word	0x00000352
 80037d0:	00001a9a 	.word	0x00001a9a

080037d4 <deca_to_bitrate>:

int deca_to_bitrate(int i)
{
    switch (i)
 80037d4:	2801      	cmp	r0, #1
 80037d6:	d005      	beq.n	80037e4 <deca_to_bitrate+0x10>
 80037d8:	2802      	cmp	r0, #2
 80037da:	d005      	beq.n	80037e8 <deca_to_bitrate+0x14>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d105      	bne.n	80037ec <deca_to_bitrate+0x18>
 80037e0:	306e      	adds	r0, #110	@ 0x6e
 80037e2:	e002      	b.n	80037ea <deca_to_bitrate+0x16>
    {
    case DWT_BR_110K :
        return 110;
    case DWT_BR_850K :
        return 850;
 80037e4:	4803      	ldr	r0, [pc, #12]	@ (80037f4 <deca_to_bitrate+0x20>)
 80037e6:	e000      	b.n	80037ea <deca_to_bitrate+0x16>
    case DWT_BR_6M8 :
        return 6810;
 80037e8:	4803      	ldr	r0, [pc, #12]	@ (80037f8 <deca_to_bitrate+0x24>)
    default :
        return -1;
    }
}
 80037ea:	4770      	bx	lr
        return -1;
 80037ec:	2001      	movs	r0, #1
 80037ee:	4240      	negs	r0, r0
 80037f0:	e7fb      	b.n	80037ea <deca_to_bitrate+0x16>
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	00000352 	.word	0x00000352
 80037f8:	00001a9a 	.word	0x00001a9a

080037fc <prf_to_deca>:


/* PRF */
int prf_to_deca(int i)
{
    switch (i)
 80037fc:	2810      	cmp	r0, #16
 80037fe:	d003      	beq.n	8003808 <prf_to_deca+0xc>
 8003800:	2840      	cmp	r0, #64	@ 0x40
 8003802:	d103      	bne.n	800380c <prf_to_deca+0x10>
    {
    case 16 :
        return DWT_PRF_16M;
    case 64 :
        return DWT_PRF_64M;
 8003804:	383e      	subs	r0, #62	@ 0x3e
 8003806:	e000      	b.n	800380a <prf_to_deca+0xe>
    switch (i)
 8003808:	2001      	movs	r0, #1
    default :
        return -1;
    }
}
 800380a:	4770      	bx	lr
        return -1;
 800380c:	2001      	movs	r0, #1
 800380e:	4240      	negs	r0, r0
 8003810:	e7fb      	b.n	800380a <prf_to_deca+0xe>

08003812 <deca_to_prf>:


int deca_to_prf(int i)
{
    switch (i)
 8003812:	2801      	cmp	r0, #1
 8003814:	d003      	beq.n	800381e <deca_to_prf+0xc>
 8003816:	2802      	cmp	r0, #2
 8003818:	d103      	bne.n	8003822 <deca_to_prf+0x10>
    {
    case  DWT_PRF_16M:
        return 16;
    case  DWT_PRF_64M:
        return 64;
 800381a:	303e      	adds	r0, #62	@ 0x3e
 800381c:	e000      	b.n	8003820 <deca_to_prf+0xe>
    switch (i)
 800381e:	2010      	movs	r0, #16
    default :
        return -1;
    }
}
 8003820:	4770      	bx	lr
        return -1;
 8003822:	2001      	movs	r0, #1
 8003824:	4240      	negs	r0, r0
 8003826:	e7fb      	b.n	8003820 <deca_to_prf+0xe>

08003828 <pac_to_deca>:


/* PAC */
int pac_to_deca(int i)
{
    switch (i)
 8003828:	2820      	cmp	r0, #32
 800382a:	d00a      	beq.n	8003842 <pac_to_deca+0x1a>
 800382c:	dc05      	bgt.n	800383a <pac_to_deca+0x12>
 800382e:	2808      	cmp	r0, #8
 8003830:	d009      	beq.n	8003846 <pac_to_deca+0x1e>
 8003832:	2810      	cmp	r0, #16
 8003834:	d109      	bne.n	800384a <pac_to_deca+0x22>
    {
    case 8 :
        return DWT_PAC8;
    case 16 :
        return DWT_PAC16;
 8003836:	380f      	subs	r0, #15
 8003838:	e004      	b.n	8003844 <pac_to_deca+0x1c>
    switch (i)
 800383a:	2840      	cmp	r0, #64	@ 0x40
 800383c:	d108      	bne.n	8003850 <pac_to_deca+0x28>
    case 32 :
        return DWT_PAC32;
    case 64 :
        return DWT_PAC64;
 800383e:	383d      	subs	r0, #61	@ 0x3d
 8003840:	e000      	b.n	8003844 <pac_to_deca+0x1c>
        return DWT_PAC32;
 8003842:	2002      	movs	r0, #2
    default :
        return -1;
    }
}
 8003844:	4770      	bx	lr
    switch (i)
 8003846:	2000      	movs	r0, #0
 8003848:	e7fc      	b.n	8003844 <pac_to_deca+0x1c>
        return -1;
 800384a:	2001      	movs	r0, #1
 800384c:	4240      	negs	r0, r0
 800384e:	e7f9      	b.n	8003844 <pac_to_deca+0x1c>
 8003850:	2001      	movs	r0, #1
 8003852:	4240      	negs	r0, r0
 8003854:	e7f6      	b.n	8003844 <pac_to_deca+0x1c>

08003856 <deca_to_pac>:

int deca_to_pac(int i)
{
    switch (i)
 8003856:	2802      	cmp	r0, #2
 8003858:	d00a      	beq.n	8003870 <deca_to_pac+0x1a>
 800385a:	dc05      	bgt.n	8003868 <deca_to_pac+0x12>
 800385c:	2800      	cmp	r0, #0
 800385e:	d009      	beq.n	8003874 <deca_to_pac+0x1e>
 8003860:	2801      	cmp	r0, #1
 8003862:	d109      	bne.n	8003878 <deca_to_pac+0x22>
    {
    case DWT_PAC8 :
        return 8;
    case DWT_PAC16 :
        return 16;
 8003864:	300f      	adds	r0, #15
 8003866:	e004      	b.n	8003872 <deca_to_pac+0x1c>
    switch (i)
 8003868:	2803      	cmp	r0, #3
 800386a:	d108      	bne.n	800387e <deca_to_pac+0x28>
    case DWT_PAC32 :
        return 32;
    case DWT_PAC64 :
        return 64;
 800386c:	303d      	adds	r0, #61	@ 0x3d
 800386e:	e000      	b.n	8003872 <deca_to_pac+0x1c>
        return 32;
 8003870:	2020      	movs	r0, #32
    default :
        return -1;
    }
}
 8003872:	4770      	bx	lr
    switch (i)
 8003874:	2008      	movs	r0, #8
 8003876:	e7fc      	b.n	8003872 <deca_to_pac+0x1c>
        return -1;
 8003878:	2001      	movs	r0, #1
 800387a:	4240      	negs	r0, r0
 800387c:	e7f9      	b.n	8003872 <deca_to_pac+0x1c>
 800387e:	2001      	movs	r0, #1
 8003880:	4240      	negs	r0, r0
 8003882:	e7f6      	b.n	8003872 <deca_to_pac+0x1c>

08003884 <plen_to_deca>:


/* PLEN */
int plen_to_deca(int i)
{
    switch (i)
 8003884:	2380      	movs	r3, #128	@ 0x80
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4298      	cmp	r0, r3
 800388a:	d018      	beq.n	80038be <plen_to_deca+0x3a>
 800388c:	dc09      	bgt.n	80038a2 <plen_to_deca+0x1e>
 800388e:	2880      	cmp	r0, #128	@ 0x80
 8003890:	d017      	beq.n	80038c2 <plen_to_deca+0x3e>
 8003892:	3b01      	subs	r3, #1
 8003894:	3bff      	subs	r3, #255	@ 0xff
 8003896:	4298      	cmp	r0, r3
 8003898:	d015      	beq.n	80038c6 <plen_to_deca+0x42>
 800389a:	2840      	cmp	r0, #64	@ 0x40
 800389c:	d115      	bne.n	80038ca <plen_to_deca+0x46>
    case 256 :
        return DWT_PLEN_256;
    case 128 :
        return DWT_PLEN_128;
    case 64 :
        return DWT_PLEN_64;
 800389e:	383c      	subs	r0, #60	@ 0x3c
    default :
        return -1;
    }
}
 80038a0:	4770      	bx	lr
    switch (i)
 80038a2:	23c0      	movs	r3, #192	@ 0xc0
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4298      	cmp	r0, r3
 80038a8:	d012      	beq.n	80038d0 <plen_to_deca+0x4c>
 80038aa:	2380      	movs	r3, #128	@ 0x80
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	4298      	cmp	r0, r3
 80038b0:	d010      	beq.n	80038d4 <plen_to_deca+0x50>
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4298      	cmp	r0, r3
 80038b8:	d10e      	bne.n	80038d8 <plen_to_deca+0x54>
        return DWT_PLEN_1024;
 80038ba:	2008      	movs	r0, #8
 80038bc:	e7f0      	b.n	80038a0 <plen_to_deca+0x1c>
        return DWT_PLEN_512;
 80038be:	2034      	movs	r0, #52	@ 0x34
 80038c0:	e7ee      	b.n	80038a0 <plen_to_deca+0x1c>
        return DWT_PLEN_128;
 80038c2:	2014      	movs	r0, #20
 80038c4:	e7ec      	b.n	80038a0 <plen_to_deca+0x1c>
        return DWT_PLEN_256;
 80038c6:	2024      	movs	r0, #36	@ 0x24
 80038c8:	e7ea      	b.n	80038a0 <plen_to_deca+0x1c>
        return -1;
 80038ca:	2001      	movs	r0, #1
 80038cc:	4240      	negs	r0, r0
 80038ce:	e7e7      	b.n	80038a0 <plen_to_deca+0x1c>
        return DWT_PLEN_1536;
 80038d0:	2018      	movs	r0, #24
 80038d2:	e7e5      	b.n	80038a0 <plen_to_deca+0x1c>
    switch (i)
 80038d4:	2028      	movs	r0, #40	@ 0x28
 80038d6:	e7e3      	b.n	80038a0 <plen_to_deca+0x1c>
        return -1;
 80038d8:	2001      	movs	r0, #1
 80038da:	4240      	negs	r0, r0
 80038dc:	e7e0      	b.n	80038a0 <plen_to_deca+0x1c>
	...

080038e0 <deca_to_plen>:

int deca_to_plen(int i)
{
    switch (i)
 80038e0:	3804      	subs	r0, #4
 80038e2:	2830      	cmp	r0, #48	@ 0x30
 80038e4:	d813      	bhi.n	800390e <deca_to_plen+0x2e>
 80038e6:	0080      	lsls	r0, r0, #2
 80038e8:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <deca_to_plen+0x3c>)
 80038ea:	581b      	ldr	r3, [r3, r0]
 80038ec:	469f      	mov	pc, r3
 80038ee:	2080      	movs	r0, #128	@ 0x80
 80038f0:	0100      	lsls	r0, r0, #4
 80038f2:	e001      	b.n	80038f8 <deca_to_plen+0x18>
    case DWT_PLEN_2048 :
        return 2048;
    case DWT_PLEN_1536 :
        return 1536;
    case DWT_PLEN_1024 :
        return 1024;
 80038f4:	2080      	movs	r0, #128	@ 0x80
 80038f6:	00c0      	lsls	r0, r0, #3
    case DWT_PLEN_64 :
        return 64;
    default :
        return -1;
    }
}
 80038f8:	4770      	bx	lr
        return 512;
 80038fa:	2080      	movs	r0, #128	@ 0x80
 80038fc:	0080      	lsls	r0, r0, #2
 80038fe:	e7fb      	b.n	80038f8 <deca_to_plen+0x18>
        return 256;
 8003900:	2080      	movs	r0, #128	@ 0x80
 8003902:	0040      	lsls	r0, r0, #1
 8003904:	e7f8      	b.n	80038f8 <deca_to_plen+0x18>
        return 128;
 8003906:	2080      	movs	r0, #128	@ 0x80
 8003908:	e7f6      	b.n	80038f8 <deca_to_plen+0x18>
        return 64;
 800390a:	2040      	movs	r0, #64	@ 0x40
 800390c:	e7f4      	b.n	80038f8 <deca_to_plen+0x18>
        return -1;
 800390e:	2001      	movs	r0, #1
 8003910:	4240      	negs	r0, r0
 8003912:	e7f1      	b.n	80038f8 <deca_to_plen+0x18>
        return 1536;
 8003914:	20c0      	movs	r0, #192	@ 0xc0
 8003916:	00c0      	lsls	r0, r0, #3
 8003918:	e7ee      	b.n	80038f8 <deca_to_plen+0x18>
 800391a:	46c0      	nop			@ (mov r8, r8)
 800391c:	08005260 	.word	0x08005260

08003920 <tvc_otp_read_txcfgref>:
 * @param[in] ref_values_t pointer to the reference structure
 * @param[out] ref values
 * @return  1 if CH2/CH5, 0 for other channels
 */
uint8_t tvc_otp_read_txcfgref(ref_values_t* ref, uint8 chan)
{
 8003920:	b530      	push	{r4, r5, lr}
 8003922:	b087      	sub	sp, #28
 8003924:	0005      	movs	r5, r0
 8003926:	000c      	movs	r4, r1
  /* OTP reading: transmission parameters */
  uint32 val[5];
  uint8 txp_address ;

  switch (chan)
 8003928:	2902      	cmp	r1, #2
 800392a:	d003      	beq.n	8003934 <tvc_otp_read_txcfgref+0x14>
 800392c:	2905      	cmp	r1, #5
 800392e:	d005      	beq.n	800393c <tvc_otp_read_txcfgref+0x1c>
 8003930:	2000      	movs	r0, #0
 8003932:	e056      	b.n	80039e2 <tvc_otp_read_txcfgref+0xc2>

  default:
      return 0;
  }

  if(chan == 5 || chan == 2)
 8003934:	2902      	cmp	r1, #2
 8003936:	d156      	bne.n	80039e6 <tvc_otp_read_txcfgref+0xc6>
      txp_address = OTP_TXPWR_CH2_PRF64_ADDRESS;
 8003938:	2013      	movs	r0, #19
 800393a:	e000      	b.n	800393e <tvc_otp_read_txcfgref+0x1e>
  switch (chan)
 800393c:	2019      	movs	r0, #25
  {
      /* OTP reading: from reference registers, should be calibrated during production test */
      dwt_otpread(txp_address, val, 1);
 800393e:	2201      	movs	r2, #1
 8003940:	a901      	add	r1, sp, #4
 8003942:	f7fe ff9f 	bl	8002884 <dwt_otpread>
      dwt_otpread(OTP_PGCNT_ADDRESS, val+1, 1);
 8003946:	2201      	movs	r2, #1
 8003948:	a902      	add	r1, sp, #8
 800394a:	201b      	movs	r0, #27
 800394c:	f7fe ff9a 	bl	8002884 <dwt_otpread>
      dwt_otpread(OTP_XTRIM_ADDRESS, val+2, 1);
 8003950:	2201      	movs	r2, #1
 8003952:	a903      	add	r1, sp, #12
 8003954:	201e      	movs	r0, #30
 8003956:	f7fe ff95 	bl	8002884 <dwt_otpread>
      dwt_otpread(OTP_TEMP_VBAT_ADDRESS, val+3, 1);
 800395a:	2201      	movs	r2, #1
 800395c:	a904      	add	r1, sp, #16
 800395e:	201d      	movs	r0, #29
 8003960:	f7fe ff90 	bl	8002884 <dwt_otpread>
      dwt_otpread(OTP_ANT_DLY, val+4, 1);
 8003964:	2201      	movs	r2, #1
 8003966:	a905      	add	r1, sp, #20
 8003968:	201c      	movs	r0, #28
 800396a:	f7fe ff8b 	bl	8002884 <dwt_otpread>

      if (OTP_VALID(val[0]) && OTP_VALID(val[1]) && OTP_VALID(val[2]) && OTP_VALID(val[3]) && OTP_VALID(val[4]) ) {
 800396e:	9a01      	ldr	r2, [sp, #4]
 8003970:	1e53      	subs	r3, r2, #1
 8003972:	3303      	adds	r3, #3
 8003974:	d827      	bhi.n	80039c6 <tvc_otp_read_txcfgref+0xa6>
 8003976:	9b02      	ldr	r3, [sp, #8]
 8003978:	3b01      	subs	r3, #1
 800397a:	3303      	adds	r3, #3
 800397c:	d823      	bhi.n	80039c6 <tvc_otp_read_txcfgref+0xa6>
 800397e:	9b03      	ldr	r3, [sp, #12]
 8003980:	3b01      	subs	r3, #1
 8003982:	3303      	adds	r3, #3
 8003984:	d81f      	bhi.n	80039c6 <tvc_otp_read_txcfgref+0xa6>
 8003986:	9b04      	ldr	r3, [sp, #16]
 8003988:	3b01      	subs	r3, #1
 800398a:	3303      	adds	r3, #3
 800398c:	d81b      	bhi.n	80039c6 <tvc_otp_read_txcfgref+0xa6>
 800398e:	9b05      	ldr	r3, [sp, #20]
 8003990:	3b01      	subs	r3, #1
 8003992:	3303      	adds	r3, #3
 8003994:	d817      	bhi.n	80039c6 <tvc_otp_read_txcfgref+0xa6>
          ref->power = val[0];
 8003996:	606a      	str	r2, [r5, #4]

          if (chan == 5)
 8003998:	2c05      	cmp	r4, #5
 800399a:	d00c      	beq.n	80039b6 <tvc_otp_read_txcfgref+0x96>
              ref->pgdly = (val[2] >> 16) & 0xff;
              ref->antdly = (val[4]) & 0xffff;
          }
          else
          {
              ref->pgcnt = (val[1] >> 16) & 0xffff;
 800399c:	ab01      	add	r3, sp, #4
 800399e:	88da      	ldrh	r2, [r3, #6]
 80039a0:	816a      	strh	r2, [r5, #10]
              ref->pgdly = (val[2] >> 24) & 0xff;
 80039a2:	7ada      	ldrb	r2, [r3, #11]
 80039a4:	702a      	strb	r2, [r5, #0]
              ref->antdly = (val[4] >> 16) & 0xffff;
 80039a6:	8a5b      	ldrh	r3, [r3, #18]
 80039a8:	81eb      	strh	r3, [r5, #14]
          }
          ref->temp  = val[3] & 0xff;
 80039aa:	9b04      	ldr	r3, [sp, #16]
 80039ac:	722b      	strb	r3, [r5, #8]
          ref->vbat  = (val[3] >> 8) & 0xff;
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	732b      	strb	r3, [r5, #12]
  else
  {
      // Error channel must be either 2 or 5 with DWM1001 TDoA Tag project
	  return 0;
  }
  return 1;
 80039b2:	2001      	movs	r0, #1
          ref->vbat  = (val[3] >> 8) & 0xff;
 80039b4:	e015      	b.n	80039e2 <tvc_otp_read_txcfgref+0xc2>
              ref->pgcnt = (val[1]) & 0xffff;
 80039b6:	ab01      	add	r3, sp, #4
 80039b8:	9a02      	ldr	r2, [sp, #8]
 80039ba:	816a      	strh	r2, [r5, #10]
              ref->pgdly = (val[2] >> 16) & 0xff;
 80039bc:	895a      	ldrh	r2, [r3, #10]
 80039be:	702a      	strb	r2, [r5, #0]
              ref->antdly = (val[4]) & 0xffff;
 80039c0:	9b05      	ldr	r3, [sp, #20]
 80039c2:	81eb      	strh	r3, [r5, #14]
 80039c4:	e7f1      	b.n	80039aa <tvc_otp_read_txcfgref+0x8a>
          ref->power = ref_goldenval[chan].power;
 80039c6:	4a09      	ldr	r2, [pc, #36]	@ (80039ec <tvc_otp_read_txcfgref+0xcc>)
 80039c8:	0124      	lsls	r4, r4, #4
 80039ca:	1913      	adds	r3, r2, r4
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	6069      	str	r1, [r5, #4]
          ref->pgcnt = ref_goldenval[chan].pgcnt;
 80039d0:	8959      	ldrh	r1, [r3, #10]
 80039d2:	8169      	strh	r1, [r5, #10]
          ref->temp  = ref_goldenval[chan].temp;
 80039d4:	7a19      	ldrb	r1, [r3, #8]
 80039d6:	7229      	strb	r1, [r5, #8]
          ref->pgdly = ref_goldenval[chan].pgdly;    
 80039d8:	5ca2      	ldrb	r2, [r4, r2]
 80039da:	702a      	strb	r2, [r5, #0]
          ref->vbat  = ref_goldenval[chan].vbat;
 80039dc:	7b1b      	ldrb	r3, [r3, #12]
 80039de:	732b      	strb	r3, [r5, #12]
  return 1;
 80039e0:	2001      	movs	r0, #1
}
 80039e2:	b007      	add	sp, #28
 80039e4:	bd30      	pop	{r4, r5, pc}
	  return 0;
 80039e6:	2000      	movs	r0, #0
 80039e8:	e7fb      	b.n	80039e2 <tvc_otp_read_txcfgref+0xc2>
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	08005324 	.word	0x08005324

080039f0 <malloc>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <malloc+0x10>)
 80039f4:	0001      	movs	r1, r0
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	f000 f830 	bl	8003a5c <_malloc_r>
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	20000014 	.word	0x20000014

08003a04 <free>:
 8003a04:	b510      	push	{r4, lr}
 8003a06:	4b03      	ldr	r3, [pc, #12]	@ (8003a14 <free+0x10>)
 8003a08:	0001      	movs	r1, r0
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	f000 f95c 	bl	8003cc8 <_free_r>
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	20000014 	.word	0x20000014

08003a18 <sbrk_aligned>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	4e0f      	ldr	r6, [pc, #60]	@ (8003a58 <sbrk_aligned+0x40>)
 8003a1c:	000d      	movs	r5, r1
 8003a1e:	6831      	ldr	r1, [r6, #0]
 8003a20:	0004      	movs	r4, r0
 8003a22:	2900      	cmp	r1, #0
 8003a24:	d102      	bne.n	8003a2c <sbrk_aligned+0x14>
 8003a26:	f000 f8ff 	bl	8003c28 <_sbrk_r>
 8003a2a:	6030      	str	r0, [r6, #0]
 8003a2c:	0029      	movs	r1, r5
 8003a2e:	0020      	movs	r0, r4
 8003a30:	f000 f8fa 	bl	8003c28 <_sbrk_r>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d103      	bne.n	8003a40 <sbrk_aligned+0x28>
 8003a38:	2501      	movs	r5, #1
 8003a3a:	426d      	negs	r5, r5
 8003a3c:	0028      	movs	r0, r5
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	2303      	movs	r3, #3
 8003a42:	1cc5      	adds	r5, r0, #3
 8003a44:	439d      	bics	r5, r3
 8003a46:	42a8      	cmp	r0, r5
 8003a48:	d0f8      	beq.n	8003a3c <sbrk_aligned+0x24>
 8003a4a:	1a29      	subs	r1, r5, r0
 8003a4c:	0020      	movs	r0, r4
 8003a4e:	f000 f8eb 	bl	8003c28 <_sbrk_r>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d1f2      	bne.n	8003a3c <sbrk_aligned+0x24>
 8003a56:	e7ef      	b.n	8003a38 <sbrk_aligned+0x20>
 8003a58:	20000494 	.word	0x20000494

08003a5c <_malloc_r>:
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	2203      	movs	r2, #3
 8003a60:	1ccb      	adds	r3, r1, #3
 8003a62:	4393      	bics	r3, r2
 8003a64:	3308      	adds	r3, #8
 8003a66:	0005      	movs	r5, r0
 8003a68:	001f      	movs	r7, r3
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d234      	bcs.n	8003ad8 <_malloc_r+0x7c>
 8003a6e:	270c      	movs	r7, #12
 8003a70:	42b9      	cmp	r1, r7
 8003a72:	d833      	bhi.n	8003adc <_malloc_r+0x80>
 8003a74:	0028      	movs	r0, r5
 8003a76:	f000 f871 	bl	8003b5c <__malloc_lock>
 8003a7a:	4e37      	ldr	r6, [pc, #220]	@ (8003b58 <_malloc_r+0xfc>)
 8003a7c:	6833      	ldr	r3, [r6, #0]
 8003a7e:	001c      	movs	r4, r3
 8003a80:	2c00      	cmp	r4, #0
 8003a82:	d12f      	bne.n	8003ae4 <_malloc_r+0x88>
 8003a84:	0039      	movs	r1, r7
 8003a86:	0028      	movs	r0, r5
 8003a88:	f7ff ffc6 	bl	8003a18 <sbrk_aligned>
 8003a8c:	0004      	movs	r4, r0
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d15f      	bne.n	8003b52 <_malloc_r+0xf6>
 8003a92:	6834      	ldr	r4, [r6, #0]
 8003a94:	9400      	str	r4, [sp, #0]
 8003a96:	9b00      	ldr	r3, [sp, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d14a      	bne.n	8003b32 <_malloc_r+0xd6>
 8003a9c:	2c00      	cmp	r4, #0
 8003a9e:	d052      	beq.n	8003b46 <_malloc_r+0xea>
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	0028      	movs	r0, r5
 8003aa4:	18e3      	adds	r3, r4, r3
 8003aa6:	9900      	ldr	r1, [sp, #0]
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	f000 f8bd 	bl	8003c28 <_sbrk_r>
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	4283      	cmp	r3, r0
 8003ab2:	d148      	bne.n	8003b46 <_malloc_r+0xea>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	0028      	movs	r0, r5
 8003ab8:	1aff      	subs	r7, r7, r3
 8003aba:	0039      	movs	r1, r7
 8003abc:	f7ff ffac 	bl	8003a18 <sbrk_aligned>
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d040      	beq.n	8003b46 <_malloc_r+0xea>
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	6833      	ldr	r3, [r6, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d133      	bne.n	8003b3a <_malloc_r+0xde>
 8003ad2:	9b00      	ldr	r3, [sp, #0]
 8003ad4:	6033      	str	r3, [r6, #0]
 8003ad6:	e019      	b.n	8003b0c <_malloc_r+0xb0>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	dac9      	bge.n	8003a70 <_malloc_r+0x14>
 8003adc:	230c      	movs	r3, #12
 8003ade:	602b      	str	r3, [r5, #0]
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ae4:	6821      	ldr	r1, [r4, #0]
 8003ae6:	1bc9      	subs	r1, r1, r7
 8003ae8:	d420      	bmi.n	8003b2c <_malloc_r+0xd0>
 8003aea:	290b      	cmp	r1, #11
 8003aec:	d90a      	bls.n	8003b04 <_malloc_r+0xa8>
 8003aee:	19e2      	adds	r2, r4, r7
 8003af0:	6027      	str	r7, [r4, #0]
 8003af2:	42a3      	cmp	r3, r4
 8003af4:	d104      	bne.n	8003b00 <_malloc_r+0xa4>
 8003af6:	6032      	str	r2, [r6, #0]
 8003af8:	6863      	ldr	r3, [r4, #4]
 8003afa:	6011      	str	r1, [r2, #0]
 8003afc:	6053      	str	r3, [r2, #4]
 8003afe:	e005      	b.n	8003b0c <_malloc_r+0xb0>
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e7f9      	b.n	8003af8 <_malloc_r+0x9c>
 8003b04:	6862      	ldr	r2, [r4, #4]
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	d10e      	bne.n	8003b28 <_malloc_r+0xcc>
 8003b0a:	6032      	str	r2, [r6, #0]
 8003b0c:	0028      	movs	r0, r5
 8003b0e:	f000 f82d 	bl	8003b6c <__malloc_unlock>
 8003b12:	0020      	movs	r0, r4
 8003b14:	2207      	movs	r2, #7
 8003b16:	300b      	adds	r0, #11
 8003b18:	1d23      	adds	r3, r4, #4
 8003b1a:	4390      	bics	r0, r2
 8003b1c:	1ac2      	subs	r2, r0, r3
 8003b1e:	4298      	cmp	r0, r3
 8003b20:	d0df      	beq.n	8003ae2 <_malloc_r+0x86>
 8003b22:	1a1b      	subs	r3, r3, r0
 8003b24:	50a3      	str	r3, [r4, r2]
 8003b26:	e7dc      	b.n	8003ae2 <_malloc_r+0x86>
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	e7ef      	b.n	8003b0c <_malloc_r+0xb0>
 8003b2c:	0023      	movs	r3, r4
 8003b2e:	6864      	ldr	r4, [r4, #4]
 8003b30:	e7a6      	b.n	8003a80 <_malloc_r+0x24>
 8003b32:	9c00      	ldr	r4, [sp, #0]
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	e7ad      	b.n	8003a96 <_malloc_r+0x3a>
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	42a3      	cmp	r3, r4
 8003b40:	d1fb      	bne.n	8003b3a <_malloc_r+0xde>
 8003b42:	2300      	movs	r3, #0
 8003b44:	e7da      	b.n	8003afc <_malloc_r+0xa0>
 8003b46:	230c      	movs	r3, #12
 8003b48:	0028      	movs	r0, r5
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	f000 f80e 	bl	8003b6c <__malloc_unlock>
 8003b50:	e7c6      	b.n	8003ae0 <_malloc_r+0x84>
 8003b52:	6007      	str	r7, [r0, #0]
 8003b54:	e7da      	b.n	8003b0c <_malloc_r+0xb0>
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	20000498 	.word	0x20000498

08003b5c <__malloc_lock>:
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	4802      	ldr	r0, [pc, #8]	@ (8003b68 <__malloc_lock+0xc>)
 8003b60:	f000 f89e 	bl	8003ca0 <__retarget_lock_acquire_recursive>
 8003b64:	bd10      	pop	{r4, pc}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	200005d8 	.word	0x200005d8

08003b6c <__malloc_unlock>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	4802      	ldr	r0, [pc, #8]	@ (8003b78 <__malloc_unlock+0xc>)
 8003b70:	f000 f897 	bl	8003ca2 <__retarget_lock_release_recursive>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	200005d8 	.word	0x200005d8

08003b7c <siprintf>:
 8003b7c:	b40e      	push	{r1, r2, r3}
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	2400      	movs	r4, #0
 8003b82:	490c      	ldr	r1, [pc, #48]	@ (8003bb4 <siprintf+0x38>)
 8003b84:	b09d      	sub	sp, #116	@ 0x74
 8003b86:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b88:	9002      	str	r0, [sp, #8]
 8003b8a:	9006      	str	r0, [sp, #24]
 8003b8c:	9107      	str	r1, [sp, #28]
 8003b8e:	9104      	str	r1, [sp, #16]
 8003b90:	4809      	ldr	r0, [pc, #36]	@ (8003bb8 <siprintf+0x3c>)
 8003b92:	490a      	ldr	r1, [pc, #40]	@ (8003bbc <siprintf+0x40>)
 8003b94:	cb04      	ldmia	r3!, {r2}
 8003b96:	9105      	str	r1, [sp, #20]
 8003b98:	6800      	ldr	r0, [r0, #0]
 8003b9a:	a902      	add	r1, sp, #8
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003ba0:	f000 f93c 	bl	8003e1c <_svfiprintf_r>
 8003ba4:	9b02      	ldr	r3, [sp, #8]
 8003ba6:	701c      	strb	r4, [r3, #0]
 8003ba8:	b01d      	add	sp, #116	@ 0x74
 8003baa:	bc10      	pop	{r4}
 8003bac:	bc08      	pop	{r3}
 8003bae:	b003      	add	sp, #12
 8003bb0:	4718      	bx	r3
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	7fffffff 	.word	0x7fffffff
 8003bb8:	20000014 	.word	0x20000014
 8003bbc:	ffff0208 	.word	0xffff0208

08003bc0 <siscanf>:
 8003bc0:	b40e      	push	{r1, r2, r3}
 8003bc2:	b570      	push	{r4, r5, r6, lr}
 8003bc4:	2381      	movs	r3, #129	@ 0x81
 8003bc6:	b09d      	sub	sp, #116	@ 0x74
 8003bc8:	466a      	mov	r2, sp
 8003bca:	2500      	movs	r5, #0
 8003bcc:	ac21      	add	r4, sp, #132	@ 0x84
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	cc40      	ldmia	r4!, {r6}
 8003bd2:	8293      	strh	r3, [r2, #20]
 8003bd4:	951b      	str	r5, [sp, #108]	@ 0x6c
 8003bd6:	9002      	str	r0, [sp, #8]
 8003bd8:	9006      	str	r0, [sp, #24]
 8003bda:	f7fc faf1 	bl	80001c0 <strlen>
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <siscanf+0x4c>)
 8003be0:	466a      	mov	r2, sp
 8003be2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003be4:	2301      	movs	r3, #1
 8003be6:	9003      	str	r0, [sp, #12]
 8003be8:	9007      	str	r0, [sp, #28]
 8003bea:	4809      	ldr	r0, [pc, #36]	@ (8003c10 <siscanf+0x50>)
 8003bec:	425b      	negs	r3, r3
 8003bee:	82d3      	strh	r3, [r2, #22]
 8003bf0:	a902      	add	r1, sp, #8
 8003bf2:	0023      	movs	r3, r4
 8003bf4:	0032      	movs	r2, r6
 8003bf6:	6800      	ldr	r0, [r0, #0]
 8003bf8:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003bfa:	9514      	str	r5, [sp, #80]	@ 0x50
 8003bfc:	9401      	str	r4, [sp, #4]
 8003bfe:	f000 fa67 	bl	80040d0 <__ssvfiscanf_r>
 8003c02:	b01d      	add	sp, #116	@ 0x74
 8003c04:	bc70      	pop	{r4, r5, r6}
 8003c06:	bc08      	pop	{r3}
 8003c08:	b003      	add	sp, #12
 8003c0a:	4718      	bx	r3
 8003c0c:	08003c15 	.word	0x08003c15
 8003c10:	20000014 	.word	0x20000014

08003c14 <__seofread>:
 8003c14:	2000      	movs	r0, #0
 8003c16:	4770      	bx	lr

08003c18 <memset>:
 8003c18:	0003      	movs	r3, r0
 8003c1a:	1882      	adds	r2, r0, r2
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	7019      	strb	r1, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <_sbrk_r>:
 8003c28:	2300      	movs	r3, #0
 8003c2a:	b570      	push	{r4, r5, r6, lr}
 8003c2c:	4d06      	ldr	r5, [pc, #24]	@ (8003c48 <_sbrk_r+0x20>)
 8003c2e:	0004      	movs	r4, r0
 8003c30:	0008      	movs	r0, r1
 8003c32:	602b      	str	r3, [r5, #0]
 8003c34:	f7fc ffd0 	bl	8000bd8 <_sbrk>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d103      	bne.n	8003c44 <_sbrk_r+0x1c>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d000      	beq.n	8003c44 <_sbrk_r+0x1c>
 8003c42:	6023      	str	r3, [r4, #0]
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	200005d4 	.word	0x200005d4

08003c4c <__errno>:
 8003c4c:	4b01      	ldr	r3, [pc, #4]	@ (8003c54 <__errno+0x8>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	4770      	bx	lr
 8003c52:	46c0      	nop			@ (mov r8, r8)
 8003c54:	20000014 	.word	0x20000014

08003c58 <__libc_init_array>:
 8003c58:	b570      	push	{r4, r5, r6, lr}
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	4c0c      	ldr	r4, [pc, #48]	@ (8003c90 <__libc_init_array+0x38>)
 8003c5e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c94 <__libc_init_array+0x3c>)
 8003c60:	1b64      	subs	r4, r4, r5
 8003c62:	10a4      	asrs	r4, r4, #2
 8003c64:	42a6      	cmp	r6, r4
 8003c66:	d109      	bne.n	8003c7c <__libc_init_array+0x24>
 8003c68:	2600      	movs	r6, #0
 8003c6a:	f001 f853 	bl	8004d14 <_init>
 8003c6e:	4c0a      	ldr	r4, [pc, #40]	@ (8003c98 <__libc_init_array+0x40>)
 8003c70:	4d0a      	ldr	r5, [pc, #40]	@ (8003c9c <__libc_init_array+0x44>)
 8003c72:	1b64      	subs	r4, r4, r5
 8003c74:	10a4      	asrs	r4, r4, #2
 8003c76:	42a6      	cmp	r6, r4
 8003c78:	d105      	bne.n	8003c86 <__libc_init_array+0x2e>
 8003c7a:	bd70      	pop	{r4, r5, r6, pc}
 8003c7c:	00b3      	lsls	r3, r6, #2
 8003c7e:	58eb      	ldr	r3, [r5, r3]
 8003c80:	4798      	blx	r3
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7ee      	b.n	8003c64 <__libc_init_array+0xc>
 8003c86:	00b3      	lsls	r3, r6, #2
 8003c88:	58eb      	ldr	r3, [r5, r3]
 8003c8a:	4798      	blx	r3
 8003c8c:	3601      	adds	r6, #1
 8003c8e:	e7f2      	b.n	8003c76 <__libc_init_array+0x1e>
 8003c90:	080054d4 	.word	0x080054d4
 8003c94:	080054d4 	.word	0x080054d4
 8003c98:	080054d8 	.word	0x080054d8
 8003c9c:	080054d4 	.word	0x080054d4

08003ca0 <__retarget_lock_acquire_recursive>:
 8003ca0:	4770      	bx	lr

08003ca2 <__retarget_lock_release_recursive>:
 8003ca2:	4770      	bx	lr

08003ca4 <strcpy>:
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	780a      	ldrb	r2, [r1, #0]
 8003ca8:	3101      	adds	r1, #1
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	2a00      	cmp	r2, #0
 8003cb0:	d1f9      	bne.n	8003ca6 <strcpy+0x2>
 8003cb2:	4770      	bx	lr

08003cb4 <memcpy>:
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	b510      	push	{r4, lr}
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d100      	bne.n	8003cbe <memcpy+0xa>
 8003cbc:	bd10      	pop	{r4, pc}
 8003cbe:	5ccc      	ldrb	r4, [r1, r3]
 8003cc0:	54c4      	strb	r4, [r0, r3]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	e7f8      	b.n	8003cb8 <memcpy+0x4>
	...

08003cc8 <_free_r>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	0005      	movs	r5, r0
 8003ccc:	1e0c      	subs	r4, r1, #0
 8003cce:	d010      	beq.n	8003cf2 <_free_r+0x2a>
 8003cd0:	3c04      	subs	r4, #4
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da00      	bge.n	8003cda <_free_r+0x12>
 8003cd8:	18e4      	adds	r4, r4, r3
 8003cda:	0028      	movs	r0, r5
 8003cdc:	f7ff ff3e 	bl	8003b5c <__malloc_lock>
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <_free_r+0x90>)
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <_free_r+0x2c>
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	6014      	str	r4, [r2, #0]
 8003cec:	0028      	movs	r0, r5
 8003cee:	f7ff ff3d 	bl	8003b6c <__malloc_unlock>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	d908      	bls.n	8003d0a <_free_r+0x42>
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	1821      	adds	r1, r4, r0
 8003cfc:	428b      	cmp	r3, r1
 8003cfe:	d1f3      	bne.n	8003ce8 <_free_r+0x20>
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	1809      	adds	r1, r1, r0
 8003d06:	6021      	str	r1, [r4, #0]
 8003d08:	e7ee      	b.n	8003ce8 <_free_r+0x20>
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <_free_r+0x4e>
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	d9f9      	bls.n	8003d0a <_free_r+0x42>
 8003d16:	6811      	ldr	r1, [r2, #0]
 8003d18:	1850      	adds	r0, r2, r1
 8003d1a:	42a0      	cmp	r0, r4
 8003d1c:	d10b      	bne.n	8003d36 <_free_r+0x6e>
 8003d1e:	6820      	ldr	r0, [r4, #0]
 8003d20:	1809      	adds	r1, r1, r0
 8003d22:	1850      	adds	r0, r2, r1
 8003d24:	6011      	str	r1, [r2, #0]
 8003d26:	4283      	cmp	r3, r0
 8003d28:	d1e0      	bne.n	8003cec <_free_r+0x24>
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	1841      	adds	r1, r0, r1
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	6053      	str	r3, [r2, #4]
 8003d34:	e7da      	b.n	8003cec <_free_r+0x24>
 8003d36:	42a0      	cmp	r0, r4
 8003d38:	d902      	bls.n	8003d40 <_free_r+0x78>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	e7d5      	b.n	8003cec <_free_r+0x24>
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	1821      	adds	r1, r4, r0
 8003d44:	428b      	cmp	r3, r1
 8003d46:	d103      	bne.n	8003d50 <_free_r+0x88>
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	1809      	adds	r1, r1, r0
 8003d4e:	6021      	str	r1, [r4, #0]
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	6054      	str	r4, [r2, #4]
 8003d54:	e7ca      	b.n	8003cec <_free_r+0x24>
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	20000498 	.word	0x20000498

08003d5c <__ssputs_r>:
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	688e      	ldr	r6, [r1, #8]
 8003d60:	b085      	sub	sp, #20
 8003d62:	001f      	movs	r7, r3
 8003d64:	000c      	movs	r4, r1
 8003d66:	680b      	ldr	r3, [r1, #0]
 8003d68:	9002      	str	r0, [sp, #8]
 8003d6a:	9203      	str	r2, [sp, #12]
 8003d6c:	42be      	cmp	r6, r7
 8003d6e:	d830      	bhi.n	8003dd2 <__ssputs_r+0x76>
 8003d70:	210c      	movs	r1, #12
 8003d72:	5e62      	ldrsh	r2, [r4, r1]
 8003d74:	2190      	movs	r1, #144	@ 0x90
 8003d76:	00c9      	lsls	r1, r1, #3
 8003d78:	420a      	tst	r2, r1
 8003d7a:	d028      	beq.n	8003dce <__ssputs_r+0x72>
 8003d7c:	2003      	movs	r0, #3
 8003d7e:	6921      	ldr	r1, [r4, #16]
 8003d80:	1a5b      	subs	r3, r3, r1
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	6963      	ldr	r3, [r4, #20]
 8003d86:	4343      	muls	r3, r0
 8003d88:	9801      	ldr	r0, [sp, #4]
 8003d8a:	0fdd      	lsrs	r5, r3, #31
 8003d8c:	18ed      	adds	r5, r5, r3
 8003d8e:	1c7b      	adds	r3, r7, #1
 8003d90:	181b      	adds	r3, r3, r0
 8003d92:	106d      	asrs	r5, r5, #1
 8003d94:	42ab      	cmp	r3, r5
 8003d96:	d900      	bls.n	8003d9a <__ssputs_r+0x3e>
 8003d98:	001d      	movs	r5, r3
 8003d9a:	0552      	lsls	r2, r2, #21
 8003d9c:	d528      	bpl.n	8003df0 <__ssputs_r+0x94>
 8003d9e:	0029      	movs	r1, r5
 8003da0:	9802      	ldr	r0, [sp, #8]
 8003da2:	f7ff fe5b 	bl	8003a5c <_malloc_r>
 8003da6:	1e06      	subs	r6, r0, #0
 8003da8:	d02c      	beq.n	8003e04 <__ssputs_r+0xa8>
 8003daa:	9a01      	ldr	r2, [sp, #4]
 8003dac:	6921      	ldr	r1, [r4, #16]
 8003dae:	f7ff ff81 	bl	8003cb4 <memcpy>
 8003db2:	89a2      	ldrh	r2, [r4, #12]
 8003db4:	4b18      	ldr	r3, [pc, #96]	@ (8003e18 <__ssputs_r+0xbc>)
 8003db6:	401a      	ands	r2, r3
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	6126      	str	r6, [r4, #16]
 8003dc2:	18f6      	adds	r6, r6, r3
 8003dc4:	6026      	str	r6, [r4, #0]
 8003dc6:	003e      	movs	r6, r7
 8003dc8:	6165      	str	r5, [r4, #20]
 8003dca:	1aed      	subs	r5, r5, r3
 8003dcc:	60a5      	str	r5, [r4, #8]
 8003dce:	42be      	cmp	r6, r7
 8003dd0:	d900      	bls.n	8003dd4 <__ssputs_r+0x78>
 8003dd2:	003e      	movs	r6, r7
 8003dd4:	0032      	movs	r2, r6
 8003dd6:	9903      	ldr	r1, [sp, #12]
 8003dd8:	6820      	ldr	r0, [r4, #0]
 8003dda:	f000 fe31 	bl	8004a40 <memmove>
 8003dde:	2000      	movs	r0, #0
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	1b9b      	subs	r3, r3, r6
 8003de4:	60a3      	str	r3, [r4, #8]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	199b      	adds	r3, r3, r6
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	b005      	add	sp, #20
 8003dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003df0:	002a      	movs	r2, r5
 8003df2:	9802      	ldr	r0, [sp, #8]
 8003df4:	f000 fe41 	bl	8004a7a <_realloc_r>
 8003df8:	1e06      	subs	r6, r0, #0
 8003dfa:	d1e0      	bne.n	8003dbe <__ssputs_r+0x62>
 8003dfc:	6921      	ldr	r1, [r4, #16]
 8003dfe:	9802      	ldr	r0, [sp, #8]
 8003e00:	f7ff ff62 	bl	8003cc8 <_free_r>
 8003e04:	230c      	movs	r3, #12
 8003e06:	2001      	movs	r0, #1
 8003e08:	9a02      	ldr	r2, [sp, #8]
 8003e0a:	4240      	negs	r0, r0
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	89a2      	ldrh	r2, [r4, #12]
 8003e10:	3334      	adds	r3, #52	@ 0x34
 8003e12:	4313      	orrs	r3, r2
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	e7e9      	b.n	8003dec <__ssputs_r+0x90>
 8003e18:	fffffb7f 	.word	0xfffffb7f

08003e1c <_svfiprintf_r>:
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1e:	b0a1      	sub	sp, #132	@ 0x84
 8003e20:	9003      	str	r0, [sp, #12]
 8003e22:	001d      	movs	r5, r3
 8003e24:	898b      	ldrh	r3, [r1, #12]
 8003e26:	000f      	movs	r7, r1
 8003e28:	0016      	movs	r6, r2
 8003e2a:	061b      	lsls	r3, r3, #24
 8003e2c:	d511      	bpl.n	8003e52 <_svfiprintf_r+0x36>
 8003e2e:	690b      	ldr	r3, [r1, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10e      	bne.n	8003e52 <_svfiprintf_r+0x36>
 8003e34:	2140      	movs	r1, #64	@ 0x40
 8003e36:	f7ff fe11 	bl	8003a5c <_malloc_r>
 8003e3a:	6038      	str	r0, [r7, #0]
 8003e3c:	6138      	str	r0, [r7, #16]
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d105      	bne.n	8003e4e <_svfiprintf_r+0x32>
 8003e42:	230c      	movs	r3, #12
 8003e44:	9a03      	ldr	r2, [sp, #12]
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	2001      	movs	r0, #1
 8003e4a:	4240      	negs	r0, r0
 8003e4c:	e0cf      	b.n	8003fee <_svfiprintf_r+0x1d2>
 8003e4e:	2340      	movs	r3, #64	@ 0x40
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	ac08      	add	r4, sp, #32
 8003e56:	6163      	str	r3, [r4, #20]
 8003e58:	3320      	adds	r3, #32
 8003e5a:	7663      	strb	r3, [r4, #25]
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	76a3      	strb	r3, [r4, #26]
 8003e60:	9507      	str	r5, [sp, #28]
 8003e62:	0035      	movs	r5, r6
 8003e64:	782b      	ldrb	r3, [r5, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <_svfiprintf_r+0x52>
 8003e6a:	2b25      	cmp	r3, #37	@ 0x25
 8003e6c:	d148      	bne.n	8003f00 <_svfiprintf_r+0xe4>
 8003e6e:	1bab      	subs	r3, r5, r6
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	42b5      	cmp	r5, r6
 8003e74:	d00b      	beq.n	8003e8e <_svfiprintf_r+0x72>
 8003e76:	0032      	movs	r2, r6
 8003e78:	0039      	movs	r1, r7
 8003e7a:	9803      	ldr	r0, [sp, #12]
 8003e7c:	f7ff ff6e 	bl	8003d5c <__ssputs_r>
 8003e80:	3001      	adds	r0, #1
 8003e82:	d100      	bne.n	8003e86 <_svfiprintf_r+0x6a>
 8003e84:	e0ae      	b.n	8003fe4 <_svfiprintf_r+0x1c8>
 8003e86:	6963      	ldr	r3, [r4, #20]
 8003e88:	9a05      	ldr	r2, [sp, #20]
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	6163      	str	r3, [r4, #20]
 8003e8e:	782b      	ldrb	r3, [r5, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d100      	bne.n	8003e96 <_svfiprintf_r+0x7a>
 8003e94:	e0a6      	b.n	8003fe4 <_svfiprintf_r+0x1c8>
 8003e96:	2201      	movs	r2, #1
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4252      	negs	r2, r2
 8003e9c:	6062      	str	r2, [r4, #4]
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	3254      	adds	r2, #84	@ 0x54
 8003ea2:	1852      	adds	r2, r2, r1
 8003ea4:	1c6e      	adds	r6, r5, #1
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	60e3      	str	r3, [r4, #12]
 8003eaa:	60a3      	str	r3, [r4, #8]
 8003eac:	7013      	strb	r3, [r2, #0]
 8003eae:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003eb0:	4b54      	ldr	r3, [pc, #336]	@ (8004004 <_svfiprintf_r+0x1e8>)
 8003eb2:	2205      	movs	r2, #5
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	7831      	ldrb	r1, [r6, #0]
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	f000 fdd3 	bl	8004a64 <memchr>
 8003ebe:	1c75      	adds	r5, r6, #1
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d11f      	bne.n	8003f04 <_svfiprintf_r+0xe8>
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	06d3      	lsls	r3, r2, #27
 8003ec8:	d504      	bpl.n	8003ed4 <_svfiprintf_r+0xb8>
 8003eca:	2353      	movs	r3, #83	@ 0x53
 8003ecc:	a904      	add	r1, sp, #16
 8003ece:	185b      	adds	r3, r3, r1
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	7019      	strb	r1, [r3, #0]
 8003ed4:	0713      	lsls	r3, r2, #28
 8003ed6:	d504      	bpl.n	8003ee2 <_svfiprintf_r+0xc6>
 8003ed8:	2353      	movs	r3, #83	@ 0x53
 8003eda:	a904      	add	r1, sp, #16
 8003edc:	185b      	adds	r3, r3, r1
 8003ede:	212b      	movs	r1, #43	@ 0x2b
 8003ee0:	7019      	strb	r1, [r3, #0]
 8003ee2:	7833      	ldrb	r3, [r6, #0]
 8003ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ee6:	d016      	beq.n	8003f16 <_svfiprintf_r+0xfa>
 8003ee8:	0035      	movs	r5, r6
 8003eea:	2100      	movs	r1, #0
 8003eec:	200a      	movs	r0, #10
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	782a      	ldrb	r2, [r5, #0]
 8003ef2:	1c6e      	adds	r6, r5, #1
 8003ef4:	3a30      	subs	r2, #48	@ 0x30
 8003ef6:	2a09      	cmp	r2, #9
 8003ef8:	d950      	bls.n	8003f9c <_svfiprintf_r+0x180>
 8003efa:	2900      	cmp	r1, #0
 8003efc:	d111      	bne.n	8003f22 <_svfiprintf_r+0x106>
 8003efe:	e017      	b.n	8003f30 <_svfiprintf_r+0x114>
 8003f00:	3501      	adds	r5, #1
 8003f02:	e7af      	b.n	8003e64 <_svfiprintf_r+0x48>
 8003f04:	9b05      	ldr	r3, [sp, #20]
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4083      	lsls	r3, r0
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	002e      	movs	r6, r5
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	e7cc      	b.n	8003eb0 <_svfiprintf_r+0x94>
 8003f16:	9b07      	ldr	r3, [sp, #28]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	9107      	str	r1, [sp, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	db01      	blt.n	8003f26 <_svfiprintf_r+0x10a>
 8003f22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f24:	e004      	b.n	8003f30 <_svfiprintf_r+0x114>
 8003f26:	425b      	negs	r3, r3
 8003f28:	60e3      	str	r3, [r4, #12]
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	782b      	ldrb	r3, [r5, #0]
 8003f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f34:	d10c      	bne.n	8003f50 <_svfiprintf_r+0x134>
 8003f36:	786b      	ldrb	r3, [r5, #1]
 8003f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f3a:	d134      	bne.n	8003fa6 <_svfiprintf_r+0x18a>
 8003f3c:	9b07      	ldr	r3, [sp, #28]
 8003f3e:	3502      	adds	r5, #2
 8003f40:	1d1a      	adds	r2, r3, #4
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	9207      	str	r2, [sp, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	da01      	bge.n	8003f4e <_svfiprintf_r+0x132>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	425b      	negs	r3, r3
 8003f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f50:	4e2d      	ldr	r6, [pc, #180]	@ (8004008 <_svfiprintf_r+0x1ec>)
 8003f52:	2203      	movs	r2, #3
 8003f54:	0030      	movs	r0, r6
 8003f56:	7829      	ldrb	r1, [r5, #0]
 8003f58:	f000 fd84 	bl	8004a64 <memchr>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d006      	beq.n	8003f6e <_svfiprintf_r+0x152>
 8003f60:	2340      	movs	r3, #64	@ 0x40
 8003f62:	1b80      	subs	r0, r0, r6
 8003f64:	4083      	lsls	r3, r0
 8003f66:	6822      	ldr	r2, [r4, #0]
 8003f68:	3501      	adds	r5, #1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	7829      	ldrb	r1, [r5, #0]
 8003f70:	2206      	movs	r2, #6
 8003f72:	4826      	ldr	r0, [pc, #152]	@ (800400c <_svfiprintf_r+0x1f0>)
 8003f74:	1c6e      	adds	r6, r5, #1
 8003f76:	7621      	strb	r1, [r4, #24]
 8003f78:	f000 fd74 	bl	8004a64 <memchr>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d038      	beq.n	8003ff2 <_svfiprintf_r+0x1d6>
 8003f80:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <_svfiprintf_r+0x1f4>)
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d122      	bne.n	8003fcc <_svfiprintf_r+0x1b0>
 8003f86:	2207      	movs	r2, #7
 8003f88:	9b07      	ldr	r3, [sp, #28]
 8003f8a:	3307      	adds	r3, #7
 8003f8c:	4393      	bics	r3, r2
 8003f8e:	3308      	adds	r3, #8
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	6963      	ldr	r3, [r4, #20]
 8003f94:	9a04      	ldr	r2, [sp, #16]
 8003f96:	189b      	adds	r3, r3, r2
 8003f98:	6163      	str	r3, [r4, #20]
 8003f9a:	e762      	b.n	8003e62 <_svfiprintf_r+0x46>
 8003f9c:	4343      	muls	r3, r0
 8003f9e:	0035      	movs	r5, r6
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	e7a4      	b.n	8003ef0 <_svfiprintf_r+0xd4>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	200a      	movs	r0, #10
 8003faa:	0019      	movs	r1, r3
 8003fac:	3501      	adds	r5, #1
 8003fae:	6063      	str	r3, [r4, #4]
 8003fb0:	782a      	ldrb	r2, [r5, #0]
 8003fb2:	1c6e      	adds	r6, r5, #1
 8003fb4:	3a30      	subs	r2, #48	@ 0x30
 8003fb6:	2a09      	cmp	r2, #9
 8003fb8:	d903      	bls.n	8003fc2 <_svfiprintf_r+0x1a6>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0c8      	beq.n	8003f50 <_svfiprintf_r+0x134>
 8003fbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8003fc0:	e7c6      	b.n	8003f50 <_svfiprintf_r+0x134>
 8003fc2:	4341      	muls	r1, r0
 8003fc4:	0035      	movs	r5, r6
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	1889      	adds	r1, r1, r2
 8003fca:	e7f1      	b.n	8003fb0 <_svfiprintf_r+0x194>
 8003fcc:	aa07      	add	r2, sp, #28
 8003fce:	9200      	str	r2, [sp, #0]
 8003fd0:	0021      	movs	r1, r4
 8003fd2:	003a      	movs	r2, r7
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8004014 <_svfiprintf_r+0x1f8>)
 8003fd6:	9803      	ldr	r0, [sp, #12]
 8003fd8:	e000      	b.n	8003fdc <_svfiprintf_r+0x1c0>
 8003fda:	bf00      	nop
 8003fdc:	9004      	str	r0, [sp, #16]
 8003fde:	9b04      	ldr	r3, [sp, #16]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	d1d6      	bne.n	8003f92 <_svfiprintf_r+0x176>
 8003fe4:	89bb      	ldrh	r3, [r7, #12]
 8003fe6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003fe8:	065b      	lsls	r3, r3, #25
 8003fea:	d500      	bpl.n	8003fee <_svfiprintf_r+0x1d2>
 8003fec:	e72c      	b.n	8003e48 <_svfiprintf_r+0x2c>
 8003fee:	b021      	add	sp, #132	@ 0x84
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	aa07      	add	r2, sp, #28
 8003ff4:	9200      	str	r2, [sp, #0]
 8003ff6:	0021      	movs	r1, r4
 8003ff8:	003a      	movs	r2, r7
 8003ffa:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <_svfiprintf_r+0x1f8>)
 8003ffc:	9803      	ldr	r0, [sp, #12]
 8003ffe:	f000 fa3b 	bl	8004478 <_printf_i>
 8004002:	e7eb      	b.n	8003fdc <_svfiprintf_r+0x1c0>
 8004004:	08005485 	.word	0x08005485
 8004008:	0800548b 	.word	0x0800548b
 800400c:	0800548f 	.word	0x0800548f
 8004010:	00000000 	.word	0x00000000
 8004014:	08003d5d 	.word	0x08003d5d

08004018 <_sungetc_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	0014      	movs	r4, r2
 800401c:	1c4b      	adds	r3, r1, #1
 800401e:	d103      	bne.n	8004028 <_sungetc_r+0x10>
 8004020:	2501      	movs	r5, #1
 8004022:	426d      	negs	r5, r5
 8004024:	0028      	movs	r0, r5
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	8993      	ldrh	r3, [r2, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	4393      	bics	r3, r2
 800402e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	b2ce      	uxtb	r6, r1
 8004034:	6863      	ldr	r3, [r4, #4]
 8004036:	b2cd      	uxtb	r5, r1
 8004038:	2a00      	cmp	r2, #0
 800403a:	d010      	beq.n	800405e <_sungetc_r+0x46>
 800403c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800403e:	429a      	cmp	r2, r3
 8004040:	dd07      	ble.n	8004052 <_sungetc_r+0x3a>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	3b01      	subs	r3, #1
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	701e      	strb	r6, [r3, #0]
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	3301      	adds	r3, #1
 800404e:	6063      	str	r3, [r4, #4]
 8004050:	e7e8      	b.n	8004024 <_sungetc_r+0xc>
 8004052:	0021      	movs	r1, r4
 8004054:	f000 fcb6 	bl	80049c4 <__submore>
 8004058:	2800      	cmp	r0, #0
 800405a:	d0f2      	beq.n	8004042 <_sungetc_r+0x2a>
 800405c:	e7e0      	b.n	8004020 <_sungetc_r+0x8>
 800405e:	6921      	ldr	r1, [r4, #16]
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	2900      	cmp	r1, #0
 8004064:	d007      	beq.n	8004076 <_sungetc_r+0x5e>
 8004066:	4291      	cmp	r1, r2
 8004068:	d205      	bcs.n	8004076 <_sungetc_r+0x5e>
 800406a:	1e51      	subs	r1, r2, #1
 800406c:	7808      	ldrb	r0, [r1, #0]
 800406e:	42a8      	cmp	r0, r5
 8004070:	d101      	bne.n	8004076 <_sungetc_r+0x5e>
 8004072:	6021      	str	r1, [r4, #0]
 8004074:	e7ea      	b.n	800404c <_sungetc_r+0x34>
 8004076:	6423      	str	r3, [r4, #64]	@ 0x40
 8004078:	0023      	movs	r3, r4
 800407a:	3344      	adds	r3, #68	@ 0x44
 800407c:	6363      	str	r3, [r4, #52]	@ 0x34
 800407e:	2303      	movs	r3, #3
 8004080:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004082:	0023      	movs	r3, r4
 8004084:	3346      	adds	r3, #70	@ 0x46
 8004086:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8004088:	701e      	strb	r6, [r3, #0]
 800408a:	6023      	str	r3, [r4, #0]
 800408c:	2301      	movs	r3, #1
 800408e:	e7de      	b.n	800404e <_sungetc_r+0x36>

08004090 <__ssrefill_r>:
 8004090:	b510      	push	{r4, lr}
 8004092:	000c      	movs	r4, r1
 8004094:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004096:	2900      	cmp	r1, #0
 8004098:	d00e      	beq.n	80040b8 <__ssrefill_r+0x28>
 800409a:	0023      	movs	r3, r4
 800409c:	3344      	adds	r3, #68	@ 0x44
 800409e:	4299      	cmp	r1, r3
 80040a0:	d001      	beq.n	80040a6 <__ssrefill_r+0x16>
 80040a2:	f7ff fe11 	bl	8003cc8 <_free_r>
 80040a6:	2000      	movs	r0, #0
 80040a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040aa:	6360      	str	r0, [r4, #52]	@ 0x34
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	4283      	cmp	r3, r0
 80040b0:	d002      	beq.n	80040b8 <__ssrefill_r+0x28>
 80040b2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040b4:	6023      	str	r3, [r4, #0]
 80040b6:	bd10      	pop	{r4, pc}
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	2001      	movs	r0, #1
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	2300      	movs	r3, #0
 80040c0:	89a2      	ldrh	r2, [r4, #12]
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	3320      	adds	r3, #32
 80040c6:	4313      	orrs	r3, r2
 80040c8:	81a3      	strh	r3, [r4, #12]
 80040ca:	4240      	negs	r0, r0
 80040cc:	e7f3      	b.n	80040b6 <__ssrefill_r+0x26>
	...

080040d0 <__ssvfiscanf_r>:
 80040d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d2:	4cab      	ldr	r4, [pc, #684]	@ (8004380 <__ssvfiscanf_r+0x2b0>)
 80040d4:	44a5      	add	sp, r4
 80040d6:	000c      	movs	r4, r1
 80040d8:	2100      	movs	r1, #0
 80040da:	9000      	str	r0, [sp, #0]
 80040dc:	20be      	movs	r0, #190	@ 0xbe
 80040de:	9146      	str	r1, [sp, #280]	@ 0x118
 80040e0:	9147      	str	r1, [sp, #284]	@ 0x11c
 80040e2:	a903      	add	r1, sp, #12
 80040e4:	9148      	str	r1, [sp, #288]	@ 0x120
 80040e6:	49a7      	ldr	r1, [pc, #668]	@ (8004384 <__ssvfiscanf_r+0x2b4>)
 80040e8:	0040      	lsls	r0, r0, #1
 80040ea:	ad43      	add	r5, sp, #268	@ 0x10c
 80040ec:	5029      	str	r1, [r5, r0]
 80040ee:	49a6      	ldr	r1, [pc, #664]	@ (8004388 <__ssvfiscanf_r+0x2b8>)
 80040f0:	3004      	adds	r0, #4
 80040f2:	ad43      	add	r5, sp, #268	@ 0x10c
 80040f4:	5029      	str	r1, [r5, r0]
 80040f6:	9302      	str	r3, [sp, #8]
 80040f8:	7816      	ldrb	r6, [r2, #0]
 80040fa:	2e00      	cmp	r6, #0
 80040fc:	d100      	bne.n	8004100 <__ssvfiscanf_r+0x30>
 80040fe:	e13c      	b.n	800437a <__ssvfiscanf_r+0x2aa>
 8004100:	2308      	movs	r3, #8
 8004102:	2008      	movs	r0, #8
 8004104:	4da1      	ldr	r5, [pc, #644]	@ (800438c <__ssvfiscanf_r+0x2bc>)
 8004106:	1c57      	adds	r7, r2, #1
 8004108:	5da9      	ldrb	r1, [r5, r6]
 800410a:	400b      	ands	r3, r1
 800410c:	4201      	tst	r1, r0
 800410e:	d01d      	beq.n	800414c <__ssvfiscanf_r+0x7c>
 8004110:	0006      	movs	r6, r0
 8004112:	6863      	ldr	r3, [r4, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	dd0f      	ble.n	8004138 <__ssvfiscanf_r+0x68>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	5caa      	ldrb	r2, [r5, r2]
 800411e:	4232      	tst	r2, r6
 8004120:	d101      	bne.n	8004126 <__ssvfiscanf_r+0x56>
 8004122:	003a      	movs	r2, r7
 8004124:	e7e8      	b.n	80040f8 <__ssvfiscanf_r+0x28>
 8004126:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004128:	3301      	adds	r3, #1
 800412a:	3201      	adds	r2, #1
 800412c:	9247      	str	r2, [sp, #284]	@ 0x11c
 800412e:	6862      	ldr	r2, [r4, #4]
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	3a01      	subs	r2, #1
 8004134:	6062      	str	r2, [r4, #4]
 8004136:	e7ec      	b.n	8004112 <__ssvfiscanf_r+0x42>
 8004138:	22c0      	movs	r2, #192	@ 0xc0
 800413a:	ab43      	add	r3, sp, #268	@ 0x10c
 800413c:	0052      	lsls	r2, r2, #1
 800413e:	0021      	movs	r1, r4
 8004140:	589b      	ldr	r3, [r3, r2]
 8004142:	9800      	ldr	r0, [sp, #0]
 8004144:	4798      	blx	r3
 8004146:	2800      	cmp	r0, #0
 8004148:	d0e6      	beq.n	8004118 <__ssvfiscanf_r+0x48>
 800414a:	e7ea      	b.n	8004122 <__ssvfiscanf_r+0x52>
 800414c:	2e25      	cmp	r6, #37	@ 0x25
 800414e:	d162      	bne.n	8004216 <__ssvfiscanf_r+0x146>
 8004150:	9345      	str	r3, [sp, #276]	@ 0x114
 8004152:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004154:	7853      	ldrb	r3, [r2, #1]
 8004156:	2b2a      	cmp	r3, #42	@ 0x2a
 8004158:	d102      	bne.n	8004160 <__ssvfiscanf_r+0x90>
 800415a:	3b1a      	subs	r3, #26
 800415c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800415e:	1c97      	adds	r7, r2, #2
 8004160:	003d      	movs	r5, r7
 8004162:	220a      	movs	r2, #10
 8004164:	7829      	ldrb	r1, [r5, #0]
 8004166:	1c6f      	adds	r7, r5, #1
 8004168:	000b      	movs	r3, r1
 800416a:	3b30      	subs	r3, #48	@ 0x30
 800416c:	2b09      	cmp	r3, #9
 800416e:	d91f      	bls.n	80041b0 <__ssvfiscanf_r+0xe0>
 8004170:	4b87      	ldr	r3, [pc, #540]	@ (8004390 <__ssvfiscanf_r+0x2c0>)
 8004172:	2203      	movs	r2, #3
 8004174:	0018      	movs	r0, r3
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	f000 fc74 	bl	8004a64 <memchr>
 800417c:	2800      	cmp	r0, #0
 800417e:	d007      	beq.n	8004190 <__ssvfiscanf_r+0xc0>
 8004180:	9b01      	ldr	r3, [sp, #4]
 8004182:	003d      	movs	r5, r7
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	2301      	movs	r3, #1
 8004188:	4083      	lsls	r3, r0
 800418a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800418c:	4313      	orrs	r3, r2
 800418e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004190:	782b      	ldrb	r3, [r5, #0]
 8004192:	1c6f      	adds	r7, r5, #1
 8004194:	2b78      	cmp	r3, #120	@ 0x78
 8004196:	d806      	bhi.n	80041a6 <__ssvfiscanf_r+0xd6>
 8004198:	2b57      	cmp	r3, #87	@ 0x57
 800419a:	d810      	bhi.n	80041be <__ssvfiscanf_r+0xee>
 800419c:	2b25      	cmp	r3, #37	@ 0x25
 800419e:	d03a      	beq.n	8004216 <__ssvfiscanf_r+0x146>
 80041a0:	d834      	bhi.n	800420c <__ssvfiscanf_r+0x13c>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d055      	beq.n	8004252 <__ssvfiscanf_r+0x182>
 80041a6:	2303      	movs	r3, #3
 80041a8:	9349      	str	r3, [sp, #292]	@ 0x124
 80041aa:	3307      	adds	r3, #7
 80041ac:	9344      	str	r3, [sp, #272]	@ 0x110
 80041ae:	e069      	b.n	8004284 <__ssvfiscanf_r+0x1b4>
 80041b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80041b2:	003d      	movs	r5, r7
 80041b4:	4353      	muls	r3, r2
 80041b6:	3b30      	subs	r3, #48	@ 0x30
 80041b8:	185b      	adds	r3, r3, r1
 80041ba:	9345      	str	r3, [sp, #276]	@ 0x114
 80041bc:	e7d2      	b.n	8004164 <__ssvfiscanf_r+0x94>
 80041be:	0018      	movs	r0, r3
 80041c0:	3858      	subs	r0, #88	@ 0x58
 80041c2:	2820      	cmp	r0, #32
 80041c4:	d8ef      	bhi.n	80041a6 <__ssvfiscanf_r+0xd6>
 80041c6:	f7fc f803 	bl	80001d0 <__gnu_thumb1_case_shi>
 80041ca:	004b      	.short	0x004b
 80041cc:	ffeeffee 	.word	0xffeeffee
 80041d0:	ffee007d 	.word	0xffee007d
 80041d4:	ffeeffee 	.word	0xffeeffee
 80041d8:	ffeeffee 	.word	0xffeeffee
 80041dc:	ffeeffee 	.word	0xffeeffee
 80041e0:	007b0088 	.word	0x007b0088
 80041e4:	00240024 	.word	0x00240024
 80041e8:	ffee0024 	.word	0xffee0024
 80041ec:	ffee0055 	.word	0xffee0055
 80041f0:	ffeeffee 	.word	0xffeeffee
 80041f4:	0090ffee 	.word	0x0090ffee
 80041f8:	00470059 	.word	0x00470059
 80041fc:	ffeeffee 	.word	0xffeeffee
 8004200:	ffee008e 	.word	0xffee008e
 8004204:	ffee007b 	.word	0xffee007b
 8004208:	004bffee 	.word	0x004bffee
 800420c:	3b45      	subs	r3, #69	@ 0x45
 800420e:	2b02      	cmp	r3, #2
 8004210:	d8c9      	bhi.n	80041a6 <__ssvfiscanf_r+0xd6>
 8004212:	2305      	movs	r3, #5
 8004214:	e035      	b.n	8004282 <__ssvfiscanf_r+0x1b2>
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	dd0d      	ble.n	8004238 <__ssvfiscanf_r+0x168>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	42b2      	cmp	r2, r6
 8004222:	d000      	beq.n	8004226 <__ssvfiscanf_r+0x156>
 8004224:	e0a9      	b.n	800437a <__ssvfiscanf_r+0x2aa>
 8004226:	3301      	adds	r3, #1
 8004228:	6862      	ldr	r2, [r4, #4]
 800422a:	6023      	str	r3, [r4, #0]
 800422c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800422e:	3a01      	subs	r2, #1
 8004230:	3301      	adds	r3, #1
 8004232:	6062      	str	r2, [r4, #4]
 8004234:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004236:	e774      	b.n	8004122 <__ssvfiscanf_r+0x52>
 8004238:	23c0      	movs	r3, #192	@ 0xc0
 800423a:	aa43      	add	r2, sp, #268	@ 0x10c
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	0021      	movs	r1, r4
 8004240:	58d3      	ldr	r3, [r2, r3]
 8004242:	9800      	ldr	r0, [sp, #0]
 8004244:	4798      	blx	r3
 8004246:	2800      	cmp	r0, #0
 8004248:	d0e8      	beq.n	800421c <__ssvfiscanf_r+0x14c>
 800424a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800424c:	2800      	cmp	r0, #0
 800424e:	d000      	beq.n	8004252 <__ssvfiscanf_r+0x182>
 8004250:	e08b      	b.n	800436a <__ssvfiscanf_r+0x29a>
 8004252:	2001      	movs	r0, #1
 8004254:	4240      	negs	r0, r0
 8004256:	e08c      	b.n	8004372 <__ssvfiscanf_r+0x2a2>
 8004258:	2220      	movs	r2, #32
 800425a:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800425c:	430a      	orrs	r2, r1
 800425e:	9243      	str	r2, [sp, #268]	@ 0x10c
 8004260:	2280      	movs	r2, #128	@ 0x80
 8004262:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8004264:	0092      	lsls	r2, r2, #2
 8004266:	430a      	orrs	r2, r1
 8004268:	9243      	str	r2, [sp, #268]	@ 0x10c
 800426a:	2210      	movs	r2, #16
 800426c:	9244      	str	r2, [sp, #272]	@ 0x110
 800426e:	2b6e      	cmp	r3, #110	@ 0x6e
 8004270:	d902      	bls.n	8004278 <__ssvfiscanf_r+0x1a8>
 8004272:	e005      	b.n	8004280 <__ssvfiscanf_r+0x1b0>
 8004274:	2300      	movs	r3, #0
 8004276:	9344      	str	r3, [sp, #272]	@ 0x110
 8004278:	2303      	movs	r3, #3
 800427a:	e002      	b.n	8004282 <__ssvfiscanf_r+0x1b2>
 800427c:	2308      	movs	r3, #8
 800427e:	9344      	str	r3, [sp, #272]	@ 0x110
 8004280:	2304      	movs	r3, #4
 8004282:	9349      	str	r3, [sp, #292]	@ 0x124
 8004284:	6863      	ldr	r3, [r4, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	dd3e      	ble.n	8004308 <__ssvfiscanf_r+0x238>
 800428a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800428c:	065b      	lsls	r3, r3, #25
 800428e:	d408      	bmi.n	80042a2 <__ssvfiscanf_r+0x1d2>
 8004290:	26c0      	movs	r6, #192	@ 0xc0
 8004292:	2508      	movs	r5, #8
 8004294:	0076      	lsls	r6, r6, #1
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	493c      	ldr	r1, [pc, #240]	@ (800438c <__ssvfiscanf_r+0x2bc>)
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	5c8a      	ldrb	r2, [r1, r2]
 800429e:	422a      	tst	r2, r5
 80042a0:	d13c      	bne.n	800431c <__ssvfiscanf_r+0x24c>
 80042a2:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	dc4c      	bgt.n	8004342 <__ssvfiscanf_r+0x272>
 80042a8:	0022      	movs	r2, r4
 80042aa:	9800      	ldr	r0, [sp, #0]
 80042ac:	ab02      	add	r3, sp, #8
 80042ae:	a943      	add	r1, sp, #268	@ 0x10c
 80042b0:	f000 f9ee 	bl	8004690 <_scanf_chars>
 80042b4:	2801      	cmp	r0, #1
 80042b6:	d060      	beq.n	800437a <__ssvfiscanf_r+0x2aa>
 80042b8:	2802      	cmp	r0, #2
 80042ba:	d000      	beq.n	80042be <__ssvfiscanf_r+0x1ee>
 80042bc:	e731      	b.n	8004122 <__ssvfiscanf_r+0x52>
 80042be:	e7c4      	b.n	800424a <__ssvfiscanf_r+0x17a>
 80042c0:	220a      	movs	r2, #10
 80042c2:	e7d3      	b.n	800426c <__ssvfiscanf_r+0x19c>
 80042c4:	0039      	movs	r1, r7
 80042c6:	a803      	add	r0, sp, #12
 80042c8:	f000 fb42 	bl	8004950 <__sccl>
 80042cc:	2340      	movs	r3, #64	@ 0x40
 80042ce:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80042d0:	0007      	movs	r7, r0
 80042d2:	4313      	orrs	r3, r2
 80042d4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80042d6:	2301      	movs	r3, #1
 80042d8:	e7d3      	b.n	8004282 <__ssvfiscanf_r+0x1b2>
 80042da:	2340      	movs	r3, #64	@ 0x40
 80042dc:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80042de:	4313      	orrs	r3, r2
 80042e0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80042e2:	2300      	movs	r3, #0
 80042e4:	e7cd      	b.n	8004282 <__ssvfiscanf_r+0x1b2>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e7cb      	b.n	8004282 <__ssvfiscanf_r+0x1b2>
 80042ea:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80042ec:	06d3      	lsls	r3, r2, #27
 80042ee:	d500      	bpl.n	80042f2 <__ssvfiscanf_r+0x222>
 80042f0:	e717      	b.n	8004122 <__ssvfiscanf_r+0x52>
 80042f2:	9b02      	ldr	r3, [sp, #8]
 80042f4:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 80042f6:	1d18      	adds	r0, r3, #4
 80042f8:	9002      	str	r0, [sp, #8]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	07d5      	lsls	r5, r2, #31
 80042fe:	d501      	bpl.n	8004304 <__ssvfiscanf_r+0x234>
 8004300:	8019      	strh	r1, [r3, #0]
 8004302:	e70e      	b.n	8004122 <__ssvfiscanf_r+0x52>
 8004304:	6019      	str	r1, [r3, #0]
 8004306:	e70c      	b.n	8004122 <__ssvfiscanf_r+0x52>
 8004308:	23c0      	movs	r3, #192	@ 0xc0
 800430a:	aa43      	add	r2, sp, #268	@ 0x10c
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	0021      	movs	r1, r4
 8004310:	58d3      	ldr	r3, [r2, r3]
 8004312:	9800      	ldr	r0, [sp, #0]
 8004314:	4798      	blx	r3
 8004316:	2800      	cmp	r0, #0
 8004318:	d0b7      	beq.n	800428a <__ssvfiscanf_r+0x1ba>
 800431a:	e796      	b.n	800424a <__ssvfiscanf_r+0x17a>
 800431c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800431e:	3201      	adds	r2, #1
 8004320:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004322:	6862      	ldr	r2, [r4, #4]
 8004324:	3a01      	subs	r2, #1
 8004326:	6062      	str	r2, [r4, #4]
 8004328:	2a00      	cmp	r2, #0
 800432a:	dd02      	ble.n	8004332 <__ssvfiscanf_r+0x262>
 800432c:	3301      	adds	r3, #1
 800432e:	6023      	str	r3, [r4, #0]
 8004330:	e7b1      	b.n	8004296 <__ssvfiscanf_r+0x1c6>
 8004332:	ab43      	add	r3, sp, #268	@ 0x10c
 8004334:	0021      	movs	r1, r4
 8004336:	599b      	ldr	r3, [r3, r6]
 8004338:	9800      	ldr	r0, [sp, #0]
 800433a:	4798      	blx	r3
 800433c:	2800      	cmp	r0, #0
 800433e:	d0aa      	beq.n	8004296 <__ssvfiscanf_r+0x1c6>
 8004340:	e783      	b.n	800424a <__ssvfiscanf_r+0x17a>
 8004342:	2b04      	cmp	r3, #4
 8004344:	dc06      	bgt.n	8004354 <__ssvfiscanf_r+0x284>
 8004346:	0022      	movs	r2, r4
 8004348:	9800      	ldr	r0, [sp, #0]
 800434a:	ab02      	add	r3, sp, #8
 800434c:	a943      	add	r1, sp, #268	@ 0x10c
 800434e:	f000 f9ff 	bl	8004750 <_scanf_i>
 8004352:	e7af      	b.n	80042b4 <__ssvfiscanf_r+0x1e4>
 8004354:	4b0f      	ldr	r3, [pc, #60]	@ (8004394 <__ssvfiscanf_r+0x2c4>)
 8004356:	2b00      	cmp	r3, #0
 8004358:	d100      	bne.n	800435c <__ssvfiscanf_r+0x28c>
 800435a:	e6e2      	b.n	8004122 <__ssvfiscanf_r+0x52>
 800435c:	0022      	movs	r2, r4
 800435e:	9800      	ldr	r0, [sp, #0]
 8004360:	ab02      	add	r3, sp, #8
 8004362:	a943      	add	r1, sp, #268	@ 0x10c
 8004364:	e000      	b.n	8004368 <__ssvfiscanf_r+0x298>
 8004366:	bf00      	nop
 8004368:	e7a4      	b.n	80042b4 <__ssvfiscanf_r+0x1e4>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	065b      	lsls	r3, r3, #25
 800436e:	d500      	bpl.n	8004372 <__ssvfiscanf_r+0x2a2>
 8004370:	e76f      	b.n	8004252 <__ssvfiscanf_r+0x182>
 8004372:	23a5      	movs	r3, #165	@ 0xa5
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	449d      	add	sp, r3
 8004378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800437a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800437c:	e7f9      	b.n	8004372 <__ssvfiscanf_r+0x2a2>
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	fffffd6c 	.word	0xfffffd6c
 8004384:	08004019 	.word	0x08004019
 8004388:	08004091 	.word	0x08004091
 800438c:	08005385 	.word	0x08005385
 8004390:	0800548b 	.word	0x0800548b
 8004394:	00000000 	.word	0x00000000

08004398 <_printf_common>:
 8004398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800439a:	0016      	movs	r6, r2
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	688a      	ldr	r2, [r1, #8]
 80043a0:	690b      	ldr	r3, [r1, #16]
 80043a2:	000c      	movs	r4, r1
 80043a4:	9000      	str	r0, [sp, #0]
 80043a6:	4293      	cmp	r3, r2
 80043a8:	da00      	bge.n	80043ac <_printf_common+0x14>
 80043aa:	0013      	movs	r3, r2
 80043ac:	0022      	movs	r2, r4
 80043ae:	6033      	str	r3, [r6, #0]
 80043b0:	3243      	adds	r2, #67	@ 0x43
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	d001      	beq.n	80043bc <_printf_common+0x24>
 80043b8:	3301      	adds	r3, #1
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	6823      	ldr	r3, [r4, #0]
 80043be:	069b      	lsls	r3, r3, #26
 80043c0:	d502      	bpl.n	80043c8 <_printf_common+0x30>
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	3302      	adds	r3, #2
 80043c6:	6033      	str	r3, [r6, #0]
 80043c8:	6822      	ldr	r2, [r4, #0]
 80043ca:	2306      	movs	r3, #6
 80043cc:	0015      	movs	r5, r2
 80043ce:	401d      	ands	r5, r3
 80043d0:	421a      	tst	r2, r3
 80043d2:	d027      	beq.n	8004424 <_printf_common+0x8c>
 80043d4:	0023      	movs	r3, r4
 80043d6:	3343      	adds	r3, #67	@ 0x43
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	1e5a      	subs	r2, r3, #1
 80043dc:	4193      	sbcs	r3, r2
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	0692      	lsls	r2, r2, #26
 80043e2:	d430      	bmi.n	8004446 <_printf_common+0xae>
 80043e4:	0022      	movs	r2, r4
 80043e6:	9901      	ldr	r1, [sp, #4]
 80043e8:	9800      	ldr	r0, [sp, #0]
 80043ea:	9d08      	ldr	r5, [sp, #32]
 80043ec:	3243      	adds	r2, #67	@ 0x43
 80043ee:	47a8      	blx	r5
 80043f0:	3001      	adds	r0, #1
 80043f2:	d025      	beq.n	8004440 <_printf_common+0xa8>
 80043f4:	2206      	movs	r2, #6
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	2500      	movs	r5, #0
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d105      	bne.n	800440c <_printf_common+0x74>
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	68e5      	ldr	r5, [r4, #12]
 8004404:	1aed      	subs	r5, r5, r3
 8004406:	43eb      	mvns	r3, r5
 8004408:	17db      	asrs	r3, r3, #31
 800440a:	401d      	ands	r5, r3
 800440c:	68a3      	ldr	r3, [r4, #8]
 800440e:	6922      	ldr	r2, [r4, #16]
 8004410:	4293      	cmp	r3, r2
 8004412:	dd01      	ble.n	8004418 <_printf_common+0x80>
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	18ed      	adds	r5, r5, r3
 8004418:	2600      	movs	r6, #0
 800441a:	42b5      	cmp	r5, r6
 800441c:	d120      	bne.n	8004460 <_printf_common+0xc8>
 800441e:	2000      	movs	r0, #0
 8004420:	e010      	b.n	8004444 <_printf_common+0xac>
 8004422:	3501      	adds	r5, #1
 8004424:	68e3      	ldr	r3, [r4, #12]
 8004426:	6832      	ldr	r2, [r6, #0]
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	42ab      	cmp	r3, r5
 800442c:	ddd2      	ble.n	80043d4 <_printf_common+0x3c>
 800442e:	0022      	movs	r2, r4
 8004430:	2301      	movs	r3, #1
 8004432:	9901      	ldr	r1, [sp, #4]
 8004434:	9800      	ldr	r0, [sp, #0]
 8004436:	9f08      	ldr	r7, [sp, #32]
 8004438:	3219      	adds	r2, #25
 800443a:	47b8      	blx	r7
 800443c:	3001      	adds	r0, #1
 800443e:	d1f0      	bne.n	8004422 <_printf_common+0x8a>
 8004440:	2001      	movs	r0, #1
 8004442:	4240      	negs	r0, r0
 8004444:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004446:	2030      	movs	r0, #48	@ 0x30
 8004448:	18e1      	adds	r1, r4, r3
 800444a:	3143      	adds	r1, #67	@ 0x43
 800444c:	7008      	strb	r0, [r1, #0]
 800444e:	0021      	movs	r1, r4
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	3145      	adds	r1, #69	@ 0x45
 8004454:	7809      	ldrb	r1, [r1, #0]
 8004456:	18a2      	adds	r2, r4, r2
 8004458:	3243      	adds	r2, #67	@ 0x43
 800445a:	3302      	adds	r3, #2
 800445c:	7011      	strb	r1, [r2, #0]
 800445e:	e7c1      	b.n	80043e4 <_printf_common+0x4c>
 8004460:	0022      	movs	r2, r4
 8004462:	2301      	movs	r3, #1
 8004464:	9901      	ldr	r1, [sp, #4]
 8004466:	9800      	ldr	r0, [sp, #0]
 8004468:	9f08      	ldr	r7, [sp, #32]
 800446a:	321a      	adds	r2, #26
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	d0e6      	beq.n	8004440 <_printf_common+0xa8>
 8004472:	3601      	adds	r6, #1
 8004474:	e7d1      	b.n	800441a <_printf_common+0x82>
	...

08004478 <_printf_i>:
 8004478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447a:	b08b      	sub	sp, #44	@ 0x2c
 800447c:	9206      	str	r2, [sp, #24]
 800447e:	000a      	movs	r2, r1
 8004480:	3243      	adds	r2, #67	@ 0x43
 8004482:	9307      	str	r3, [sp, #28]
 8004484:	9005      	str	r0, [sp, #20]
 8004486:	9203      	str	r2, [sp, #12]
 8004488:	7e0a      	ldrb	r2, [r1, #24]
 800448a:	000c      	movs	r4, r1
 800448c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800448e:	2a78      	cmp	r2, #120	@ 0x78
 8004490:	d809      	bhi.n	80044a6 <_printf_i+0x2e>
 8004492:	2a62      	cmp	r2, #98	@ 0x62
 8004494:	d80b      	bhi.n	80044ae <_printf_i+0x36>
 8004496:	2a00      	cmp	r2, #0
 8004498:	d100      	bne.n	800449c <_printf_i+0x24>
 800449a:	e0ba      	b.n	8004612 <_printf_i+0x19a>
 800449c:	497a      	ldr	r1, [pc, #488]	@ (8004688 <_printf_i+0x210>)
 800449e:	9104      	str	r1, [sp, #16]
 80044a0:	2a58      	cmp	r2, #88	@ 0x58
 80044a2:	d100      	bne.n	80044a6 <_printf_i+0x2e>
 80044a4:	e08e      	b.n	80045c4 <_printf_i+0x14c>
 80044a6:	0025      	movs	r5, r4
 80044a8:	3542      	adds	r5, #66	@ 0x42
 80044aa:	702a      	strb	r2, [r5, #0]
 80044ac:	e022      	b.n	80044f4 <_printf_i+0x7c>
 80044ae:	0010      	movs	r0, r2
 80044b0:	3863      	subs	r0, #99	@ 0x63
 80044b2:	2815      	cmp	r0, #21
 80044b4:	d8f7      	bhi.n	80044a6 <_printf_i+0x2e>
 80044b6:	f7fb fe8b 	bl	80001d0 <__gnu_thumb1_case_shi>
 80044ba:	0016      	.short	0x0016
 80044bc:	fff6001f 	.word	0xfff6001f
 80044c0:	fff6fff6 	.word	0xfff6fff6
 80044c4:	001ffff6 	.word	0x001ffff6
 80044c8:	fff6fff6 	.word	0xfff6fff6
 80044cc:	fff6fff6 	.word	0xfff6fff6
 80044d0:	0036009f 	.word	0x0036009f
 80044d4:	fff6007e 	.word	0xfff6007e
 80044d8:	00b0fff6 	.word	0x00b0fff6
 80044dc:	0036fff6 	.word	0x0036fff6
 80044e0:	fff6fff6 	.word	0xfff6fff6
 80044e4:	0082      	.short	0x0082
 80044e6:	0025      	movs	r5, r4
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	3542      	adds	r5, #66	@ 0x42
 80044ec:	1d11      	adds	r1, r2, #4
 80044ee:	6019      	str	r1, [r3, #0]
 80044f0:	6813      	ldr	r3, [r2, #0]
 80044f2:	702b      	strb	r3, [r5, #0]
 80044f4:	2301      	movs	r3, #1
 80044f6:	e09e      	b.n	8004636 <_printf_i+0x1be>
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	6809      	ldr	r1, [r1, #0]
 80044fc:	1d02      	adds	r2, r0, #4
 80044fe:	060d      	lsls	r5, r1, #24
 8004500:	d50b      	bpl.n	800451a <_printf_i+0xa2>
 8004502:	6806      	ldr	r6, [r0, #0]
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	2e00      	cmp	r6, #0
 8004508:	da03      	bge.n	8004512 <_printf_i+0x9a>
 800450a:	232d      	movs	r3, #45	@ 0x2d
 800450c:	9a03      	ldr	r2, [sp, #12]
 800450e:	4276      	negs	r6, r6
 8004510:	7013      	strb	r3, [r2, #0]
 8004512:	4b5d      	ldr	r3, [pc, #372]	@ (8004688 <_printf_i+0x210>)
 8004514:	270a      	movs	r7, #10
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	e018      	b.n	800454c <_printf_i+0xd4>
 800451a:	6806      	ldr	r6, [r0, #0]
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	0649      	lsls	r1, r1, #25
 8004520:	d5f1      	bpl.n	8004506 <_printf_i+0x8e>
 8004522:	b236      	sxth	r6, r6
 8004524:	e7ef      	b.n	8004506 <_printf_i+0x8e>
 8004526:	6808      	ldr	r0, [r1, #0]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	c940      	ldmia	r1!, {r6}
 800452c:	0605      	lsls	r5, r0, #24
 800452e:	d402      	bmi.n	8004536 <_printf_i+0xbe>
 8004530:	0640      	lsls	r0, r0, #25
 8004532:	d500      	bpl.n	8004536 <_printf_i+0xbe>
 8004534:	b2b6      	uxth	r6, r6
 8004536:	6019      	str	r1, [r3, #0]
 8004538:	4b53      	ldr	r3, [pc, #332]	@ (8004688 <_printf_i+0x210>)
 800453a:	270a      	movs	r7, #10
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004540:	d100      	bne.n	8004544 <_printf_i+0xcc>
 8004542:	3f02      	subs	r7, #2
 8004544:	0023      	movs	r3, r4
 8004546:	2200      	movs	r2, #0
 8004548:	3343      	adds	r3, #67	@ 0x43
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	60a3      	str	r3, [r4, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db06      	blt.n	8004562 <_printf_i+0xea>
 8004554:	2104      	movs	r1, #4
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	9d03      	ldr	r5, [sp, #12]
 800455a:	438a      	bics	r2, r1
 800455c:	6022      	str	r2, [r4, #0]
 800455e:	4333      	orrs	r3, r6
 8004560:	d00c      	beq.n	800457c <_printf_i+0x104>
 8004562:	9d03      	ldr	r5, [sp, #12]
 8004564:	0030      	movs	r0, r6
 8004566:	0039      	movs	r1, r7
 8004568:	f7fb fec2 	bl	80002f0 <__aeabi_uidivmod>
 800456c:	9b04      	ldr	r3, [sp, #16]
 800456e:	3d01      	subs	r5, #1
 8004570:	5c5b      	ldrb	r3, [r3, r1]
 8004572:	702b      	strb	r3, [r5, #0]
 8004574:	0033      	movs	r3, r6
 8004576:	0006      	movs	r6, r0
 8004578:	429f      	cmp	r7, r3
 800457a:	d9f3      	bls.n	8004564 <_printf_i+0xec>
 800457c:	2f08      	cmp	r7, #8
 800457e:	d109      	bne.n	8004594 <_printf_i+0x11c>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	07db      	lsls	r3, r3, #31
 8004584:	d506      	bpl.n	8004594 <_printf_i+0x11c>
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	6923      	ldr	r3, [r4, #16]
 800458a:	429a      	cmp	r2, r3
 800458c:	dc02      	bgt.n	8004594 <_printf_i+0x11c>
 800458e:	2330      	movs	r3, #48	@ 0x30
 8004590:	3d01      	subs	r5, #1
 8004592:	702b      	strb	r3, [r5, #0]
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	1b5b      	subs	r3, r3, r5
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	0021      	movs	r1, r4
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	9805      	ldr	r0, [sp, #20]
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	aa09      	add	r2, sp, #36	@ 0x24
 80045a6:	f7ff fef7 	bl	8004398 <_printf_common>
 80045aa:	3001      	adds	r0, #1
 80045ac:	d148      	bne.n	8004640 <_printf_i+0x1c8>
 80045ae:	2001      	movs	r0, #1
 80045b0:	4240      	negs	r0, r0
 80045b2:	b00b      	add	sp, #44	@ 0x2c
 80045b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b6:	2220      	movs	r2, #32
 80045b8:	6809      	ldr	r1, [r1, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	2278      	movs	r2, #120	@ 0x78
 80045c0:	4932      	ldr	r1, [pc, #200]	@ (800468c <_printf_i+0x214>)
 80045c2:	9104      	str	r1, [sp, #16]
 80045c4:	0021      	movs	r1, r4
 80045c6:	3145      	adds	r1, #69	@ 0x45
 80045c8:	700a      	strb	r2, [r1, #0]
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	c940      	ldmia	r1!, {r6}
 80045d0:	0610      	lsls	r0, r2, #24
 80045d2:	d402      	bmi.n	80045da <_printf_i+0x162>
 80045d4:	0650      	lsls	r0, r2, #25
 80045d6:	d500      	bpl.n	80045da <_printf_i+0x162>
 80045d8:	b2b6      	uxth	r6, r6
 80045da:	6019      	str	r1, [r3, #0]
 80045dc:	07d3      	lsls	r3, r2, #31
 80045de:	d502      	bpl.n	80045e6 <_printf_i+0x16e>
 80045e0:	2320      	movs	r3, #32
 80045e2:	4313      	orrs	r3, r2
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d001      	beq.n	80045ee <_printf_i+0x176>
 80045ea:	2710      	movs	r7, #16
 80045ec:	e7aa      	b.n	8004544 <_printf_i+0xcc>
 80045ee:	2220      	movs	r2, #32
 80045f0:	6823      	ldr	r3, [r4, #0]
 80045f2:	4393      	bics	r3, r2
 80045f4:	6023      	str	r3, [r4, #0]
 80045f6:	e7f8      	b.n	80045ea <_printf_i+0x172>
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	680d      	ldr	r5, [r1, #0]
 80045fc:	1d10      	adds	r0, r2, #4
 80045fe:	6949      	ldr	r1, [r1, #20]
 8004600:	6018      	str	r0, [r3, #0]
 8004602:	6813      	ldr	r3, [r2, #0]
 8004604:	062e      	lsls	r6, r5, #24
 8004606:	d501      	bpl.n	800460c <_printf_i+0x194>
 8004608:	6019      	str	r1, [r3, #0]
 800460a:	e002      	b.n	8004612 <_printf_i+0x19a>
 800460c:	066d      	lsls	r5, r5, #25
 800460e:	d5fb      	bpl.n	8004608 <_printf_i+0x190>
 8004610:	8019      	strh	r1, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	9d03      	ldr	r5, [sp, #12]
 8004616:	6123      	str	r3, [r4, #16]
 8004618:	e7bf      	b.n	800459a <_printf_i+0x122>
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	1d11      	adds	r1, r2, #4
 800461e:	6019      	str	r1, [r3, #0]
 8004620:	6815      	ldr	r5, [r2, #0]
 8004622:	2100      	movs	r1, #0
 8004624:	0028      	movs	r0, r5
 8004626:	6862      	ldr	r2, [r4, #4]
 8004628:	f000 fa1c 	bl	8004a64 <memchr>
 800462c:	2800      	cmp	r0, #0
 800462e:	d001      	beq.n	8004634 <_printf_i+0x1bc>
 8004630:	1b40      	subs	r0, r0, r5
 8004632:	6060      	str	r0, [r4, #4]
 8004634:	6863      	ldr	r3, [r4, #4]
 8004636:	6123      	str	r3, [r4, #16]
 8004638:	2300      	movs	r3, #0
 800463a:	9a03      	ldr	r2, [sp, #12]
 800463c:	7013      	strb	r3, [r2, #0]
 800463e:	e7ac      	b.n	800459a <_printf_i+0x122>
 8004640:	002a      	movs	r2, r5
 8004642:	6923      	ldr	r3, [r4, #16]
 8004644:	9906      	ldr	r1, [sp, #24]
 8004646:	9805      	ldr	r0, [sp, #20]
 8004648:	9d07      	ldr	r5, [sp, #28]
 800464a:	47a8      	blx	r5
 800464c:	3001      	adds	r0, #1
 800464e:	d0ae      	beq.n	80045ae <_printf_i+0x136>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	079b      	lsls	r3, r3, #30
 8004654:	d415      	bmi.n	8004682 <_printf_i+0x20a>
 8004656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004658:	68e0      	ldr	r0, [r4, #12]
 800465a:	4298      	cmp	r0, r3
 800465c:	daa9      	bge.n	80045b2 <_printf_i+0x13a>
 800465e:	0018      	movs	r0, r3
 8004660:	e7a7      	b.n	80045b2 <_printf_i+0x13a>
 8004662:	0022      	movs	r2, r4
 8004664:	2301      	movs	r3, #1
 8004666:	9906      	ldr	r1, [sp, #24]
 8004668:	9805      	ldr	r0, [sp, #20]
 800466a:	9e07      	ldr	r6, [sp, #28]
 800466c:	3219      	adds	r2, #25
 800466e:	47b0      	blx	r6
 8004670:	3001      	adds	r0, #1
 8004672:	d09c      	beq.n	80045ae <_printf_i+0x136>
 8004674:	3501      	adds	r5, #1
 8004676:	68e3      	ldr	r3, [r4, #12]
 8004678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	42ab      	cmp	r3, r5
 800467e:	dcf0      	bgt.n	8004662 <_printf_i+0x1ea>
 8004680:	e7e9      	b.n	8004656 <_printf_i+0x1de>
 8004682:	2500      	movs	r5, #0
 8004684:	e7f7      	b.n	8004676 <_printf_i+0x1fe>
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	08005496 	.word	0x08005496
 800468c:	080054a7 	.word	0x080054a7

08004690 <_scanf_chars>:
 8004690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004692:	0015      	movs	r5, r2
 8004694:	688a      	ldr	r2, [r1, #8]
 8004696:	000c      	movs	r4, r1
 8004698:	9001      	str	r0, [sp, #4]
 800469a:	2a00      	cmp	r2, #0
 800469c:	d104      	bne.n	80046a8 <_scanf_chars+0x18>
 800469e:	698a      	ldr	r2, [r1, #24]
 80046a0:	2a00      	cmp	r2, #0
 80046a2:	d117      	bne.n	80046d4 <_scanf_chars+0x44>
 80046a4:	3201      	adds	r2, #1
 80046a6:	60a2      	str	r2, [r4, #8]
 80046a8:	6822      	ldr	r2, [r4, #0]
 80046aa:	06d2      	lsls	r2, r2, #27
 80046ac:	d403      	bmi.n	80046b6 <_scanf_chars+0x26>
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	1d11      	adds	r1, r2, #4
 80046b2:	6019      	str	r1, [r3, #0]
 80046b4:	6817      	ldr	r7, [r2, #0]
 80046b6:	2600      	movs	r6, #0
 80046b8:	69a0      	ldr	r0, [r4, #24]
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d016      	beq.n	80046ec <_scanf_chars+0x5c>
 80046be:	2801      	cmp	r0, #1
 80046c0:	d10b      	bne.n	80046da <_scanf_chars+0x4a>
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	6962      	ldr	r2, [r4, #20]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	5cd3      	ldrb	r3, [r2, r3]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10e      	bne.n	80046ec <_scanf_chars+0x5c>
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d03b      	beq.n	800474a <_scanf_chars+0xba>
 80046d2:	e029      	b.n	8004728 <_scanf_chars+0x98>
 80046d4:	2201      	movs	r2, #1
 80046d6:	4252      	negs	r2, r2
 80046d8:	e7e5      	b.n	80046a6 <_scanf_chars+0x16>
 80046da:	2802      	cmp	r0, #2
 80046dc:	d124      	bne.n	8004728 <_scanf_chars+0x98>
 80046de:	682b      	ldr	r3, [r5, #0]
 80046e0:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <_scanf_chars+0xbc>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	5cd3      	ldrb	r3, [r2, r3]
 80046e6:	2208      	movs	r2, #8
 80046e8:	4213      	tst	r3, r2
 80046ea:	d11d      	bne.n	8004728 <_scanf_chars+0x98>
 80046ec:	2210      	movs	r2, #16
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	3601      	adds	r6, #1
 80046f2:	4213      	tst	r3, r2
 80046f4:	d103      	bne.n	80046fe <_scanf_chars+0x6e>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	703b      	strb	r3, [r7, #0]
 80046fc:	3701      	adds	r7, #1
 80046fe:	682a      	ldr	r2, [r5, #0]
 8004700:	686b      	ldr	r3, [r5, #4]
 8004702:	3201      	adds	r2, #1
 8004704:	602a      	str	r2, [r5, #0]
 8004706:	68a2      	ldr	r2, [r4, #8]
 8004708:	3b01      	subs	r3, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	606b      	str	r3, [r5, #4]
 800470e:	60a2      	str	r2, [r4, #8]
 8004710:	2a00      	cmp	r2, #0
 8004712:	d009      	beq.n	8004728 <_scanf_chars+0x98>
 8004714:	2b00      	cmp	r3, #0
 8004716:	dccf      	bgt.n	80046b8 <_scanf_chars+0x28>
 8004718:	23c0      	movs	r3, #192	@ 0xc0
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	0029      	movs	r1, r5
 800471e:	58e3      	ldr	r3, [r4, r3]
 8004720:	9801      	ldr	r0, [sp, #4]
 8004722:	4798      	blx	r3
 8004724:	2800      	cmp	r0, #0
 8004726:	d0c7      	beq.n	80046b8 <_scanf_chars+0x28>
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	2310      	movs	r3, #16
 800472c:	0011      	movs	r1, r2
 800472e:	4019      	ands	r1, r3
 8004730:	421a      	tst	r2, r3
 8004732:	d106      	bne.n	8004742 <_scanf_chars+0xb2>
 8004734:	68e3      	ldr	r3, [r4, #12]
 8004736:	3301      	adds	r3, #1
 8004738:	60e3      	str	r3, [r4, #12]
 800473a:	69a3      	ldr	r3, [r4, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d000      	beq.n	8004742 <_scanf_chars+0xb2>
 8004740:	7039      	strb	r1, [r7, #0]
 8004742:	2000      	movs	r0, #0
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	199b      	adds	r3, r3, r6
 8004748:	6123      	str	r3, [r4, #16]
 800474a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800474c:	08005385 	.word	0x08005385

08004750 <_scanf_i>:
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	b08b      	sub	sp, #44	@ 0x2c
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	4b78      	ldr	r3, [pc, #480]	@ (8004938 <_scanf_i+0x1e8>)
 8004758:	0016      	movs	r6, r2
 800475a:	9004      	str	r0, [sp, #16]
 800475c:	aa07      	add	r2, sp, #28
 800475e:	cba1      	ldmia	r3!, {r0, r5, r7}
 8004760:	c2a1      	stmia	r2!, {r0, r5, r7}
 8004762:	4a76      	ldr	r2, [pc, #472]	@ (800493c <_scanf_i+0x1ec>)
 8004764:	698b      	ldr	r3, [r1, #24]
 8004766:	000c      	movs	r4, r1
 8004768:	9205      	str	r2, [sp, #20]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d101      	bne.n	8004772 <_scanf_i+0x22>
 800476e:	4b74      	ldr	r3, [pc, #464]	@ (8004940 <_scanf_i+0x1f0>)
 8004770:	9305      	str	r3, [sp, #20]
 8004772:	22ae      	movs	r2, #174	@ 0xae
 8004774:	2000      	movs	r0, #0
 8004776:	68a3      	ldr	r3, [r4, #8]
 8004778:	0052      	lsls	r2, r2, #1
 800477a:	1e59      	subs	r1, r3, #1
 800477c:	9003      	str	r0, [sp, #12]
 800477e:	4291      	cmp	r1, r2
 8004780:	d905      	bls.n	800478e <_scanf_i+0x3e>
 8004782:	3b5e      	subs	r3, #94	@ 0x5e
 8004784:	3bff      	subs	r3, #255	@ 0xff
 8004786:	9303      	str	r3, [sp, #12]
 8004788:	235e      	movs	r3, #94	@ 0x5e
 800478a:	33ff      	adds	r3, #255	@ 0xff
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	0023      	movs	r3, r4
 8004790:	331c      	adds	r3, #28
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	23d0      	movs	r3, #208	@ 0xd0
 8004796:	2700      	movs	r7, #0
 8004798:	6822      	ldr	r2, [r4, #0]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4313      	orrs	r3, r2
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	9b00      	ldr	r3, [sp, #0]
 80047a2:	9302      	str	r3, [sp, #8]
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	a807      	add	r0, sp, #28
 80047a8:	7819      	ldrb	r1, [r3, #0]
 80047aa:	00bb      	lsls	r3, r7, #2
 80047ac:	2202      	movs	r2, #2
 80047ae:	5818      	ldr	r0, [r3, r0]
 80047b0:	f000 f958 	bl	8004a64 <memchr>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d029      	beq.n	800480c <_scanf_i+0xbc>
 80047b8:	2f01      	cmp	r7, #1
 80047ba:	d15e      	bne.n	800487a <_scanf_i+0x12a>
 80047bc:	6863      	ldr	r3, [r4, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <_scanf_i+0x80>
 80047c2:	3308      	adds	r3, #8
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	6063      	str	r3, [r4, #4]
 80047c8:	33f9      	adds	r3, #249	@ 0xf9
 80047ca:	33ff      	adds	r3, #255	@ 0xff
 80047cc:	4313      	orrs	r3, r2
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004944 <_scanf_i+0x1f4>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	6023      	str	r3, [r4, #0]
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	60a2      	str	r2, [r4, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <_scanf_i+0xbc>
 80047e2:	6833      	ldr	r3, [r6, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	6032      	str	r2, [r6, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	9a02      	ldr	r2, [sp, #8]
 80047ec:	7013      	strb	r3, [r2, #0]
 80047ee:	6873      	ldr	r3, [r6, #4]
 80047f0:	1c55      	adds	r5, r2, #1
 80047f2:	3b01      	subs	r3, #1
 80047f4:	6073      	str	r3, [r6, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	dc07      	bgt.n	800480a <_scanf_i+0xba>
 80047fa:	23c0      	movs	r3, #192	@ 0xc0
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	0031      	movs	r1, r6
 8004800:	58e3      	ldr	r3, [r4, r3]
 8004802:	9804      	ldr	r0, [sp, #16]
 8004804:	4798      	blx	r3
 8004806:	2800      	cmp	r0, #0
 8004808:	d17e      	bne.n	8004908 <_scanf_i+0x1b8>
 800480a:	9502      	str	r5, [sp, #8]
 800480c:	3701      	adds	r7, #1
 800480e:	2f03      	cmp	r7, #3
 8004810:	d1c8      	bne.n	80047a4 <_scanf_i+0x54>
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <_scanf_i+0xcc>
 8004818:	330a      	adds	r3, #10
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	2700      	movs	r7, #0
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	4949      	ldr	r1, [pc, #292]	@ (8004948 <_scanf_i+0x1f8>)
 8004822:	6960      	ldr	r0, [r4, #20]
 8004824:	1ac9      	subs	r1, r1, r3
 8004826:	f000 f893 	bl	8004950 <__sccl>
 800482a:	9d02      	ldr	r5, [sp, #8]
 800482c:	68a3      	ldr	r3, [r4, #8]
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03f      	beq.n	80048b6 <_scanf_i+0x166>
 8004836:	6831      	ldr	r1, [r6, #0]
 8004838:	6963      	ldr	r3, [r4, #20]
 800483a:	780a      	ldrb	r2, [r1, #0]
 800483c:	5c9b      	ldrb	r3, [r3, r2]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d039      	beq.n	80048b6 <_scanf_i+0x166>
 8004842:	2a30      	cmp	r2, #48	@ 0x30
 8004844:	d128      	bne.n	8004898 <_scanf_i+0x148>
 8004846:	2380      	movs	r3, #128	@ 0x80
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4218      	tst	r0, r3
 800484c:	d024      	beq.n	8004898 <_scanf_i+0x148>
 800484e:	9b03      	ldr	r3, [sp, #12]
 8004850:	3701      	adds	r7, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <_scanf_i+0x112>
 8004856:	001a      	movs	r2, r3
 8004858:	9b02      	ldr	r3, [sp, #8]
 800485a:	3a01      	subs	r2, #1
 800485c:	3301      	adds	r3, #1
 800485e:	9203      	str	r2, [sp, #12]
 8004860:	60a3      	str	r3, [r4, #8]
 8004862:	6873      	ldr	r3, [r6, #4]
 8004864:	3b01      	subs	r3, #1
 8004866:	6073      	str	r3, [r6, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dd1c      	ble.n	80048a6 <_scanf_i+0x156>
 800486c:	6833      	ldr	r3, [r6, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	3b01      	subs	r3, #1
 8004876:	60a3      	str	r3, [r4, #8]
 8004878:	e7d8      	b.n	800482c <_scanf_i+0xdc>
 800487a:	2f02      	cmp	r7, #2
 800487c:	d1ac      	bne.n	80047d8 <_scanf_i+0x88>
 800487e:	23c0      	movs	r3, #192	@ 0xc0
 8004880:	2180      	movs	r1, #128	@ 0x80
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4013      	ands	r3, r2
 8004888:	0089      	lsls	r1, r1, #2
 800488a:	428b      	cmp	r3, r1
 800488c:	d1c1      	bne.n	8004812 <_scanf_i+0xc2>
 800488e:	2310      	movs	r3, #16
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	33f0      	adds	r3, #240	@ 0xf0
 8004894:	4313      	orrs	r3, r2
 8004896:	e79e      	b.n	80047d6 <_scanf_i+0x86>
 8004898:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <_scanf_i+0x1fc>)
 800489a:	4003      	ands	r3, r0
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	780b      	ldrb	r3, [r1, #0]
 80048a0:	702b      	strb	r3, [r5, #0]
 80048a2:	3501      	adds	r5, #1
 80048a4:	e7dd      	b.n	8004862 <_scanf_i+0x112>
 80048a6:	23c0      	movs	r3, #192	@ 0xc0
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	0031      	movs	r1, r6
 80048ac:	58e3      	ldr	r3, [r4, r3]
 80048ae:	9804      	ldr	r0, [sp, #16]
 80048b0:	4798      	blx	r3
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0dd      	beq.n	8004872 <_scanf_i+0x122>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	05db      	lsls	r3, r3, #23
 80048ba:	d50e      	bpl.n	80048da <_scanf_i+0x18a>
 80048bc:	9b00      	ldr	r3, [sp, #0]
 80048be:	429d      	cmp	r5, r3
 80048c0:	d907      	bls.n	80048d2 <_scanf_i+0x182>
 80048c2:	23be      	movs	r3, #190	@ 0xbe
 80048c4:	3d01      	subs	r5, #1
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	0032      	movs	r2, r6
 80048ca:	7829      	ldrb	r1, [r5, #0]
 80048cc:	58e3      	ldr	r3, [r4, r3]
 80048ce:	9804      	ldr	r0, [sp, #16]
 80048d0:	4798      	blx	r3
 80048d2:	9b00      	ldr	r3, [sp, #0]
 80048d4:	2001      	movs	r0, #1
 80048d6:	429d      	cmp	r5, r3
 80048d8:	d029      	beq.n	800492e <_scanf_i+0x1de>
 80048da:	6821      	ldr	r1, [r4, #0]
 80048dc:	2310      	movs	r3, #16
 80048de:	000a      	movs	r2, r1
 80048e0:	401a      	ands	r2, r3
 80048e2:	4219      	tst	r1, r3
 80048e4:	d11c      	bne.n	8004920 <_scanf_i+0x1d0>
 80048e6:	702a      	strb	r2, [r5, #0]
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	9900      	ldr	r1, [sp, #0]
 80048ec:	9804      	ldr	r0, [sp, #16]
 80048ee:	9e05      	ldr	r6, [sp, #20]
 80048f0:	47b0      	blx	r6
 80048f2:	9b01      	ldr	r3, [sp, #4]
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0691      	lsls	r1, r2, #26
 80048fa:	d507      	bpl.n	800490c <_scanf_i+0x1bc>
 80048fc:	9901      	ldr	r1, [sp, #4]
 80048fe:	1d1a      	adds	r2, r3, #4
 8004900:	600a      	str	r2, [r1, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6018      	str	r0, [r3, #0]
 8004906:	e008      	b.n	800491a <_scanf_i+0x1ca>
 8004908:	2700      	movs	r7, #0
 800490a:	e7d4      	b.n	80048b6 <_scanf_i+0x166>
 800490c:	1d19      	adds	r1, r3, #4
 800490e:	07d6      	lsls	r6, r2, #31
 8004910:	d50f      	bpl.n	8004932 <_scanf_i+0x1e2>
 8004912:	9a01      	ldr	r2, [sp, #4]
 8004914:	6011      	str	r1, [r2, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	8018      	strh	r0, [r3, #0]
 800491a:	68e3      	ldr	r3, [r4, #12]
 800491c:	3301      	adds	r3, #1
 800491e:	60e3      	str	r3, [r4, #12]
 8004920:	2000      	movs	r0, #0
 8004922:	9b00      	ldr	r3, [sp, #0]
 8004924:	1aed      	subs	r5, r5, r3
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	19ed      	adds	r5, r5, r7
 800492a:	195b      	adds	r3, r3, r5
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	b00b      	add	sp, #44	@ 0x2c
 8004930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004932:	9a01      	ldr	r2, [sp, #4]
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	e7e4      	b.n	8004902 <_scanf_i+0x1b2>
 8004938:	08004d2c 	.word	0x08004d2c
 800493c:	08004cfd 	.word	0x08004cfd
 8004940:	08004bf1 	.word	0x08004bf1
 8004944:	fffffaff 	.word	0xfffffaff
 8004948:	080054c8 	.word	0x080054c8
 800494c:	fffff6ff 	.word	0xfffff6ff

08004950 <__sccl>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	780b      	ldrb	r3, [r1, #0]
 8004954:	0004      	movs	r4, r0
 8004956:	2b5e      	cmp	r3, #94	@ 0x5e
 8004958:	d019      	beq.n	800498e <__sccl+0x3e>
 800495a:	1c4d      	adds	r5, r1, #1
 800495c:	2100      	movs	r1, #0
 800495e:	0022      	movs	r2, r4
 8004960:	1c60      	adds	r0, r4, #1
 8004962:	30ff      	adds	r0, #255	@ 0xff
 8004964:	7011      	strb	r1, [r2, #0]
 8004966:	3201      	adds	r2, #1
 8004968:	4282      	cmp	r2, r0
 800496a:	d1fb      	bne.n	8004964 <__sccl+0x14>
 800496c:	1e68      	subs	r0, r5, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d026      	beq.n	80049c0 <__sccl+0x70>
 8004972:	2601      	movs	r6, #1
 8004974:	404e      	eors	r6, r1
 8004976:	0028      	movs	r0, r5
 8004978:	54e6      	strb	r6, [r4, r3]
 800497a:	7801      	ldrb	r1, [r0, #0]
 800497c:	1c45      	adds	r5, r0, #1
 800497e:	292d      	cmp	r1, #45	@ 0x2d
 8004980:	d009      	beq.n	8004996 <__sccl+0x46>
 8004982:	295d      	cmp	r1, #93	@ 0x5d
 8004984:	d01b      	beq.n	80049be <__sccl+0x6e>
 8004986:	2900      	cmp	r1, #0
 8004988:	d01a      	beq.n	80049c0 <__sccl+0x70>
 800498a:	000b      	movs	r3, r1
 800498c:	e7f3      	b.n	8004976 <__sccl+0x26>
 800498e:	784b      	ldrb	r3, [r1, #1]
 8004990:	1c8d      	adds	r5, r1, #2
 8004992:	2101      	movs	r1, #1
 8004994:	e7e3      	b.n	800495e <__sccl+0xe>
 8004996:	7842      	ldrb	r2, [r0, #1]
 8004998:	2a5d      	cmp	r2, #93	@ 0x5d
 800499a:	d0f6      	beq.n	800498a <__sccl+0x3a>
 800499c:	4293      	cmp	r3, r2
 800499e:	dcf4      	bgt.n	800498a <__sccl+0x3a>
 80049a0:	0019      	movs	r1, r3
 80049a2:	3002      	adds	r0, #2
 80049a4:	3101      	adds	r1, #1
 80049a6:	5466      	strb	r6, [r4, r1]
 80049a8:	428a      	cmp	r2, r1
 80049aa:	dcfb      	bgt.n	80049a4 <__sccl+0x54>
 80049ac:	1c59      	adds	r1, r3, #1
 80049ae:	4293      	cmp	r3, r2
 80049b0:	db02      	blt.n	80049b8 <__sccl+0x68>
 80049b2:	2200      	movs	r2, #0
 80049b4:	188b      	adds	r3, r1, r2
 80049b6:	e7e0      	b.n	800497a <__sccl+0x2a>
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	3a01      	subs	r2, #1
 80049bc:	e7fa      	b.n	80049b4 <__sccl+0x64>
 80049be:	0028      	movs	r0, r5
 80049c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080049c4 <__submore>:
 80049c4:	000b      	movs	r3, r1
 80049c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c8:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 80049ca:	3344      	adds	r3, #68	@ 0x44
 80049cc:	000c      	movs	r4, r1
 80049ce:	429d      	cmp	r5, r3
 80049d0:	d11c      	bne.n	8004a0c <__submore+0x48>
 80049d2:	2680      	movs	r6, #128	@ 0x80
 80049d4:	00f6      	lsls	r6, r6, #3
 80049d6:	0031      	movs	r1, r6
 80049d8:	f7ff f840 	bl	8003a5c <_malloc_r>
 80049dc:	2800      	cmp	r0, #0
 80049de:	d102      	bne.n	80049e6 <__submore+0x22>
 80049e0:	2001      	movs	r0, #1
 80049e2:	4240      	negs	r0, r0
 80049e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e6:	0023      	movs	r3, r4
 80049e8:	6360      	str	r0, [r4, #52]	@ 0x34
 80049ea:	63a6      	str	r6, [r4, #56]	@ 0x38
 80049ec:	3346      	adds	r3, #70	@ 0x46
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <__submore+0x70>)
 80049f2:	54c2      	strb	r2, [r0, r3]
 80049f4:	0023      	movs	r3, r4
 80049f6:	3345      	adds	r3, #69	@ 0x45
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <__submore+0x74>)
 80049fc:	54c2      	strb	r2, [r0, r3]
 80049fe:	782a      	ldrb	r2, [r5, #0]
 8004a00:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <__submore+0x78>)
 8004a02:	54c2      	strb	r2, [r0, r3]
 8004a04:	18c0      	adds	r0, r0, r3
 8004a06:	6020      	str	r0, [r4, #0]
 8004a08:	2000      	movs	r0, #0
 8004a0a:	e7eb      	b.n	80049e4 <__submore+0x20>
 8004a0c:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8004a0e:	0029      	movs	r1, r5
 8004a10:	0073      	lsls	r3, r6, #1
 8004a12:	001a      	movs	r2, r3
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	f000 f830 	bl	8004a7a <_realloc_r>
 8004a1a:	1e05      	subs	r5, r0, #0
 8004a1c:	d0e0      	beq.n	80049e0 <__submore+0x1c>
 8004a1e:	1987      	adds	r7, r0, r6
 8004a20:	0001      	movs	r1, r0
 8004a22:	0032      	movs	r2, r6
 8004a24:	0038      	movs	r0, r7
 8004a26:	f7ff f945 	bl	8003cb4 <memcpy>
 8004a2a:	9b01      	ldr	r3, [sp, #4]
 8004a2c:	6027      	str	r7, [r4, #0]
 8004a2e:	6365      	str	r5, [r4, #52]	@ 0x34
 8004a30:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004a32:	e7e9      	b.n	8004a08 <__submore+0x44>
 8004a34:	000003ff 	.word	0x000003ff
 8004a38:	000003fe 	.word	0x000003fe
 8004a3c:	000003fd 	.word	0x000003fd

08004a40 <memmove>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	4288      	cmp	r0, r1
 8004a44:	d902      	bls.n	8004a4c <memmove+0xc>
 8004a46:	188b      	adds	r3, r1, r2
 8004a48:	4298      	cmp	r0, r3
 8004a4a:	d308      	bcc.n	8004a5e <memmove+0x1e>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d007      	beq.n	8004a62 <memmove+0x22>
 8004a52:	5ccc      	ldrb	r4, [r1, r3]
 8004a54:	54c4      	strb	r4, [r0, r3]
 8004a56:	3301      	adds	r3, #1
 8004a58:	e7f9      	b.n	8004a4e <memmove+0xe>
 8004a5a:	5c8b      	ldrb	r3, [r1, r2]
 8004a5c:	5483      	strb	r3, [r0, r2]
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	d2fb      	bcs.n	8004a5a <memmove+0x1a>
 8004a62:	bd10      	pop	{r4, pc}

08004a64 <memchr>:
 8004a64:	b2c9      	uxtb	r1, r1
 8004a66:	1882      	adds	r2, r0, r2
 8004a68:	4290      	cmp	r0, r2
 8004a6a:	d101      	bne.n	8004a70 <memchr+0xc>
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	4770      	bx	lr
 8004a70:	7803      	ldrb	r3, [r0, #0]
 8004a72:	428b      	cmp	r3, r1
 8004a74:	d0fb      	beq.n	8004a6e <memchr+0xa>
 8004a76:	3001      	adds	r0, #1
 8004a78:	e7f6      	b.n	8004a68 <memchr+0x4>

08004a7a <_realloc_r>:
 8004a7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a7c:	0006      	movs	r6, r0
 8004a7e:	000c      	movs	r4, r1
 8004a80:	0015      	movs	r5, r2
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d105      	bne.n	8004a92 <_realloc_r+0x18>
 8004a86:	0011      	movs	r1, r2
 8004a88:	f7fe ffe8 	bl	8003a5c <_malloc_r>
 8004a8c:	0004      	movs	r4, r0
 8004a8e:	0020      	movs	r0, r4
 8004a90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d103      	bne.n	8004a9e <_realloc_r+0x24>
 8004a96:	f7ff f917 	bl	8003cc8 <_free_r>
 8004a9a:	002c      	movs	r4, r5
 8004a9c:	e7f7      	b.n	8004a8e <_realloc_r+0x14>
 8004a9e:	f000 f931 	bl	8004d04 <_malloc_usable_size_r>
 8004aa2:	0007      	movs	r7, r0
 8004aa4:	4285      	cmp	r5, r0
 8004aa6:	d802      	bhi.n	8004aae <_realloc_r+0x34>
 8004aa8:	0843      	lsrs	r3, r0, #1
 8004aaa:	42ab      	cmp	r3, r5
 8004aac:	d3ef      	bcc.n	8004a8e <_realloc_r+0x14>
 8004aae:	0029      	movs	r1, r5
 8004ab0:	0030      	movs	r0, r6
 8004ab2:	f7fe ffd3 	bl	8003a5c <_malloc_r>
 8004ab6:	9001      	str	r0, [sp, #4]
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d101      	bne.n	8004ac0 <_realloc_r+0x46>
 8004abc:	9c01      	ldr	r4, [sp, #4]
 8004abe:	e7e6      	b.n	8004a8e <_realloc_r+0x14>
 8004ac0:	002a      	movs	r2, r5
 8004ac2:	42bd      	cmp	r5, r7
 8004ac4:	d900      	bls.n	8004ac8 <_realloc_r+0x4e>
 8004ac6:	003a      	movs	r2, r7
 8004ac8:	0021      	movs	r1, r4
 8004aca:	9801      	ldr	r0, [sp, #4]
 8004acc:	f7ff f8f2 	bl	8003cb4 <memcpy>
 8004ad0:	0021      	movs	r1, r4
 8004ad2:	0030      	movs	r0, r6
 8004ad4:	f7ff f8f8 	bl	8003cc8 <_free_r>
 8004ad8:	e7f0      	b.n	8004abc <_realloc_r+0x42>
	...

08004adc <_strtol_l.isra.0>:
 8004adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	0017      	movs	r7, r2
 8004ae2:	001e      	movs	r6, r3
 8004ae4:	9003      	str	r0, [sp, #12]
 8004ae6:	9101      	str	r1, [sp, #4]
 8004ae8:	2b24      	cmp	r3, #36	@ 0x24
 8004aea:	d823      	bhi.n	8004b34 <_strtol_l.isra.0+0x58>
 8004aec:	000c      	movs	r4, r1
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d020      	beq.n	8004b34 <_strtol_l.isra.0+0x58>
 8004af2:	4b3d      	ldr	r3, [pc, #244]	@ (8004be8 <_strtol_l.isra.0+0x10c>)
 8004af4:	2208      	movs	r2, #8
 8004af6:	469c      	mov	ip, r3
 8004af8:	0023      	movs	r3, r4
 8004afa:	4661      	mov	r1, ip
 8004afc:	781d      	ldrb	r5, [r3, #0]
 8004afe:	3401      	adds	r4, #1
 8004b00:	5d48      	ldrb	r0, [r1, r5]
 8004b02:	0001      	movs	r1, r0
 8004b04:	4011      	ands	r1, r2
 8004b06:	4210      	tst	r0, r2
 8004b08:	d1f6      	bne.n	8004af8 <_strtol_l.isra.0+0x1c>
 8004b0a:	2d2d      	cmp	r5, #45	@ 0x2d
 8004b0c:	d119      	bne.n	8004b42 <_strtol_l.isra.0+0x66>
 8004b0e:	7825      	ldrb	r5, [r4, #0]
 8004b10:	1c9c      	adds	r4, r3, #2
 8004b12:	2301      	movs	r3, #1
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2210      	movs	r2, #16
 8004b18:	0033      	movs	r3, r6
 8004b1a:	4393      	bics	r3, r2
 8004b1c:	d11d      	bne.n	8004b5a <_strtol_l.isra.0+0x7e>
 8004b1e:	2d30      	cmp	r5, #48	@ 0x30
 8004b20:	d115      	bne.n	8004b4e <_strtol_l.isra.0+0x72>
 8004b22:	2120      	movs	r1, #32
 8004b24:	7823      	ldrb	r3, [r4, #0]
 8004b26:	438b      	bics	r3, r1
 8004b28:	2b58      	cmp	r3, #88	@ 0x58
 8004b2a:	d110      	bne.n	8004b4e <_strtol_l.isra.0+0x72>
 8004b2c:	7865      	ldrb	r5, [r4, #1]
 8004b2e:	3402      	adds	r4, #2
 8004b30:	2610      	movs	r6, #16
 8004b32:	e012      	b.n	8004b5a <_strtol_l.isra.0+0x7e>
 8004b34:	f7ff f88a 	bl	8003c4c <__errno>
 8004b38:	2316      	movs	r3, #22
 8004b3a:	6003      	str	r3, [r0, #0]
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	b005      	add	sp, #20
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	9100      	str	r1, [sp, #0]
 8004b44:	2d2b      	cmp	r5, #43	@ 0x2b
 8004b46:	d1e6      	bne.n	8004b16 <_strtol_l.isra.0+0x3a>
 8004b48:	7825      	ldrb	r5, [r4, #0]
 8004b4a:	1c9c      	adds	r4, r3, #2
 8004b4c:	e7e3      	b.n	8004b16 <_strtol_l.isra.0+0x3a>
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	d1ee      	bne.n	8004b30 <_strtol_l.isra.0+0x54>
 8004b52:	360a      	adds	r6, #10
 8004b54:	2d30      	cmp	r5, #48	@ 0x30
 8004b56:	d100      	bne.n	8004b5a <_strtol_l.isra.0+0x7e>
 8004b58:	3e02      	subs	r6, #2
 8004b5a:	4a24      	ldr	r2, [pc, #144]	@ (8004bec <_strtol_l.isra.0+0x110>)
 8004b5c:	9b00      	ldr	r3, [sp, #0]
 8004b5e:	4694      	mov	ip, r2
 8004b60:	4463      	add	r3, ip
 8004b62:	0031      	movs	r1, r6
 8004b64:	0018      	movs	r0, r3
 8004b66:	9302      	str	r3, [sp, #8]
 8004b68:	f7fb fbc2 	bl	80002f0 <__aeabi_uidivmod>
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4684      	mov	ip, r0
 8004b70:	0010      	movs	r0, r2
 8004b72:	002b      	movs	r3, r5
 8004b74:	3b30      	subs	r3, #48	@ 0x30
 8004b76:	2b09      	cmp	r3, #9
 8004b78:	d811      	bhi.n	8004b9e <_strtol_l.isra.0+0xc2>
 8004b7a:	001d      	movs	r5, r3
 8004b7c:	42ae      	cmp	r6, r5
 8004b7e:	dd1d      	ble.n	8004bbc <_strtol_l.isra.0+0xe0>
 8004b80:	1c53      	adds	r3, r2, #1
 8004b82:	d009      	beq.n	8004b98 <_strtol_l.isra.0+0xbc>
 8004b84:	2201      	movs	r2, #1
 8004b86:	4252      	negs	r2, r2
 8004b88:	4584      	cmp	ip, r0
 8004b8a:	d305      	bcc.n	8004b98 <_strtol_l.isra.0+0xbc>
 8004b8c:	d101      	bne.n	8004b92 <_strtol_l.isra.0+0xb6>
 8004b8e:	42a9      	cmp	r1, r5
 8004b90:	db11      	blt.n	8004bb6 <_strtol_l.isra.0+0xda>
 8004b92:	2201      	movs	r2, #1
 8004b94:	4370      	muls	r0, r6
 8004b96:	1828      	adds	r0, r5, r0
 8004b98:	7825      	ldrb	r5, [r4, #0]
 8004b9a:	3401      	adds	r4, #1
 8004b9c:	e7e9      	b.n	8004b72 <_strtol_l.isra.0+0x96>
 8004b9e:	002b      	movs	r3, r5
 8004ba0:	3b41      	subs	r3, #65	@ 0x41
 8004ba2:	2b19      	cmp	r3, #25
 8004ba4:	d801      	bhi.n	8004baa <_strtol_l.isra.0+0xce>
 8004ba6:	3d37      	subs	r5, #55	@ 0x37
 8004ba8:	e7e8      	b.n	8004b7c <_strtol_l.isra.0+0xa0>
 8004baa:	002b      	movs	r3, r5
 8004bac:	3b61      	subs	r3, #97	@ 0x61
 8004bae:	2b19      	cmp	r3, #25
 8004bb0:	d804      	bhi.n	8004bbc <_strtol_l.isra.0+0xe0>
 8004bb2:	3d57      	subs	r5, #87	@ 0x57
 8004bb4:	e7e2      	b.n	8004b7c <_strtol_l.isra.0+0xa0>
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4252      	negs	r2, r2
 8004bba:	e7ed      	b.n	8004b98 <_strtol_l.isra.0+0xbc>
 8004bbc:	1c53      	adds	r3, r2, #1
 8004bbe:	d108      	bne.n	8004bd2 <_strtol_l.isra.0+0xf6>
 8004bc0:	2322      	movs	r3, #34	@ 0x22
 8004bc2:	9a03      	ldr	r2, [sp, #12]
 8004bc4:	9802      	ldr	r0, [sp, #8]
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	2f00      	cmp	r7, #0
 8004bca:	d0b8      	beq.n	8004b3e <_strtol_l.isra.0+0x62>
 8004bcc:	1e63      	subs	r3, r4, #1
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	e007      	b.n	8004be2 <_strtol_l.isra.0+0x106>
 8004bd2:	9b00      	ldr	r3, [sp, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d000      	beq.n	8004bda <_strtol_l.isra.0+0xfe>
 8004bd8:	4240      	negs	r0, r0
 8004bda:	2f00      	cmp	r7, #0
 8004bdc:	d0af      	beq.n	8004b3e <_strtol_l.isra.0+0x62>
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d1f4      	bne.n	8004bcc <_strtol_l.isra.0+0xf0>
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	e7aa      	b.n	8004b3e <_strtol_l.isra.0+0x62>
 8004be8:	08005385 	.word	0x08005385
 8004bec:	7fffffff 	.word	0x7fffffff

08004bf0 <_strtol_r>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	f7ff ff73 	bl	8004adc <_strtol_l.isra.0>
 8004bf6:	bd10      	pop	{r4, pc}

08004bf8 <_strtoul_l.isra.0>:
 8004bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfa:	001e      	movs	r6, r3
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf8 <_strtoul_l.isra.0+0x100>)
 8004bfe:	0017      	movs	r7, r2
 8004c00:	000c      	movs	r4, r1
 8004c02:	469c      	mov	ip, r3
 8004c04:	2208      	movs	r2, #8
 8004c06:	b085      	sub	sp, #20
 8004c08:	9003      	str	r0, [sp, #12]
 8004c0a:	9100      	str	r1, [sp, #0]
 8004c0c:	0023      	movs	r3, r4
 8004c0e:	4661      	mov	r1, ip
 8004c10:	781d      	ldrb	r5, [r3, #0]
 8004c12:	3401      	adds	r4, #1
 8004c14:	5d48      	ldrb	r0, [r1, r5]
 8004c16:	0001      	movs	r1, r0
 8004c18:	4011      	ands	r1, r2
 8004c1a:	4210      	tst	r0, r2
 8004c1c:	d1f6      	bne.n	8004c0c <_strtoul_l.isra.0+0x14>
 8004c1e:	2d2d      	cmp	r5, #45	@ 0x2d
 8004c20:	d112      	bne.n	8004c48 <_strtoul_l.isra.0+0x50>
 8004c22:	7825      	ldrb	r5, [r4, #0]
 8004c24:	1c9c      	adds	r4, r3, #2
 8004c26:	2301      	movs	r3, #1
 8004c28:	9302      	str	r3, [sp, #8]
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	0033      	movs	r3, r6
 8004c2e:	4393      	bics	r3, r2
 8004c30:	d116      	bne.n	8004c60 <_strtoul_l.isra.0+0x68>
 8004c32:	2d30      	cmp	r5, #48	@ 0x30
 8004c34:	d10e      	bne.n	8004c54 <_strtoul_l.isra.0+0x5c>
 8004c36:	2120      	movs	r1, #32
 8004c38:	7823      	ldrb	r3, [r4, #0]
 8004c3a:	438b      	bics	r3, r1
 8004c3c:	2b58      	cmp	r3, #88	@ 0x58
 8004c3e:	d109      	bne.n	8004c54 <_strtoul_l.isra.0+0x5c>
 8004c40:	7865      	ldrb	r5, [r4, #1]
 8004c42:	3402      	adds	r4, #2
 8004c44:	2610      	movs	r6, #16
 8004c46:	e00b      	b.n	8004c60 <_strtoul_l.isra.0+0x68>
 8004c48:	9102      	str	r1, [sp, #8]
 8004c4a:	2d2b      	cmp	r5, #43	@ 0x2b
 8004c4c:	d1ed      	bne.n	8004c2a <_strtoul_l.isra.0+0x32>
 8004c4e:	7825      	ldrb	r5, [r4, #0]
 8004c50:	1c9c      	adds	r4, r3, #2
 8004c52:	e7ea      	b.n	8004c2a <_strtoul_l.isra.0+0x32>
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	d1f5      	bne.n	8004c44 <_strtoul_l.isra.0+0x4c>
 8004c58:	360a      	adds	r6, #10
 8004c5a:	2d30      	cmp	r5, #48	@ 0x30
 8004c5c:	d100      	bne.n	8004c60 <_strtoul_l.isra.0+0x68>
 8004c5e:	3e02      	subs	r6, #2
 8004c60:	2001      	movs	r0, #1
 8004c62:	0031      	movs	r1, r6
 8004c64:	4240      	negs	r0, r0
 8004c66:	f7fb fabd 	bl	80001e4 <__udivsi3>
 8004c6a:	9001      	str	r0, [sp, #4]
 8004c6c:	2001      	movs	r0, #1
 8004c6e:	0031      	movs	r1, r6
 8004c70:	4240      	negs	r0, r0
 8004c72:	f7fb fb3d 	bl	80002f0 <__aeabi_uidivmod>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2201      	movs	r2, #1
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	4694      	mov	ip, r2
 8004c7e:	002a      	movs	r2, r5
 8004c80:	3a30      	subs	r2, #48	@ 0x30
 8004c82:	2a09      	cmp	r2, #9
 8004c84:	d812      	bhi.n	8004cac <_strtoul_l.isra.0+0xb4>
 8004c86:	0015      	movs	r5, r2
 8004c88:	42ae      	cmp	r6, r5
 8004c8a:	dd1e      	ble.n	8004cca <_strtoul_l.isra.0+0xd2>
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	d00a      	beq.n	8004ca6 <_strtoul_l.isra.0+0xae>
 8004c90:	2301      	movs	r3, #1
 8004c92:	9a01      	ldr	r2, [sp, #4]
 8004c94:	425b      	negs	r3, r3
 8004c96:	4282      	cmp	r2, r0
 8004c98:	d305      	bcc.n	8004ca6 <_strtoul_l.isra.0+0xae>
 8004c9a:	d101      	bne.n	8004ca0 <_strtoul_l.isra.0+0xa8>
 8004c9c:	42a9      	cmp	r1, r5
 8004c9e:	db11      	blt.n	8004cc4 <_strtoul_l.isra.0+0xcc>
 8004ca0:	4663      	mov	r3, ip
 8004ca2:	4370      	muls	r0, r6
 8004ca4:	1828      	adds	r0, r5, r0
 8004ca6:	7825      	ldrb	r5, [r4, #0]
 8004ca8:	3401      	adds	r4, #1
 8004caa:	e7e8      	b.n	8004c7e <_strtoul_l.isra.0+0x86>
 8004cac:	002a      	movs	r2, r5
 8004cae:	3a41      	subs	r2, #65	@ 0x41
 8004cb0:	2a19      	cmp	r2, #25
 8004cb2:	d801      	bhi.n	8004cb8 <_strtoul_l.isra.0+0xc0>
 8004cb4:	3d37      	subs	r5, #55	@ 0x37
 8004cb6:	e7e7      	b.n	8004c88 <_strtoul_l.isra.0+0x90>
 8004cb8:	002a      	movs	r2, r5
 8004cba:	3a61      	subs	r2, #97	@ 0x61
 8004cbc:	2a19      	cmp	r2, #25
 8004cbe:	d804      	bhi.n	8004cca <_strtoul_l.isra.0+0xd2>
 8004cc0:	3d57      	subs	r5, #87	@ 0x57
 8004cc2:	e7e1      	b.n	8004c88 <_strtoul_l.isra.0+0x90>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	425b      	negs	r3, r3
 8004cc8:	e7ed      	b.n	8004ca6 <_strtoul_l.isra.0+0xae>
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	d107      	bne.n	8004cde <_strtoul_l.isra.0+0xe6>
 8004cce:	2222      	movs	r2, #34	@ 0x22
 8004cd0:	9903      	ldr	r1, [sp, #12]
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	600a      	str	r2, [r1, #0]
 8004cd6:	2f00      	cmp	r7, #0
 8004cd8:	d109      	bne.n	8004cee <_strtoul_l.isra.0+0xf6>
 8004cda:	b005      	add	sp, #20
 8004cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cde:	9a02      	ldr	r2, [sp, #8]
 8004ce0:	2a00      	cmp	r2, #0
 8004ce2:	d000      	beq.n	8004ce6 <_strtoul_l.isra.0+0xee>
 8004ce4:	4240      	negs	r0, r0
 8004ce6:	2f00      	cmp	r7, #0
 8004ce8:	d0f7      	beq.n	8004cda <_strtoul_l.isra.0+0xe2>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <_strtoul_l.isra.0+0xfa>
 8004cee:	1e63      	subs	r3, r4, #1
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	9b00      	ldr	r3, [sp, #0]
 8004cf4:	603b      	str	r3, [r7, #0]
 8004cf6:	e7f0      	b.n	8004cda <_strtoul_l.isra.0+0xe2>
 8004cf8:	08005385 	.word	0x08005385

08004cfc <_strtoul_r>:
 8004cfc:	b510      	push	{r4, lr}
 8004cfe:	f7ff ff7b 	bl	8004bf8 <_strtoul_l.isra.0>
 8004d02:	bd10      	pop	{r4, pc}

08004d04 <_malloc_usable_size_r>:
 8004d04:	1f0b      	subs	r3, r1, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1f18      	subs	r0, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	da01      	bge.n	8004d12 <_malloc_usable_size_r+0xe>
 8004d0e:	580b      	ldr	r3, [r1, r0]
 8004d10:	18c0      	adds	r0, r0, r3
 8004d12:	4770      	bx	lr

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
