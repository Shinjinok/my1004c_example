
my1004c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08007160  08007160  00008160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .default_config 00000063  08007a00  08007a00  00008a00  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  08007a63  08007a63  00008a63  2**0
                  ALLOC, READONLY
  5 .ARM          00000000  08007a64  08007a64  00009200  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  08007a64  08007a64  00009200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08007a68  08007a68  00008a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000064  20000000  08007a6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fConfig      00000100  20000100  08007ad0  00009100  2**8
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000004e8  20000200  08007bd0  00009200  2**8
                  ALLOC
 12 ._user_heap_stack 00000600  200006e8  08007bd0  000096e8  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018134  00000000  00000000  00009228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fe8  00000000  00000000  0002135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00008595  00000000  00000000  00025344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000d50  00000000  00000000  0002d8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b82  00000000  00000000  0002e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00015737  00000000  00000000  0002f1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014c1b  00000000  00000000  000448e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00052c5c  00000000  00000000  00059504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000ac160  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000030c4  00000000  00000000  000ac1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  000af268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007148 	.word	0x08007148

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	08007148 	.word	0x08007148

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_lmul>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	46ce      	mov	lr, r9
 800025c:	4699      	mov	r9, r3
 800025e:	0c03      	lsrs	r3, r0, #16
 8000260:	469c      	mov	ip, r3
 8000262:	0413      	lsls	r3, r2, #16
 8000264:	4647      	mov	r7, r8
 8000266:	0c1b      	lsrs	r3, r3, #16
 8000268:	001d      	movs	r5, r3
 800026a:	000e      	movs	r6, r1
 800026c:	4661      	mov	r1, ip
 800026e:	0404      	lsls	r4, r0, #16
 8000270:	0c24      	lsrs	r4, r4, #16
 8000272:	b580      	push	{r7, lr}
 8000274:	0007      	movs	r7, r0
 8000276:	0c10      	lsrs	r0, r2, #16
 8000278:	434b      	muls	r3, r1
 800027a:	4365      	muls	r5, r4
 800027c:	4341      	muls	r1, r0
 800027e:	4360      	muls	r0, r4
 8000280:	0c2c      	lsrs	r4, r5, #16
 8000282:	18c0      	adds	r0, r0, r3
 8000284:	1824      	adds	r4, r4, r0
 8000286:	468c      	mov	ip, r1
 8000288:	42a3      	cmp	r3, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x3c>
 800028c:	2380      	movs	r3, #128	@ 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	4649      	mov	r1, r9
 8000296:	4379      	muls	r1, r7
 8000298:	4356      	muls	r6, r2
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	042d      	lsls	r5, r5, #16
 800029e:	0c2d      	lsrs	r5, r5, #16
 80002a0:	1989      	adds	r1, r1, r6
 80002a2:	4463      	add	r3, ip
 80002a4:	0424      	lsls	r4, r4, #16
 80002a6:	1960      	adds	r0, r4, r5
 80002a8:	18c9      	adds	r1, r1, r3
 80002aa:	bcc0      	pop	{r6, r7}
 80002ac:	46b9      	mov	r9, r7
 80002ae:	46b0      	mov	r8, r6
 80002b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002b2:	46c0      	nop			@ (mov r8, r8)

080002b4 <__aeabi_dadd>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	9000      	str	r0, [sp, #0]
 80002c2:	9101      	str	r1, [sp, #4]
 80002c4:	030e      	lsls	r6, r1, #12
 80002c6:	004c      	lsls	r4, r1, #1
 80002c8:	0fcd      	lsrs	r5, r1, #31
 80002ca:	0a71      	lsrs	r1, r6, #9
 80002cc:	9e00      	ldr	r6, [sp, #0]
 80002ce:	005f      	lsls	r7, r3, #1
 80002d0:	0f76      	lsrs	r6, r6, #29
 80002d2:	430e      	orrs	r6, r1
 80002d4:	9900      	ldr	r1, [sp, #0]
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	00c9      	lsls	r1, r1, #3
 80002dc:	4689      	mov	r9, r1
 80002de:	0319      	lsls	r1, r3, #12
 80002e0:	0d7b      	lsrs	r3, r7, #21
 80002e2:	4698      	mov	r8, r3
 80002e4:	9b01      	ldr	r3, [sp, #4]
 80002e6:	0a49      	lsrs	r1, r1, #9
 80002e8:	0fdb      	lsrs	r3, r3, #31
 80002ea:	469c      	mov	ip, r3
 80002ec:	9b00      	ldr	r3, [sp, #0]
 80002ee:	9a00      	ldr	r2, [sp, #0]
 80002f0:	0f5b      	lsrs	r3, r3, #29
 80002f2:	430b      	orrs	r3, r1
 80002f4:	4641      	mov	r1, r8
 80002f6:	0d64      	lsrs	r4, r4, #21
 80002f8:	00d2      	lsls	r2, r2, #3
 80002fa:	1a61      	subs	r1, r4, r1
 80002fc:	4565      	cmp	r5, ip
 80002fe:	d100      	bne.n	8000302 <__aeabi_dadd+0x4e>
 8000300:	e0a6      	b.n	8000450 <__aeabi_dadd+0x19c>
 8000302:	2900      	cmp	r1, #0
 8000304:	dd72      	ble.n	80003ec <__aeabi_dadd+0x138>
 8000306:	4647      	mov	r7, r8
 8000308:	2f00      	cmp	r7, #0
 800030a:	d100      	bne.n	800030e <__aeabi_dadd+0x5a>
 800030c:	e0dd      	b.n	80004ca <__aeabi_dadd+0x216>
 800030e:	4fcc      	ldr	r7, [pc, #816]	@ (8000640 <__aeabi_dadd+0x38c>)
 8000310:	42bc      	cmp	r4, r7
 8000312:	d100      	bne.n	8000316 <__aeabi_dadd+0x62>
 8000314:	e19a      	b.n	800064c <__aeabi_dadd+0x398>
 8000316:	2701      	movs	r7, #1
 8000318:	2938      	cmp	r1, #56	@ 0x38
 800031a:	dc17      	bgt.n	800034c <__aeabi_dadd+0x98>
 800031c:	2780      	movs	r7, #128	@ 0x80
 800031e:	043f      	lsls	r7, r7, #16
 8000320:	433b      	orrs	r3, r7
 8000322:	291f      	cmp	r1, #31
 8000324:	dd00      	ble.n	8000328 <__aeabi_dadd+0x74>
 8000326:	e1dd      	b.n	80006e4 <__aeabi_dadd+0x430>
 8000328:	2720      	movs	r7, #32
 800032a:	1a78      	subs	r0, r7, r1
 800032c:	001f      	movs	r7, r3
 800032e:	4087      	lsls	r7, r0
 8000330:	46ba      	mov	sl, r7
 8000332:	0017      	movs	r7, r2
 8000334:	40cf      	lsrs	r7, r1
 8000336:	4684      	mov	ip, r0
 8000338:	0038      	movs	r0, r7
 800033a:	4657      	mov	r7, sl
 800033c:	4307      	orrs	r7, r0
 800033e:	4660      	mov	r0, ip
 8000340:	4082      	lsls	r2, r0
 8000342:	40cb      	lsrs	r3, r1
 8000344:	1e50      	subs	r0, r2, #1
 8000346:	4182      	sbcs	r2, r0
 8000348:	1af6      	subs	r6, r6, r3
 800034a:	4317      	orrs	r7, r2
 800034c:	464b      	mov	r3, r9
 800034e:	1bdf      	subs	r7, r3, r7
 8000350:	45b9      	cmp	r9, r7
 8000352:	4180      	sbcs	r0, r0
 8000354:	4240      	negs	r0, r0
 8000356:	1a36      	subs	r6, r6, r0
 8000358:	0233      	lsls	r3, r6, #8
 800035a:	d400      	bmi.n	800035e <__aeabi_dadd+0xaa>
 800035c:	e0ff      	b.n	800055e <__aeabi_dadd+0x2aa>
 800035e:	0276      	lsls	r6, r6, #9
 8000360:	0a76      	lsrs	r6, r6, #9
 8000362:	2e00      	cmp	r6, #0
 8000364:	d100      	bne.n	8000368 <__aeabi_dadd+0xb4>
 8000366:	e13c      	b.n	80005e2 <__aeabi_dadd+0x32e>
 8000368:	0030      	movs	r0, r6
 800036a:	f000 feb9 	bl	80010e0 <__clzsi2>
 800036e:	0003      	movs	r3, r0
 8000370:	3b08      	subs	r3, #8
 8000372:	2120      	movs	r1, #32
 8000374:	0038      	movs	r0, r7
 8000376:	1aca      	subs	r2, r1, r3
 8000378:	40d0      	lsrs	r0, r2
 800037a:	409e      	lsls	r6, r3
 800037c:	0002      	movs	r2, r0
 800037e:	409f      	lsls	r7, r3
 8000380:	4332      	orrs	r2, r6
 8000382:	429c      	cmp	r4, r3
 8000384:	dd00      	ble.n	8000388 <__aeabi_dadd+0xd4>
 8000386:	e1a6      	b.n	80006d6 <__aeabi_dadd+0x422>
 8000388:	1b18      	subs	r0, r3, r4
 800038a:	3001      	adds	r0, #1
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	003e      	movs	r6, r7
 8000390:	408f      	lsls	r7, r1
 8000392:	40c6      	lsrs	r6, r0
 8000394:	1e7b      	subs	r3, r7, #1
 8000396:	419f      	sbcs	r7, r3
 8000398:	0013      	movs	r3, r2
 800039a:	408b      	lsls	r3, r1
 800039c:	4337      	orrs	r7, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	40c2      	lsrs	r2, r0
 80003a2:	003b      	movs	r3, r7
 80003a4:	0016      	movs	r6, r2
 80003a6:	2400      	movs	r4, #0
 80003a8:	4313      	orrs	r3, r2
 80003aa:	d100      	bne.n	80003ae <__aeabi_dadd+0xfa>
 80003ac:	e1df      	b.n	800076e <__aeabi_dadd+0x4ba>
 80003ae:	077b      	lsls	r3, r7, #29
 80003b0:	d100      	bne.n	80003b4 <__aeabi_dadd+0x100>
 80003b2:	e332      	b.n	8000a1a <__aeabi_dadd+0x766>
 80003b4:	230f      	movs	r3, #15
 80003b6:	003a      	movs	r2, r7
 80003b8:	403b      	ands	r3, r7
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	d004      	beq.n	80003c8 <__aeabi_dadd+0x114>
 80003be:	1d3a      	adds	r2, r7, #4
 80003c0:	42ba      	cmp	r2, r7
 80003c2:	41bf      	sbcs	r7, r7
 80003c4:	427f      	negs	r7, r7
 80003c6:	19f6      	adds	r6, r6, r7
 80003c8:	0233      	lsls	r3, r6, #8
 80003ca:	d400      	bmi.n	80003ce <__aeabi_dadd+0x11a>
 80003cc:	e323      	b.n	8000a16 <__aeabi_dadd+0x762>
 80003ce:	4b9c      	ldr	r3, [pc, #624]	@ (8000640 <__aeabi_dadd+0x38c>)
 80003d0:	3401      	adds	r4, #1
 80003d2:	429c      	cmp	r4, r3
 80003d4:	d100      	bne.n	80003d8 <__aeabi_dadd+0x124>
 80003d6:	e0b4      	b.n	8000542 <__aeabi_dadd+0x28e>
 80003d8:	4b9a      	ldr	r3, [pc, #616]	@ (8000644 <__aeabi_dadd+0x390>)
 80003da:	0564      	lsls	r4, r4, #21
 80003dc:	401e      	ands	r6, r3
 80003de:	0d64      	lsrs	r4, r4, #21
 80003e0:	0777      	lsls	r7, r6, #29
 80003e2:	08d2      	lsrs	r2, r2, #3
 80003e4:	0276      	lsls	r6, r6, #9
 80003e6:	4317      	orrs	r7, r2
 80003e8:	0b36      	lsrs	r6, r6, #12
 80003ea:	e0ac      	b.n	8000546 <__aeabi_dadd+0x292>
 80003ec:	2900      	cmp	r1, #0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_dadd+0x13e>
 80003f0:	e07e      	b.n	80004f0 <__aeabi_dadd+0x23c>
 80003f2:	4641      	mov	r1, r8
 80003f4:	1b09      	subs	r1, r1, r4
 80003f6:	2c00      	cmp	r4, #0
 80003f8:	d000      	beq.n	80003fc <__aeabi_dadd+0x148>
 80003fa:	e160      	b.n	80006be <__aeabi_dadd+0x40a>
 80003fc:	0034      	movs	r4, r6
 80003fe:	4648      	mov	r0, r9
 8000400:	4304      	orrs	r4, r0
 8000402:	d100      	bne.n	8000406 <__aeabi_dadd+0x152>
 8000404:	e1c9      	b.n	800079a <__aeabi_dadd+0x4e6>
 8000406:	1e4c      	subs	r4, r1, #1
 8000408:	2901      	cmp	r1, #1
 800040a:	d100      	bne.n	800040e <__aeabi_dadd+0x15a>
 800040c:	e22e      	b.n	800086c <__aeabi_dadd+0x5b8>
 800040e:	4d8c      	ldr	r5, [pc, #560]	@ (8000640 <__aeabi_dadd+0x38c>)
 8000410:	42a9      	cmp	r1, r5
 8000412:	d100      	bne.n	8000416 <__aeabi_dadd+0x162>
 8000414:	e224      	b.n	8000860 <__aeabi_dadd+0x5ac>
 8000416:	2701      	movs	r7, #1
 8000418:	2c38      	cmp	r4, #56	@ 0x38
 800041a:	dc11      	bgt.n	8000440 <__aeabi_dadd+0x18c>
 800041c:	0021      	movs	r1, r4
 800041e:	291f      	cmp	r1, #31
 8000420:	dd00      	ble.n	8000424 <__aeabi_dadd+0x170>
 8000422:	e20b      	b.n	800083c <__aeabi_dadd+0x588>
 8000424:	2420      	movs	r4, #32
 8000426:	0037      	movs	r7, r6
 8000428:	4648      	mov	r0, r9
 800042a:	1a64      	subs	r4, r4, r1
 800042c:	40a7      	lsls	r7, r4
 800042e:	40c8      	lsrs	r0, r1
 8000430:	4307      	orrs	r7, r0
 8000432:	4648      	mov	r0, r9
 8000434:	40a0      	lsls	r0, r4
 8000436:	40ce      	lsrs	r6, r1
 8000438:	1e44      	subs	r4, r0, #1
 800043a:	41a0      	sbcs	r0, r4
 800043c:	1b9b      	subs	r3, r3, r6
 800043e:	4307      	orrs	r7, r0
 8000440:	1bd7      	subs	r7, r2, r7
 8000442:	42ba      	cmp	r2, r7
 8000444:	4192      	sbcs	r2, r2
 8000446:	4252      	negs	r2, r2
 8000448:	4665      	mov	r5, ip
 800044a:	4644      	mov	r4, r8
 800044c:	1a9e      	subs	r6, r3, r2
 800044e:	e783      	b.n	8000358 <__aeabi_dadd+0xa4>
 8000450:	2900      	cmp	r1, #0
 8000452:	dc00      	bgt.n	8000456 <__aeabi_dadd+0x1a2>
 8000454:	e09c      	b.n	8000590 <__aeabi_dadd+0x2dc>
 8000456:	4647      	mov	r7, r8
 8000458:	2f00      	cmp	r7, #0
 800045a:	d167      	bne.n	800052c <__aeabi_dadd+0x278>
 800045c:	001f      	movs	r7, r3
 800045e:	4317      	orrs	r7, r2
 8000460:	d100      	bne.n	8000464 <__aeabi_dadd+0x1b0>
 8000462:	e0e4      	b.n	800062e <__aeabi_dadd+0x37a>
 8000464:	1e48      	subs	r0, r1, #1
 8000466:	2901      	cmp	r1, #1
 8000468:	d100      	bne.n	800046c <__aeabi_dadd+0x1b8>
 800046a:	e19b      	b.n	80007a4 <__aeabi_dadd+0x4f0>
 800046c:	4f74      	ldr	r7, [pc, #464]	@ (8000640 <__aeabi_dadd+0x38c>)
 800046e:	42b9      	cmp	r1, r7
 8000470:	d100      	bne.n	8000474 <__aeabi_dadd+0x1c0>
 8000472:	e0eb      	b.n	800064c <__aeabi_dadd+0x398>
 8000474:	2701      	movs	r7, #1
 8000476:	0001      	movs	r1, r0
 8000478:	2838      	cmp	r0, #56	@ 0x38
 800047a:	dc11      	bgt.n	80004a0 <__aeabi_dadd+0x1ec>
 800047c:	291f      	cmp	r1, #31
 800047e:	dd00      	ble.n	8000482 <__aeabi_dadd+0x1ce>
 8000480:	e1c7      	b.n	8000812 <__aeabi_dadd+0x55e>
 8000482:	2720      	movs	r7, #32
 8000484:	1a78      	subs	r0, r7, r1
 8000486:	001f      	movs	r7, r3
 8000488:	4684      	mov	ip, r0
 800048a:	4087      	lsls	r7, r0
 800048c:	0010      	movs	r0, r2
 800048e:	40c8      	lsrs	r0, r1
 8000490:	4307      	orrs	r7, r0
 8000492:	4660      	mov	r0, ip
 8000494:	4082      	lsls	r2, r0
 8000496:	40cb      	lsrs	r3, r1
 8000498:	1e50      	subs	r0, r2, #1
 800049a:	4182      	sbcs	r2, r0
 800049c:	18f6      	adds	r6, r6, r3
 800049e:	4317      	orrs	r7, r2
 80004a0:	444f      	add	r7, r9
 80004a2:	454f      	cmp	r7, r9
 80004a4:	4180      	sbcs	r0, r0
 80004a6:	4240      	negs	r0, r0
 80004a8:	1836      	adds	r6, r6, r0
 80004aa:	0233      	lsls	r3, r6, #8
 80004ac:	d557      	bpl.n	800055e <__aeabi_dadd+0x2aa>
 80004ae:	4b64      	ldr	r3, [pc, #400]	@ (8000640 <__aeabi_dadd+0x38c>)
 80004b0:	3401      	adds	r4, #1
 80004b2:	429c      	cmp	r4, r3
 80004b4:	d045      	beq.n	8000542 <__aeabi_dadd+0x28e>
 80004b6:	2101      	movs	r1, #1
 80004b8:	4b62      	ldr	r3, [pc, #392]	@ (8000644 <__aeabi_dadd+0x390>)
 80004ba:	087a      	lsrs	r2, r7, #1
 80004bc:	401e      	ands	r6, r3
 80004be:	4039      	ands	r1, r7
 80004c0:	430a      	orrs	r2, r1
 80004c2:	07f7      	lsls	r7, r6, #31
 80004c4:	4317      	orrs	r7, r2
 80004c6:	0876      	lsrs	r6, r6, #1
 80004c8:	e771      	b.n	80003ae <__aeabi_dadd+0xfa>
 80004ca:	001f      	movs	r7, r3
 80004cc:	4317      	orrs	r7, r2
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dadd+0x21e>
 80004d0:	e0ad      	b.n	800062e <__aeabi_dadd+0x37a>
 80004d2:	1e4f      	subs	r7, r1, #1
 80004d4:	46bc      	mov	ip, r7
 80004d6:	2901      	cmp	r1, #1
 80004d8:	d100      	bne.n	80004dc <__aeabi_dadd+0x228>
 80004da:	e182      	b.n	80007e2 <__aeabi_dadd+0x52e>
 80004dc:	4f58      	ldr	r7, [pc, #352]	@ (8000640 <__aeabi_dadd+0x38c>)
 80004de:	42b9      	cmp	r1, r7
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dadd+0x230>
 80004e2:	e190      	b.n	8000806 <__aeabi_dadd+0x552>
 80004e4:	4661      	mov	r1, ip
 80004e6:	2701      	movs	r7, #1
 80004e8:	2938      	cmp	r1, #56	@ 0x38
 80004ea:	dd00      	ble.n	80004ee <__aeabi_dadd+0x23a>
 80004ec:	e72e      	b.n	800034c <__aeabi_dadd+0x98>
 80004ee:	e718      	b.n	8000322 <__aeabi_dadd+0x6e>
 80004f0:	4f55      	ldr	r7, [pc, #340]	@ (8000648 <__aeabi_dadd+0x394>)
 80004f2:	1c61      	adds	r1, r4, #1
 80004f4:	4239      	tst	r1, r7
 80004f6:	d000      	beq.n	80004fa <__aeabi_dadd+0x246>
 80004f8:	e0d0      	b.n	800069c <__aeabi_dadd+0x3e8>
 80004fa:	0031      	movs	r1, r6
 80004fc:	4648      	mov	r0, r9
 80004fe:	001f      	movs	r7, r3
 8000500:	4301      	orrs	r1, r0
 8000502:	4317      	orrs	r7, r2
 8000504:	2c00      	cmp	r4, #0
 8000506:	d000      	beq.n	800050a <__aeabi_dadd+0x256>
 8000508:	e13d      	b.n	8000786 <__aeabi_dadd+0x4d2>
 800050a:	2900      	cmp	r1, #0
 800050c:	d100      	bne.n	8000510 <__aeabi_dadd+0x25c>
 800050e:	e1bc      	b.n	800088a <__aeabi_dadd+0x5d6>
 8000510:	2f00      	cmp	r7, #0
 8000512:	d000      	beq.n	8000516 <__aeabi_dadd+0x262>
 8000514:	e1bf      	b.n	8000896 <__aeabi_dadd+0x5e2>
 8000516:	464b      	mov	r3, r9
 8000518:	2100      	movs	r1, #0
 800051a:	08d8      	lsrs	r0, r3, #3
 800051c:	0777      	lsls	r7, r6, #29
 800051e:	4307      	orrs	r7, r0
 8000520:	08f0      	lsrs	r0, r6, #3
 8000522:	0306      	lsls	r6, r0, #12
 8000524:	054c      	lsls	r4, r1, #21
 8000526:	0b36      	lsrs	r6, r6, #12
 8000528:	0d64      	lsrs	r4, r4, #21
 800052a:	e00c      	b.n	8000546 <__aeabi_dadd+0x292>
 800052c:	4f44      	ldr	r7, [pc, #272]	@ (8000640 <__aeabi_dadd+0x38c>)
 800052e:	42bc      	cmp	r4, r7
 8000530:	d100      	bne.n	8000534 <__aeabi_dadd+0x280>
 8000532:	e08b      	b.n	800064c <__aeabi_dadd+0x398>
 8000534:	2701      	movs	r7, #1
 8000536:	2938      	cmp	r1, #56	@ 0x38
 8000538:	dcb2      	bgt.n	80004a0 <__aeabi_dadd+0x1ec>
 800053a:	2780      	movs	r7, #128	@ 0x80
 800053c:	043f      	lsls	r7, r7, #16
 800053e:	433b      	orrs	r3, r7
 8000540:	e79c      	b.n	800047c <__aeabi_dadd+0x1c8>
 8000542:	2600      	movs	r6, #0
 8000544:	2700      	movs	r7, #0
 8000546:	0524      	lsls	r4, r4, #20
 8000548:	4334      	orrs	r4, r6
 800054a:	07ed      	lsls	r5, r5, #31
 800054c:	432c      	orrs	r4, r5
 800054e:	0038      	movs	r0, r7
 8000550:	0021      	movs	r1, r4
 8000552:	b002      	add	sp, #8
 8000554:	bce0      	pop	{r5, r6, r7}
 8000556:	46ba      	mov	sl, r7
 8000558:	46b1      	mov	r9, r6
 800055a:	46a8      	mov	r8, r5
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	077b      	lsls	r3, r7, #29
 8000560:	d004      	beq.n	800056c <__aeabi_dadd+0x2b8>
 8000562:	230f      	movs	r3, #15
 8000564:	403b      	ands	r3, r7
 8000566:	2b04      	cmp	r3, #4
 8000568:	d000      	beq.n	800056c <__aeabi_dadd+0x2b8>
 800056a:	e728      	b.n	80003be <__aeabi_dadd+0x10a>
 800056c:	08f8      	lsrs	r0, r7, #3
 800056e:	4b34      	ldr	r3, [pc, #208]	@ (8000640 <__aeabi_dadd+0x38c>)
 8000570:	0777      	lsls	r7, r6, #29
 8000572:	4307      	orrs	r7, r0
 8000574:	08f0      	lsrs	r0, r6, #3
 8000576:	429c      	cmp	r4, r3
 8000578:	d000      	beq.n	800057c <__aeabi_dadd+0x2c8>
 800057a:	e24a      	b.n	8000a12 <__aeabi_dadd+0x75e>
 800057c:	003b      	movs	r3, r7
 800057e:	4303      	orrs	r3, r0
 8000580:	d059      	beq.n	8000636 <__aeabi_dadd+0x382>
 8000582:	2680      	movs	r6, #128	@ 0x80
 8000584:	0336      	lsls	r6, r6, #12
 8000586:	4306      	orrs	r6, r0
 8000588:	0336      	lsls	r6, r6, #12
 800058a:	4c2d      	ldr	r4, [pc, #180]	@ (8000640 <__aeabi_dadd+0x38c>)
 800058c:	0b36      	lsrs	r6, r6, #12
 800058e:	e7da      	b.n	8000546 <__aeabi_dadd+0x292>
 8000590:	2900      	cmp	r1, #0
 8000592:	d061      	beq.n	8000658 <__aeabi_dadd+0x3a4>
 8000594:	4641      	mov	r1, r8
 8000596:	1b09      	subs	r1, r1, r4
 8000598:	2c00      	cmp	r4, #0
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x2ea>
 800059c:	e0b9      	b.n	8000712 <__aeabi_dadd+0x45e>
 800059e:	4c28      	ldr	r4, [pc, #160]	@ (8000640 <__aeabi_dadd+0x38c>)
 80005a0:	45a0      	cmp	r8, r4
 80005a2:	d100      	bne.n	80005a6 <__aeabi_dadd+0x2f2>
 80005a4:	e1a5      	b.n	80008f2 <__aeabi_dadd+0x63e>
 80005a6:	2701      	movs	r7, #1
 80005a8:	2938      	cmp	r1, #56	@ 0x38
 80005aa:	dc13      	bgt.n	80005d4 <__aeabi_dadd+0x320>
 80005ac:	2480      	movs	r4, #128	@ 0x80
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	4326      	orrs	r6, r4
 80005b2:	291f      	cmp	r1, #31
 80005b4:	dd00      	ble.n	80005b8 <__aeabi_dadd+0x304>
 80005b6:	e1c8      	b.n	800094a <__aeabi_dadd+0x696>
 80005b8:	2420      	movs	r4, #32
 80005ba:	0037      	movs	r7, r6
 80005bc:	4648      	mov	r0, r9
 80005be:	1a64      	subs	r4, r4, r1
 80005c0:	40a7      	lsls	r7, r4
 80005c2:	40c8      	lsrs	r0, r1
 80005c4:	4307      	orrs	r7, r0
 80005c6:	4648      	mov	r0, r9
 80005c8:	40a0      	lsls	r0, r4
 80005ca:	40ce      	lsrs	r6, r1
 80005cc:	1e44      	subs	r4, r0, #1
 80005ce:	41a0      	sbcs	r0, r4
 80005d0:	199b      	adds	r3, r3, r6
 80005d2:	4307      	orrs	r7, r0
 80005d4:	18bf      	adds	r7, r7, r2
 80005d6:	4297      	cmp	r7, r2
 80005d8:	4192      	sbcs	r2, r2
 80005da:	4252      	negs	r2, r2
 80005dc:	4644      	mov	r4, r8
 80005de:	18d6      	adds	r6, r2, r3
 80005e0:	e763      	b.n	80004aa <__aeabi_dadd+0x1f6>
 80005e2:	0038      	movs	r0, r7
 80005e4:	f000 fd7c 	bl	80010e0 <__clzsi2>
 80005e8:	0003      	movs	r3, r0
 80005ea:	3318      	adds	r3, #24
 80005ec:	2b1f      	cmp	r3, #31
 80005ee:	dc00      	bgt.n	80005f2 <__aeabi_dadd+0x33e>
 80005f0:	e6bf      	b.n	8000372 <__aeabi_dadd+0xbe>
 80005f2:	003a      	movs	r2, r7
 80005f4:	3808      	subs	r0, #8
 80005f6:	4082      	lsls	r2, r0
 80005f8:	429c      	cmp	r4, r3
 80005fa:	dd00      	ble.n	80005fe <__aeabi_dadd+0x34a>
 80005fc:	e083      	b.n	8000706 <__aeabi_dadd+0x452>
 80005fe:	1b1b      	subs	r3, r3, r4
 8000600:	1c58      	adds	r0, r3, #1
 8000602:	281f      	cmp	r0, #31
 8000604:	dc00      	bgt.n	8000608 <__aeabi_dadd+0x354>
 8000606:	e1b4      	b.n	8000972 <__aeabi_dadd+0x6be>
 8000608:	0017      	movs	r7, r2
 800060a:	3b1f      	subs	r3, #31
 800060c:	40df      	lsrs	r7, r3
 800060e:	2820      	cmp	r0, #32
 8000610:	d005      	beq.n	800061e <__aeabi_dadd+0x36a>
 8000612:	2340      	movs	r3, #64	@ 0x40
 8000614:	1a1b      	subs	r3, r3, r0
 8000616:	409a      	lsls	r2, r3
 8000618:	1e53      	subs	r3, r2, #1
 800061a:	419a      	sbcs	r2, r3
 800061c:	4317      	orrs	r7, r2
 800061e:	2400      	movs	r4, #0
 8000620:	2f00      	cmp	r7, #0
 8000622:	d00a      	beq.n	800063a <__aeabi_dadd+0x386>
 8000624:	077b      	lsls	r3, r7, #29
 8000626:	d000      	beq.n	800062a <__aeabi_dadd+0x376>
 8000628:	e6c4      	b.n	80003b4 <__aeabi_dadd+0x100>
 800062a:	0026      	movs	r6, r4
 800062c:	e79e      	b.n	800056c <__aeabi_dadd+0x2b8>
 800062e:	464b      	mov	r3, r9
 8000630:	000c      	movs	r4, r1
 8000632:	08d8      	lsrs	r0, r3, #3
 8000634:	e79b      	b.n	800056e <__aeabi_dadd+0x2ba>
 8000636:	2700      	movs	r7, #0
 8000638:	4c01      	ldr	r4, [pc, #4]	@ (8000640 <__aeabi_dadd+0x38c>)
 800063a:	2600      	movs	r6, #0
 800063c:	e783      	b.n	8000546 <__aeabi_dadd+0x292>
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	000007ff 	.word	0x000007ff
 8000644:	ff7fffff 	.word	0xff7fffff
 8000648:	000007fe 	.word	0x000007fe
 800064c:	464b      	mov	r3, r9
 800064e:	0777      	lsls	r7, r6, #29
 8000650:	08d8      	lsrs	r0, r3, #3
 8000652:	4307      	orrs	r7, r0
 8000654:	08f0      	lsrs	r0, r6, #3
 8000656:	e791      	b.n	800057c <__aeabi_dadd+0x2c8>
 8000658:	4fcd      	ldr	r7, [pc, #820]	@ (8000990 <__aeabi_dadd+0x6dc>)
 800065a:	1c61      	adds	r1, r4, #1
 800065c:	4239      	tst	r1, r7
 800065e:	d16b      	bne.n	8000738 <__aeabi_dadd+0x484>
 8000660:	0031      	movs	r1, r6
 8000662:	4648      	mov	r0, r9
 8000664:	4301      	orrs	r1, r0
 8000666:	2c00      	cmp	r4, #0
 8000668:	d000      	beq.n	800066c <__aeabi_dadd+0x3b8>
 800066a:	e14b      	b.n	8000904 <__aeabi_dadd+0x650>
 800066c:	001f      	movs	r7, r3
 800066e:	4317      	orrs	r7, r2
 8000670:	2900      	cmp	r1, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_dadd+0x3c2>
 8000674:	e181      	b.n	800097a <__aeabi_dadd+0x6c6>
 8000676:	2f00      	cmp	r7, #0
 8000678:	d100      	bne.n	800067c <__aeabi_dadd+0x3c8>
 800067a:	e74c      	b.n	8000516 <__aeabi_dadd+0x262>
 800067c:	444a      	add	r2, r9
 800067e:	454a      	cmp	r2, r9
 8000680:	4180      	sbcs	r0, r0
 8000682:	18f6      	adds	r6, r6, r3
 8000684:	4240      	negs	r0, r0
 8000686:	1836      	adds	r6, r6, r0
 8000688:	0233      	lsls	r3, r6, #8
 800068a:	d500      	bpl.n	800068e <__aeabi_dadd+0x3da>
 800068c:	e1b0      	b.n	80009f0 <__aeabi_dadd+0x73c>
 800068e:	0017      	movs	r7, r2
 8000690:	4691      	mov	r9, r2
 8000692:	4337      	orrs	r7, r6
 8000694:	d000      	beq.n	8000698 <__aeabi_dadd+0x3e4>
 8000696:	e73e      	b.n	8000516 <__aeabi_dadd+0x262>
 8000698:	2600      	movs	r6, #0
 800069a:	e754      	b.n	8000546 <__aeabi_dadd+0x292>
 800069c:	4649      	mov	r1, r9
 800069e:	1a89      	subs	r1, r1, r2
 80006a0:	4688      	mov	r8, r1
 80006a2:	45c1      	cmp	r9, r8
 80006a4:	41bf      	sbcs	r7, r7
 80006a6:	1af1      	subs	r1, r6, r3
 80006a8:	427f      	negs	r7, r7
 80006aa:	1bc9      	subs	r1, r1, r7
 80006ac:	020f      	lsls	r7, r1, #8
 80006ae:	d461      	bmi.n	8000774 <__aeabi_dadd+0x4c0>
 80006b0:	4647      	mov	r7, r8
 80006b2:	430f      	orrs	r7, r1
 80006b4:	d100      	bne.n	80006b8 <__aeabi_dadd+0x404>
 80006b6:	e0bd      	b.n	8000834 <__aeabi_dadd+0x580>
 80006b8:	000e      	movs	r6, r1
 80006ba:	4647      	mov	r7, r8
 80006bc:	e651      	b.n	8000362 <__aeabi_dadd+0xae>
 80006be:	4cb5      	ldr	r4, [pc, #724]	@ (8000994 <__aeabi_dadd+0x6e0>)
 80006c0:	45a0      	cmp	r8, r4
 80006c2:	d100      	bne.n	80006c6 <__aeabi_dadd+0x412>
 80006c4:	e100      	b.n	80008c8 <__aeabi_dadd+0x614>
 80006c6:	2701      	movs	r7, #1
 80006c8:	2938      	cmp	r1, #56	@ 0x38
 80006ca:	dd00      	ble.n	80006ce <__aeabi_dadd+0x41a>
 80006cc:	e6b8      	b.n	8000440 <__aeabi_dadd+0x18c>
 80006ce:	2480      	movs	r4, #128	@ 0x80
 80006d0:	0424      	lsls	r4, r4, #16
 80006d2:	4326      	orrs	r6, r4
 80006d4:	e6a3      	b.n	800041e <__aeabi_dadd+0x16a>
 80006d6:	4eb0      	ldr	r6, [pc, #704]	@ (8000998 <__aeabi_dadd+0x6e4>)
 80006d8:	1ae4      	subs	r4, r4, r3
 80006da:	4016      	ands	r6, r2
 80006dc:	077b      	lsls	r3, r7, #29
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x42e>
 80006e0:	e73f      	b.n	8000562 <__aeabi_dadd+0x2ae>
 80006e2:	e743      	b.n	800056c <__aeabi_dadd+0x2b8>
 80006e4:	000f      	movs	r7, r1
 80006e6:	0018      	movs	r0, r3
 80006e8:	3f20      	subs	r7, #32
 80006ea:	40f8      	lsrs	r0, r7
 80006ec:	4684      	mov	ip, r0
 80006ee:	2920      	cmp	r1, #32
 80006f0:	d003      	beq.n	80006fa <__aeabi_dadd+0x446>
 80006f2:	2740      	movs	r7, #64	@ 0x40
 80006f4:	1a79      	subs	r1, r7, r1
 80006f6:	408b      	lsls	r3, r1
 80006f8:	431a      	orrs	r2, r3
 80006fa:	1e53      	subs	r3, r2, #1
 80006fc:	419a      	sbcs	r2, r3
 80006fe:	4663      	mov	r3, ip
 8000700:	0017      	movs	r7, r2
 8000702:	431f      	orrs	r7, r3
 8000704:	e622      	b.n	800034c <__aeabi_dadd+0x98>
 8000706:	48a4      	ldr	r0, [pc, #656]	@ (8000998 <__aeabi_dadd+0x6e4>)
 8000708:	1ae1      	subs	r1, r4, r3
 800070a:	4010      	ands	r0, r2
 800070c:	0747      	lsls	r7, r0, #29
 800070e:	08c0      	lsrs	r0, r0, #3
 8000710:	e707      	b.n	8000522 <__aeabi_dadd+0x26e>
 8000712:	0034      	movs	r4, r6
 8000714:	4648      	mov	r0, r9
 8000716:	4304      	orrs	r4, r0
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x468>
 800071a:	e0fa      	b.n	8000912 <__aeabi_dadd+0x65e>
 800071c:	1e4c      	subs	r4, r1, #1
 800071e:	2901      	cmp	r1, #1
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x470>
 8000722:	e0d7      	b.n	80008d4 <__aeabi_dadd+0x620>
 8000724:	4f9b      	ldr	r7, [pc, #620]	@ (8000994 <__aeabi_dadd+0x6e0>)
 8000726:	42b9      	cmp	r1, r7
 8000728:	d100      	bne.n	800072c <__aeabi_dadd+0x478>
 800072a:	e0e2      	b.n	80008f2 <__aeabi_dadd+0x63e>
 800072c:	2701      	movs	r7, #1
 800072e:	2c38      	cmp	r4, #56	@ 0x38
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x480>
 8000732:	e74f      	b.n	80005d4 <__aeabi_dadd+0x320>
 8000734:	0021      	movs	r1, r4
 8000736:	e73c      	b.n	80005b2 <__aeabi_dadd+0x2fe>
 8000738:	4c96      	ldr	r4, [pc, #600]	@ (8000994 <__aeabi_dadd+0x6e0>)
 800073a:	42a1      	cmp	r1, r4
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x48c>
 800073e:	e0dd      	b.n	80008fc <__aeabi_dadd+0x648>
 8000740:	444a      	add	r2, r9
 8000742:	454a      	cmp	r2, r9
 8000744:	4180      	sbcs	r0, r0
 8000746:	18f3      	adds	r3, r6, r3
 8000748:	4240      	negs	r0, r0
 800074a:	1818      	adds	r0, r3, r0
 800074c:	07c7      	lsls	r7, r0, #31
 800074e:	0852      	lsrs	r2, r2, #1
 8000750:	4317      	orrs	r7, r2
 8000752:	0846      	lsrs	r6, r0, #1
 8000754:	0752      	lsls	r2, r2, #29
 8000756:	d005      	beq.n	8000764 <__aeabi_dadd+0x4b0>
 8000758:	220f      	movs	r2, #15
 800075a:	000c      	movs	r4, r1
 800075c:	403a      	ands	r2, r7
 800075e:	2a04      	cmp	r2, #4
 8000760:	d000      	beq.n	8000764 <__aeabi_dadd+0x4b0>
 8000762:	e62c      	b.n	80003be <__aeabi_dadd+0x10a>
 8000764:	0776      	lsls	r6, r6, #29
 8000766:	08ff      	lsrs	r7, r7, #3
 8000768:	4337      	orrs	r7, r6
 800076a:	0900      	lsrs	r0, r0, #4
 800076c:	e6d9      	b.n	8000522 <__aeabi_dadd+0x26e>
 800076e:	2700      	movs	r7, #0
 8000770:	2600      	movs	r6, #0
 8000772:	e6e8      	b.n	8000546 <__aeabi_dadd+0x292>
 8000774:	4649      	mov	r1, r9
 8000776:	1a57      	subs	r7, r2, r1
 8000778:	42ba      	cmp	r2, r7
 800077a:	4192      	sbcs	r2, r2
 800077c:	1b9e      	subs	r6, r3, r6
 800077e:	4252      	negs	r2, r2
 8000780:	4665      	mov	r5, ip
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	e5ed      	b.n	8000362 <__aeabi_dadd+0xae>
 8000786:	2900      	cmp	r1, #0
 8000788:	d000      	beq.n	800078c <__aeabi_dadd+0x4d8>
 800078a:	e0c6      	b.n	800091a <__aeabi_dadd+0x666>
 800078c:	2f00      	cmp	r7, #0
 800078e:	d167      	bne.n	8000860 <__aeabi_dadd+0x5ac>
 8000790:	2680      	movs	r6, #128	@ 0x80
 8000792:	2500      	movs	r5, #0
 8000794:	4c7f      	ldr	r4, [pc, #508]	@ (8000994 <__aeabi_dadd+0x6e0>)
 8000796:	0336      	lsls	r6, r6, #12
 8000798:	e6d5      	b.n	8000546 <__aeabi_dadd+0x292>
 800079a:	4665      	mov	r5, ip
 800079c:	000c      	movs	r4, r1
 800079e:	001e      	movs	r6, r3
 80007a0:	08d0      	lsrs	r0, r2, #3
 80007a2:	e6e4      	b.n	800056e <__aeabi_dadd+0x2ba>
 80007a4:	444a      	add	r2, r9
 80007a6:	454a      	cmp	r2, r9
 80007a8:	4180      	sbcs	r0, r0
 80007aa:	18f3      	adds	r3, r6, r3
 80007ac:	4240      	negs	r0, r0
 80007ae:	1818      	adds	r0, r3, r0
 80007b0:	0011      	movs	r1, r2
 80007b2:	0203      	lsls	r3, r0, #8
 80007b4:	d400      	bmi.n	80007b8 <__aeabi_dadd+0x504>
 80007b6:	e096      	b.n	80008e6 <__aeabi_dadd+0x632>
 80007b8:	4b77      	ldr	r3, [pc, #476]	@ (8000998 <__aeabi_dadd+0x6e4>)
 80007ba:	0849      	lsrs	r1, r1, #1
 80007bc:	4018      	ands	r0, r3
 80007be:	07c3      	lsls	r3, r0, #31
 80007c0:	430b      	orrs	r3, r1
 80007c2:	0844      	lsrs	r4, r0, #1
 80007c4:	0749      	lsls	r1, r1, #29
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x516>
 80007c8:	e129      	b.n	8000a1e <__aeabi_dadd+0x76a>
 80007ca:	220f      	movs	r2, #15
 80007cc:	401a      	ands	r2, r3
 80007ce:	2a04      	cmp	r2, #4
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x520>
 80007d2:	e0ea      	b.n	80009aa <__aeabi_dadd+0x6f6>
 80007d4:	1d1f      	adds	r7, r3, #4
 80007d6:	429f      	cmp	r7, r3
 80007d8:	41b6      	sbcs	r6, r6
 80007da:	4276      	negs	r6, r6
 80007dc:	1936      	adds	r6, r6, r4
 80007de:	2402      	movs	r4, #2
 80007e0:	e6c4      	b.n	800056c <__aeabi_dadd+0x2b8>
 80007e2:	4649      	mov	r1, r9
 80007e4:	1a8f      	subs	r7, r1, r2
 80007e6:	45b9      	cmp	r9, r7
 80007e8:	4180      	sbcs	r0, r0
 80007ea:	1af6      	subs	r6, r6, r3
 80007ec:	4240      	negs	r0, r0
 80007ee:	1a36      	subs	r6, r6, r0
 80007f0:	0233      	lsls	r3, r6, #8
 80007f2:	d406      	bmi.n	8000802 <__aeabi_dadd+0x54e>
 80007f4:	0773      	lsls	r3, r6, #29
 80007f6:	08ff      	lsrs	r7, r7, #3
 80007f8:	2101      	movs	r1, #1
 80007fa:	431f      	orrs	r7, r3
 80007fc:	08f0      	lsrs	r0, r6, #3
 80007fe:	e690      	b.n	8000522 <__aeabi_dadd+0x26e>
 8000800:	4665      	mov	r5, ip
 8000802:	2401      	movs	r4, #1
 8000804:	e5ab      	b.n	800035e <__aeabi_dadd+0xaa>
 8000806:	464b      	mov	r3, r9
 8000808:	0777      	lsls	r7, r6, #29
 800080a:	08d8      	lsrs	r0, r3, #3
 800080c:	4307      	orrs	r7, r0
 800080e:	08f0      	lsrs	r0, r6, #3
 8000810:	e6b4      	b.n	800057c <__aeabi_dadd+0x2c8>
 8000812:	000f      	movs	r7, r1
 8000814:	0018      	movs	r0, r3
 8000816:	3f20      	subs	r7, #32
 8000818:	40f8      	lsrs	r0, r7
 800081a:	4684      	mov	ip, r0
 800081c:	2920      	cmp	r1, #32
 800081e:	d003      	beq.n	8000828 <__aeabi_dadd+0x574>
 8000820:	2740      	movs	r7, #64	@ 0x40
 8000822:	1a79      	subs	r1, r7, r1
 8000824:	408b      	lsls	r3, r1
 8000826:	431a      	orrs	r2, r3
 8000828:	1e53      	subs	r3, r2, #1
 800082a:	419a      	sbcs	r2, r3
 800082c:	4663      	mov	r3, ip
 800082e:	0017      	movs	r7, r2
 8000830:	431f      	orrs	r7, r3
 8000832:	e635      	b.n	80004a0 <__aeabi_dadd+0x1ec>
 8000834:	2500      	movs	r5, #0
 8000836:	2400      	movs	r4, #0
 8000838:	2600      	movs	r6, #0
 800083a:	e684      	b.n	8000546 <__aeabi_dadd+0x292>
 800083c:	000c      	movs	r4, r1
 800083e:	0035      	movs	r5, r6
 8000840:	3c20      	subs	r4, #32
 8000842:	40e5      	lsrs	r5, r4
 8000844:	2920      	cmp	r1, #32
 8000846:	d005      	beq.n	8000854 <__aeabi_dadd+0x5a0>
 8000848:	2440      	movs	r4, #64	@ 0x40
 800084a:	1a61      	subs	r1, r4, r1
 800084c:	408e      	lsls	r6, r1
 800084e:	4649      	mov	r1, r9
 8000850:	4331      	orrs	r1, r6
 8000852:	4689      	mov	r9, r1
 8000854:	4648      	mov	r0, r9
 8000856:	1e41      	subs	r1, r0, #1
 8000858:	4188      	sbcs	r0, r1
 800085a:	0007      	movs	r7, r0
 800085c:	432f      	orrs	r7, r5
 800085e:	e5ef      	b.n	8000440 <__aeabi_dadd+0x18c>
 8000860:	08d2      	lsrs	r2, r2, #3
 8000862:	075f      	lsls	r7, r3, #29
 8000864:	4665      	mov	r5, ip
 8000866:	4317      	orrs	r7, r2
 8000868:	08d8      	lsrs	r0, r3, #3
 800086a:	e687      	b.n	800057c <__aeabi_dadd+0x2c8>
 800086c:	1a17      	subs	r7, r2, r0
 800086e:	42ba      	cmp	r2, r7
 8000870:	4192      	sbcs	r2, r2
 8000872:	1b9e      	subs	r6, r3, r6
 8000874:	4252      	negs	r2, r2
 8000876:	1ab6      	subs	r6, r6, r2
 8000878:	0233      	lsls	r3, r6, #8
 800087a:	d4c1      	bmi.n	8000800 <__aeabi_dadd+0x54c>
 800087c:	0773      	lsls	r3, r6, #29
 800087e:	08ff      	lsrs	r7, r7, #3
 8000880:	4665      	mov	r5, ip
 8000882:	2101      	movs	r1, #1
 8000884:	431f      	orrs	r7, r3
 8000886:	08f0      	lsrs	r0, r6, #3
 8000888:	e64b      	b.n	8000522 <__aeabi_dadd+0x26e>
 800088a:	2f00      	cmp	r7, #0
 800088c:	d07b      	beq.n	8000986 <__aeabi_dadd+0x6d2>
 800088e:	4665      	mov	r5, ip
 8000890:	001e      	movs	r6, r3
 8000892:	4691      	mov	r9, r2
 8000894:	e63f      	b.n	8000516 <__aeabi_dadd+0x262>
 8000896:	1a81      	subs	r1, r0, r2
 8000898:	4688      	mov	r8, r1
 800089a:	45c1      	cmp	r9, r8
 800089c:	41a4      	sbcs	r4, r4
 800089e:	1af1      	subs	r1, r6, r3
 80008a0:	4264      	negs	r4, r4
 80008a2:	1b09      	subs	r1, r1, r4
 80008a4:	2480      	movs	r4, #128	@ 0x80
 80008a6:	0424      	lsls	r4, r4, #16
 80008a8:	4221      	tst	r1, r4
 80008aa:	d077      	beq.n	800099c <__aeabi_dadd+0x6e8>
 80008ac:	1a10      	subs	r0, r2, r0
 80008ae:	4282      	cmp	r2, r0
 80008b0:	4192      	sbcs	r2, r2
 80008b2:	0007      	movs	r7, r0
 80008b4:	1b9e      	subs	r6, r3, r6
 80008b6:	4252      	negs	r2, r2
 80008b8:	1ab6      	subs	r6, r6, r2
 80008ba:	4337      	orrs	r7, r6
 80008bc:	d000      	beq.n	80008c0 <__aeabi_dadd+0x60c>
 80008be:	e0a0      	b.n	8000a02 <__aeabi_dadd+0x74e>
 80008c0:	4665      	mov	r5, ip
 80008c2:	2400      	movs	r4, #0
 80008c4:	2600      	movs	r6, #0
 80008c6:	e63e      	b.n	8000546 <__aeabi_dadd+0x292>
 80008c8:	075f      	lsls	r7, r3, #29
 80008ca:	08d2      	lsrs	r2, r2, #3
 80008cc:	4665      	mov	r5, ip
 80008ce:	4317      	orrs	r7, r2
 80008d0:	08d8      	lsrs	r0, r3, #3
 80008d2:	e653      	b.n	800057c <__aeabi_dadd+0x2c8>
 80008d4:	1881      	adds	r1, r0, r2
 80008d6:	4291      	cmp	r1, r2
 80008d8:	4192      	sbcs	r2, r2
 80008da:	18f0      	adds	r0, r6, r3
 80008dc:	4252      	negs	r2, r2
 80008de:	1880      	adds	r0, r0, r2
 80008e0:	0203      	lsls	r3, r0, #8
 80008e2:	d500      	bpl.n	80008e6 <__aeabi_dadd+0x632>
 80008e4:	e768      	b.n	80007b8 <__aeabi_dadd+0x504>
 80008e6:	0747      	lsls	r7, r0, #29
 80008e8:	08c9      	lsrs	r1, r1, #3
 80008ea:	430f      	orrs	r7, r1
 80008ec:	08c0      	lsrs	r0, r0, #3
 80008ee:	2101      	movs	r1, #1
 80008f0:	e617      	b.n	8000522 <__aeabi_dadd+0x26e>
 80008f2:	08d2      	lsrs	r2, r2, #3
 80008f4:	075f      	lsls	r7, r3, #29
 80008f6:	4317      	orrs	r7, r2
 80008f8:	08d8      	lsrs	r0, r3, #3
 80008fa:	e63f      	b.n	800057c <__aeabi_dadd+0x2c8>
 80008fc:	000c      	movs	r4, r1
 80008fe:	2600      	movs	r6, #0
 8000900:	2700      	movs	r7, #0
 8000902:	e620      	b.n	8000546 <__aeabi_dadd+0x292>
 8000904:	2900      	cmp	r1, #0
 8000906:	d156      	bne.n	80009b6 <__aeabi_dadd+0x702>
 8000908:	075f      	lsls	r7, r3, #29
 800090a:	08d2      	lsrs	r2, r2, #3
 800090c:	4317      	orrs	r7, r2
 800090e:	08d8      	lsrs	r0, r3, #3
 8000910:	e634      	b.n	800057c <__aeabi_dadd+0x2c8>
 8000912:	000c      	movs	r4, r1
 8000914:	001e      	movs	r6, r3
 8000916:	08d0      	lsrs	r0, r2, #3
 8000918:	e629      	b.n	800056e <__aeabi_dadd+0x2ba>
 800091a:	08c1      	lsrs	r1, r0, #3
 800091c:	0770      	lsls	r0, r6, #29
 800091e:	4301      	orrs	r1, r0
 8000920:	08f0      	lsrs	r0, r6, #3
 8000922:	2f00      	cmp	r7, #0
 8000924:	d062      	beq.n	80009ec <__aeabi_dadd+0x738>
 8000926:	2480      	movs	r4, #128	@ 0x80
 8000928:	0324      	lsls	r4, r4, #12
 800092a:	4220      	tst	r0, r4
 800092c:	d007      	beq.n	800093e <__aeabi_dadd+0x68a>
 800092e:	08de      	lsrs	r6, r3, #3
 8000930:	4226      	tst	r6, r4
 8000932:	d104      	bne.n	800093e <__aeabi_dadd+0x68a>
 8000934:	4665      	mov	r5, ip
 8000936:	0030      	movs	r0, r6
 8000938:	08d1      	lsrs	r1, r2, #3
 800093a:	075b      	lsls	r3, r3, #29
 800093c:	4319      	orrs	r1, r3
 800093e:	0f4f      	lsrs	r7, r1, #29
 8000940:	00c9      	lsls	r1, r1, #3
 8000942:	08c9      	lsrs	r1, r1, #3
 8000944:	077f      	lsls	r7, r7, #29
 8000946:	430f      	orrs	r7, r1
 8000948:	e618      	b.n	800057c <__aeabi_dadd+0x2c8>
 800094a:	000c      	movs	r4, r1
 800094c:	0030      	movs	r0, r6
 800094e:	3c20      	subs	r4, #32
 8000950:	40e0      	lsrs	r0, r4
 8000952:	4684      	mov	ip, r0
 8000954:	2920      	cmp	r1, #32
 8000956:	d005      	beq.n	8000964 <__aeabi_dadd+0x6b0>
 8000958:	2440      	movs	r4, #64	@ 0x40
 800095a:	1a61      	subs	r1, r4, r1
 800095c:	408e      	lsls	r6, r1
 800095e:	4649      	mov	r1, r9
 8000960:	4331      	orrs	r1, r6
 8000962:	4689      	mov	r9, r1
 8000964:	4648      	mov	r0, r9
 8000966:	1e41      	subs	r1, r0, #1
 8000968:	4188      	sbcs	r0, r1
 800096a:	4661      	mov	r1, ip
 800096c:	0007      	movs	r7, r0
 800096e:	430f      	orrs	r7, r1
 8000970:	e630      	b.n	80005d4 <__aeabi_dadd+0x320>
 8000972:	2120      	movs	r1, #32
 8000974:	2700      	movs	r7, #0
 8000976:	1a09      	subs	r1, r1, r0
 8000978:	e50e      	b.n	8000398 <__aeabi_dadd+0xe4>
 800097a:	001e      	movs	r6, r3
 800097c:	2f00      	cmp	r7, #0
 800097e:	d000      	beq.n	8000982 <__aeabi_dadd+0x6ce>
 8000980:	e522      	b.n	80003c8 <__aeabi_dadd+0x114>
 8000982:	2400      	movs	r4, #0
 8000984:	e758      	b.n	8000838 <__aeabi_dadd+0x584>
 8000986:	2500      	movs	r5, #0
 8000988:	2400      	movs	r4, #0
 800098a:	2600      	movs	r6, #0
 800098c:	e5db      	b.n	8000546 <__aeabi_dadd+0x292>
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	000007fe 	.word	0x000007fe
 8000994:	000007ff 	.word	0x000007ff
 8000998:	ff7fffff 	.word	0xff7fffff
 800099c:	4647      	mov	r7, r8
 800099e:	430f      	orrs	r7, r1
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0x6f0>
 80009a2:	e747      	b.n	8000834 <__aeabi_dadd+0x580>
 80009a4:	000e      	movs	r6, r1
 80009a6:	46c1      	mov	r9, r8
 80009a8:	e5b5      	b.n	8000516 <__aeabi_dadd+0x262>
 80009aa:	08df      	lsrs	r7, r3, #3
 80009ac:	0764      	lsls	r4, r4, #29
 80009ae:	2102      	movs	r1, #2
 80009b0:	4327      	orrs	r7, r4
 80009b2:	0900      	lsrs	r0, r0, #4
 80009b4:	e5b5      	b.n	8000522 <__aeabi_dadd+0x26e>
 80009b6:	0019      	movs	r1, r3
 80009b8:	08c0      	lsrs	r0, r0, #3
 80009ba:	0777      	lsls	r7, r6, #29
 80009bc:	4307      	orrs	r7, r0
 80009be:	4311      	orrs	r1, r2
 80009c0:	08f0      	lsrs	r0, r6, #3
 80009c2:	2900      	cmp	r1, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x714>
 80009c6:	e5d9      	b.n	800057c <__aeabi_dadd+0x2c8>
 80009c8:	2180      	movs	r1, #128	@ 0x80
 80009ca:	0309      	lsls	r1, r1, #12
 80009cc:	4208      	tst	r0, r1
 80009ce:	d007      	beq.n	80009e0 <__aeabi_dadd+0x72c>
 80009d0:	08dc      	lsrs	r4, r3, #3
 80009d2:	420c      	tst	r4, r1
 80009d4:	d104      	bne.n	80009e0 <__aeabi_dadd+0x72c>
 80009d6:	08d2      	lsrs	r2, r2, #3
 80009d8:	075b      	lsls	r3, r3, #29
 80009da:	431a      	orrs	r2, r3
 80009dc:	0017      	movs	r7, r2
 80009de:	0020      	movs	r0, r4
 80009e0:	0f7b      	lsrs	r3, r7, #29
 80009e2:	00ff      	lsls	r7, r7, #3
 80009e4:	08ff      	lsrs	r7, r7, #3
 80009e6:	075b      	lsls	r3, r3, #29
 80009e8:	431f      	orrs	r7, r3
 80009ea:	e5c7      	b.n	800057c <__aeabi_dadd+0x2c8>
 80009ec:	000f      	movs	r7, r1
 80009ee:	e5c5      	b.n	800057c <__aeabi_dadd+0x2c8>
 80009f0:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <__aeabi_dadd+0x788>)
 80009f2:	08d2      	lsrs	r2, r2, #3
 80009f4:	4033      	ands	r3, r6
 80009f6:	075f      	lsls	r7, r3, #29
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	2401      	movs	r4, #1
 80009fc:	4317      	orrs	r7, r2
 80009fe:	0b1e      	lsrs	r6, r3, #12
 8000a00:	e5a1      	b.n	8000546 <__aeabi_dadd+0x292>
 8000a02:	4226      	tst	r6, r4
 8000a04:	d012      	beq.n	8000a2c <__aeabi_dadd+0x778>
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <__aeabi_dadd+0x788>)
 8000a08:	4665      	mov	r5, ip
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	2401      	movs	r4, #1
 8000a0e:	401e      	ands	r6, r3
 8000a10:	e4e6      	b.n	80003e0 <__aeabi_dadd+0x12c>
 8000a12:	0021      	movs	r1, r4
 8000a14:	e585      	b.n	8000522 <__aeabi_dadd+0x26e>
 8000a16:	0017      	movs	r7, r2
 8000a18:	e5a8      	b.n	800056c <__aeabi_dadd+0x2b8>
 8000a1a:	003a      	movs	r2, r7
 8000a1c:	e4d4      	b.n	80003c8 <__aeabi_dadd+0x114>
 8000a1e:	08db      	lsrs	r3, r3, #3
 8000a20:	0764      	lsls	r4, r4, #29
 8000a22:	431c      	orrs	r4, r3
 8000a24:	0027      	movs	r7, r4
 8000a26:	2102      	movs	r1, #2
 8000a28:	0900      	lsrs	r0, r0, #4
 8000a2a:	e57a      	b.n	8000522 <__aeabi_dadd+0x26e>
 8000a2c:	08c0      	lsrs	r0, r0, #3
 8000a2e:	0777      	lsls	r7, r6, #29
 8000a30:	4307      	orrs	r7, r0
 8000a32:	4665      	mov	r5, ip
 8000a34:	2100      	movs	r1, #0
 8000a36:	08f0      	lsrs	r0, r6, #3
 8000a38:	e573      	b.n	8000522 <__aeabi_dadd+0x26e>
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	ff7fffff 	.word	0xff7fffff

08000a40 <__aeabi_dmul>:
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	4657      	mov	r7, sl
 8000a44:	464e      	mov	r6, r9
 8000a46:	46de      	mov	lr, fp
 8000a48:	4645      	mov	r5, r8
 8000a4a:	b5e0      	push	{r5, r6, r7, lr}
 8000a4c:	001f      	movs	r7, r3
 8000a4e:	030b      	lsls	r3, r1, #12
 8000a50:	0b1b      	lsrs	r3, r3, #12
 8000a52:	0016      	movs	r6, r2
 8000a54:	469a      	mov	sl, r3
 8000a56:	0fca      	lsrs	r2, r1, #31
 8000a58:	004b      	lsls	r3, r1, #1
 8000a5a:	0004      	movs	r4, r0
 8000a5c:	4691      	mov	r9, r2
 8000a5e:	b085      	sub	sp, #20
 8000a60:	0d5b      	lsrs	r3, r3, #21
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dmul+0x26>
 8000a64:	e1cf      	b.n	8000e06 <__aeabi_dmul+0x3c6>
 8000a66:	4acd      	ldr	r2, [pc, #820]	@ (8000d9c <__aeabi_dmul+0x35c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d055      	beq.n	8000b18 <__aeabi_dmul+0xd8>
 8000a6c:	4651      	mov	r1, sl
 8000a6e:	0f42      	lsrs	r2, r0, #29
 8000a70:	00c9      	lsls	r1, r1, #3
 8000a72:	430a      	orrs	r2, r1
 8000a74:	2180      	movs	r1, #128	@ 0x80
 8000a76:	0409      	lsls	r1, r1, #16
 8000a78:	4311      	orrs	r1, r2
 8000a7a:	00c2      	lsls	r2, r0, #3
 8000a7c:	4690      	mov	r8, r2
 8000a7e:	4ac8      	ldr	r2, [pc, #800]	@ (8000da0 <__aeabi_dmul+0x360>)
 8000a80:	468a      	mov	sl, r1
 8000a82:	4693      	mov	fp, r2
 8000a84:	449b      	add	fp, r3
 8000a86:	2300      	movs	r3, #0
 8000a88:	2500      	movs	r5, #0
 8000a8a:	9302      	str	r3, [sp, #8]
 8000a8c:	033c      	lsls	r4, r7, #12
 8000a8e:	007b      	lsls	r3, r7, #1
 8000a90:	0ffa      	lsrs	r2, r7, #31
 8000a92:	9601      	str	r6, [sp, #4]
 8000a94:	0b24      	lsrs	r4, r4, #12
 8000a96:	0d5b      	lsrs	r3, r3, #21
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x5e>
 8000a9c:	e188      	b.n	8000db0 <__aeabi_dmul+0x370>
 8000a9e:	4abf      	ldr	r2, [pc, #764]	@ (8000d9c <__aeabi_dmul+0x35c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dmul+0x66>
 8000aa4:	e092      	b.n	8000bcc <__aeabi_dmul+0x18c>
 8000aa6:	4abe      	ldr	r2, [pc, #760]	@ (8000da0 <__aeabi_dmul+0x360>)
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	4463      	add	r3, ip
 8000aac:	449b      	add	fp, r3
 8000aae:	2d0a      	cmp	r5, #10
 8000ab0:	dc42      	bgt.n	8000b38 <__aeabi_dmul+0xf8>
 8000ab2:	00e4      	lsls	r4, r4, #3
 8000ab4:	0f73      	lsrs	r3, r6, #29
 8000ab6:	4323      	orrs	r3, r4
 8000ab8:	2480      	movs	r4, #128	@ 0x80
 8000aba:	4649      	mov	r1, r9
 8000abc:	0424      	lsls	r4, r4, #16
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	00f3      	lsls	r3, r6, #3
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9b00      	ldr	r3, [sp, #0]
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	4059      	eors	r1, r3
 8000aca:	b2cb      	uxtb	r3, r1
 8000acc:	9303      	str	r3, [sp, #12]
 8000ace:	2d02      	cmp	r5, #2
 8000ad0:	dc00      	bgt.n	8000ad4 <__aeabi_dmul+0x94>
 8000ad2:	e094      	b.n	8000bfe <__aeabi_dmul+0x1be>
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	40ab      	lsls	r3, r5
 8000ad8:	001d      	movs	r5, r3
 8000ada:	23a6      	movs	r3, #166	@ 0xa6
 8000adc:	002a      	movs	r2, r5
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	421d      	tst	r5, r3
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_dmul+0xa8>
 8000ae6:	e229      	b.n	8000f3c <__aeabi_dmul+0x4fc>
 8000ae8:	2390      	movs	r3, #144	@ 0x90
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	421d      	tst	r5, r3
 8000aee:	d100      	bne.n	8000af2 <__aeabi_dmul+0xb2>
 8000af0:	e24d      	b.n	8000f8e <__aeabi_dmul+0x54e>
 8000af2:	2300      	movs	r3, #0
 8000af4:	2480      	movs	r4, #128	@ 0x80
 8000af6:	4699      	mov	r9, r3
 8000af8:	0324      	lsls	r4, r4, #12
 8000afa:	4ba8      	ldr	r3, [pc, #672]	@ (8000d9c <__aeabi_dmul+0x35c>)
 8000afc:	0010      	movs	r0, r2
 8000afe:	464a      	mov	r2, r9
 8000b00:	051b      	lsls	r3, r3, #20
 8000b02:	4323      	orrs	r3, r4
 8000b04:	07d2      	lsls	r2, r2, #31
 8000b06:	4313      	orrs	r3, r2
 8000b08:	0019      	movs	r1, r3
 8000b0a:	b005      	add	sp, #20
 8000b0c:	bcf0      	pop	{r4, r5, r6, r7}
 8000b0e:	46bb      	mov	fp, r7
 8000b10:	46b2      	mov	sl, r6
 8000b12:	46a9      	mov	r9, r5
 8000b14:	46a0      	mov	r8, r4
 8000b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b18:	4652      	mov	r2, sl
 8000b1a:	4302      	orrs	r2, r0
 8000b1c:	4690      	mov	r8, r2
 8000b1e:	d000      	beq.n	8000b22 <__aeabi_dmul+0xe2>
 8000b20:	e1ac      	b.n	8000e7c <__aeabi_dmul+0x43c>
 8000b22:	469b      	mov	fp, r3
 8000b24:	2302      	movs	r3, #2
 8000b26:	4692      	mov	sl, r2
 8000b28:	2508      	movs	r5, #8
 8000b2a:	9302      	str	r3, [sp, #8]
 8000b2c:	e7ae      	b.n	8000a8c <__aeabi_dmul+0x4c>
 8000b2e:	9b00      	ldr	r3, [sp, #0]
 8000b30:	46a2      	mov	sl, r4
 8000b32:	4699      	mov	r9, r3
 8000b34:	9b01      	ldr	r3, [sp, #4]
 8000b36:	4698      	mov	r8, r3
 8000b38:	9b02      	ldr	r3, [sp, #8]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dmul+0x100>
 8000b3e:	e1ca      	b.n	8000ed6 <__aeabi_dmul+0x496>
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dmul+0x106>
 8000b44:	e192      	b.n	8000e6c <__aeabi_dmul+0x42c>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d110      	bne.n	8000b6c <__aeabi_dmul+0x12c>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	e7d4      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000b52:	2201      	movs	r2, #1
 8000b54:	087b      	lsrs	r3, r7, #1
 8000b56:	403a      	ands	r2, r7
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	4652      	mov	r2, sl
 8000b5c:	07d2      	lsls	r2, r2, #31
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	4698      	mov	r8, r3
 8000b62:	4653      	mov	r3, sl
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	469a      	mov	sl, r3
 8000b68:	9b03      	ldr	r3, [sp, #12]
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	465b      	mov	r3, fp
 8000b6e:	1c58      	adds	r0, r3, #1
 8000b70:	2380      	movs	r3, #128	@ 0x80
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	445b      	add	r3, fp
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	dc00      	bgt.n	8000b7c <__aeabi_dmul+0x13c>
 8000b7a:	e1b1      	b.n	8000ee0 <__aeabi_dmul+0x4a0>
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	0752      	lsls	r2, r2, #29
 8000b80:	d00b      	beq.n	8000b9a <__aeabi_dmul+0x15a>
 8000b82:	220f      	movs	r2, #15
 8000b84:	4641      	mov	r1, r8
 8000b86:	400a      	ands	r2, r1
 8000b88:	2a04      	cmp	r2, #4
 8000b8a:	d006      	beq.n	8000b9a <__aeabi_dmul+0x15a>
 8000b8c:	4642      	mov	r2, r8
 8000b8e:	1d11      	adds	r1, r2, #4
 8000b90:	4541      	cmp	r1, r8
 8000b92:	4192      	sbcs	r2, r2
 8000b94:	4688      	mov	r8, r1
 8000b96:	4252      	negs	r2, r2
 8000b98:	4492      	add	sl, r2
 8000b9a:	4652      	mov	r2, sl
 8000b9c:	01d2      	lsls	r2, r2, #7
 8000b9e:	d506      	bpl.n	8000bae <__aeabi_dmul+0x16e>
 8000ba0:	4652      	mov	r2, sl
 8000ba2:	4b80      	ldr	r3, [pc, #512]	@ (8000da4 <__aeabi_dmul+0x364>)
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	4692      	mov	sl, r2
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	18c3      	adds	r3, r0, r3
 8000bae:	4a7e      	ldr	r2, [pc, #504]	@ (8000da8 <__aeabi_dmul+0x368>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	dd00      	ble.n	8000bb6 <__aeabi_dmul+0x176>
 8000bb4:	e18f      	b.n	8000ed6 <__aeabi_dmul+0x496>
 8000bb6:	4642      	mov	r2, r8
 8000bb8:	08d1      	lsrs	r1, r2, #3
 8000bba:	4652      	mov	r2, sl
 8000bbc:	0752      	lsls	r2, r2, #29
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	4651      	mov	r1, sl
 8000bc2:	055b      	lsls	r3, r3, #21
 8000bc4:	024c      	lsls	r4, r1, #9
 8000bc6:	0b24      	lsrs	r4, r4, #12
 8000bc8:	0d5b      	lsrs	r3, r3, #21
 8000bca:	e797      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000bcc:	4b73      	ldr	r3, [pc, #460]	@ (8000d9c <__aeabi_dmul+0x35c>)
 8000bce:	4326      	orrs	r6, r4
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	44e3      	add	fp, ip
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d100      	bne.n	8000bda <__aeabi_dmul+0x19a>
 8000bd8:	e16f      	b.n	8000eba <__aeabi_dmul+0x47a>
 8000bda:	2303      	movs	r3, #3
 8000bdc:	4649      	mov	r1, r9
 8000bde:	431d      	orrs	r5, r3
 8000be0:	9b00      	ldr	r3, [sp, #0]
 8000be2:	4059      	eors	r1, r3
 8000be4:	b2cb      	uxtb	r3, r1
 8000be6:	9303      	str	r3, [sp, #12]
 8000be8:	2d0a      	cmp	r5, #10
 8000bea:	dd00      	ble.n	8000bee <__aeabi_dmul+0x1ae>
 8000bec:	e133      	b.n	8000e56 <__aeabi_dmul+0x416>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	40ab      	lsls	r3, r5
 8000bf2:	001d      	movs	r5, r3
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2288      	movs	r2, #136	@ 0x88
 8000bfa:	422a      	tst	r2, r5
 8000bfc:	d197      	bne.n	8000b2e <__aeabi_dmul+0xee>
 8000bfe:	4642      	mov	r2, r8
 8000c00:	4643      	mov	r3, r8
 8000c02:	0412      	lsls	r2, r2, #16
 8000c04:	0c12      	lsrs	r2, r2, #16
 8000c06:	0016      	movs	r6, r2
 8000c08:	9801      	ldr	r0, [sp, #4]
 8000c0a:	0c1d      	lsrs	r5, r3, #16
 8000c0c:	0c03      	lsrs	r3, r0, #16
 8000c0e:	0400      	lsls	r0, r0, #16
 8000c10:	0c00      	lsrs	r0, r0, #16
 8000c12:	4346      	muls	r6, r0
 8000c14:	46b4      	mov	ip, r6
 8000c16:	001e      	movs	r6, r3
 8000c18:	436e      	muls	r6, r5
 8000c1a:	9600      	str	r6, [sp, #0]
 8000c1c:	0016      	movs	r6, r2
 8000c1e:	0007      	movs	r7, r0
 8000c20:	435e      	muls	r6, r3
 8000c22:	4661      	mov	r1, ip
 8000c24:	46b0      	mov	r8, r6
 8000c26:	436f      	muls	r7, r5
 8000c28:	0c0e      	lsrs	r6, r1, #16
 8000c2a:	44b8      	add	r8, r7
 8000c2c:	4446      	add	r6, r8
 8000c2e:	42b7      	cmp	r7, r6
 8000c30:	d905      	bls.n	8000c3e <__aeabi_dmul+0x1fe>
 8000c32:	2180      	movs	r1, #128	@ 0x80
 8000c34:	0249      	lsls	r1, r1, #9
 8000c36:	4688      	mov	r8, r1
 8000c38:	9f00      	ldr	r7, [sp, #0]
 8000c3a:	4447      	add	r7, r8
 8000c3c:	9700      	str	r7, [sp, #0]
 8000c3e:	4661      	mov	r1, ip
 8000c40:	0409      	lsls	r1, r1, #16
 8000c42:	0c09      	lsrs	r1, r1, #16
 8000c44:	0c37      	lsrs	r7, r6, #16
 8000c46:	0436      	lsls	r6, r6, #16
 8000c48:	468c      	mov	ip, r1
 8000c4a:	0031      	movs	r1, r6
 8000c4c:	4461      	add	r1, ip
 8000c4e:	9101      	str	r1, [sp, #4]
 8000c50:	0011      	movs	r1, r2
 8000c52:	0c26      	lsrs	r6, r4, #16
 8000c54:	0424      	lsls	r4, r4, #16
 8000c56:	0c24      	lsrs	r4, r4, #16
 8000c58:	4361      	muls	r1, r4
 8000c5a:	468c      	mov	ip, r1
 8000c5c:	0021      	movs	r1, r4
 8000c5e:	4369      	muls	r1, r5
 8000c60:	4689      	mov	r9, r1
 8000c62:	4661      	mov	r1, ip
 8000c64:	0c09      	lsrs	r1, r1, #16
 8000c66:	4688      	mov	r8, r1
 8000c68:	4372      	muls	r2, r6
 8000c6a:	444a      	add	r2, r9
 8000c6c:	4442      	add	r2, r8
 8000c6e:	4375      	muls	r5, r6
 8000c70:	4591      	cmp	r9, r2
 8000c72:	d903      	bls.n	8000c7c <__aeabi_dmul+0x23c>
 8000c74:	2180      	movs	r1, #128	@ 0x80
 8000c76:	0249      	lsls	r1, r1, #9
 8000c78:	4688      	mov	r8, r1
 8000c7a:	4445      	add	r5, r8
 8000c7c:	0c11      	lsrs	r1, r2, #16
 8000c7e:	4688      	mov	r8, r1
 8000c80:	4661      	mov	r1, ip
 8000c82:	0409      	lsls	r1, r1, #16
 8000c84:	0c09      	lsrs	r1, r1, #16
 8000c86:	468c      	mov	ip, r1
 8000c88:	0412      	lsls	r2, r2, #16
 8000c8a:	4462      	add	r2, ip
 8000c8c:	18b9      	adds	r1, r7, r2
 8000c8e:	9102      	str	r1, [sp, #8]
 8000c90:	4651      	mov	r1, sl
 8000c92:	0c09      	lsrs	r1, r1, #16
 8000c94:	468c      	mov	ip, r1
 8000c96:	4651      	mov	r1, sl
 8000c98:	040f      	lsls	r7, r1, #16
 8000c9a:	0c3f      	lsrs	r7, r7, #16
 8000c9c:	0039      	movs	r1, r7
 8000c9e:	4341      	muls	r1, r0
 8000ca0:	4445      	add	r5, r8
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	4661      	mov	r1, ip
 8000ca6:	4341      	muls	r1, r0
 8000ca8:	468a      	mov	sl, r1
 8000caa:	4641      	mov	r1, r8
 8000cac:	4660      	mov	r0, ip
 8000cae:	0c09      	lsrs	r1, r1, #16
 8000cb0:	4689      	mov	r9, r1
 8000cb2:	4358      	muls	r0, r3
 8000cb4:	437b      	muls	r3, r7
 8000cb6:	4453      	add	r3, sl
 8000cb8:	444b      	add	r3, r9
 8000cba:	459a      	cmp	sl, r3
 8000cbc:	d903      	bls.n	8000cc6 <__aeabi_dmul+0x286>
 8000cbe:	2180      	movs	r1, #128	@ 0x80
 8000cc0:	0249      	lsls	r1, r1, #9
 8000cc2:	4689      	mov	r9, r1
 8000cc4:	4448      	add	r0, r9
 8000cc6:	0c19      	lsrs	r1, r3, #16
 8000cc8:	4689      	mov	r9, r1
 8000cca:	4641      	mov	r1, r8
 8000ccc:	0409      	lsls	r1, r1, #16
 8000cce:	0c09      	lsrs	r1, r1, #16
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	0039      	movs	r1, r7
 8000cd4:	4361      	muls	r1, r4
 8000cd6:	041b      	lsls	r3, r3, #16
 8000cd8:	4443      	add	r3, r8
 8000cda:	4688      	mov	r8, r1
 8000cdc:	4661      	mov	r1, ip
 8000cde:	434c      	muls	r4, r1
 8000ce0:	4371      	muls	r1, r6
 8000ce2:	468c      	mov	ip, r1
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	4377      	muls	r7, r6
 8000ce8:	0c0e      	lsrs	r6, r1, #16
 8000cea:	193f      	adds	r7, r7, r4
 8000cec:	19f6      	adds	r6, r6, r7
 8000cee:	4448      	add	r0, r9
 8000cf0:	42b4      	cmp	r4, r6
 8000cf2:	d903      	bls.n	8000cfc <__aeabi_dmul+0x2bc>
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	0249      	lsls	r1, r1, #9
 8000cf8:	4689      	mov	r9, r1
 8000cfa:	44cc      	add	ip, r9
 8000cfc:	9902      	ldr	r1, [sp, #8]
 8000cfe:	9f00      	ldr	r7, [sp, #0]
 8000d00:	4689      	mov	r9, r1
 8000d02:	0431      	lsls	r1, r6, #16
 8000d04:	444f      	add	r7, r9
 8000d06:	4689      	mov	r9, r1
 8000d08:	4641      	mov	r1, r8
 8000d0a:	4297      	cmp	r7, r2
 8000d0c:	4192      	sbcs	r2, r2
 8000d0e:	040c      	lsls	r4, r1, #16
 8000d10:	0c24      	lsrs	r4, r4, #16
 8000d12:	444c      	add	r4, r9
 8000d14:	18ff      	adds	r7, r7, r3
 8000d16:	4252      	negs	r2, r2
 8000d18:	1964      	adds	r4, r4, r5
 8000d1a:	18a1      	adds	r1, r4, r2
 8000d1c:	429f      	cmp	r7, r3
 8000d1e:	419b      	sbcs	r3, r3
 8000d20:	4688      	mov	r8, r1
 8000d22:	4682      	mov	sl, r0
 8000d24:	425b      	negs	r3, r3
 8000d26:	4699      	mov	r9, r3
 8000d28:	4590      	cmp	r8, r2
 8000d2a:	4192      	sbcs	r2, r2
 8000d2c:	42ac      	cmp	r4, r5
 8000d2e:	41a4      	sbcs	r4, r4
 8000d30:	44c2      	add	sl, r8
 8000d32:	44d1      	add	r9, sl
 8000d34:	4252      	negs	r2, r2
 8000d36:	4264      	negs	r4, r4
 8000d38:	4314      	orrs	r4, r2
 8000d3a:	4599      	cmp	r9, r3
 8000d3c:	419b      	sbcs	r3, r3
 8000d3e:	4582      	cmp	sl, r0
 8000d40:	4192      	sbcs	r2, r2
 8000d42:	425b      	negs	r3, r3
 8000d44:	4252      	negs	r2, r2
 8000d46:	4313      	orrs	r3, r2
 8000d48:	464a      	mov	r2, r9
 8000d4a:	0c36      	lsrs	r6, r6, #16
 8000d4c:	19a4      	adds	r4, r4, r6
 8000d4e:	18e3      	adds	r3, r4, r3
 8000d50:	4463      	add	r3, ip
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	0dd2      	lsrs	r2, r2, #23
 8000d56:	431a      	orrs	r2, r3
 8000d58:	9901      	ldr	r1, [sp, #4]
 8000d5a:	4692      	mov	sl, r2
 8000d5c:	027a      	lsls	r2, r7, #9
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	1e50      	subs	r0, r2, #1
 8000d62:	4182      	sbcs	r2, r0
 8000d64:	0dff      	lsrs	r7, r7, #23
 8000d66:	4317      	orrs	r7, r2
 8000d68:	464a      	mov	r2, r9
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	4317      	orrs	r7, r2
 8000d6e:	46b8      	mov	r8, r7
 8000d70:	01db      	lsls	r3, r3, #7
 8000d72:	d500      	bpl.n	8000d76 <__aeabi_dmul+0x336>
 8000d74:	e6ed      	b.n	8000b52 <__aeabi_dmul+0x112>
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <__aeabi_dmul+0x36c>)
 8000d78:	9a03      	ldr	r2, [sp, #12]
 8000d7a:	445b      	add	r3, fp
 8000d7c:	4691      	mov	r9, r2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	dc00      	bgt.n	8000d84 <__aeabi_dmul+0x344>
 8000d82:	e0ac      	b.n	8000ede <__aeabi_dmul+0x49e>
 8000d84:	003a      	movs	r2, r7
 8000d86:	0752      	lsls	r2, r2, #29
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dmul+0x34c>
 8000d8a:	e710      	b.n	8000bae <__aeabi_dmul+0x16e>
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	4658      	mov	r0, fp
 8000d90:	403a      	ands	r2, r7
 8000d92:	2a04      	cmp	r2, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dmul+0x358>
 8000d96:	e6f9      	b.n	8000b8c <__aeabi_dmul+0x14c>
 8000d98:	e709      	b.n	8000bae <__aeabi_dmul+0x16e>
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	000007ff 	.word	0x000007ff
 8000da0:	fffffc01 	.word	0xfffffc01
 8000da4:	feffffff 	.word	0xfeffffff
 8000da8:	000007fe 	.word	0x000007fe
 8000dac:	000003ff 	.word	0x000003ff
 8000db0:	0022      	movs	r2, r4
 8000db2:	4332      	orrs	r2, r6
 8000db4:	d06f      	beq.n	8000e96 <__aeabi_dmul+0x456>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d100      	bne.n	8000dbc <__aeabi_dmul+0x37c>
 8000dba:	e0c2      	b.n	8000f42 <__aeabi_dmul+0x502>
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	f000 f98f 	bl	80010e0 <__clzsi2>
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	3a0b      	subs	r2, #11
 8000dc8:	201d      	movs	r0, #29
 8000dca:	1a82      	subs	r2, r0, r2
 8000dcc:	0030      	movs	r0, r6
 8000dce:	0019      	movs	r1, r3
 8000dd0:	40d0      	lsrs	r0, r2
 8000dd2:	3908      	subs	r1, #8
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	4322      	orrs	r2, r4
 8000dda:	0034      	movs	r4, r6
 8000ddc:	408c      	lsls	r4, r1
 8000dde:	4659      	mov	r1, fp
 8000de0:	1acb      	subs	r3, r1, r3
 8000de2:	4986      	ldr	r1, [pc, #536]	@ (8000ffc <__aeabi_dmul+0x5bc>)
 8000de4:	468b      	mov	fp, r1
 8000de6:	449b      	add	fp, r3
 8000de8:	2d0a      	cmp	r5, #10
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dmul+0x3ae>
 8000dec:	e6a4      	b.n	8000b38 <__aeabi_dmul+0xf8>
 8000dee:	4649      	mov	r1, r9
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	9401      	str	r4, [sp, #4]
 8000df4:	4059      	eors	r1, r3
 8000df6:	b2cb      	uxtb	r3, r1
 8000df8:	0014      	movs	r4, r2
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	9303      	str	r3, [sp, #12]
 8000dfe:	2d02      	cmp	r5, #2
 8000e00:	dd00      	ble.n	8000e04 <__aeabi_dmul+0x3c4>
 8000e02:	e667      	b.n	8000ad4 <__aeabi_dmul+0x94>
 8000e04:	e6fb      	b.n	8000bfe <__aeabi_dmul+0x1be>
 8000e06:	4653      	mov	r3, sl
 8000e08:	4303      	orrs	r3, r0
 8000e0a:	4698      	mov	r8, r3
 8000e0c:	d03c      	beq.n	8000e88 <__aeabi_dmul+0x448>
 8000e0e:	4653      	mov	r3, sl
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dmul+0x3d6>
 8000e14:	e0a3      	b.n	8000f5e <__aeabi_dmul+0x51e>
 8000e16:	4650      	mov	r0, sl
 8000e18:	f000 f962 	bl	80010e0 <__clzsi2>
 8000e1c:	230b      	movs	r3, #11
 8000e1e:	425b      	negs	r3, r3
 8000e20:	469c      	mov	ip, r3
 8000e22:	0002      	movs	r2, r0
 8000e24:	4484      	add	ip, r0
 8000e26:	0011      	movs	r1, r2
 8000e28:	4650      	mov	r0, sl
 8000e2a:	3908      	subs	r1, #8
 8000e2c:	4088      	lsls	r0, r1
 8000e2e:	231d      	movs	r3, #29
 8000e30:	4680      	mov	r8, r0
 8000e32:	4660      	mov	r0, ip
 8000e34:	1a1b      	subs	r3, r3, r0
 8000e36:	0020      	movs	r0, r4
 8000e38:	40d8      	lsrs	r0, r3
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	4303      	orrs	r3, r0
 8000e40:	469a      	mov	sl, r3
 8000e42:	0023      	movs	r3, r4
 8000e44:	408b      	lsls	r3, r1
 8000e46:	4698      	mov	r8, r3
 8000e48:	4b6c      	ldr	r3, [pc, #432]	@ (8000ffc <__aeabi_dmul+0x5bc>)
 8000e4a:	2500      	movs	r5, #0
 8000e4c:	1a9b      	subs	r3, r3, r2
 8000e4e:	469b      	mov	fp, r3
 8000e50:	2300      	movs	r3, #0
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	e61a      	b.n	8000a8c <__aeabi_dmul+0x4c>
 8000e56:	2d0f      	cmp	r5, #15
 8000e58:	d000      	beq.n	8000e5c <__aeabi_dmul+0x41c>
 8000e5a:	e0c9      	b.n	8000ff0 <__aeabi_dmul+0x5b0>
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	4652      	mov	r2, sl
 8000e60:	031b      	lsls	r3, r3, #12
 8000e62:	421a      	tst	r2, r3
 8000e64:	d002      	beq.n	8000e6c <__aeabi_dmul+0x42c>
 8000e66:	421c      	tst	r4, r3
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dmul+0x42c>
 8000e6a:	e092      	b.n	8000f92 <__aeabi_dmul+0x552>
 8000e6c:	2480      	movs	r4, #128	@ 0x80
 8000e6e:	4653      	mov	r3, sl
 8000e70:	0324      	lsls	r4, r4, #12
 8000e72:	431c      	orrs	r4, r3
 8000e74:	0324      	lsls	r4, r4, #12
 8000e76:	4642      	mov	r2, r8
 8000e78:	0b24      	lsrs	r4, r4, #12
 8000e7a:	e63e      	b.n	8000afa <__aeabi_dmul+0xba>
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	2303      	movs	r3, #3
 8000e80:	4680      	mov	r8, r0
 8000e82:	250c      	movs	r5, #12
 8000e84:	9302      	str	r3, [sp, #8]
 8000e86:	e601      	b.n	8000a8c <__aeabi_dmul+0x4c>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	469a      	mov	sl, r3
 8000e8c:	469b      	mov	fp, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	2504      	movs	r5, #4
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	e5fa      	b.n	8000a8c <__aeabi_dmul+0x4c>
 8000e96:	2101      	movs	r1, #1
 8000e98:	430d      	orrs	r5, r1
 8000e9a:	2d0a      	cmp	r5, #10
 8000e9c:	dd00      	ble.n	8000ea0 <__aeabi_dmul+0x460>
 8000e9e:	e64b      	b.n	8000b38 <__aeabi_dmul+0xf8>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	9800      	ldr	r0, [sp, #0]
 8000ea4:	4041      	eors	r1, r0
 8000ea6:	b2c9      	uxtb	r1, r1
 8000ea8:	9103      	str	r1, [sp, #12]
 8000eaa:	2d02      	cmp	r5, #2
 8000eac:	dc00      	bgt.n	8000eb0 <__aeabi_dmul+0x470>
 8000eae:	e096      	b.n	8000fde <__aeabi_dmul+0x59e>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	e60c      	b.n	8000ad4 <__aeabi_dmul+0x94>
 8000eba:	4649      	mov	r1, r9
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	9a00      	ldr	r2, [sp, #0]
 8000ec0:	432b      	orrs	r3, r5
 8000ec2:	4051      	eors	r1, r2
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	9203      	str	r2, [sp, #12]
 8000ec8:	2b0a      	cmp	r3, #10
 8000eca:	dd00      	ble.n	8000ece <__aeabi_dmul+0x48e>
 8000ecc:	e634      	b.n	8000b38 <__aeabi_dmul+0xf8>
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d157      	bne.n	8000f82 <__aeabi_dmul+0x542>
 8000ed2:	9b03      	ldr	r3, [sp, #12]
 8000ed4:	4699      	mov	r9, r3
 8000ed6:	2400      	movs	r4, #0
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4b49      	ldr	r3, [pc, #292]	@ (8001000 <__aeabi_dmul+0x5c0>)
 8000edc:	e60e      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000ede:	4658      	mov	r0, fp
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	2938      	cmp	r1, #56	@ 0x38
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dmul+0x4aa>
 8000ee8:	e62f      	b.n	8000b4a <__aeabi_dmul+0x10a>
 8000eea:	291f      	cmp	r1, #31
 8000eec:	dd56      	ble.n	8000f9c <__aeabi_dmul+0x55c>
 8000eee:	221f      	movs	r2, #31
 8000ef0:	4654      	mov	r4, sl
 8000ef2:	4252      	negs	r2, r2
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	40dc      	lsrs	r4, r3
 8000ef8:	2920      	cmp	r1, #32
 8000efa:	d007      	beq.n	8000f0c <__aeabi_dmul+0x4cc>
 8000efc:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <__aeabi_dmul+0x5c4>)
 8000efe:	4642      	mov	r2, r8
 8000f00:	469c      	mov	ip, r3
 8000f02:	4653      	mov	r3, sl
 8000f04:	4460      	add	r0, ip
 8000f06:	4083      	lsls	r3, r0
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	4690      	mov	r8, r2
 8000f0c:	4642      	mov	r2, r8
 8000f0e:	2107      	movs	r1, #7
 8000f10:	1e53      	subs	r3, r2, #1
 8000f12:	419a      	sbcs	r2, r3
 8000f14:	000b      	movs	r3, r1
 8000f16:	4322      	orrs	r2, r4
 8000f18:	4013      	ands	r3, r2
 8000f1a:	2400      	movs	r4, #0
 8000f1c:	4211      	tst	r1, r2
 8000f1e:	d009      	beq.n	8000f34 <__aeabi_dmul+0x4f4>
 8000f20:	230f      	movs	r3, #15
 8000f22:	4013      	ands	r3, r2
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d05d      	beq.n	8000fe4 <__aeabi_dmul+0x5a4>
 8000f28:	1d11      	adds	r1, r2, #4
 8000f2a:	4291      	cmp	r1, r2
 8000f2c:	419b      	sbcs	r3, r3
 8000f2e:	000a      	movs	r2, r1
 8000f30:	425b      	negs	r3, r3
 8000f32:	075b      	lsls	r3, r3, #29
 8000f34:	08d2      	lsrs	r2, r2, #3
 8000f36:	431a      	orrs	r2, r3
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e5df      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000f3c:	9b03      	ldr	r3, [sp, #12]
 8000f3e:	4699      	mov	r9, r3
 8000f40:	e5fa      	b.n	8000b38 <__aeabi_dmul+0xf8>
 8000f42:	9801      	ldr	r0, [sp, #4]
 8000f44:	f000 f8cc 	bl	80010e0 <__clzsi2>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	3215      	adds	r2, #21
 8000f4e:	3320      	adds	r3, #32
 8000f50:	2a1c      	cmp	r2, #28
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_dmul+0x516>
 8000f54:	e738      	b.n	8000dc8 <__aeabi_dmul+0x388>
 8000f56:	9a01      	ldr	r2, [sp, #4]
 8000f58:	3808      	subs	r0, #8
 8000f5a:	4082      	lsls	r2, r0
 8000f5c:	e73f      	b.n	8000dde <__aeabi_dmul+0x39e>
 8000f5e:	f000 f8bf 	bl	80010e0 <__clzsi2>
 8000f62:	2315      	movs	r3, #21
 8000f64:	469c      	mov	ip, r3
 8000f66:	4484      	add	ip, r0
 8000f68:	0002      	movs	r2, r0
 8000f6a:	4663      	mov	r3, ip
 8000f6c:	3220      	adds	r2, #32
 8000f6e:	2b1c      	cmp	r3, #28
 8000f70:	dc00      	bgt.n	8000f74 <__aeabi_dmul+0x534>
 8000f72:	e758      	b.n	8000e26 <__aeabi_dmul+0x3e6>
 8000f74:	2300      	movs	r3, #0
 8000f76:	4698      	mov	r8, r3
 8000f78:	0023      	movs	r3, r4
 8000f7a:	3808      	subs	r0, #8
 8000f7c:	4083      	lsls	r3, r0
 8000f7e:	469a      	mov	sl, r3
 8000f80:	e762      	b.n	8000e48 <__aeabi_dmul+0x408>
 8000f82:	001d      	movs	r5, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	2400      	movs	r4, #0
 8000f88:	2002      	movs	r0, #2
 8000f8a:	9301      	str	r3, [sp, #4]
 8000f8c:	e5a2      	b.n	8000ad4 <__aeabi_dmul+0x94>
 8000f8e:	9002      	str	r0, [sp, #8]
 8000f90:	e632      	b.n	8000bf8 <__aeabi_dmul+0x1b8>
 8000f92:	431c      	orrs	r4, r3
 8000f94:	9b00      	ldr	r3, [sp, #0]
 8000f96:	9a01      	ldr	r2, [sp, #4]
 8000f98:	4699      	mov	r9, r3
 8000f9a:	e5ae      	b.n	8000afa <__aeabi_dmul+0xba>
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <__aeabi_dmul+0x5c8>)
 8000f9e:	4652      	mov	r2, sl
 8000fa0:	18c3      	adds	r3, r0, r3
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	40c8      	lsrs	r0, r1
 8000fa8:	4302      	orrs	r2, r0
 8000faa:	4640      	mov	r0, r8
 8000fac:	4098      	lsls	r0, r3
 8000fae:	0003      	movs	r3, r0
 8000fb0:	1e58      	subs	r0, r3, #1
 8000fb2:	4183      	sbcs	r3, r0
 8000fb4:	4654      	mov	r4, sl
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	40cc      	lsrs	r4, r1
 8000fba:	0753      	lsls	r3, r2, #29
 8000fbc:	d009      	beq.n	8000fd2 <__aeabi_dmul+0x592>
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d005      	beq.n	8000fd2 <__aeabi_dmul+0x592>
 8000fc6:	1d13      	adds	r3, r2, #4
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	4192      	sbcs	r2, r2
 8000fcc:	4252      	negs	r2, r2
 8000fce:	18a4      	adds	r4, r4, r2
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	0223      	lsls	r3, r4, #8
 8000fd4:	d508      	bpl.n	8000fe8 <__aeabi_dmul+0x5a8>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2400      	movs	r4, #0
 8000fda:	2200      	movs	r2, #0
 8000fdc:	e58e      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000fde:	4689      	mov	r9, r1
 8000fe0:	2400      	movs	r4, #0
 8000fe2:	e58b      	b.n	8000afc <__aeabi_dmul+0xbc>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	e7a5      	b.n	8000f34 <__aeabi_dmul+0x4f4>
 8000fe8:	0763      	lsls	r3, r4, #29
 8000fea:	0264      	lsls	r4, r4, #9
 8000fec:	0b24      	lsrs	r4, r4, #12
 8000fee:	e7a1      	b.n	8000f34 <__aeabi_dmul+0x4f4>
 8000ff0:	9b00      	ldr	r3, [sp, #0]
 8000ff2:	46a2      	mov	sl, r4
 8000ff4:	4699      	mov	r9, r3
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	4698      	mov	r8, r3
 8000ffa:	e737      	b.n	8000e6c <__aeabi_dmul+0x42c>
 8000ffc:	fffffc0d 	.word	0xfffffc0d
 8001000:	000007ff 	.word	0x000007ff
 8001004:	0000043e 	.word	0x0000043e
 8001008:	0000041e 	.word	0x0000041e

0800100c <__aeabi_d2iz>:
 800100c:	000b      	movs	r3, r1
 800100e:	0002      	movs	r2, r0
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	4d16      	ldr	r5, [pc, #88]	@ (800106c <__aeabi_d2iz+0x60>)
 8001014:	030c      	lsls	r4, r1, #12
 8001016:	b082      	sub	sp, #8
 8001018:	0049      	lsls	r1, r1, #1
 800101a:	2000      	movs	r0, #0
 800101c:	9200      	str	r2, [sp, #0]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	0b24      	lsrs	r4, r4, #12
 8001022:	0d49      	lsrs	r1, r1, #21
 8001024:	0fde      	lsrs	r6, r3, #31
 8001026:	42a9      	cmp	r1, r5
 8001028:	dd04      	ble.n	8001034 <__aeabi_d2iz+0x28>
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <__aeabi_d2iz+0x64>)
 800102c:	4281      	cmp	r1, r0
 800102e:	dd03      	ble.n	8001038 <__aeabi_d2iz+0x2c>
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <__aeabi_d2iz+0x68>)
 8001032:	18f0      	adds	r0, r6, r3
 8001034:	b002      	add	sp, #8
 8001036:	bd70      	pop	{r4, r5, r6, pc}
 8001038:	2080      	movs	r0, #128	@ 0x80
 800103a:	0340      	lsls	r0, r0, #13
 800103c:	4320      	orrs	r0, r4
 800103e:	4c0e      	ldr	r4, [pc, #56]	@ (8001078 <__aeabi_d2iz+0x6c>)
 8001040:	1a64      	subs	r4, r4, r1
 8001042:	2c1f      	cmp	r4, #31
 8001044:	dd08      	ble.n	8001058 <__aeabi_d2iz+0x4c>
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <__aeabi_d2iz+0x70>)
 8001048:	1a5b      	subs	r3, r3, r1
 800104a:	40d8      	lsrs	r0, r3
 800104c:	0003      	movs	r3, r0
 800104e:	4258      	negs	r0, r3
 8001050:	2e00      	cmp	r6, #0
 8001052:	d1ef      	bne.n	8001034 <__aeabi_d2iz+0x28>
 8001054:	0018      	movs	r0, r3
 8001056:	e7ed      	b.n	8001034 <__aeabi_d2iz+0x28>
 8001058:	4b09      	ldr	r3, [pc, #36]	@ (8001080 <__aeabi_d2iz+0x74>)
 800105a:	9a00      	ldr	r2, [sp, #0]
 800105c:	469c      	mov	ip, r3
 800105e:	0003      	movs	r3, r0
 8001060:	4461      	add	r1, ip
 8001062:	408b      	lsls	r3, r1
 8001064:	40e2      	lsrs	r2, r4
 8001066:	4313      	orrs	r3, r2
 8001068:	e7f1      	b.n	800104e <__aeabi_d2iz+0x42>
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	000003fe 	.word	0x000003fe
 8001070:	0000041d 	.word	0x0000041d
 8001074:	7fffffff 	.word	0x7fffffff
 8001078:	00000433 	.word	0x00000433
 800107c:	00000413 	.word	0x00000413
 8001080:	fffffbed 	.word	0xfffffbed

08001084 <__aeabi_i2d>:
 8001084:	b570      	push	{r4, r5, r6, lr}
 8001086:	2800      	cmp	r0, #0
 8001088:	d016      	beq.n	80010b8 <__aeabi_i2d+0x34>
 800108a:	17c3      	asrs	r3, r0, #31
 800108c:	18c5      	adds	r5, r0, r3
 800108e:	405d      	eors	r5, r3
 8001090:	0fc4      	lsrs	r4, r0, #31
 8001092:	0028      	movs	r0, r5
 8001094:	f000 f824 	bl	80010e0 <__clzsi2>
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <__aeabi_i2d+0x58>)
 800109a:	1a1b      	subs	r3, r3, r0
 800109c:	055b      	lsls	r3, r3, #21
 800109e:	0d5b      	lsrs	r3, r3, #21
 80010a0:	280a      	cmp	r0, #10
 80010a2:	dc14      	bgt.n	80010ce <__aeabi_i2d+0x4a>
 80010a4:	0002      	movs	r2, r0
 80010a6:	002e      	movs	r6, r5
 80010a8:	3215      	adds	r2, #21
 80010aa:	4096      	lsls	r6, r2
 80010ac:	220b      	movs	r2, #11
 80010ae:	1a12      	subs	r2, r2, r0
 80010b0:	40d5      	lsrs	r5, r2
 80010b2:	032d      	lsls	r5, r5, #12
 80010b4:	0b2d      	lsrs	r5, r5, #12
 80010b6:	e003      	b.n	80010c0 <__aeabi_i2d+0x3c>
 80010b8:	2400      	movs	r4, #0
 80010ba:	2300      	movs	r3, #0
 80010bc:	2500      	movs	r5, #0
 80010be:	2600      	movs	r6, #0
 80010c0:	051b      	lsls	r3, r3, #20
 80010c2:	432b      	orrs	r3, r5
 80010c4:	07e4      	lsls	r4, r4, #31
 80010c6:	4323      	orrs	r3, r4
 80010c8:	0030      	movs	r0, r6
 80010ca:	0019      	movs	r1, r3
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	380b      	subs	r0, #11
 80010d0:	4085      	lsls	r5, r0
 80010d2:	032d      	lsls	r5, r5, #12
 80010d4:	2600      	movs	r6, #0
 80010d6:	0b2d      	lsrs	r5, r5, #12
 80010d8:	e7f2      	b.n	80010c0 <__aeabi_i2d+0x3c>
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	0000041e 	.word	0x0000041e

080010e0 <__clzsi2>:
 80010e0:	211c      	movs	r1, #28
 80010e2:	2301      	movs	r3, #1
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	4298      	cmp	r0, r3
 80010e8:	d301      	bcc.n	80010ee <__clzsi2+0xe>
 80010ea:	0c00      	lsrs	r0, r0, #16
 80010ec:	3910      	subs	r1, #16
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	4298      	cmp	r0, r3
 80010f2:	d301      	bcc.n	80010f8 <__clzsi2+0x18>
 80010f4:	0a00      	lsrs	r0, r0, #8
 80010f6:	3908      	subs	r1, #8
 80010f8:	091b      	lsrs	r3, r3, #4
 80010fa:	4298      	cmp	r0, r3
 80010fc:	d301      	bcc.n	8001102 <__clzsi2+0x22>
 80010fe:	0900      	lsrs	r0, r0, #4
 8001100:	3904      	subs	r1, #4
 8001102:	a202      	add	r2, pc, #8	@ (adr r2, 800110c <__clzsi2+0x2c>)
 8001104:	5c10      	ldrb	r0, [r2, r0]
 8001106:	1840      	adds	r0, r0, r1
 8001108:	4770      	bx	lr
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	02020304 	.word	0x02020304
 8001110:	01010101 	.word	0x01010101
	...

0800111c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800111c:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_CRC_Init+0x40>)
 8001120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001122:	2180      	movs	r1, #128	@ 0x80
 8001124:	0149      	lsls	r1, r1, #5
 8001126:	430a      	orrs	r2, r1
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	400b      	ands	r3, r1
 800112e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001130:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8001132:	4b0b      	ldr	r3, [pc, #44]	@ (8001160 <MX_CRC_Init+0x44>)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	2160      	movs	r1, #96	@ 0x60
 8001138:	438a      	bics	r2, r1
 800113a:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	3120      	adds	r1, #32
 8001140:	438a      	bics	r2, r1
 8001142:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 8001144:	4a07      	ldr	r2, [pc, #28]	@ (8001164 <MX_CRC_Init+0x48>)
 8001146:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	3968      	subs	r1, #104	@ 0x68
 800114c:	438a      	bics	r2, r1
 800114e:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 8001150:	2201      	movs	r2, #1
 8001152:	4252      	negs	r2, r2
 8001154:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001156:	b002      	add	sp, #8
 8001158:	4770      	bx	lr
 800115a:	46c0      	nop			@ (mov r8, r8)
 800115c:	40021000 	.word	0x40021000
 8001160:	40023000 	.word	0x40023000
 8001164:	04c11db7 	.word	0x04c11db7

08001168 <MX_IWDG_Init>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_IWDG_Init+0x30>)
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <MX_IWDG_Init+0x34>)
 800116c:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800116e:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <MX_IWDG_Init+0x38>)
 8001170:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8001172:	2200      	movs	r2, #0
 8001174:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8001176:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <MX_IWDG_Init+0x3c>)
 8001178:	609a      	str	r2, [r3, #8]
}
 800117a:	e002      	b.n	8001182 <MX_IWDG_Init+0x1a>
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 800117c:	2300      	movs	r3, #0
  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
  LL_IWDG_SetReloadCounter(IWDG, 4095);
  while (LL_IWDG_IsReady(IWDG) != 1)
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <MX_IWDG_Init+0x26>
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <MX_IWDG_Init+0x30>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	075b      	lsls	r3, r3, #29
 8001188:	d1f8      	bne.n	800117c <MX_IWDG_Init+0x14>
 800118a:	2301      	movs	r3, #1
 800118c:	e7f7      	b.n	800117e <MX_IWDG_Init+0x16>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 800118e:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <MX_IWDG_Init+0x30>)
 8001190:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <MX_IWDG_Init+0x40>)
 8001192:	601a      	str	r2, [r3, #0]
  LL_IWDG_ReloadCounter(IWDG);
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001194:	4770      	bx	lr
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	40003000 	.word	0x40003000
 800119c:	0000cccc 	.word	0x0000cccc
 80011a0:	00005555 	.word	0x00005555
 80011a4:	00000fff 	.word	0x00000fff
 80011a8:	0000aaaa 	.word	0x0000aaaa

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ae:	46de      	mov	lr, fp
 80011b0:	4657      	mov	r7, sl
 80011b2:	464e      	mov	r6, r9
 80011b4:	4645      	mov	r5, r8
 80011b6:	b5e0      	push	{r5, r6, r7, lr}
 80011b8:	b08b      	sub	sp, #44	@ 0x2c
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011ba:	af08      	add	r7, sp, #32
 80011bc:	2208      	movs	r2, #8
 80011be:	2100      	movs	r1, #0
 80011c0:	0038      	movs	r0, r7
 80011c2:	f004 fb51 	bl	8005868 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c6:	2218      	movs	r2, #24
 80011c8:	2100      	movs	r1, #0
 80011ca:	a802      	add	r0, sp, #8
 80011cc:	f004 fb4c 	bl	8005868 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 80011d0:	4b77      	ldr	r3, [pc, #476]	@ (80013b0 <MX_GPIO_Init+0x204>)
 80011d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d4:	2501      	movs	r5, #1
 80011d6:	432a      	orrs	r2, r5
 80011d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80011da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011dc:	402a      	ands	r2, r5
 80011de:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80011e0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80011e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011e4:	2102      	movs	r1, #2
 80011e6:	4689      	mov	r9, r1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80011ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ee:	400b      	ands	r3, r1
 80011f0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011f2:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011f4:	26a0      	movs	r6, #160	@ 0xa0
 80011f6:	05f6      	lsls	r6, r6, #23
 80011f8:	000b      	movs	r3, r1
 80011fa:	61b1      	str	r1, [r6, #24]
 80011fc:	330e      	adds	r3, #14
 80011fe:	469b      	mov	fp, r3
 8001200:	61b3      	str	r3, [r6, #24]
 8001202:	4b6c      	ldr	r3, [pc, #432]	@ (80013b4 <MX_GPIO_Init+0x208>)
 8001204:	4698      	mov	r8, r3
 8001206:	619d      	str	r5, [r3, #24]
 8001208:	6199      	str	r1, [r3, #24]
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	61b3      	str	r3, [r6, #24]
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0209      	lsls	r1, r1, #8
 8001214:	61b1      	str	r1, [r6, #24]
 8001216:	4640      	mov	r0, r8
 8001218:	3bf8      	subs	r3, #248	@ 0xf8
 800121a:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 800121c:	4b66      	ldr	r3, [pc, #408]	@ (80013b8 <MX_GPIO_Init+0x20c>)
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	210f      	movs	r1, #15
 8001222:	438a      	bics	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	4964      	ldr	r1, [pc, #400]	@ (80013bc <MX_GPIO_Init+0x210>)
 800122a:	400a      	ands	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	4963      	ldr	r1, [pc, #396]	@ (80013c0 <MX_GPIO_Init+0x214>)
 8001232:	400a      	ands	r2, r1
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	21f0      	movs	r1, #240	@ 0xf0
 800123a:	438a      	bics	r2, r1
 800123c:	4658      	mov	r0, fp
 800123e:	4302      	orrs	r2, r0
 8001240:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001242:	68f3      	ldr	r3, [r6, #12]
 8001244:	380d      	subs	r0, #13
 8001246:	4682      	mov	sl, r0
 8001248:	4383      	bics	r3, r0
 800124a:	60f3      	str	r3, [r6, #12]
 800124c:	68f3      	ldr	r3, [r6, #12]
 800124e:	302d      	adds	r0, #45	@ 0x2d
 8001250:	4383      	bics	r3, r0
 8001252:	60f3      	str	r3, [r6, #12]
 8001254:	68f3      	ldr	r3, [r6, #12]
 8001256:	3930      	subs	r1, #48	@ 0x30
 8001258:	438b      	bics	r3, r1
 800125a:	60f3      	str	r3, [r6, #12]
 800125c:	4644      	mov	r4, r8
 800125e:	68e4      	ldr	r4, [r4, #12]
 8001260:	4a58      	ldr	r2, [pc, #352]	@ (80013c4 <MX_GPIO_Init+0x218>)
 8001262:	4014      	ands	r4, r2
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4323      	orrs	r3, r4
 800126a:	4644      	mov	r4, r8
 800126c:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800126e:	6833      	ldr	r3, [r6, #0]
 8001270:	4654      	mov	r4, sl
 8001272:	43a3      	bics	r3, r4
 8001274:	6033      	str	r3, [r6, #0]
 8001276:	6833      	ldr	r3, [r6, #0]
 8001278:	4383      	bics	r3, r0
 800127a:	6033      	str	r3, [r6, #0]
 800127c:	6833      	ldr	r3, [r6, #0]
 800127e:	438b      	bics	r3, r1
 8001280:	6033      	str	r3, [r6, #0]
 8001282:	4640      	mov	r0, r8
 8001284:	6803      	ldr	r3, [r0, #0]
 8001286:	4013      	ands	r3, r2
 8001288:	6003      	str	r3, [r0, #0]

  /**/
  LL_GPIO_SetPinMode(Button_GPIO_Port, Button_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800128a:	9508      	str	r5, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800128c:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800128e:	2400      	movs	r4, #0
 8001290:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001292:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001294:	0038      	movs	r0, r7
 8001296:	f000 fc75 	bl	8001b84 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800129a:	2304      	movs	r3, #4
 800129c:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800129e:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012a0:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80012a2:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012a4:	0038      	movs	r0, r7
 80012a6:	f000 fc6d 	bl	8001b84 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80012aa:	2308      	movs	r3, #8
 80012ac:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012ae:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012b0:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80012b2:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012b4:	0038      	movs	r0, r7
 80012b6:	f000 fc65 	bl	8001b84 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80012ba:	2020      	movs	r0, #32
 80012bc:	9008      	str	r0, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012be:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012c0:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80012c2:	464a      	mov	r2, r9
 80012c4:	71ba      	strb	r2, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80012c6:	0038      	movs	r0, r7
 80012c8:	f000 fc5c 	bl	8001b84 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 80012cc:	464f      	mov	r7, r9
 80012ce:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012d0:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012d2:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012d4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012d6:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 80012d8:	af02      	add	r7, sp, #8
 80012da:	0039      	movs	r1, r7
 80012dc:	0030      	movs	r0, r6
 80012de:	f000 fcb5 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_PWR_Pin;
 80012e2:	465f      	mov	r7, fp
 80012e4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012e6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012e8:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012ea:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ec:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_PWR_GPIO_Port, &GPIO_InitStruct);
 80012ee:	af02      	add	r7, sp, #8
 80012f0:	0039      	movs	r1, r7
 80012f2:	0030      	movs	r0, r6
 80012f4:	f000 fcaa 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_CS_Pin;
 80012f8:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012fa:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	4657      	mov	r7, sl
 80012fe:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001300:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001302:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8001304:	af02      	add	r7, sp, #8
 8001306:	0039      	movs	r1, r7
 8001308:	4640      	mov	r0, r8
 800130a:	f000 fc9f 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_RST_Pin;
 800130e:	464f      	mov	r7, r9
 8001310:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001312:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	4657      	mov	r7, sl
 8001316:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001318:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800131a:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800131c:	af02      	add	r7, sp, #8
 800131e:	0039      	movs	r1, r7
 8001320:	4640      	mov	r0, r8
 8001322:	f000 fc93 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8001326:	2280      	movs	r2, #128	@ 0x80
 8001328:	0052      	lsls	r2, r2, #1
 800132a:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800132c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800132e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001330:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001332:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8001334:	0039      	movs	r1, r7
 8001336:	0030      	movs	r0, r6
 8001338:	f000 fc88 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_CS_Pin;
 800133c:	2180      	movs	r1, #128	@ 0x80
 800133e:	0209      	lsls	r1, r1, #8
 8001340:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001342:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001344:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001346:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001348:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_CS_GPIO_Port, &GPIO_InitStruct);
 800134a:	0039      	movs	r1, r7
 800134c:	0030      	movs	r0, r6
 800134e:	f000 fc7d 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8001352:	2308      	movs	r3, #8
 8001354:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001356:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001358:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800135a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800135c:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 800135e:	0039      	movs	r1, r7
 8001360:	4640      	mov	r0, r8
 8001362:	f000 fc73 	bl	8001c4c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_PIN17_Pin;
 8001366:	465b      	mov	r3, fp
 8001368:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800136a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800136c:	9506      	str	r5, [sp, #24]
  LL_GPIO_Init(M_PIN17_GPIO_Port, &GPIO_InitStruct);
 800136e:	0039      	movs	r1, r7
 8001370:	4640      	mov	r0, r8
 8001372:	f000 fc6b 	bl	8001c4c <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001376:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <MX_GPIO_Init+0x21c>)
 8001378:	22c1      	movs	r2, #193	@ 0xc1
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	5899      	ldr	r1, [r3, r2]
 800137e:	4813      	ldr	r0, [pc, #76]	@ (80013cc <MX_GPIO_Init+0x220>)
 8001380:	4001      	ands	r1, r0
 8001382:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001384:	2020      	movs	r0, #32
 8001386:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001388:	5899      	ldr	r1, [r3, r2]
 800138a:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_GPIO_Init+0x224>)
 800138c:	4001      	ands	r1, r0
 800138e:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001390:	2140      	movs	r1, #64	@ 0x40
 8001392:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001394:	5899      	ldr	r1, [r3, r2]
 8001396:	0209      	lsls	r1, r1, #8
 8001398:	0a09      	lsrs	r1, r1, #8
 800139a:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139c:	2280      	movs	r2, #128	@ 0x80
 800139e:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI4_15_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a0:	b00b      	add	sp, #44	@ 0x2c
 80013a2:	bcf0      	pop	{r4, r5, r6, r7}
 80013a4:	46bb      	mov	fp, r7
 80013a6:	46b2      	mov	sl, r6
 80013a8:	46a9      	mov	r9, r5
 80013aa:	46a0      	mov	r8, r4
 80013ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	50000400 	.word	0x50000400
 80013b8:	40010000 	.word	0x40010000
 80013bc:	fffff0ff 	.word	0xfffff0ff
 80013c0:	ffff0fff 	.word	0xffff0fff
 80013c4:	fffff3ff 	.word	0xfffff3ff
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	ffff00ff 	.word	0xffff00ff
 80013d0:	ff00ffff 	.word	0xff00ffff

080013d4 <MX_RTC_Init>:
{
 80013d4:	b510      	push	{r4, lr}
 80013d6:	b084      	sub	sp, #16
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 80013d8:	220c      	movs	r2, #12
 80013da:	2100      	movs	r1, #0
 80013dc:	a801      	add	r0, sp, #4
 80013de:	f004 fa43 	bl	8005868 <memset>
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 80013e2:	4a10      	ldr	r2, [pc, #64]	@ (8001424 <MX_RTC_Init+0x50>)
 80013e4:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	02db      	lsls	r3, r3, #11
 80013ea:	430b      	orrs	r3, r1
 80013ec:	6513      	str	r3, [r2, #80]	@ 0x50
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_RTC_Init+0x54>)
 80013f0:	21c0      	movs	r1, #192	@ 0xc0
 80013f2:	0089      	lsls	r1, r1, #2
 80013f4:	585a      	ldr	r2, [r3, r1]
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_RTC_Init+0x58>)
 80013f8:	4002      	ands	r2, r0
 80013fa:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fc:	2204      	movs	r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 8001400:	2300      	movs	r3, #0
 8001402:	9301      	str	r3, [sp, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 8001404:	337f      	adds	r3, #127	@ 0x7f
 8001406:	9302      	str	r3, [sp, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 8001408:	3380      	adds	r3, #128	@ 0x80
 800140a:	9303      	str	r3, [sp, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 800140c:	4c08      	ldr	r4, [pc, #32]	@ (8001430 <MX_RTC_Init+0x5c>)
 800140e:	a901      	add	r1, sp, #4
 8001410:	0020      	movs	r0, r4
 8001412:	f000 fda5 	bl	8001f60 <LL_RTC_Init>
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001416:	68a3      	ldr	r3, [r4, #8]
 8001418:	2207      	movs	r2, #7
 800141a:	4393      	bics	r3, r2
 800141c:	60a3      	str	r3, [r4, #8]
}
 800141e:	b004      	add	sp, #16
 8001420:	bd10      	pop	{r4, pc}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	40021000 	.word	0x40021000
 8001428:	e000e100 	.word	0xe000e100
 800142c:	ff00ffff 	.word	0xff00ffff
 8001430:	40002800 	.word	0x40002800

08001434 <MX_SPI1_Init>:
{
 8001434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001436:	46c6      	mov	lr, r8
 8001438:	b500      	push	{lr}
 800143a:	b092      	sub	sp, #72	@ 0x48
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800143c:	2228      	movs	r2, #40	@ 0x28
 800143e:	2100      	movs	r1, #0
 8001440:	a808      	add	r0, sp, #32
 8001442:	f004 fa11 	bl	8005868 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001446:	2218      	movs	r2, #24
 8001448:	2100      	movs	r1, #0
 800144a:	a802      	add	r0, sp, #8
 800144c:	f004 fa0c 	bl	8005868 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 8001450:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <MX_SPI1_Init+0xcc>)
 8001452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001454:	2180      	movs	r1, #128	@ 0x80
 8001456:	0149      	lsls	r1, r1, #5
 8001458:	430a      	orrs	r2, r1
 800145a:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800145c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800145e:	400a      	ands	r2, r1
 8001460:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001462:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8001464:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001466:	2201      	movs	r2, #1
 8001468:	4311      	orrs	r1, r2
 800146a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800146c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800146e:	401a      	ands	r2, r3
 8001470:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 8001472:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001474:	2320      	movs	r3, #32
 8001476:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001478:	3b1e      	subs	r3, #30
 800147a:	4698      	mov	r8, r3
 800147c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2603      	movs	r6, #3
 8001480:	9604      	str	r6, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	25a0      	movs	r5, #160	@ 0xa0
 8001484:	05ed      	lsls	r5, r5, #23
 8001486:	a902      	add	r1, sp, #8
 8001488:	0028      	movs	r0, r5
 800148a:	f000 fbdf 	bl	8001c4c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800148e:	2740      	movs	r7, #64	@ 0x40
 8001490:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001492:	4643      	mov	r3, r8
 8001494:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001498:	2400      	movs	r4, #0
 800149a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800149c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 800149e:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	a902      	add	r1, sp, #8
 80014a2:	0028      	movs	r0, r5
 80014a4:	f000 fbd2 	bl	8001c4c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014ac:	4643      	mov	r3, r8
 80014ae:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014b4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80014b6:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	a902      	add	r1, sp, #8
 80014ba:	0028      	movs	r0, r5
 80014bc:	f000 fbc6 	bl	8001c4c <LL_GPIO_Init>
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80014c0:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80014c2:	2382      	movs	r3, #130	@ 0x82
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	9309      	str	r3, [sp, #36]	@ 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80014c8:	940a      	str	r4, [sp, #40]	@ 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80014ca:	940b      	str	r4, [sp, #44]	@ 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80014cc:	940c      	str	r4, [sp, #48]	@ 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80014ce:	33fc      	adds	r3, #252	@ 0xfc
 80014d0:	930d      	str	r3, [sp, #52]	@ 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 80014d2:	3be9      	subs	r3, #233	@ 0xe9
 80014d4:	3bff      	subs	r3, #255	@ 0xff
 80014d6:	930e      	str	r3, [sp, #56]	@ 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80014d8:	940f      	str	r4, [sp, #60]	@ 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80014da:	9410      	str	r4, [sp, #64]	@ 0x40
  SPI_InitStruct.CRCPoly = 7;
 80014dc:	3b11      	subs	r3, #17
 80014de:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80014e0:	4c08      	ldr	r4, [pc, #32]	@ (8001504 <MX_SPI1_Init+0xd0>)
 80014e2:	a908      	add	r1, sp, #32
 80014e4:	0020      	movs	r0, r4
 80014e6:	f000 fd63 	bl	8001fb0 <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80014ea:	6863      	ldr	r3, [r4, #4]
 80014ec:	2210      	movs	r2, #16
 80014ee:	4393      	bics	r3, r2
 80014f0:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	433b      	orrs	r3, r7
 80014f6:	6023      	str	r3, [r4, #0]
}
 80014f8:	b012      	add	sp, #72	@ 0x48
 80014fa:	bc80      	pop	{r7}
 80014fc:	46b8      	mov	r8, r7
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001500:	40021000 	.word	0x40021000
 8001504:	40013000 	.word	0x40013000

08001508 <MX_USART2_UART_Init>:
{
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	b090      	sub	sp, #64	@ 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800150c:	221c      	movs	r2, #28
 800150e:	2100      	movs	r1, #0
 8001510:	a809      	add	r0, sp, #36	@ 0x24
 8001512:	f004 f9a9 	bl	8005868 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	2218      	movs	r2, #24
 8001518:	2100      	movs	r1, #0
 800151a:	a803      	add	r0, sp, #12
 800151c:	f004 f9a4 	bl	8005868 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 8001520:	4b36      	ldr	r3, [pc, #216]	@ (80015fc <MX_USART2_UART_Init+0xf4>)
 8001522:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001524:	2180      	movs	r1, #128	@ 0x80
 8001526:	0289      	lsls	r1, r1, #10
 8001528:	430a      	orrs	r2, r1
 800152a:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800152c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800152e:	400a      	ands	r2, r1
 8001530:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001532:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8001534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001536:	2402      	movs	r4, #2
 8001538:	4322      	orrs	r2, r4
 800153a:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800153c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800153e:	4023      	ands	r3, r4
 8001540:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001542:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001544:	2340      	movs	r3, #64	@ 0x40
 8001546:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001548:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800154a:	2603      	movs	r6, #3
 800154c:	9605      	str	r6, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	4d2c      	ldr	r5, [pc, #176]	@ (8001600 <MX_USART2_UART_Init+0xf8>)
 8001550:	a903      	add	r1, sp, #12
 8001552:	0028      	movs	r0, r5
 8001554:	f000 fb7a 	bl	8001c4c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800155c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001560:	2400      	movs	r4, #0
 8001562:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001564:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8001566:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	a903      	add	r1, sp, #12
 800156a:	0028      	movs	r0, r5
 800156c:	f000 fb6e 	bl	8001c4c <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001570:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <MX_USART2_UART_Init+0xfc>)
 8001572:	21c7      	movs	r1, #199	@ 0xc7
 8001574:	0089      	lsls	r1, r1, #2
 8001576:	585a      	ldr	r2, [r3, r1]
 8001578:	20ff      	movs	r0, #255	@ 0xff
 800157a:	4382      	bics	r2, r0
 800157c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	0552      	lsls	r2, r2, #21
 8001582:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 8001584:	23e1      	movs	r3, #225	@ 0xe1
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800158a:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800158c:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800158e:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001590:	230c      	movs	r3, #12
 8001592:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001594:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001596:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 8001598:	4c1b      	ldr	r4, [pc, #108]	@ (8001608 <MX_USART2_UART_Init+0x100>)
 800159a:	a909      	add	r1, sp, #36	@ 0x24
 800159c:	0020      	movs	r0, r4
 800159e:	f000 fd59 	bl	8002054 <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015a2:	6863      	ldr	r3, [r4, #4]
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <MX_USART2_UART_Init+0x104>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80015aa:	68a3      	ldr	r3, [r4, #8]
 80015ac:	222a      	movs	r2, #42	@ 0x2a
 80015ae:	4393      	bics	r3, r2
 80015b0:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80015b2:	6822      	ldr	r2, [r4, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	431a      	orrs	r2, r3
 80015b8:	6022      	str	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ba:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015be:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 80015c2:	6820      	ldr	r0, [r4, #0]
 80015c4:	2280      	movs	r2, #128	@ 0x80
 80015c6:	0052      	lsls	r2, r2, #1
 80015c8:	4302      	orrs	r2, r0
 80015ca:	6022      	str	r2, [r4, #0]
 80015cc:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015d4:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80015d8:	68a2      	ldr	r2, [r4, #8]
 80015da:	431a      	orrs	r2, r3
 80015dc:	60a2      	str	r2, [r4, #8]
 80015de:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015e2:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015e6:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	2120      	movs	r1, #32
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6023      	str	r3, [r4, #0]
 80015f2:	f382 8810 	msr	PRIMASK, r2
}
 80015f6:	b010      	add	sp, #64	@ 0x40
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	40021000 	.word	0x40021000
 8001600:	50000400 	.word	0x50000400
 8001604:	e000e100 	.word	0xe000e100
 8001608:	40004400 	.word	0x40004400
 800160c:	ffffb7ff 	.word	0xffffb7ff

08001610 <MX_I2C1_Init>:
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	46c6      	mov	lr, r8
 8001614:	b500      	push	{lr}
 8001616:	b090      	sub	sp, #64	@ 0x40
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001618:	221c      	movs	r2, #28
 800161a:	2100      	movs	r1, #0
 800161c:	a809      	add	r0, sp, #36	@ 0x24
 800161e:	f004 f923 	bl	8005868 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	2218      	movs	r2, #24
 8001624:	2100      	movs	r1, #0
 8001626:	a803      	add	r0, sp, #12
 8001628:	f004 f91e 	bl	8005868 <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 800162c:	4c2b      	ldr	r4, [pc, #172]	@ (80016dc <MX_I2C1_Init+0xcc>)
 800162e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001630:	2601      	movs	r6, #1
 8001632:	4333      	orrs	r3, r6
 8001634:	62e3      	str	r3, [r4, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8001636:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001638:	4033      	ands	r3, r6
 800163a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800163c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800163e:	2380      	movs	r3, #128	@ 0x80
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001644:	3bff      	subs	r3, #255	@ 0xff
 8001646:	3bff      	subs	r3, #255	@ 0xff
 8001648:	4698      	mov	r8, r3
 800164a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2503      	movs	r5, #3
 800164e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001650:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001652:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	27a0      	movs	r7, #160	@ 0xa0
 8001656:	05ff      	lsls	r7, r7, #23
 8001658:	a903      	add	r1, sp, #12
 800165a:	0038      	movs	r0, r7
 800165c:	f000 faf6 	bl	8001c4c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001666:	4643      	mov	r3, r8
 8001668:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800166c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800166e:	2500      	movs	r5, #0
 8001670:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001672:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001674:	a903      	add	r1, sp, #12
 8001676:	0038      	movs	r0, r7
 8001678:	f000 fae8 	bl	8001c4c <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 800167c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	0392      	lsls	r2, r2, #14
 8001682:	4313      	orrs	r3, r2
 8001684:	63a3      	str	r3, [r4, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001686:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001688:	4013      	ands	r3, r2
 800168a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800168c:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800168e:	4c14      	ldr	r4, [pc, #80]	@ (80016e0 <MX_I2C1_Init+0xd0>)
 8001690:	6862      	ldr	r2, [r4, #4]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	049b      	lsls	r3, r3, #18
 8001696:	4313      	orrs	r3, r2
 8001698:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800169a:	68e3      	ldr	r3, [r4, #12]
 800169c:	4a11      	ldr	r2, [pc, #68]	@ (80016e4 <MX_I2C1_Init+0xd4>)
 800169e:	4013      	ands	r3, r2
 80016a0:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	4a10      	ldr	r2, [pc, #64]	@ (80016e8 <MX_I2C1_Init+0xd8>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <MX_I2C1_Init+0xdc>)
 80016ae:	4013      	ands	r3, r2
 80016b0:	6023      	str	r3, [r4, #0]
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80016b2:	9509      	str	r5, [sp, #36]	@ 0x24
  I2C_InitStruct.Timing = 0x00503D58;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <MX_I2C1_Init+0xe0>)
 80016b6:	930a      	str	r3, [sp, #40]	@ 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80016b8:	950b      	str	r5, [sp, #44]	@ 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 80016ba:	950c      	str	r5, [sp, #48]	@ 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 80016bc:	950d      	str	r5, [sp, #52]	@ 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80016be:	950e      	str	r5, [sp, #56]	@ 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80016c0:	950f      	str	r5, [sp, #60]	@ 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80016c2:	a909      	add	r1, sp, #36	@ 0x24
 80016c4:	0020      	movs	r0, r4
 80016c6:	f000 fb1d 	bl	8001d04 <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80016ca:	68e3      	ldr	r3, [r4, #12]
 80016cc:	4a09      	ldr	r2, [pc, #36]	@ (80016f4 <MX_I2C1_Init+0xe4>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	60e3      	str	r3, [r4, #12]
}
 80016d2:	b010      	add	sp, #64	@ 0x40
 80016d4:	bc80      	pop	{r7}
 80016d6:	46b8      	mov	r8, r7
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40005400 	.word	0x40005400
 80016e4:	ffff7fff 	.word	0xffff7fff
 80016e8:	fff7ffff 	.word	0xfff7ffff
 80016ec:	fffdffff 	.word	0xfffdffff
 80016f0:	00503d58 	.word	0x00503d58
 80016f4:	fffff801 	.word	0xfffff801

080016f8 <SystemClock_Config>:
{
 80016f8:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016fa:	4a46      	ldr	r2, [pc, #280]	@ (8001814 <SystemClock_Config+0x11c>)
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	2101      	movs	r1, #1
 8001700:	438b      	bics	r3, r1
 8001702:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001704:	4b43      	ldr	r3, [pc, #268]	@ (8001814 <SystemClock_Config+0x11c>)
 8001706:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001708:	07db      	lsls	r3, r3, #31
 800170a:	d4fb      	bmi.n	8001704 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800170c:	4942      	ldr	r1, [pc, #264]	@ (8001818 <SystemClock_Config+0x120>)
 800170e:	680a      	ldr	r2, [r1, #0]
 8001710:	4b42      	ldr	r3, [pc, #264]	@ (800181c <SystemClock_Config+0x124>)
 8001712:	401a      	ands	r2, r3
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 800171c:	4b3e      	ldr	r3, [pc, #248]	@ (8001818 <SystemClock_Config+0x120>)
 800171e:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8001720:	06db      	lsls	r3, r3, #27
 8001722:	d4fb      	bmi.n	800171c <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001724:	4a3e      	ldr	r2, [pc, #248]	@ (8001820 <SystemClock_Config+0x128>)
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	2101      	movs	r1, #1
 800172a:	430b      	orrs	r3, r1
 800172c:	6013      	str	r3, [r2, #0]
}
 800172e:	e001      	b.n	8001734 <SystemClock_Config+0x3c>
  while(LL_RCC_HSI_IsReady() != 1)
 8001730:	2b01      	cmp	r3, #1
 8001732:	d008      	beq.n	8001746 <SystemClock_Config+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <SystemClock_Config+0x128>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2104      	movs	r1, #4
 800173a:	000b      	movs	r3, r1
 800173c:	4013      	ands	r3, r2
 800173e:	4211      	tst	r1, r2
 8001740:	d0f6      	beq.n	8001730 <SystemClock_Config+0x38>
 8001742:	2301      	movs	r3, #1
 8001744:	e7f4      	b.n	8001730 <SystemClock_Config+0x38>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001746:	4a36      	ldr	r2, [pc, #216]	@ (8001820 <SystemClock_Config+0x128>)
 8001748:	6850      	ldr	r0, [r2, #4]
 800174a:	4936      	ldr	r1, [pc, #216]	@ (8001824 <SystemClock_Config+0x12c>)
 800174c:	4008      	ands	r0, r1
 800174e:	2180      	movs	r1, #128	@ 0x80
 8001750:	0149      	lsls	r1, r1, #5
 8001752:	4301      	orrs	r1, r0
 8001754:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001756:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8001758:	2001      	movs	r0, #1
 800175a:	4301      	orrs	r1, r0
 800175c:	6511      	str	r1, [r2, #80]	@ 0x50
}
 800175e:	e001      	b.n	8001764 <SystemClock_Config+0x6c>
  while(LL_RCC_LSI_IsReady() != 1)
 8001760:	2801      	cmp	r0, #1
 8001762:	d008      	beq.n	8001776 <SystemClock_Config+0x7e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 8001764:	4a2e      	ldr	r2, [pc, #184]	@ (8001820 <SystemClock_Config+0x128>)
 8001766:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001768:	2102      	movs	r1, #2
 800176a:	0008      	movs	r0, r1
 800176c:	4010      	ands	r0, r2
 800176e:	4211      	tst	r1, r2
 8001770:	d0f6      	beq.n	8001760 <SystemClock_Config+0x68>
 8001772:	0018      	movs	r0, r3
 8001774:	e7f4      	b.n	8001760 <SystemClock_Config+0x68>
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <SystemClock_Config+0x120>)
 8001778:	6811      	ldr	r1, [r2, #0]
 800177a:	2380      	movs	r3, #128	@ 0x80
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	430b      	orrs	r3, r1
 8001780:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
 8001782:	4b27      	ldr	r3, [pc, #156]	@ (8001820 <SystemClock_Config+0x128>)
 8001784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001786:	22c0      	movs	r2, #192	@ 0xc0
 8001788:	0292      	lsls	r2, r2, #10
 800178a:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 800178c:	2280      	movs	r2, #128	@ 0x80
 800178e:	0292      	lsls	r2, r2, #10
 8001790:	4293      	cmp	r3, r2
 8001792:	d010      	beq.n	80017b6 <SystemClock_Config+0xbe>
  * @rmtoll CSR         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <SystemClock_Config+0x128>)
 8001796:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001798:	2280      	movs	r2, #128	@ 0x80
 800179a:	0312      	lsls	r2, r2, #12
 800179c:	430a      	orrs	r2, r1
 800179e:	651a      	str	r2, [r3, #80]	@ 0x50
  * @rmtoll CSR         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 80017a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017a2:	4921      	ldr	r1, [pc, #132]	@ (8001828 <SystemClock_Config+0x130>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 80017a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80017aa:	4a20      	ldr	r2, [pc, #128]	@ (800182c <SystemClock_Config+0x134>)
 80017ac:	4011      	ands	r1, r2
 80017ae:	2280      	movs	r2, #128	@ 0x80
 80017b0:	0292      	lsls	r2, r2, #10
 80017b2:	430a      	orrs	r2, r1
 80017b4:	651a      	str	r2, [r3, #80]	@ 0x50
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <SystemClock_Config+0x128>)
 80017b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80017ba:	2280      	movs	r2, #128	@ 0x80
 80017bc:	02d2      	lsls	r2, r2, #11
 80017be:	430a      	orrs	r2, r1
 80017c0:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	21f0      	movs	r1, #240	@ 0xf0
 80017c6:	438a      	bics	r2, r1
 80017c8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4918      	ldr	r1, [pc, #96]	@ (8001830 <SystemClock_Config+0x138>)
 80017ce:	400a      	ands	r2, r1
 80017d0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	4917      	ldr	r1, [pc, #92]	@ (8001834 <SystemClock_Config+0x13c>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	2103      	movs	r1, #3
 80017de:	438a      	bics	r2, r1
 80017e0:	3902      	subs	r1, #2
 80017e2:	430a      	orrs	r2, r1
 80017e4:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <SystemClock_Config+0x128>)
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	230c      	movs	r3, #12
 80017ec:	4013      	ands	r3, r2
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d1f9      	bne.n	80017e6 <SystemClock_Config+0xee>
  LL_Init1msTick(16000000);
 80017f2:	4c11      	ldr	r4, [pc, #68]	@ (8001838 <SystemClock_Config+0x140>)
 80017f4:	0020      	movs	r0, r4
 80017f6:	f000 fc6d 	bl	80020d4 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 80017fa:	0020      	movs	r0, r4
 80017fc:	f000 fc8e 	bl	800211c <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001800:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <SystemClock_Config+0x128>)
 8001802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001804:	210c      	movs	r1, #12
 8001806:	438a      	bics	r2, r1
 8001808:	64da      	str	r2, [r3, #76]	@ 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 800180a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800180c:	490b      	ldr	r1, [pc, #44]	@ (800183c <SystemClock_Config+0x144>)
 800180e:	400a      	ands	r2, r1
 8001810:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001812:	bd10      	pop	{r4, pc}
 8001814:	40022000 	.word	0x40022000
 8001818:	40007000 	.word	0x40007000
 800181c:	ffffe7ff 	.word	0xffffe7ff
 8001820:	40021000 	.word	0x40021000
 8001824:	ffffe0ff 	.word	0xffffe0ff
 8001828:	fff7ffff 	.word	0xfff7ffff
 800182c:	fffcffff 	.word	0xfffcffff
 8001830:	fffff8ff 	.word	0xfffff8ff
 8001834:	ffffc7ff 	.word	0xffffc7ff
 8001838:	00f42400 	.word	0x00f42400
 800183c:	ffffcfff 	.word	0xffffcfff

08001840 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001842:	e7fe      	b.n	8001842 <Error_Handler+0x2>

08001844 <inittestapplication>:
{
 8001844:	b570      	push	{r4, r5, r6, lr}
   a = decamutexon();
 8001846:	f000 fe4f 	bl	80024e8 <decamutexon>
 800184a:	0005      	movs	r5, r0
   port_set_dw1000_slowrate();
 800184c:	f000 fe06 	bl	800245c <port_set_dw1000_slowrate>
   devID = dwt_readdevid();
 8001850:	f001 feca 	bl	80035e8 <dwt_readdevid>
   if(DWT_DEVICE_ID != devID)
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <inittestapplication+0x5c>)
 8001856:	4298      	cmp	r0, r3
 8001858:	d006      	beq.n	8001868 <inittestapplication+0x24>
       port_wakeup_dw1000();
 800185a:	f000 fe6b 	bl	8002534 <port_wakeup_dw1000>
       devID = dwt_readdevid();
 800185e:	f001 fec3 	bl	80035e8 <dwt_readdevid>
       if (DWT_DEVICE_ID != devID){
 8001862:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <inittestapplication+0x5c>)
 8001864:	4298      	cmp	r0, r3
 8001866:	d114      	bne.n	8001892 <inittestapplication+0x4e>
   result = instance_init( 1 );
 8001868:	2001      	movs	r0, #1
 800186a:	f002 fce7 	bl	800423c <instance_init>
 800186e:	1e04      	subs	r4, r0, #0
   if (0 > result) {
 8001870:	db11      	blt.n	8001896 <inittestapplication+0x52>
   port_set_dw1000_fastrate();
 8001872:	f000 fe17 	bl	80024a4 <port_set_dw1000_fastrate>
   devID = dwt_readdevid();
 8001876:	f001 feb7 	bl	80035e8 <dwt_readdevid>
   if (DWT_DEVICE_ID != devID)   // Means it is NOT MP device
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <inittestapplication+0x5c>)
 800187c:	4298      	cmp	r0, r3
 800187e:	d10c      	bne.n	800189a <inittestapplication+0x56>
   instance_config(app.pConfig) ;  // Set operating channel etc
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <inittestapplication+0x60>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f002 fd38 	bl	80042f8 <instance_config>
   decamutexoff(a); //enable ScenSor (EXT_IRQ) before starting
 8001888:	0028      	movs	r0, r5
 800188a:	f000 fe2f 	bl	80024ec <decamutexoff>
}
 800188e:	0020      	movs	r0, r4
 8001890:	bd70      	pop	{r4, r5, r6, pc}
    	   Error_Handler();
 8001892:	f7ff ffd5 	bl	8001840 <Error_Handler>
	   Error_Handler();
 8001896:	f7ff ffd3 	bl	8001840 <Error_Handler>
	   Error_Handler();
 800189a:	f7ff ffd1 	bl	8001840 <Error_Handler>
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	deca0130 	.word	0xdeca0130
 80018a4:	2000021c 	.word	0x2000021c

080018a8 <main>:
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	b086      	sub	sp, #24
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY );
 80018ac:	4a44      	ldr	r2, [pc, #272]	@ (80019c0 <main+0x118>)
 80018ae:	6853      	ldr	r3, [r2, #4]
 80018b0:	2607      	movs	r6, #7
 80018b2:	4333      	orrs	r3, r6
 80018b4:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80018b6:	4c43      	ldr	r4, [pc, #268]	@ (80019c4 <main+0x11c>)
 80018b8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80018ba:	2301      	movs	r3, #1
 80018bc:	431a      	orrs	r2, r3
 80018be:	6362      	str	r2, [r4, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018c0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80018c2:	4013      	ands	r3, r2
 80018c4:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80018c6:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018c8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	0552      	lsls	r2, r2, #21
 80018ce:	4313      	orrs	r3, r2
 80018d0:	63a3      	str	r3, [r4, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80018d4:	4013      	ands	r3, r2
 80018d6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80018d8:	9b03      	ldr	r3, [sp, #12]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018da:	493b      	ldr	r1, [pc, #236]	@ (80019c8 <main+0x120>)
 80018dc:	6a0b      	ldr	r3, [r1, #32]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	0a1b      	lsrs	r3, r3, #8
 80018e2:	22c0      	movs	r2, #192	@ 0xc0
 80018e4:	0612      	lsls	r2, r2, #24
 80018e6:	4313      	orrs	r3, r2
 80018e8:	620b      	str	r3, [r1, #32]
  SystemClock_Config();
 80018ea:	f7ff ff05 	bl	80016f8 <SystemClock_Config>
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4d37      	ldr	r5, [pc, #220]	@ (80019cc <main+0x124>)
 80018f0:	602e      	str	r6, [r5, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018f2:	68e2      	ldr	r2, [r4, #12]
 80018f4:	4b36      	ldr	r3, [pc, #216]	@ (80019d0 <main+0x128>)
 80018f6:	401a      	ands	r2, r3
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	4313      	orrs	r3, r2
 80018fe:	60e3      	str	r3, [r4, #12]
  MX_GPIO_Init();
 8001900:	f7ff fc54 	bl	80011ac <MX_GPIO_Init>
  MX_CRC_Init();
 8001904:	f7ff fc0a 	bl	800111c <MX_CRC_Init>
  MX_RTC_Init();
 8001908:	f7ff fd64 	bl	80013d4 <MX_RTC_Init>
  MX_SPI1_Init();
 800190c:	f7ff fd92 	bl	8001434 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001910:	f7ff fdfa 	bl	8001508 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8001914:	f7ff fc28 	bl	8001168 <MX_IWDG_Init>
  MX_I2C1_Init();
 8001918:	f7ff fe7a 	bl	8001610 <MX_I2C1_Init>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	4313      	orrs	r3, r2
 8001922:	602b      	str	r3, [r5, #0]
  memset(&app,0,sizeof(app));
 8001924:	482b      	ldr	r0, [pc, #172]	@ (80019d4 <main+0x12c>)
 8001926:	320c      	adds	r2, #12
 8001928:	2100      	movs	r1, #0
 800192a:	f003 ff9d 	bl	8005868 <memset>
    reset_DW1000();
 800192e:	f000 fddf 	bl	80024f0 <reset_DW1000>
    load_bssConfig();                 /**< load the RAM Configuration parameters from NVM block */
 8001932:	f001 fdbb 	bl	80034ac <load_bssConfig>
    int result = inittestapplication();
 8001936:	f7ff ff85 	bl	8001844 <inittestapplication>
    if ( result < 0 ){
 800193a:	2800      	cmp	r0, #0
 800193c:	db35      	blt.n	80019aa <main+0x102>
    app.blinkenable = 1;
 800193e:	4c25      	ldr	r4, [pc, #148]	@ (80019d4 <main+0x12c>)
 8001940:	2201      	movs	r2, #1
 8001942:	6062      	str	r2, [r4, #4]
    app.pcurrent_blink_interval_ms = &(app.pConfig->blink.interval_in_ms);
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	330c      	adds	r3, #12
 8001948:	60a3      	str	r3, [r4, #8]
    uint8_t id =0;
 800194a:	2317      	movs	r3, #23
 800194c:	446b      	add	r3, sp
 800194e:	2000      	movs	r0, #0
 8001950:	7018      	strb	r0, [r3, #0]
    int ret = i2c_slave_read(I2C1,0x33,0xf,&id,1);
 8001952:	9200      	str	r2, [sp, #0]
 8001954:	320e      	adds	r2, #14
 8001956:	2133      	movs	r1, #51	@ 0x33
 8001958:	f000 fe56 	bl	8002608 <i2c_slave_read>
    if ( app.pConfig->blink.interval_in_ms == app.pConfig->blink.interval_slow_in_ms ) {
 800195c:	6823      	ldr	r3, [r4, #0]
 800195e:	7b19      	ldrb	r1, [r3, #12]
 8001960:	7b5a      	ldrb	r2, [r3, #13]
 8001962:	0212      	lsls	r2, r2, #8
 8001964:	430a      	orrs	r2, r1
 8001966:	7b99      	ldrb	r1, [r3, #14]
 8001968:	0409      	lsls	r1, r1, #16
 800196a:	4311      	orrs	r1, r2
 800196c:	7bda      	ldrb	r2, [r3, #15]
 800196e:	0612      	lsls	r2, r2, #24
 8001970:	430a      	orrs	r2, r1
 8001972:	7c19      	ldrb	r1, [r3, #16]
 8001974:	7c58      	ldrb	r0, [r3, #17]
 8001976:	0200      	lsls	r0, r0, #8
 8001978:	4308      	orrs	r0, r1
 800197a:	7c99      	ldrb	r1, [r3, #18]
 800197c:	0409      	lsls	r1, r1, #16
 800197e:	4301      	orrs	r1, r0
 8001980:	7cdb      	ldrb	r3, [r3, #19]
 8001982:	061b      	lsls	r3, r3, #24
 8001984:	430b      	orrs	r3, r1
 8001986:	429a      	cmp	r2, r3
 8001988:	d011      	beq.n	80019ae <main+0x106>
  	  lis3dh_configure_int();
 800198a:	f000 fe83 	bl	8002694 <lis3dh_configure_int>
  __ASM volatile ("cpsie i" : : : "memory");
 800198e:	b662      	cpsie	i
	  vTestModeMotionDetect();
 8001990:	f001 f8f0 	bl	8002b74 <vTestModeMotionDetect>
	  if( deca_uart_rx_data_ready() )
 8001994:	f000 fcaa 	bl	80022ec <deca_uart_rx_data_ready>
 8001998:	2800      	cmp	r0, #0
 800199a:	d10b      	bne.n	80019b4 <main+0x10c>
	  if (app.blinkenable)
 800199c:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <main+0x12c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f5      	beq.n	8001990 <main+0xe8>
		 instance_run();
 80019a4:	f002 fd6a 	bl	800447c <instance_run>
 80019a8:	e7f2      	b.n	8001990 <main+0xe8>
  	  Error_Handler();   // Failed to intialze SPI.
 80019aa:	f7ff ff49 	bl	8001840 <Error_Handler>
  	  lis3dh_powerdown();
 80019ae:	f003 faa5 	bl	8004efc <lis3dh_powerdown>
 80019b2:	e7ec      	b.n	800198e <main+0xe6>
		  process_uartmsg();
 80019b4:	f001 fce4 	bl	8003380 <process_uartmsg>
		  LEDS_OFF(LED_BLUE_MASK);
 80019b8:	2002      	movs	r0, #2
 80019ba:	f000 fe0b 	bl	80025d4 <LEDS_OFF>
 80019be:	e7ed      	b.n	800199c <main+0xf4>
 80019c0:	40015800 	.word	0x40015800
 80019c4:	40021000 	.word	0x40021000
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	e000e010 	.word	0xe000e010
 80019d0:	ffff7fff 	.word	0xffff7fff
 80019d4:	2000021c 	.word	0x2000021c

080019d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d8:	e7fe      	b.n	80019d8 <NMI_Handler>

080019da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <HardFault_Handler>

080019dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019dc:	4770      	bx	lr

080019de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	4770      	bx	lr

080019e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	IncSysTick();
 80019e2:	f000 fd0d 	bl	8002400 <IncSysTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e6:	bd10      	pop	{r4, pc}

080019e8 <RTC_IRQHandler>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80019e8:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <RTC_IRQHandler+0x28>)
 80019ea:	68d8      	ldr	r0, [r3, #12]
 80019ec:	22ff      	movs	r2, #255	@ 0xff
 80019ee:	4010      	ands	r0, r2
 80019f0:	4908      	ldr	r1, [pc, #32]	@ (8001a14 <RTC_IRQHandler+0x2c>)
 80019f2:	4301      	orrs	r1, r0
 80019f4:	60d9      	str	r1, [r3, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80019f6:	68d9      	ldr	r1, [r3, #12]
 80019f8:	400a      	ands	r2, r1
 80019fa:	4907      	ldr	r1, [pc, #28]	@ (8001a18 <RTC_IRQHandler+0x30>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]
  /* USER CODE END RTC_IRQn 0 */
  /* USER CODE BEGIN RTC_IRQn 1 */
	LL_RTC_ClearFlag_WUT(RTC);
	LL_RTC_ClearFlag_ALRA(RTC);

    EXTI->PR = EXTI_IMR_IM17;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <RTC_IRQHandler+0x34>)
 8001a02:	2280      	movs	r2, #128	@ 0x80
 8001a04:	0292      	lsls	r2, r2, #10
 8001a06:	615a      	str	r2, [r3, #20]
	EXTI->PR = EXTI_IMR_IM20;
 8001a08:	2280      	movs	r2, #128	@ 0x80
 8001a0a:	0352      	lsls	r2, r2, #13
 8001a0c:	615a      	str	r2, [r3, #20]
  /* USER CODE END RTC_IRQn 1 */
}
 8001a0e:	4770      	bx	lr
 8001a10:	40002800 	.word	0x40002800
 8001a14:	fffffb7f 	.word	0xfffffb7f
 8001a18:	fffffe7f 	.word	0xfffffe7f
 8001a1c:	40010400 	.word	0x40010400

08001a20 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a20:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a22:	4b05      	ldr	r3, [pc, #20]	@ (8001a38 <EXTI0_1_IRQHandler+0x18>)
 8001a24:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001a26:	07db      	lsls	r3, r3, #31
 8001a28:	d400      	bmi.n	8001a2c <EXTI0_1_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a2a:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a2c:	4b02      	ldr	r3, [pc, #8]	@ (8001a38 <EXTI0_1_IRQHandler+0x18>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	615a      	str	r2, [r3, #20]
    GPIO_EXTI0_Callback();
 8001a32:	f000 fe75 	bl	8002720 <GPIO_EXTI0_Callback>
}
 8001a36:	e7f8      	b.n	8001a2a <EXTI0_1_IRQHandler+0xa>
 8001a38:	40010400 	.word	0x40010400

08001a3c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a3c:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <EXTI2_3_IRQHandler+0x2c>)
 8001a40:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001a42:	075b      	lsls	r3, r3, #29
 8001a44:	d404      	bmi.n	8001a50 <EXTI2_3_IRQHandler+0x14>
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <EXTI2_3_IRQHandler+0x2c>)
 8001a48:	695b      	ldr	r3, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
    GPIO_EXTI3_Callback();
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8001a4a:	071b      	lsls	r3, r3, #28
 8001a4c:	d406      	bmi.n	8001a5c <EXTI2_3_IRQHandler+0x20>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a4e:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <EXTI2_3_IRQHandler+0x2c>)
 8001a52:	2204      	movs	r2, #4
 8001a54:	615a      	str	r2, [r3, #20]
    GPIO_EXTI3_Callback();
 8001a56:	f000 fe5d 	bl	8002714 <GPIO_EXTI3_Callback>
 8001a5a:	e7f4      	b.n	8001a46 <EXTI2_3_IRQHandler+0xa>
 8001a5c:	4b02      	ldr	r3, [pc, #8]	@ (8001a68 <EXTI2_3_IRQHandler+0x2c>)
 8001a5e:	2208      	movs	r2, #8
 8001a60:	615a      	str	r2, [r3, #20]
    dwt_isr();
 8001a62:	f002 f949 	bl	8003cf8 <dwt_isr>
}
 8001a66:	e7f2      	b.n	8001a4e <EXTI2_3_IRQHandler+0x12>
 8001a68:	40010400 	.word	0x40010400

08001a6c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a6c:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <EXTI4_15_IRQHandler+0x18>)
 8001a70:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001a72:	069b      	lsls	r3, r3, #26
 8001a74:	d400      	bmi.n	8001a78 <EXTI4_15_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a76:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 8001a78:	4b02      	ldr	r3, [pc, #8]	@ (8001a84 <EXTI4_15_IRQHandler+0x18>)
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	615a      	str	r2, [r3, #20]
    GPIO_EXTI4_15_Callback();
 8001a7e:	f001 f8e0 	bl	8002c42 <GPIO_EXTI4_15_Callback>
}
 8001a82:	e7f8      	b.n	8001a76 <EXTI4_15_IRQHandler+0xa>
 8001a84:	40010400 	.word	0x40010400

08001a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a88:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART2_IRQHandler();
 8001a8a:	f000 fff1 	bl	8002a70 <UART2_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8e:	bd10      	pop	{r4, pc}

08001a90 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001a90:	2001      	movs	r0, #1
 8001a92:	4770      	bx	lr

08001a94 <_kill>:

int _kill(int pid, int sig)
{
 8001a94:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a96:	f003 ff4f 	bl	8005938 <__errno>
 8001a9a:	2316      	movs	r3, #22
 8001a9c:	6003      	str	r3, [r0, #0]
  return -1;
 8001a9e:	2001      	movs	r0, #1
}
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	bd10      	pop	{r4, pc}

08001aa4 <_exit>:

void _exit (int status)
{
 8001aa4:	b510      	push	{r4, lr}
  _kill(status, -1);
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	4249      	negs	r1, r1
 8001aaa:	f7ff fff3 	bl	8001a94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aae:	e7fe      	b.n	8001aae <_exit+0xa>

08001ab0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	000c      	movs	r4, r1
 8001ab4:	0016      	movs	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2500      	movs	r5, #0
 8001ab8:	e004      	b.n	8001ac4 <_read+0x14>
  {
    *ptr++ = __io_getchar();
 8001aba:	e000      	b.n	8001abe <_read+0xe>
 8001abc:	bf00      	nop
 8001abe:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001ac2:	3401      	adds	r4, #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	42b5      	cmp	r5, r6
 8001ac6:	dbf8      	blt.n	8001aba <_read+0xa>
  }

  return len;
}
 8001ac8:	0030      	movs	r0, r6
 8001aca:	bd70      	pop	{r4, r5, r6, pc}

08001acc <_close>:
}

int _close(int file)
{
  (void)file;
  return -1;
 8001acc:	2001      	movs	r0, #1
}
 8001ace:	4240      	negs	r0, r0
 8001ad0:	4770      	bx	lr

08001ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001ad8:	2000      	movs	r0, #0
 8001ada:	4770      	bx	lr

08001adc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001adc:	2001      	movs	r0, #1
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	4770      	bx	lr

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b1c <_sbrk+0x38>)
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <_sbrk+0x3c>)
 8001aec:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <_sbrk+0x40>)
 8001af0:	6809      	ldr	r1, [r1, #0]
 8001af2:	2900      	cmp	r1, #0
 8001af4:	d007      	beq.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	490b      	ldr	r1, [pc, #44]	@ (8001b24 <_sbrk+0x40>)
 8001af8:	6808      	ldr	r0, [r1, #0]
 8001afa:	18c3      	adds	r3, r0, r3
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d806      	bhi.n	8001b0e <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b00:	4a08      	ldr	r2, [pc, #32]	@ (8001b24 <_sbrk+0x40>)
 8001b02:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001b04:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001b06:	4907      	ldr	r1, [pc, #28]	@ (8001b24 <_sbrk+0x40>)
 8001b08:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <_sbrk+0x44>)
 8001b0a:	6008      	str	r0, [r1, #0]
 8001b0c:	e7f3      	b.n	8001af6 <_sbrk+0x12>
    errno = ENOMEM;
 8001b0e:	f003 ff13 	bl	8005938 <__errno>
 8001b12:	230c      	movs	r3, #12
 8001b14:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b16:	2001      	movs	r0, #1
 8001b18:	4240      	negs	r0, r0
 8001b1a:	e7f3      	b.n	8001b04 <_sbrk+0x20>
 8001b1c:	20002000 	.word	0x20002000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	2000022c 	.word	0x2000022c
 8001b28:	200006e8 	.word	0x200006e8

08001b2c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	4770      	bx	lr
	...

08001b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001b30:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001b32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b34:	f7ff fffa 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b3a:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <LoopForever+0xe>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b50:	4c0a      	ldr	r4, [pc, #40]	@ (8001b7c <LoopForever+0x16>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b5e:	f003 fef1 	bl	8005944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b62:	f7ff fea1 	bl	80018a8 <main>

08001b66 <LoopForever>:

LoopForever:
    b LoopForever
 8001b66:	e7fe      	b.n	8001b66 <LoopForever>
   ldr   r0, =_estack
 8001b68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b70:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b74:	08007a6c 	.word	0x08007a6c
  ldr r2, =_sbss
 8001b78:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001b7c:	200006e8 	.word	0x200006e8

08001b80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b80:	e7fe      	b.n	8001b80 <ADC1_COMP_IRQHandler>
	...

08001b84 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001b84:	b510      	push	{r4, lr}
 8001b86:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001b88:	7900      	ldrb	r0, [r0, #4]
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d04e      	beq.n	8001c2c <LL_EXTI_Init+0xa8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d055      	beq.n	8001c40 <LL_EXTI_Init+0xbc>
    {
      switch (EXTI_InitStruct->Mode)
 8001b94:	7958      	ldrb	r0, [r3, #5]
 8001b96:	2801      	cmp	r0, #1
 8001b98:	d01e      	beq.n	8001bd8 <LL_EXTI_Init+0x54>
 8001b9a:	2802      	cmp	r0, #2
 8001b9c:	d026      	beq.n	8001bec <LL_EXTI_Init+0x68>
 8001b9e:	2800      	cmp	r0, #0
 8001ba0:	d12e      	bne.n	8001c00 <LL_EXTI_Init+0x7c>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001ba2:	4929      	ldr	r1, [pc, #164]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001ba4:	684c      	ldr	r4, [r1, #4]
 8001ba6:	4394      	bics	r4, r2
 8001ba8:	604c      	str	r4, [r1, #4]
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001baa:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001bac:	680c      	ldr	r4, [r1, #0]
 8001bae:	4322      	orrs	r2, r4
 8001bb0:	600a      	str	r2, [r1, #0]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001bb2:	799a      	ldrb	r2, [r3, #6]
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d042      	beq.n	8001c3e <LL_EXTI_Init+0xba>
      {
        switch (EXTI_InitStruct->Trigger)
 8001bb8:	2a02      	cmp	r2, #2
 8001bba:	d023      	beq.n	8001c04 <LL_EXTI_Init+0x80>
 8001bbc:	2a03      	cmp	r2, #3
 8001bbe:	d02b      	beq.n	8001c18 <LL_EXTI_Init+0x94>
 8001bc0:	2a01      	cmp	r2, #1
 8001bc2:	d13f      	bne.n	8001c44 <LL_EXTI_Init+0xc0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001bc4:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001bc6:	4a20      	ldr	r2, [pc, #128]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001bc8:	68d1      	ldr	r1, [r2, #12]
 8001bca:	43a1      	bics	r1, r4
 8001bcc:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001bce:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001bd0:	6891      	ldr	r1, [r2, #8]
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6093      	str	r3, [r2, #8]
}
 8001bd6:	e032      	b.n	8001c3e <LL_EXTI_Init+0xba>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001bd8:	491b      	ldr	r1, [pc, #108]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001bda:	6808      	ldr	r0, [r1, #0]
 8001bdc:	4390      	bics	r0, r2
 8001bde:	6008      	str	r0, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001be0:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001be2:	6848      	ldr	r0, [r1, #4]
 8001be4:	4302      	orrs	r2, r0
 8001be6:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8001be8:	2000      	movs	r0, #0
}
 8001bea:	e7e2      	b.n	8001bb2 <LL_EXTI_Init+0x2e>
  SET_BIT(EXTI->IMR, ExtiLine);
 8001bec:	4916      	ldr	r1, [pc, #88]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001bee:	6808      	ldr	r0, [r1, #0]
 8001bf0:	4302      	orrs	r2, r0
 8001bf2:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001bf4:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001bf6:	6848      	ldr	r0, [r1, #4]
 8001bf8:	4302      	orrs	r2, r0
 8001bfa:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8001bfc:	2000      	movs	r0, #0
}
 8001bfe:	e7d8      	b.n	8001bb2 <LL_EXTI_Init+0x2e>
      switch (EXTI_InitStruct->Mode)
 8001c00:	2001      	movs	r0, #1
 8001c02:	e7d6      	b.n	8001bb2 <LL_EXTI_Init+0x2e>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c04:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001c06:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001c08:	6891      	ldr	r1, [r2, #8]
 8001c0a:	43a1      	bics	r1, r4
 8001c0c:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c0e:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001c10:	68d1      	ldr	r1, [r2, #12]
 8001c12:	430b      	orrs	r3, r1
 8001c14:	60d3      	str	r3, [r2, #12]
}
 8001c16:	e012      	b.n	8001c3e <LL_EXTI_Init+0xba>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c18:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001c1c:	6894      	ldr	r4, [r2, #8]
 8001c1e:	4321      	orrs	r1, r4
 8001c20:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001c22:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8001c24:	68d1      	ldr	r1, [r2, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	60d3      	str	r3, [r2, #12]
}
 8001c2a:	e008      	b.n	8001c3e <LL_EXTI_Init+0xba>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c2c:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001c2e:	4a06      	ldr	r2, [pc, #24]	@ (8001c48 <LL_EXTI_Init+0xc4>)
 8001c30:	6811      	ldr	r1, [r2, #0]
 8001c32:	43a1      	bics	r1, r4
 8001c34:	6011      	str	r1, [r2, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c36:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8001c38:	6853      	ldr	r3, [r2, #4]
 8001c3a:	438b      	bics	r3, r1
 8001c3c:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8001c3e:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8001c40:	2000      	movs	r0, #0
 8001c42:	e7fc      	b.n	8001c3e <LL_EXTI_Init+0xba>
        switch (EXTI_InitStruct->Trigger)
 8001c44:	2001      	movs	r0, #1
 8001c46:	e7fa      	b.n	8001c3e <LL_EXTI_Init+0xba>
 8001c48:	40010400 	.word	0x40010400

08001c4c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8001c4e:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001c50:	e016      	b.n	8001c80 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c52:	690b      	ldr	r3, [r1, #16]
 8001c54:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001c56:	68c4      	ldr	r4, [r0, #12]
 8001c58:	002b      	movs	r3, r5
 8001c5a:	436b      	muls	r3, r5
 8001c5c:	005e      	lsls	r6, r3, #1
 8001c5e:	18f6      	adds	r6, r6, r3
 8001c60:	43f7      	mvns	r7, r6
 8001c62:	43b4      	bics	r4, r6
 8001c64:	4666      	mov	r6, ip
 8001c66:	435e      	muls	r6, r3
 8001c68:	4334      	orrs	r4, r6
 8001c6a:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c6c:	684c      	ldr	r4, [r1, #4]
 8001c6e:	2c02      	cmp	r4, #2
 8001c70:	d026      	beq.n	8001cc0 <LL_GPIO_Init+0x74>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c72:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001c74:	6804      	ldr	r4, [r0, #0]
 8001c76:	403c      	ands	r4, r7
 8001c78:	436b      	muls	r3, r5
 8001c7a:	4323      	orrs	r3, r4
 8001c7c:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8001c7e:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001c80:	680c      	ldr	r4, [r1, #0]
 8001c82:	0023      	movs	r3, r4
 8001c84:	40d3      	lsrs	r3, r2
 8001c86:	d03b      	beq.n	8001d00 <LL_GPIO_Init+0xb4>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001c88:	2301      	movs	r3, #1
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	0025      	movs	r5, r4
 8001c8e:	401d      	ands	r5, r3
    if (currentpin)
 8001c90:	421c      	tst	r4, r3
 8001c92:	d0f4      	beq.n	8001c7e <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c94:	684b      	ldr	r3, [r1, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d8da      	bhi.n	8001c52 <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c9c:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001c9e:	6883      	ldr	r3, [r0, #8]
 8001ca0:	002c      	movs	r4, r5
 8001ca2:	436c      	muls	r4, r5
 8001ca4:	0066      	lsls	r6, r4, #1
 8001ca6:	1936      	adds	r6, r6, r4
 8001ca8:	43b3      	bics	r3, r6
 8001caa:	437c      	muls	r4, r7
 8001cac:	4323      	orrs	r3, r4
 8001cae:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001cb0:	680e      	ldr	r6, [r1, #0]
 8001cb2:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cb4:	6843      	ldr	r3, [r0, #4]
 8001cb6:	43b3      	bics	r3, r6
 8001cb8:	4374      	muls	r4, r6
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	6043      	str	r3, [r0, #4]
}
 8001cbe:	e7c8      	b.n	8001c52 <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8001cc0:	2dff      	cmp	r5, #255	@ 0xff
 8001cc2:	d80d      	bhi.n	8001ce0 <LL_GPIO_Init+0x94>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001cc4:	694c      	ldr	r4, [r1, #20]
 8001cc6:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001cc8:	6a06      	ldr	r6, [r0, #32]
 8001cca:	001c      	movs	r4, r3
 8001ccc:	436c      	muls	r4, r5
 8001cce:	436c      	muls	r4, r5
 8001cd0:	0125      	lsls	r5, r4, #4
 8001cd2:	1b2d      	subs	r5, r5, r4
 8001cd4:	43ae      	bics	r6, r5
 8001cd6:	4665      	mov	r5, ip
 8001cd8:	436c      	muls	r4, r5
 8001cda:	4334      	orrs	r4, r6
 8001cdc:	6204      	str	r4, [r0, #32]
}
 8001cde:	e7c8      	b.n	8001c72 <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ce0:	694c      	ldr	r4, [r1, #20]
 8001ce2:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001ce4:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8001ce6:	0a2d      	lsrs	r5, r5, #8
 8001ce8:	002c      	movs	r4, r5
 8001cea:	436c      	muls	r4, r5
 8001cec:	436c      	muls	r4, r5
 8001cee:	436c      	muls	r4, r5
 8001cf0:	0125      	lsls	r5, r4, #4
 8001cf2:	1b2d      	subs	r5, r5, r4
 8001cf4:	43ae      	bics	r6, r5
 8001cf6:	4665      	mov	r5, ip
 8001cf8:	436c      	muls	r4, r5
 8001cfa:	4334      	orrs	r4, r6
 8001cfc:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8001cfe:	e7b8      	b.n	8001c72 <LL_GPIO_Init+0x26>
  }


  return (SUCCESS);
}
 8001d00:	2000      	movs	r0, #0
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d04 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8001d04:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001d06:	6803      	ldr	r3, [r0, #0]
 8001d08:	2501      	movs	r5, #1
 8001d0a:	43ab      	bics	r3, r5
 8001d0c:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8001d0e:	688a      	ldr	r2, [r1, #8]
 8001d10:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	4e16      	ldr	r6, [pc, #88]	@ (8001d70 <LL_I2C_Init+0x6c>)
 8001d16:	4033      	ands	r3, r6
 8001d18:	0224      	lsls	r4, r4, #8
 8001d1a:	4322      	orrs	r2, r4
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8001d20:	684b      	ldr	r3, [r1, #4]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001d22:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001d24:	6803      	ldr	r3, [r0, #0]
 8001d26:	432b      	orrs	r3, r5
 8001d28:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001d2a:	6883      	ldr	r3, [r0, #8]
 8001d2c:	4a11      	ldr	r2, [pc, #68]	@ (8001d74 <LL_I2C_Init+0x70>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	6083      	str	r3, [r0, #8]
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001d32:	690a      	ldr	r2, [r1, #16]
 8001d34:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8001d36:	6883      	ldr	r3, [r0, #8]
 8001d38:	0adb      	lsrs	r3, r3, #11
 8001d3a:	02db      	lsls	r3, r3, #11
 8001d3c:	4322      	orrs	r2, r4
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	6083      	str	r3, [r0, #8]

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001d42:	690b      	ldr	r3, [r1, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8001d48:	6882      	ldr	r2, [r0, #8]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	6083      	str	r3, [r0, #8]

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001d52:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8001d54:	6802      	ldr	r2, [r0, #0]
 8001d56:	4c08      	ldr	r4, [pc, #32]	@ (8001d78 <LL_I2C_Init+0x74>)
 8001d58:	4022      	ands	r2, r4
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001d5e:	694b      	ldr	r3, [r1, #20]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001d60:	6842      	ldr	r2, [r0, #4]
 8001d62:	4904      	ldr	r1, [pc, #16]	@ (8001d74 <LL_I2C_Init+0x70>)
 8001d64:	400a      	ands	r2, r1
 8001d66:	4313      	orrs	r3, r2
 8001d68:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
 8001d6e:	46c0      	nop			@ (mov r8, r8)
 8001d70:	ffffe0ff 	.word	0xffffe0ff
 8001d74:	ffff7fff 	.word	0xffff7fff
 8001d78:	ffcfffff 	.word	0xffcfffff

08001d7c <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <RCC_GetHCLKClockFreq+0x14>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001d80:	0912      	lsrs	r2, r2, #4
 8001d82:	230f      	movs	r3, #15
 8001d84:	4013      	ands	r3, r2
 8001d86:	4a03      	ldr	r2, [pc, #12]	@ (8001d94 <RCC_GetHCLKClockFreq+0x18>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	40d8      	lsrs	r0, r3
}
 8001d8c:	4770      	bx	lr
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08007188 	.word	0x08007188

08001d98 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d98:	4b04      	ldr	r3, [pc, #16]	@ (8001dac <RCC_GetPCLK1ClockFreq+0x14>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001d9c:	0a12      	lsrs	r2, r2, #8
 8001d9e:	2307      	movs	r3, #7
 8001da0:	4013      	ands	r3, r2
 8001da2:	4a03      	ldr	r2, [pc, #12]	@ (8001db0 <RCC_GetPCLK1ClockFreq+0x18>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	40d8      	lsrs	r0, r3
}
 8001da8:	4770      	bx	lr
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08007180 	.word	0x08007180

08001db4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001db4:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8001db8:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8001dba:	03db      	lsls	r3, r3, #15
 8001dbc:	d405      	bmi.n	8001dca <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	06db      	lsls	r3, r3, #27
 8001dc4:	d512      	bpl.n	8001dec <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001dc6:	480b      	ldr	r0, [pc, #44]	@ (8001df4 <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8001dc8:	e000      	b.n	8001dcc <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001dca:	480b      	ldr	r0, [pc, #44]	@ (8001df8 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001dcc:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8001dce:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001dd0:	0c92      	lsrs	r2, r2, #18
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	4a09      	ldr	r2, [pc, #36]	@ (8001dfc <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001ddc:	68cb      	ldr	r3, [r1, #12]
 8001dde:	0d9b      	lsrs	r3, r3, #22
 8001de0:	2103      	movs	r1, #3
 8001de2:	4019      	ands	r1, r3
 8001de4:	3101      	adds	r1, #1
 8001de6:	f7fe f9ab 	bl	8000140 <__udivsi3>
}
 8001dea:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8001dec:	4804      	ldr	r0, [pc, #16]	@ (8001e00 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8001dee:	e7ed      	b.n	8001dcc <RCC_PLL_GetFreqDomain_SYS+0x18>
 8001df0:	40021000 	.word	0x40021000
 8001df4:	003d0900 	.word	0x003d0900
 8001df8:	007a1200 	.word	0x007a1200
 8001dfc:	08007174 	.word	0x08007174
 8001e00:	00f42400 	.word	0x00f42400

08001e04 <RCC_GetSystemClockFreq>:
{
 8001e04:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e06:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <RCC_GetSystemClockFreq+0x60>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d023      	beq.n	8001e5a <RCC_GetSystemClockFreq+0x56>
 8001e12:	d809      	bhi.n	8001e28 <RCC_GetSystemClockFreq+0x24>
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00c      	beq.n	8001e32 <RCC_GetSystemClockFreq+0x2e>
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d114      	bne.n	8001e46 <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <RCC_GetSystemClockFreq+0x60>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	06db      	lsls	r3, r3, #27
 8001e22:	d51c      	bpl.n	8001e5e <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8001e24:	4810      	ldr	r0, [pc, #64]	@ (8001e68 <RCC_GetSystemClockFreq+0x64>)
 8001e26:	e00d      	b.n	8001e44 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d10c      	bne.n	8001e46 <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e2c:	f7ff ffc2 	bl	8001db4 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8001e30:	e008      	b.n	8001e44 <RCC_GetSystemClockFreq+0x40>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <RCC_GetSystemClockFreq+0x60>)
 8001e34:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e36:	0b52      	lsrs	r2, r2, #13
 8001e38:	2307      	movs	r3, #7
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	2080      	movs	r0, #128	@ 0x80
 8001e40:	0200      	lsls	r0, r0, #8
 8001e42:	4098      	lsls	r0, r3
}
 8001e44:	bd10      	pop	{r4, pc}
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <RCC_GetSystemClockFreq+0x60>)
 8001e48:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e4a:	0b52      	lsrs	r2, r2, #13
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	3301      	adds	r3, #1
 8001e52:	2080      	movs	r0, #128	@ 0x80
 8001e54:	0200      	lsls	r0, r0, #8
 8001e56:	4098      	lsls	r0, r3
      break;
 8001e58:	e7f4      	b.n	8001e44 <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8001e5a:	4804      	ldr	r0, [pc, #16]	@ (8001e6c <RCC_GetSystemClockFreq+0x68>)
 8001e5c:	e7f2      	b.n	8001e44 <RCC_GetSystemClockFreq+0x40>
        frequency = HSI_VALUE;
 8001e5e:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 8001e60:	e7f0      	b.n	8001e44 <RCC_GetSystemClockFreq+0x40>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	40021000 	.word	0x40021000
 8001e68:	003d0900 	.word	0x003d0900
 8001e6c:	007a1200 	.word	0x007a1200
 8001e70:	00f42400 	.word	0x00f42400

08001e74 <LL_RCC_GetUSARTClockFreq>:
{
 8001e74:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001e76:	280c      	cmp	r0, #12
 8001e78:	d001      	beq.n	8001e7e <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e7a:	2000      	movs	r0, #0
}
 8001e7c:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001e7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <LL_RCC_GetUSARTClockFreq+0x70>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	4003      	ands	r3, r0
 8001e84:	0400      	lsls	r0, r0, #16
 8001e86:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e88:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <LL_RCC_GetUSARTClockFreq+0x74>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d008      	beq.n	8001ea0 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001e8e:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <LL_RCC_GetUSARTClockFreq+0x78>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d012      	beq.n	8001eba <LL_RCC_GetUSARTClockFreq+0x46>
 8001e94:	4a16      	ldr	r2, [pc, #88]	@ (8001ef0 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d11a      	bne.n	8001ed0 <LL_RCC_GetUSARTClockFreq+0x5c>
        usart_frequency = RCC_GetSystemClockFreq();
 8001e9a:	f7ff ffb3 	bl	8001e04 <RCC_GetSystemClockFreq>
        break;
 8001e9e:	e7ed      	b.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001ea0:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <LL_RCC_GetUSARTClockFreq+0x70>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	4018      	ands	r0, r3
 8001eaa:	421a      	tst	r2, r3
 8001eac:	d0e6      	beq.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001eae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <LL_RCC_GetUSARTClockFreq+0x70>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	06db      	lsls	r3, r3, #27
 8001eb4:	d413      	bmi.n	8001ede <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8001eb6:	480f      	ldr	r0, [pc, #60]	@ (8001ef4 <LL_RCC_GetUSARTClockFreq+0x80>)
 8001eb8:	e7e0      	b.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <LL_RCC_GetUSARTClockFreq+0x70>)
 8001ebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	0010      	movs	r0, r2
 8001ec4:	4018      	ands	r0, r3
 8001ec6:	421a      	tst	r2, r3
 8001ec8:	d0d8      	beq.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8001eca:	2080      	movs	r0, #128	@ 0x80
 8001ecc:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8001ece:	e7d5      	b.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ed0:	f7ff ff98 	bl	8001e04 <RCC_GetSystemClockFreq>
 8001ed4:	f7ff ff52 	bl	8001d7c <RCC_GetHCLKClockFreq>
 8001ed8:	f7ff ff5e 	bl	8001d98 <RCC_GetPCLK1ClockFreq>
        break;
 8001edc:	e7ce      	b.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8001ede:	4806      	ldr	r0, [pc, #24]	@ (8001ef8 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001ee0:	e7cc      	b.n	8001e7c <LL_RCC_GetUSARTClockFreq+0x8>
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	000c0008 	.word	0x000c0008
 8001eec:	000c000c 	.word	0x000c000c
 8001ef0:	000c0004 	.word	0x000c0004
 8001ef4:	00f42400 	.word	0x00f42400
 8001ef8:	003d0900 	.word	0x003d0900

08001efc <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8001efc:	b510      	push	{r4, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	0004      	movs	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8001f02:	23fa      	movs	r3, #250	@ 0xfa
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8001f08:	68c3      	ldr	r3, [r0, #12]
 8001f0a:	065b      	lsls	r3, r3, #25
 8001f0c:	d423      	bmi.n	8001f56 <LL_RTC_EnterInitMode+0x5a>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8001f0e:	2301      	movs	r3, #1
 8001f10:	425b      	negs	r3, r3
 8001f12:	60c3      	str	r3, [r0, #12]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8001f14:	68c3      	ldr	r3, [r0, #12]
 8001f16:	2240      	movs	r2, #64	@ 0x40
 8001f18:	0011      	movs	r1, r2
 8001f1a:	4019      	ands	r1, r3
 8001f1c:	421a      	tst	r2, r3
 8001f1e:	d118      	bne.n	8001f52 <LL_RTC_EnterInitMode+0x56>
        timeout --;
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
      if (timeout == 0U)
      {
        status = ERROR;
 8001f20:	2000      	movs	r0, #0
    while ((timeout != 0U) && (tmp != 1U))
 8001f22:	9b01      	ldr	r3, [sp, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <LL_RTC_EnterInitMode+0x5c>
 8001f28:	2901      	cmp	r1, #1
 8001f2a:	d015      	beq.n	8001f58 <LL_RTC_EnterInitMode+0x5c>
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <LL_RTC_EnterInitMode+0x60>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001f30:	03db      	lsls	r3, r3, #15
 8001f32:	d502      	bpl.n	8001f3a <LL_RTC_EnterInitMode+0x3e>
        timeout --;
 8001f34:	9b01      	ldr	r3, [sp, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	68e3      	ldr	r3, [r4, #12]
 8001f3c:	2240      	movs	r2, #64	@ 0x40
 8001f3e:	0011      	movs	r1, r2
 8001f40:	4019      	ands	r1, r3
 8001f42:	421a      	tst	r2, r3
 8001f44:	d000      	beq.n	8001f48 <LL_RTC_EnterInitMode+0x4c>
 8001f46:	2101      	movs	r1, #1
      if (timeout == 0U)
 8001f48:	9b01      	ldr	r3, [sp, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e9      	bne.n	8001f22 <LL_RTC_EnterInitMode+0x26>
        status = ERROR;
 8001f4e:	2001      	movs	r0, #1
 8001f50:	e7e7      	b.n	8001f22 <LL_RTC_EnterInitMode+0x26>
 8001f52:	2101      	movs	r1, #1
 8001f54:	e7e4      	b.n	8001f20 <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 8001f56:	2000      	movs	r0, #0
      }
    }
  }
  return status;
}
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	e000e010 	.word	0xe000e010

08001f60 <LL_RTC_Init>:
{
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	0004      	movs	r4, r0
 8001f64:	000d      	movs	r5, r1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001f66:	23ca      	movs	r3, #202	@ 0xca
 8001f68:	6243      	str	r3, [r0, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001f6a:	3b77      	subs	r3, #119	@ 0x77
 8001f6c:	6243      	str	r3, [r0, #36]	@ 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001f6e:	f7ff ffc5 	bl	8001efc <LL_RTC_EnterInitMode>
 8001f72:	2801      	cmp	r0, #1
 8001f74:	d016      	beq.n	8001fa4 <LL_RTC_Init+0x44>
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 8001f76:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001f78:	68a2      	ldr	r2, [r4, #8]
 8001f7a:	2140      	movs	r1, #64	@ 0x40
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60a3      	str	r3, [r4, #8]
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 8001f82:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8001f84:	6923      	ldr	r3, [r4, #16]
 8001f86:	0bdb      	lsrs	r3, r3, #15
 8001f88:	03db      	lsls	r3, r3, #15
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	6123      	str	r3, [r4, #16]
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001f8e:	686a      	ldr	r2, [r5, #4]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001f90:	6923      	ldr	r3, [r4, #16]
 8001f92:	4906      	ldr	r1, [pc, #24]	@ (8001fac <LL_RTC_Init+0x4c>)
 8001f94:	400b      	ands	r3, r1
 8001f96:	0412      	lsls	r2, r2, #16
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001f9c:	2381      	movs	r3, #129	@ 0x81
 8001f9e:	425b      	negs	r3, r3
 8001fa0:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 8001fa2:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001fa4:	23ff      	movs	r3, #255	@ 0xff
 8001fa6:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	ff80ffff 	.word	0xff80ffff

08001fb0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001fb0:	b510      	push	{r4, lr}
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001fb2:	6803      	ldr	r3, [r0, #0]
 8001fb4:	065b      	lsls	r3, r3, #25
 8001fb6:	d428      	bmi.n	800200a <LL_SPI_Init+0x5a>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001fb8:	6803      	ldr	r3, [r0, #0]
 8001fba:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <LL_SPI_Init+0x60>)
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	680b      	ldr	r3, [r1, #0]
 8001fc0:	684c      	ldr	r4, [r1, #4]
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	688c      	ldr	r4, [r1, #8]
 8001fc6:	4323      	orrs	r3, r4
 8001fc8:	68cc      	ldr	r4, [r1, #12]
 8001fca:	4323      	orrs	r3, r4
 8001fcc:	690c      	ldr	r4, [r1, #16]
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	694c      	ldr	r4, [r1, #20]
 8001fd2:	4323      	orrs	r3, r4
 8001fd4:	698c      	ldr	r4, [r1, #24]
 8001fd6:	4323      	orrs	r3, r4
 8001fd8:	69cc      	ldr	r4, [r1, #28]
 8001fda:	4323      	orrs	r3, r4
 8001fdc:	6a0c      	ldr	r4, [r1, #32]
 8001fde:	4323      	orrs	r3, r4
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	6003      	str	r3, [r0, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001fe4:	6843      	ldr	r3, [r0, #4]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	4393      	bics	r3, r2
 8001fea:	8aca      	ldrh	r2, [r1, #22]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001ff0:	6a0a      	ldr	r2, [r1, #32]
 8001ff2:	2380      	movs	r3, #128	@ 0x80
 8001ff4:	019b      	lsls	r3, r3, #6
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <LL_SPI_Init+0x4e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e006      	b.n	800200c <LL_SPI_Init+0x5c>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001ffe:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002000:	041b      	lsls	r3, r3, #16
 8002002:	0c1b      	lsrs	r3, r3, #16
 8002004:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 8002006:	2000      	movs	r0, #0
}
 8002008:	e000      	b.n	800200c <LL_SPI_Init+0x5c>
  ErrorStatus status = ERROR;
 800200a:	2001      	movs	r0, #1
#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 800200c:	bd10      	pop	{r4, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	ffff0040 	.word	0xffff0040

08002014 <LL_USART_SetBaudRate>:
{
 8002014:	b570      	push	{r4, r5, r6, lr}
 8002016:	0005      	movs	r5, r0
 8002018:	000c      	movs	r4, r1
 800201a:	0019      	movs	r1, r3
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	429a      	cmp	r2, r3
 8002022:	d007      	beq.n	8002034 <LL_USART_SetBaudRate+0x20>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002024:	0848      	lsrs	r0, r1, #1
 8002026:	1900      	adds	r0, r0, r4
 8002028:	f7fe f88a 	bl	8000140 <__udivsi3>
 800202c:	0400      	lsls	r0, r0, #16
 800202e:	0c00      	lsrs	r0, r0, #16
 8002030:	60e8      	str	r0, [r5, #12]
}
 8002032:	bd70      	pop	{r4, r5, r6, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002034:	0064      	lsls	r4, r4, #1
 8002036:	0848      	lsrs	r0, r1, #1
 8002038:	1820      	adds	r0, r4, r0
 800203a:	f7fe f881 	bl	8000140 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <LL_USART_SetBaudRate+0x3c>)
 8002040:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002042:	0400      	lsls	r0, r0, #16
 8002044:	0c40      	lsrs	r0, r0, #17
 8002046:	2307      	movs	r3, #7
 8002048:	4003      	ands	r3, r0
 800204a:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800204c:	60eb      	str	r3, [r5, #12]
 800204e:	e7f0      	b.n	8002032 <LL_USART_SetBaudRate+0x1e>
 8002050:	0000fff0 	.word	0x0000fff0

08002054 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	0004      	movs	r4, r0
 8002058:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800205a:	6803      	ldr	r3, [r0, #0]
 800205c:	07db      	lsls	r3, r3, #31
 800205e:	d42d      	bmi.n	80020bc <LL_USART_Init+0x68>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002060:	6803      	ldr	r3, [r0, #0]
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <LL_USART_Init+0x70>)
 8002064:	401a      	ands	r2, r3
 8002066:	684b      	ldr	r3, [r1, #4]
 8002068:	68c9      	ldr	r1, [r1, #12]
 800206a:	430b      	orrs	r3, r1
 800206c:	6929      	ldr	r1, [r5, #16]
 800206e:	430b      	orrs	r3, r1
 8002070:	69a9      	ldr	r1, [r5, #24]
 8002072:	430b      	orrs	r3, r1
 8002074:	4313      	orrs	r3, r2
 8002076:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002078:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800207a:	6842      	ldr	r2, [r0, #4]
 800207c:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <LL_USART_Init+0x74>)
 800207e:	400a      	ands	r2, r1
 8002080:	4313      	orrs	r3, r2
 8002082:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002084:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002086:	6882      	ldr	r2, [r0, #8]
 8002088:	4910      	ldr	r1, [pc, #64]	@ (80020cc <LL_USART_Init+0x78>)
 800208a:	400a      	ands	r2, r1
 800208c:	4313      	orrs	r3, r2
 800208e:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <LL_USART_Init+0x7c>)
 8002092:	4298      	cmp	r0, r3
 8002094:	d001      	beq.n	800209a <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 8002096:	2001      	movs	r0, #1
 8002098:	e011      	b.n	80020be <LL_USART_Init+0x6a>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800209a:	200c      	movs	r0, #12
 800209c:	f7ff feea 	bl	8001e74 <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80020a0:	2800      	cmp	r0, #0
 80020a2:	d00d      	beq.n	80020c0 <LL_USART_Init+0x6c>
        && (USART_InitStruct->BaudRate != 0U))
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <LL_USART_Init+0x5a>
  ErrorStatus status = ERROR;
 80020aa:	2001      	movs	r0, #1
 80020ac:	e007      	b.n	80020be <LL_USART_Init+0x6a>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80020ae:	69aa      	ldr	r2, [r5, #24]
      LL_USART_SetBaudRate(USARTx,
 80020b0:	0001      	movs	r1, r0
 80020b2:	0020      	movs	r0, r4
 80020b4:	f7ff ffae 	bl	8002014 <LL_USART_SetBaudRate>
      status = SUCCESS;
 80020b8:	2000      	movs	r0, #0
 80020ba:	e000      	b.n	80020be <LL_USART_Init+0x6a>
  ErrorStatus status = ERROR;
 80020bc:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80020be:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80020c0:	2001      	movs	r0, #1
 80020c2:	e7fc      	b.n	80020be <LL_USART_Init+0x6a>
 80020c4:	efff69f3 	.word	0xefff69f3
 80020c8:	ffffcfff 	.word	0xffffcfff
 80020cc:	fffffcff 	.word	0xfffffcff
 80020d0:	40004400 	.word	0x40004400

080020d4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80020d4:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80020d6:	21fa      	movs	r1, #250	@ 0xfa
 80020d8:	0089      	lsls	r1, r1, #2
 80020da:	f7fe f831 	bl	8000140 <__udivsi3>
 80020de:	3801      	subs	r0, #1
 80020e0:	4b03      	ldr	r3, [pc, #12]	@ (80020f0 <LL_Init1msTick+0x1c>)
 80020e2:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e8:	3205      	adds	r2, #5
 80020ea:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80020f4:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <LL_mDelay+0x24>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80020fc:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80020fe:	1c43      	adds	r3, r0, #1
 8002100:	d000      	beq.n	8002104 <LL_mDelay+0x10>
  {
    Delay++;
 8002102:	3001      	adds	r0, #1
  }

  while (Delay)
 8002104:	2800      	cmp	r0, #0
 8002106:	d005      	beq.n	8002114 <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <LL_mDelay+0x24>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	03db      	lsls	r3, r3, #15
 800210e:	d5f9      	bpl.n	8002104 <LL_mDelay+0x10>
    {
      Delay--;
 8002110:	3801      	subs	r0, #1
 8002112:	e7f7      	b.n	8002104 <LL_mDelay+0x10>
    }
  }
}
 8002114:	b002      	add	sp, #8
 8002116:	4770      	bx	lr
 8002118:	e000e010 	.word	0xe000e010

0800211c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800211c:	4b01      	ldr	r3, [pc, #4]	@ (8002124 <LL_SetSystemCoreClock+0x8>)
 800211e:	6018      	str	r0, [r3, #0]
}
 8002120:	4770      	bx	lr
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	20000000 	.word	0x20000000

08002128 <deca_sleep>:

#include <deca_device_api.h>
#include "port_platform.h"

void deca_sleep(unsigned int time_ms)
{
 8002128:	b510      	push	{r4, lr}
 800212a:	0004      	movs	r4, r0
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = portGetTickCount() + time_ms;
 800212c:	f000 f970 	bl	8002410 <portGetTickCount>
 8002130:	1904      	adds	r4, r0, r4
    while ((signed long)(portGetTickCount() - end) <= 0)
 8002132:	f000 f96d 	bl	8002410 <portGetTickCount>
 8002136:	1b00      	subs	r0, r0, r4
 8002138:	2800      	cmp	r0, #0
 800213a:	ddfa      	ble.n	8002132 <deca_sleep+0xa>
        ;
}
 800213c:	bd10      	pop	{r4, pc}
	...

08002140 <writetospi>:
 */
int writetospi(uint16       headerLength,
               const uint8  *headerBuffer,
               uint32       bodyLength,
               const uint8  *bodyBuffer)
{
 8002140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002142:	0007      	movs	r7, r0
 8002144:	000e      	movs	r6, r1
 8002146:	0015      	movs	r5, r2
 8002148:	001c      	movs	r4, r3

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800214a:	f000 f9cd 	bl	80024e8 <decamutexon>
 800214e:	4684      	mov	ip, r0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <writetospi+0x90>)
 8002152:	2201      	movs	r2, #1
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002156:	e00f      	b.n	8002178 <writetospi+0x38>

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line low */

    while(headerLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8002158:	2900      	cmp	r1, #0
 800215a:	d108      	bne.n	800216e <writetospi+0x2e>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800215c:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <writetospi+0x94>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2202      	movs	r2, #2
 8002162:	0011      	movs	r1, r2
 8002164:	4019      	ands	r1, r3
 8002166:	421a      	tst	r2, r3
 8002168:	d0f6      	beq.n	8002158 <writetospi+0x18>
 800216a:	2101      	movs	r1, #1
 800216c:	e7f4      	b.n	8002158 <writetospi+0x18>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 800216e:	7832      	ldrb	r2, [r6, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8002170:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <writetospi+0x94>)
 8002172:	731a      	strb	r2, [r3, #12]
 8002174:	3601      	adds	r6, #1
    while(headerLength--){
 8002176:	0007      	movs	r7, r0
 8002178:	1e78      	subs	r0, r7, #1
 800217a:	b280      	uxth	r0, r0
 800217c:	2f00      	cmp	r7, #0
 800217e:	d1ed      	bne.n	800215c <writetospi+0x1c>
 8002180:	e00f      	b.n	80021a2 <writetospi+0x62>
    }

    while(bodyLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <writetospi+0x58>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002186:	4a13      	ldr	r2, [pc, #76]	@ (80021d4 <writetospi+0x94>)
 8002188:	6892      	ldr	r2, [r2, #8]
 800218a:	2102      	movs	r1, #2
 800218c:	000b      	movs	r3, r1
 800218e:	4013      	ands	r3, r2
 8002190:	4211      	tst	r1, r2
 8002192:	d0f6      	beq.n	8002182 <writetospi+0x42>
 8002194:	2301      	movs	r3, #1
 8002196:	e7f4      	b.n	8002182 <writetospi+0x42>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *bodyBuffer++);
 8002198:	7822      	ldrb	r2, [r4, #0]
  *spidr = TxData;
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <writetospi+0x94>)
 800219c:	731a      	strb	r2, [r3, #12]
 800219e:	3401      	adds	r4, #1
    while(bodyLength--){
 80021a0:	0035      	movs	r5, r6
 80021a2:	1e6e      	subs	r6, r5, #1
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	d1ee      	bne.n	8002186 <writetospi+0x46>
 80021a8:	e001      	b.n	80021ae <writetospi+0x6e>
    }

    // wait last transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 80021aa:	2900      	cmp	r1, #0
 80021ac:	d008      	beq.n	80021c0 <writetospi+0x80>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <writetospi+0x94>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2280      	movs	r2, #128	@ 0x80
 80021b4:	0011      	movs	r1, r2
 80021b6:	4019      	ands	r1, r3
 80021b8:	421a      	tst	r2, r3
 80021ba:	d0f6      	beq.n	80021aa <writetospi+0x6a>
 80021bc:	2101      	movs	r1, #1
 80021be:	e7f4      	b.n	80021aa <writetospi+0x6a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <writetospi+0x90>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	619a      	str	r2, [r3, #24]
	{
	}

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line high */

    decamutexoff(stat);
 80021c6:	4660      	mov	r0, ip
 80021c8:	f000 f990 	bl	80024ec <decamutexoff>
    return 0;
} // end writetospi()
 80021cc:	2000      	movs	r0, #0
 80021ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021d0:	50000400 	.word	0x50000400
 80021d4:	40013000 	.word	0x40013000

080021d8 <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16      headerLength,
                const uint8 *headerBuffer,
                uint32      readlength,
                uint8       *readBuffer)
{
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	0005      	movs	r5, r0
 80021dc:	000f      	movs	r7, r1
 80021de:	0016      	movs	r6, r2
 80021e0:	001c      	movs	r4, r3
    /* Blocking: Check whether previous transfer has been finished */

	// wait last transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 80021e2:	e001      	b.n	80021e8 <readfromspi+0x10>
 80021e4:	2900      	cmp	r1, #0
 80021e6:	d008      	beq.n	80021fa <readfromspi+0x22>
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <readfromspi+0xc8>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2280      	movs	r2, #128	@ 0x80
 80021ee:	0011      	movs	r1, r2
 80021f0:	4019      	ands	r1, r3
 80021f2:	421a      	tst	r2, r3
 80021f4:	d0f6      	beq.n	80021e4 <readfromspi+0xc>
 80021f6:	2101      	movs	r1, #1
 80021f8:	e7f4      	b.n	80021e4 <readfromspi+0xc>
	{
	}

	/* Process Locked */
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80021fa:	f000 f975 	bl	80024e8 <decamutexon>
  WRITE_REG(GPIOx->BRR, PinMask);
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <readfromspi+0xcc>)
 8002200:	2201      	movs	r2, #1
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002204:	e00f      	b.n	8002226 <readfromspi+0x4e>

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line low */

    /* Send header */
    while(headerLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8002206:	2d00      	cmp	r5, #0
 8002208:	d108      	bne.n	800221c <readfromspi+0x44>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <readfromspi+0xc8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2202      	movs	r2, #2
 8002210:	0015      	movs	r5, r2
 8002212:	401d      	ands	r5, r3
 8002214:	421a      	tst	r2, r3
 8002216:	d0f6      	beq.n	8002206 <readfromspi+0x2e>
 8002218:	2501      	movs	r5, #1
 800221a:	e7f4      	b.n	8002206 <readfromspi+0x2e>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 800221c:	783a      	ldrb	r2, [r7, #0]
  *spidr = TxData;
 800221e:	4b20      	ldr	r3, [pc, #128]	@ (80022a0 <readfromspi+0xc8>)
 8002220:	731a      	strb	r2, [r3, #12]
 8002222:	3701      	adds	r7, #1
    while(headerLength--){
 8002224:	000d      	movs	r5, r1
 8002226:	1e69      	subs	r1, r5, #1
 8002228:	b289      	uxth	r1, r1
 800222a:	2d00      	cmp	r5, #0
 800222c:	d1ed      	bne.n	800220a <readfromspi+0x32>
 800222e:	e001      	b.n	8002234 <readfromspi+0x5c>
    }
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 8002230:	2900      	cmp	r1, #0
 8002232:	d008      	beq.n	8002246 <readfromspi+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002234:	4b1a      	ldr	r3, [pc, #104]	@ (80022a0 <readfromspi+0xc8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	0011      	movs	r1, r2
 800223c:	4019      	ands	r1, r3
 800223e:	421a      	tst	r2, r3
 8002240:	d0f6      	beq.n	8002230 <readfromspi+0x58>
 8002242:	2101      	movs	r1, #1
 8002244:	e7f4      	b.n	8002230 <readfromspi+0x58>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002246:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <readfromspi+0xc8>)
 8002248:	7b1b      	ldrb	r3, [r3, #12]
 800224a:	e01e      	b.n	800228a <readfromspi+0xb2>
    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
    {
        /* Wait until TXE flag is set to send data */
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 800224c:	2a00      	cmp	r2, #0
 800224e:	d108      	bne.n	8002262 <readfromspi+0x8a>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002250:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <readfromspi+0xc8>)
 8002252:	6899      	ldr	r1, [r3, #8]
 8002254:	2302      	movs	r3, #2
 8002256:	001a      	movs	r2, r3
 8002258:	400a      	ands	r2, r1
 800225a:	420b      	tst	r3, r1
 800225c:	d0f6      	beq.n	800224c <readfromspi+0x74>
 800225e:	2201      	movs	r2, #1
 8002260:	e7f4      	b.n	800224c <readfromspi+0x74>
  *spidr = TxData;
 8002262:	4b0f      	ldr	r3, [pc, #60]	@ (80022a0 <readfromspi+0xc8>)
 8002264:	2100      	movs	r1, #0
 8002266:	7319      	strb	r1, [r3, #12]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8002268:	e001      	b.n	800226e <readfromspi+0x96>
    	LL_SPI_TransmitData8(SPI1, 0);   /* set output to 0 (MOSI), this is necessary for
        									e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
    	 	 	 	 	 	 	 	 	 */

        /* Wait until RXNE flag is set to read data */
    	while ( LL_SPI_IsActiveFlag_RXNE(SPI1) == 0 )
 800226a:	2d00      	cmp	r5, #0
 800226c:	d108      	bne.n	8002280 <readfromspi+0xa8>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <readfromspi+0xc8>)
 8002270:	6899      	ldr	r1, [r3, #8]
 8002272:	2301      	movs	r3, #1
 8002274:	001d      	movs	r5, r3
 8002276:	400d      	ands	r5, r1
 8002278:	420b      	tst	r3, r1
 800227a:	d0f6      	beq.n	800226a <readfromspi+0x92>
 800227c:	0015      	movs	r5, r2
 800227e:	e7f4      	b.n	800226a <readfromspi+0x92>
  return (*((__IO uint8_t *)&SPIx->DR));
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <readfromspi+0xc8>)
 8002282:	7b1b      	ldrb	r3, [r3, #12]
    	{
    	}

    	(*readBuffer++) = LL_SPI_ReceiveData8(SPI1);
 8002284:	7023      	strb	r3, [r4, #0]
 8002286:	3401      	adds	r4, #1
    while(readlength-- > 0)
 8002288:	003e      	movs	r6, r7
 800228a:	1e77      	subs	r7, r6, #1
 800228c:	2e00      	cmp	r6, #0
 800228e:	d1df      	bne.n	8002250 <readfromspi+0x78>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <readfromspi+0xcc>)
 8002292:	2201      	movs	r2, #1
 8002294:	619a      	str	r2, [r3, #24]
    }

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line high */

    /* Process Unlocked */
    decamutexoff(stat);
 8002296:	f000 f929 	bl	80024ec <decamutexoff>
    return 0;
} // end readfromspi()
 800229a:	2000      	movs	r0, #0
 800229c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800229e:	46c0      	nop			@ (mov r8, r8)
 80022a0:	40013000 	.word	0x40013000
 80022a4:	50000400 	.word	0x50000400

080022a8 <__io_putchar>:
 *                              Uart Configuration
 *
 ******************************************************************************/

int __io_putchar (int ch)
{
 80022a8:	e001      	b.n	80022ae <__io_putchar+0x6>
	// TODO need to implement timeout
	// or may be not...
	while ( !LL_USART_IsActiveFlag_TXE( USART2 ) );
 80022aa:	2900      	cmp	r1, #0
 80022ac:	d108      	bne.n	80022c0 <__io_putchar+0x18>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <__io_putchar+0x24>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	2280      	movs	r2, #128	@ 0x80
 80022b4:	0011      	movs	r1, r2
 80022b6:	4019      	ands	r1, r3
 80022b8:	421a      	tst	r2, r3
 80022ba:	d0f6      	beq.n	80022aa <__io_putchar+0x2>
 80022bc:	2101      	movs	r1, #1
 80022be:	e7f4      	b.n	80022aa <__io_putchar+0x2>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80022c0:	23ff      	movs	r3, #255	@ 0xff
 80022c2:	4003      	ands	r3, r0
 80022c4:	4a01      	ldr	r2, [pc, #4]	@ (80022cc <__io_putchar+0x24>)
 80022c6:	6293      	str	r3, [r2, #40]	@ 0x28
	LL_USART_TransmitData8(USART2, (uint8_t)ch);
	return ch;
}
 80022c8:	4770      	bx	lr
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	40004400 	.word	0x40004400

080022d0 <_write>:

int _write(int file, char *ptr, int len)
{
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	0016      	movs	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	2400      	movs	r4, #0
 80022d6:	e005      	b.n	80022e4 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80022d8:	1c4d      	adds	r5, r1, #1
 80022da:	7808      	ldrb	r0, [r1, #0]
 80022dc:	f7ff ffe4 	bl	80022a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80022e2:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	42b4      	cmp	r4, r6
 80022e6:	dbf7      	blt.n	80022d8 <_write+0x8>
	}
	return len;
}
 80022e8:	0030      	movs	r0, r6
 80022ea:	bd70      	pop	{r4, r5, r6, pc}

080022ec <deca_uart_rx_data_ready>:

bool deca_uart_rx_data_ready(void)
{
    return uart_rx_data_ready;
 80022ec:	4b01      	ldr	r3, [pc, #4]	@ (80022f4 <deca_uart_rx_data_ready+0x8>)
 80022ee:	7818      	ldrb	r0, [r3, #0]
}
 80022f0:	4770      	bx	lr
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	20000230 	.word	0x20000230

080022f8 <UART_RxCpltCallback>:

extern bool SerialData;

void UART_RxCpltCallback( uint8_t data )
{
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0005      	movs	r5, r0

    /* Local echo*/
	__io_putchar((int)data);
 80022fc:	f7ff ffd4 	bl	80022a8 <__io_putchar>
	// wait for transmission complete
	while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 8002300:	e001      	b.n	8002306 <UART_RxCpltCallback+0xe>
 8002302:	2c00      	cmp	r4, #0
 8002304:	d108      	bne.n	8002318 <UART_RxCpltCallback+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002306:	4b24      	ldr	r3, [pc, #144]	@ (8002398 <UART_RxCpltCallback+0xa0>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	2240      	movs	r2, #64	@ 0x40
 800230c:	0014      	movs	r4, r2
 800230e:	401c      	ands	r4, r3
 8002310:	421a      	tst	r2, r3
 8002312:	d0f6      	beq.n	8002302 <UART_RxCpltCallback+0xa>
 8002314:	2401      	movs	r4, #1
 8002316:	e7f4      	b.n	8002302 <UART_RxCpltCallback+0xa>

	SerialData = true;
 8002318:	4b20      	ldr	r3, [pc, #128]	@ (800239c <UART_RxCpltCallback+0xa4>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]

    if ( !uart_rx_data_ready  )
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <UART_RxCpltCallback+0xa8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d113      	bne.n	800234e <UART_RxCpltCallback+0x56>
    {
    	/* to allow backspace in shell - thanks Yves, very useful feature */
    	if( data == '\b')
 8002326:	2d08      	cmp	r5, #8
 8002328:	d00d      	beq.n	8002346 <UART_RxCpltCallback+0x4e>
    			while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
    			rx_buf_index--;// = rx_buf_index - 1;
    			rx_buf[rx_buf_index] = 0;
    		}
    	}
    	else if ( data == '\r' )
 800232a:	2d0d      	cmp	r5, #13
 800232c:	d02a      	beq.n	8002384 <UART_RxCpltCallback+0x8c>
            uart_rx_data_ready = true;
            rx_buf[rx_buf_index] = 0;
        }
        else
        {
        	rx_buf[rx_buf_index++] = data;
 800232e:	491d      	ldr	r1, [pc, #116]	@ (80023a4 <UART_RxCpltCallback+0xac>)
 8002330:	680a      	ldr	r2, [r1, #0]
 8002332:	1c53      	adds	r3, r2, #1
 8002334:	600b      	str	r3, [r1, #0]
 8002336:	491c      	ldr	r1, [pc, #112]	@ (80023a8 <UART_RxCpltCallback+0xb0>)
 8002338:	548d      	strb	r5, [r1, r2]
        	//rx_buf_index = rx_buf_index + 1;

            if ( rx_buf_index >= RX_BUF_SIZE )
 800233a:	2bff      	cmp	r3, #255	@ 0xff
 800233c:	d907      	bls.n	800234e <UART_RxCpltCallback+0x56>
            {
                uart_rx_data_ready = true;	         // buffer is full, signal to proceed it
 800233e:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <UART_RxCpltCallback+0xa8>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    //printf("Callback: data=%c (0x%02X), index=%lu, ready=%d\n", data, data, rx_buf_index, uart_rx_data_ready);

}
 8002344:	e003      	b.n	800234e <UART_RxCpltCallback+0x56>
    		if(rx_buf_index !=0)
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <UART_RxCpltCallback+0xac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d100      	bne.n	8002350 <UART_RxCpltCallback+0x58>
}
 800234e:	bd70      	pop	{r4, r5, r6, pc}
    			__io_putchar((int)' ');
 8002350:	2020      	movs	r0, #32
 8002352:	f7ff ffa9 	bl	80022a8 <__io_putchar>
    			__io_putchar((int)'\b');
 8002356:	2008      	movs	r0, #8
 8002358:	f7ff ffa6 	bl	80022a8 <__io_putchar>
    			while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 800235c:	e001      	b.n	8002362 <UART_RxCpltCallback+0x6a>
 800235e:	2900      	cmp	r1, #0
 8002360:	d108      	bne.n	8002374 <UART_RxCpltCallback+0x7c>
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <UART_RxCpltCallback+0xa0>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	2240      	movs	r2, #64	@ 0x40
 8002368:	0011      	movs	r1, r2
 800236a:	4019      	ands	r1, r3
 800236c:	421a      	tst	r2, r3
 800236e:	d0f6      	beq.n	800235e <UART_RxCpltCallback+0x66>
 8002370:	0021      	movs	r1, r4
 8002372:	e7f4      	b.n	800235e <UART_RxCpltCallback+0x66>
    			rx_buf_index--;// = rx_buf_index - 1;
 8002374:	4a0b      	ldr	r2, [pc, #44]	@ (80023a4 <UART_RxCpltCallback+0xac>)
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	3b01      	subs	r3, #1
 800237a:	6013      	str	r3, [r2, #0]
    			rx_buf[rx_buf_index] = 0;
 800237c:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <UART_RxCpltCallback+0xb0>)
 800237e:	2100      	movs	r1, #0
 8002380:	54d1      	strb	r1, [r2, r3]
 8002382:	e7e4      	b.n	800234e <UART_RxCpltCallback+0x56>
            uart_rx_data_ready = true;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <UART_RxCpltCallback+0xa8>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
            rx_buf[rx_buf_index] = 0;
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <UART_RxCpltCallback+0xac>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b06      	ldr	r3, [pc, #24]	@ (80023a8 <UART_RxCpltCallback+0xb0>)
 8002390:	2100      	movs	r1, #0
 8002392:	5499      	strb	r1, [r3, r2]
 8002394:	e7db      	b.n	800234e <UART_RxCpltCallback+0x56>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	40004400 	.word	0x40004400
 800239c:	20000344 	.word	0x20000344
 80023a0:	20000230 	.word	0x20000230
 80023a4:	20000234 	.word	0x20000234
 80023a8:	20000238 	.word	0x20000238

080023ac <port_tx_msg>:

void port_tx_msg(char *ptr, int len)
{
 80023ac:	b510      	push	{r4, lr}
 80023ae:	000a      	movs	r2, r1
	_write(0, (char *)ptr,len);
 80023b0:	0001      	movs	r1, r0
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff ff8c 	bl	80022d0 <_write>
}
 80023b8:	bd10      	pop	{r4, pc}
	...

080023bc <deca_uart_receive>:
 *
 * @param[in] address to buffer, max buffer size
 * @param[out] actual number of bytes in buffer
 * */
uint32_t deca_uart_receive( uint8_t * buffer, size_t size)
{
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	0005      	movs	r5, r0
 80023c0:	000c      	movs	r4, r1
  __ASM volatile ("cpsid i" : : : "memory");
 80023c2:	b672      	cpsid	i
	//printf("deca_uart_receive: rx_buf_index=%lu\r\n", rx_buf_index);
	__disable_irq();

    uint32_t count = rx_buf_index;
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <deca_uart_receive+0x38>)
 80023c6:	681e      	ldr	r6, [r3, #0]
    memcpy(buffer, rx_buf, MIN(rx_buf_index, size));
 80023c8:	0032      	movs	r2, r6
 80023ca:	428e      	cmp	r6, r1
 80023cc:	d900      	bls.n	80023d0 <deca_uart_receive+0x14>
 80023ce:	000a      	movs	r2, r1
 80023d0:	4909      	ldr	r1, [pc, #36]	@ (80023f8 <deca_uart_receive+0x3c>)
 80023d2:	0028      	movs	r0, r5
 80023d4:	f003 fae5 	bl	80059a2 <memcpy>
    rx_buf_index = 0;
 80023d8:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <deca_uart_receive+0x38>)
 80023da:	2700      	movs	r7, #0
 80023dc:	601f      	str	r7, [r3, #0]
    buffer[size-1] = 0;
 80023de:	3c01      	subs	r4, #1
 80023e0:	192d      	adds	r5, r5, r4
 80023e2:	702f      	strb	r7, [r5, #0]
    uint8_t data = '\n';

    __io_putchar(data);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f7ff ff5f 	bl	80022a8 <__io_putchar>
    uart_rx_data_ready = false;
 80023ea:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <deca_uart_receive+0x40>)
 80023ec:	701f      	strb	r7, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80023ee:	b662      	cpsie	i

	__enable_irq();

    return count;
}
 80023f0:	0030      	movs	r0, r6
 80023f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023f4:	20000234 	.word	0x20000234
 80023f8:	20000238 	.word	0x20000238
 80023fc:	20000230 	.word	0x20000230

08002400 <IncSysTick>:
 *
 ******************************************************************************/

void IncSysTick()
{
	SysTickCount++;
 8002400:	4a02      	ldr	r2, [pc, #8]	@ (800240c <IncSysTick+0xc>)
 8002402:	6813      	ldr	r3, [r2, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	6013      	str	r3, [r2, #0]
}
 8002408:	4770      	bx	lr
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	20000338 	.word	0x20000338

08002410 <portGetTickCount>:
 *        The resolution of time32_incr is usually 1/1000 sec.
 * */
__INLINE uint32_t
portGetTickCount(void)
{
	return SysTickCount;
 8002410:	4b01      	ldr	r3, [pc, #4]	@ (8002418 <portGetTickCount+0x8>)
 8002412:	6818      	ldr	r0, [r3, #0]
}
 8002414:	4770      	bx	lr
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	20000338 	.word	0x20000338

0800241c <HAL_AdjustTickCount>:
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i

void HAL_AdjustTickCount(uint32_t add_ticks)
{
	__disable_irq();
	SysTickCount += add_ticks;
 800241e:	4a03      	ldr	r2, [pc, #12]	@ (800242c <HAL_AdjustTickCount+0x10>)
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	1818      	adds	r0, r3, r0
 8002424:	6010      	str	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002426:	b662      	cpsie	i
	__enable_irq();
}
 8002428:	4770      	bx	lr
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	20000338 	.word	0x20000338

08002430 <start_timer>:
	return SysTickCount;
 8002430:	4b01      	ldr	r3, [pc, #4]	@ (8002438 <start_timer+0x8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 * @brief     save system timestamp (in CLOCKS_PER_SEC)
 * @parm     p_timestamp pointer on current system timestamp
 */
void start_timer(volatile uint32_t * p_timestamp)
{
    *p_timestamp = portGetTickCount();
 8002434:	6003      	str	r3, [r0, #0]
}
 8002436:	4770      	bx	lr
 8002438:	20000338 	.word	0x20000338

0800243c <check_timer>:
	return SysTickCount;
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <check_timer+0x1c>)
 800243e:	681b      	ldr	r3, [r3, #0]
bool check_timer(uint32_t timestamp, uint32_t time)
{
    uint32_t time_passing;
    uint32_t temp_tick_time = portGetTickCount();

    if (temp_tick_time >= timestamp)
 8002440:	4298      	cmp	r0, r3
 8002442:	d804      	bhi.n	800244e <check_timer+0x12>
    {
        time_passing = temp_tick_time - timestamp;
 8002444:	1a1b      	subs	r3, r3, r0
    else
    {
        time_passing = 0xffffffffUL - timestamp + temp_tick_time;
    }

    if (time_passing >= time)
 8002446:	428b      	cmp	r3, r1
 8002448:	d204      	bcs.n	8002454 <check_timer+0x18>
    {
        return (true);
    }

    return (false);
 800244a:	2000      	movs	r0, #0
}
 800244c:	4770      	bx	lr
        time_passing = 0xffffffffUL - timestamp + temp_tick_time;
 800244e:	1a1b      	subs	r3, r3, r0
 8002450:	3b01      	subs	r3, #1
 8002452:	e7f8      	b.n	8002446 <check_timer+0xa>
        return (true);
 8002454:	2001      	movs	r0, #1
 8002456:	e7f9      	b.n	800244c <check_timer+0x10>
 8002458:	20000338 	.word	0x20000338

0800245c <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   Function is used for re-initialize the SPI freq as 2MHz which does
 *          init state check
 * */
void port_set_dw1000_slowrate(void)
{
 800245c:	e001      	b.n	8002462 <port_set_dw1000_slowrate+0x6>
	// wait for current transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 800245e:	2900      	cmp	r1, #0
 8002460:	d008      	beq.n	8002474 <port_set_dw1000_slowrate+0x18>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8002462:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <port_set_dw1000_slowrate+0x44>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	0011      	movs	r1, r2
 800246a:	4019      	ands	r1, r3
 800246c:	421a      	tst	r2, r3
 800246e:	d0f6      	beq.n	800245e <port_set_dw1000_slowrate+0x2>
 8002470:	2101      	movs	r1, #1
 8002472:	e7f4      	b.n	800245e <port_set_dw1000_slowrate+0x2>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <port_set_dw1000_slowrate+0x44>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	07db      	lsls	r3, r3, #31
 800247a:	d501      	bpl.n	8002480 <port_set_dw1000_slowrate+0x24>
  return (*((__IO uint8_t *)&SPIx->DR));
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <port_set_dw1000_slowrate+0x44>)
 800247e:	7b1b      	ldrb	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <port_set_dw1000_slowrate+0x44>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2140      	movs	r1, #64	@ 0x40
 8002486:	438a      	bics	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2038      	movs	r0, #56	@ 0x38
 800248e:	4382      	bics	r2, r0
 8002490:	3820      	subs	r0, #32
 8002492:	4302      	orrs	r2, r0
 8002494:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]
	}

	LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV16 );
	LL_SPI_Enable(SPI1);
}
 800249c:	4770      	bx	lr
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	40013000 	.word	0x40013000

080024a4 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 16MHz
 *
 * */
void port_set_dw1000_fastrate(void)
{
 80024a4:	e001      	b.n	80024aa <port_set_dw1000_fastrate+0x6>
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 80024a6:	2900      	cmp	r1, #0
 80024a8:	d008      	beq.n	80024bc <port_set_dw1000_fastrate+0x18>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 80024aa:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <port_set_dw1000_fastrate+0x40>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	0011      	movs	r1, r2
 80024b2:	4019      	ands	r1, r3
 80024b4:	421a      	tst	r2, r3
 80024b6:	d0f6      	beq.n	80024a6 <port_set_dw1000_fastrate+0x2>
 80024b8:	2101      	movs	r1, #1
 80024ba:	e7f4      	b.n	80024a6 <port_set_dw1000_fastrate+0x2>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80024bc:	4b09      	ldr	r3, [pc, #36]	@ (80024e4 <port_set_dw1000_fastrate+0x40>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	07db      	lsls	r3, r3, #31
 80024c2:	d501      	bpl.n	80024c8 <port_set_dw1000_fastrate+0x24>
  return (*((__IO uint8_t *)&SPIx->DR));
 80024c4:	4b07      	ldr	r3, [pc, #28]	@ (80024e4 <port_set_dw1000_fastrate+0x40>)
 80024c6:	7b1b      	ldrb	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80024c8:	4b06      	ldr	r3, [pc, #24]	@ (80024e4 <port_set_dw1000_fastrate+0x40>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2140      	movs	r1, #64	@ 0x40
 80024ce:	438a      	bics	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2038      	movs	r0, #56	@ 0x38
 80024d6:	4382      	bics	r2, r0
 80024d8:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
	}

	LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV2 );
	LL_SPI_Enable(SPI1);
}
 80024e0:	4770      	bx	lr
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	40013000 	.word	0x40013000

080024e8 <decamutexon>:

decaIrqStatus_t decamutexon(void)
{
	// not yet implemented
	return 0;
}
 80024e8:	2000      	movs	r0, #0
 80024ea:	4770      	bx	lr

080024ec <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t j)
{
	// not yet implemented
}
 80024ec:	4770      	bx	lr
	...

080024f0 <reset_DW1000>:
 *             In general it is output, but it also can be used to reset the digital
 *             part of DW1000 by driving this pin low.
 *             Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	b086      	sub	sp, #24
	LL_GPIO_InitTypeDef     GPIO_InitStruct;

    GPIO_InitStruct.Pin = DW_RST_Pin;
 80024f4:	2502      	movs	r5, #2
 80024f6:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024f8:	2301      	movs	r3, #1
 80024fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024fc:	2400      	movs	r4, #0
 80024fe:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002500:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8002502:	9504      	str	r5, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8002504:	4e0a      	ldr	r6, [pc, #40]	@ (8002530 <reset_DW1000+0x40>)
 8002506:	4669      	mov	r1, sp
 8002508:	0030      	movs	r0, r6
 800250a:	f7ff fb9f 	bl	8001c4c <LL_GPIO_Init>
  WRITE_REG(GPIOx->BRR, PinMask);
 800250e:	62b5      	str	r5, [r6, #40]	@ 0x28

    LL_GPIO_ResetOutputPin( DW_RST_GPIO_Port, DW_RST_Pin );

    LL_mDelay(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7ff fdef 	bl	80020f4 <LL_mDelay>

    GPIO_InitStruct.Pin = DW_RST_Pin;
 8002516:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002518:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800251a:	9404      	str	r4, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 800251c:	4669      	mov	r1, sp
 800251e:	0030      	movs	r0, r6
 8002520:	f7ff fb94 	bl	8001c4c <LL_GPIO_Init>

    LL_mDelay(5);
 8002524:	2005      	movs	r0, #5
 8002526:	f7ff fde5 	bl	80020f4 <LL_mDelay>
}
 800252a:	b006      	add	sp, #24
 800252c:	bd70      	pop	{r4, r5, r6, pc}
 800252e:	46c0      	nop			@ (mov r8, r8)
 8002530:	50000400 	.word	0x50000400

08002534 <port_wakeup_dw1000>:

/* @fn        port_wakeup_dw1000
 * @brief    "slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4c05      	ldr	r4, [pc, #20]	@ (800254c <port_wakeup_dw1000+0x18>)
 8002538:	2501      	movs	r5, #1
 800253a:	62a5      	str	r5, [r4, #40]	@ 0x28
    LL_GPIO_ResetOutputPin( DW_CS_GPIO_Port, DW_CS_Pin );
    LL_mDelay(1);
 800253c:	2001      	movs	r0, #1
 800253e:	f7ff fdd9 	bl	80020f4 <LL_mDelay>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002542:	61a5      	str	r5, [r4, #24]
    LL_GPIO_SetOutputPin( DW_CS_GPIO_Port, DW_CS_Pin );
    LL_mDelay(7);
 8002544:	2007      	movs	r0, #7
 8002546:	f7ff fdd5 	bl	80020f4 <LL_mDelay>
}
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	50000400 	.word	0x50000400

08002550 <LEDS_INVERT>:
// DWB1001/4 board has LEDs connected to the ground
// for DWB1001/4 board comment the next line
#define DWM1001_DEV

void LEDS_INVERT(uint32_t LEDS_MASK)
{
 8002550:	b510      	push	{r4, lr}
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 8002552:	07c3      	lsls	r3, r0, #31
 8002554:	d509      	bpl.n	800256a <LEDS_INVERT+0x1a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002556:	4913      	ldr	r1, [pc, #76]	@ (80025a4 <LEDS_INVERT+0x54>)
 8002558:	694c      	ldr	r4, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800255a:	0423      	lsls	r3, r4, #16
 800255c:	2280      	movs	r2, #128	@ 0x80
 800255e:	0312      	lsls	r2, r2, #12
 8002560:	4013      	ands	r3, r2
 8002562:	2208      	movs	r2, #8
 8002564:	43a2      	bics	r2, r4
 8002566:	4313      	orrs	r3, r2
 8002568:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 800256a:	0783      	lsls	r3, r0, #30
 800256c:	d50a      	bpl.n	8002584 <LEDS_INVERT+0x34>
  uint32_t odr = READ_REG(GPIOx->ODR);
 800256e:	21a0      	movs	r1, #160	@ 0xa0
 8002570:	05c9      	lsls	r1, r1, #23
 8002572:	694c      	ldr	r4, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002574:	0423      	lsls	r3, r4, #16
 8002576:	2280      	movs	r2, #128	@ 0x80
 8002578:	0292      	lsls	r2, r2, #10
 800257a:	4013      	ands	r3, r2
 800257c:	2202      	movs	r2, #2
 800257e:	43a2      	bics	r2, r4
 8002580:	4313      	orrs	r3, r2
 8002582:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 8002584:	0740      	lsls	r0, r0, #29
 8002586:	d50b      	bpl.n	80025a0 <LEDS_INVERT+0x50>
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002588:	21a0      	movs	r1, #160	@ 0xa0
 800258a:	05c9      	lsls	r1, r1, #23
 800258c:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800258e:	0403      	lsls	r3, r0, #16
 8002590:	2280      	movs	r2, #128	@ 0x80
 8002592:	0452      	lsls	r2, r2, #17
 8002594:	4013      	ands	r3, r2
 8002596:	2280      	movs	r2, #128	@ 0x80
 8002598:	0052      	lsls	r2, r2, #1
 800259a:	4382      	bics	r2, r0
 800259c:	4313      	orrs	r3, r2
 800259e:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 80025a0:	bd10      	pop	{r4, pc}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	50000400 	.word	0x50000400

080025a8 <LEDS_ON>:
void LEDS_ON(uint32_t LEDS_MASK)
#else
void LEDS_OFF(uint32_t LEDS_MASK)
#endif // DWM1001_DEV
{
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 80025a8:	07c3      	lsls	r3, r0, #31
 80025aa:	d502      	bpl.n	80025b2 <LEDS_ON+0xa>
  WRITE_REG(GPIOx->BRR, PinMask);
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <LEDS_ON+0x28>)
 80025ae:	2208      	movs	r2, #8
 80025b0:	629a      	str	r2, [r3, #40]	@ 0x28
	    LL_GPIO_ResetOutputPin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 80025b2:	0783      	lsls	r3, r0, #30
 80025b4:	d503      	bpl.n	80025be <LEDS_ON+0x16>
 80025b6:	23a0      	movs	r3, #160	@ 0xa0
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	2202      	movs	r2, #2
 80025bc:	629a      	str	r2, [r3, #40]	@ 0x28
	    LL_GPIO_ResetOutputPin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 80025be:	0740      	lsls	r0, r0, #29
 80025c0:	d504      	bpl.n	80025cc <LEDS_ON+0x24>
 80025c2:	23a0      	movs	r3, #160	@ 0xa0
 80025c4:	05db      	lsls	r3, r3, #23
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	0052      	lsls	r2, r2, #1
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
	    LL_GPIO_ResetOutputPin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 80025cc:	4770      	bx	lr
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	50000400 	.word	0x50000400

080025d4 <LEDS_OFF>:
void LEDS_OFF(uint32_t LEDS_MASK)
#else
void LEDS_ON(uint32_t LEDS_MASK)
#endif // DWM1001_DEV
{
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 80025d4:	07c3      	lsls	r3, r0, #31
 80025d6:	d502      	bpl.n	80025de <LEDS_OFF+0xa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80025d8:	4b08      	ldr	r3, [pc, #32]	@ (80025fc <LEDS_OFF+0x28>)
 80025da:	2208      	movs	r2, #8
 80025dc:	619a      	str	r2, [r3, #24]
	    LL_GPIO_SetOutputPin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 80025de:	0783      	lsls	r3, r0, #30
 80025e0:	d503      	bpl.n	80025ea <LEDS_OFF+0x16>
 80025e2:	23a0      	movs	r3, #160	@ 0xa0
 80025e4:	05db      	lsls	r3, r3, #23
 80025e6:	2202      	movs	r2, #2
 80025e8:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetOutputPin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 80025ea:	0740      	lsls	r0, r0, #29
 80025ec:	d504      	bpl.n	80025f8 <LEDS_OFF+0x24>
 80025ee:	23a0      	movs	r3, #160	@ 0xa0
 80025f0:	05db      	lsls	r3, r3, #23
 80025f2:	2280      	movs	r2, #128	@ 0x80
 80025f4:	0052      	lsls	r2, r2, #1
 80025f6:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetOutputPin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 80025f8:	4770      	bx	lr
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	50000400 	.word	0x50000400

08002600 <spi_device_init>:
 *
 */
bool spi_device_init(uint8_t bus, uint8_t cs)
{
	return false;
}
 8002600:	2000      	movs	r0, #0
 8002602:	4770      	bx	lr

08002604 <spi_transfer_pf>:
 *
 */
bool spi_transfer_pf(uint8_t bus, uint8_t cs, uint8_t * mosi, uint8_t * miso, uint16_t len)
{
	return false;
}
 8002604:	2000      	movs	r0, #0
 8002606:	4770      	bx	lr

08002608 <i2c_slave_read>:
/* @brief I2C tranfer for LIS3DH
 *
 */
bool i2c_slave_read(uint8_t bus, uint8_t addr, uint8_t reg,  uint8_t *data, uint16_t len)
{	// bus is not used in I2C transfer
 8002608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260a:	a805      	add	r0, sp, #20
 800260c:	8805      	ldrh	r5, [r0, #0]
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800260e:	481d      	ldr	r0, [pc, #116]	@ (8002684 <i2c_slave_read+0x7c>)
 8002610:	4308      	orrs	r0, r1
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8002612:	4c1d      	ldr	r4, [pc, #116]	@ (8002688 <i2c_slave_read+0x80>)
 8002614:	6866      	ldr	r6, [r4, #4]
 8002616:	4f1d      	ldr	r7, [pc, #116]	@ (800268c <i2c_slave_read+0x84>)
 8002618:	403e      	ands	r6, r7
 800261a:	4330      	orrs	r0, r6
 800261c:	6060      	str	r0, [r4, #4]
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800261e:	62a2      	str	r2, [r4, #40]	@ 0x28
}
 8002620:	e001      	b.n	8002626 <i2c_slave_read+0x1e>
	LL_I2C_HandleTransfer(I2C1, addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
	LL_I2C_TransmitData8(I2C1, reg);


	while( !LL_I2C_IsActiveFlag_STOP(I2C1))
 8002622:	2c00      	cmp	r4, #0
 8002624:	d108      	bne.n	8002638 <i2c_slave_read+0x30>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8002626:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <i2c_slave_read+0x80>)
 8002628:	6992      	ldr	r2, [r2, #24]
 800262a:	2020      	movs	r0, #32
 800262c:	0004      	movs	r4, r0
 800262e:	4014      	ands	r4, r2
 8002630:	4210      	tst	r0, r2
 8002632:	d0f6      	beq.n	8002622 <i2c_slave_read+0x1a>
 8002634:	2401      	movs	r4, #1
 8002636:	e7f4      	b.n	8002622 <i2c_slave_read+0x1a>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002638:	4813      	ldr	r0, [pc, #76]	@ (8002688 <i2c_slave_read+0x80>)
 800263a:	69c2      	ldr	r2, [r0, #28]
 800263c:	2420      	movs	r4, #32
 800263e:	4322      	orrs	r2, r4
 8002640:	61c2      	str	r2, [r0, #28]
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002642:	042a      	lsls	r2, r5, #16
 8002644:	24ff      	movs	r4, #255	@ 0xff
 8002646:	0424      	lsls	r4, r4, #16
 8002648:	4022      	ands	r2, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800264a:	430a      	orrs	r2, r1
 800264c:	4910      	ldr	r1, [pc, #64]	@ (8002690 <i2c_slave_read+0x88>)
 800264e:	4311      	orrs	r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8002650:	6842      	ldr	r2, [r0, #4]
 8002652:	4c0e      	ldr	r4, [pc, #56]	@ (800268c <i2c_slave_read+0x84>)
 8002654:	4022      	ands	r2, r4
 8002656:	4311      	orrs	r1, r2
 8002658:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800265a:	4a0b      	ldr	r2, [pc, #44]	@ (8002688 <i2c_slave_read+0x80>)
 800265c:	6992      	ldr	r2, [r2, #24]
 800265e:	0692      	lsls	r2, r2, #26
 8002660:	d408      	bmi.n	8002674 <i2c_slave_read+0x6c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8002662:	4a09      	ldr	r2, [pc, #36]	@ (8002688 <i2c_slave_read+0x80>)
 8002664:	6992      	ldr	r2, [r2, #24]
 8002666:	0752      	lsls	r2, r2, #29
 8002668:	d5f7      	bpl.n	800265a <i2c_slave_read+0x52>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800266a:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <i2c_slave_read+0x80>)
 800266c:	6a52      	ldr	r2, [r2, #36]	@ 0x24

 	while( !LL_I2C_IsActiveFlag_STOP(I2C1))
 	{
		if ( LL_I2C_IsActiveFlag_RXNE(I2C1) )
		{
			*data++ = LL_I2C_ReceiveData8(I2C1);
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	e7f2      	b.n	800265a <i2c_slave_read+0x52>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002674:	4a04      	ldr	r2, [pc, #16]	@ (8002688 <i2c_slave_read+0x80>)
 8002676:	69d3      	ldr	r3, [r2, #28]
 8002678:	2120      	movs	r1, #32
 800267a:	430b      	orrs	r3, r1
 800267c:	61d3      	str	r3, [r2, #28]
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);

	return false;
}
 800267e:	2000      	movs	r0, #0
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002682:	46c0      	nop			@ (mov r8, r8)
 8002684:	02012000 	.word	0x02012000
 8002688:	40005400 	.word	0x40005400
 800268c:	fc008000 	.word	0xfc008000
 8002690:	02002400 	.word	0x02002400

08002694 <lis3dh_configure_int>:

/* @brief Init and configure LIS3DH to wake up MCU on movement event
 *
 */
void lis3dh_configure_int()
{
 8002694:	b530      	push	{r4, r5, lr}
 8002696:	b089      	sub	sp, #36	@ 0x24
	lis3dh_sensor_t* sensor = lis3dh_get_device();
 8002698:	f002 fc4c 	bl	8004f34 <lis3dh_get_device>
 800269c:	1e04      	subs	r4, r0, #0
		  if (sensor == NULL ) {
 800269e:	d031      	beq.n	8002704 <lis3dh_configure_int+0x70>
		  }

		  // enable data interrupts on INT1
		  lis3dh_int_event_config_t event_config;

		  event_config.mode = lis3dh_wake_up;
 80026a0:	a905      	add	r1, sp, #20
 80026a2:	2300      	movs	r3, #0
 80026a4:	700b      	strb	r3, [r1, #0]
		  // event_config.mode = lis3dh_free_fall;
		  // event_config.mode = lis3dh_6d_movement;
		  // event_config.mode = lis3dh_6d_position;
		  // event_config.mode = lis3dh_4d_movement;
		  // event_config.mode = lis3dh_4d_position;
		  event_config.threshold = 10;
 80026a6:	220a      	movs	r2, #10
 80026a8:	704a      	strb	r2, [r1, #1]
		  event_config.x_low_enabled  = false;
 80026aa:	708b      	strb	r3, [r1, #2]
		  event_config.x_high_enabled = true;
 80026ac:	2501      	movs	r5, #1
 80026ae:	70cd      	strb	r5, [r1, #3]
		  event_config.y_low_enabled  = false;
 80026b0:	710b      	strb	r3, [r1, #4]
		  event_config.y_high_enabled = true;
 80026b2:	714d      	strb	r5, [r1, #5]
		  event_config.z_low_enabled  = false;
 80026b4:	718b      	strb	r3, [r1, #6]
		  event_config.z_high_enabled = true;
 80026b6:	71cd      	strb	r5, [r1, #7]
		  event_config.duration = 0;
 80026b8:	724b      	strb	r3, [r1, #9]
		  event_config.latch = false;
 80026ba:	720b      	strb	r3, [r1, #8]

		  lis3dh_set_int_event_config (sensor, &event_config, lis3dh_int_event1_gen);
 80026bc:	2200      	movs	r2, #0
 80026be:	0020      	movs	r0, r4
 80026c0:	f002 fa9e 	bl	8004c00 <lis3dh_set_int_event_config>
		  lis3dh_enable_int (sensor, lis3dh_int_event1, lis3dh_int1_signal, true);
 80026c4:	2301      	movs	r3, #1
 80026c6:	2200      	movs	r2, #0
 80026c8:	2103      	movs	r1, #3
 80026ca:	0020      	movs	r0, r4
 80026cc:	f002 f9ea 	bl	8004aa4 <lis3dh_enable_int>


		  // configure HPF and reset the reference by dummy read
		  lis3dh_config_hpf (sensor, lis3dh_hpf_normal, 0, true, true, true, true);
 80026d0:	9502      	str	r5, [sp, #8]
 80026d2:	9501      	str	r5, [sp, #4]
 80026d4:	9500      	str	r5, [sp, #0]
 80026d6:	2301      	movs	r3, #1
 80026d8:	2200      	movs	r2, #0
 80026da:	2100      	movs	r1, #0
 80026dc:	0020      	movs	r0, r4
 80026de:	f002 fbb7 	bl	8004e50 <lis3dh_config_hpf>
		  lis3dh_get_hpf_ref (sensor);
 80026e2:	0020      	movs	r0, r4
 80026e4:	f002 f85f 	bl	80047a6 <lis3dh_get_hpf_ref>

		  // LAST STEP: Finally set scale and mode to start measurements
		  lis3dh_set_scale(sensor, lis3dh_scale_2_g);
 80026e8:	2100      	movs	r1, #0
 80026ea:	0020      	movs	r0, r4
 80026ec:	f002 f9b1 	bl	8004a52 <lis3dh_set_scale>
		  lis3dh_set_mode (sensor, lis3dh_odr_10, lis3dh_high_res, true, true, true);
 80026f0:	9501      	str	r5, [sp, #4]
 80026f2:	9500      	str	r5, [sp, #0]
 80026f4:	2301      	movs	r3, #1
 80026f6:	2202      	movs	r2, #2
 80026f8:	2102      	movs	r1, #2
 80026fa:	0020      	movs	r0, r4
 80026fc:	f002 f934 	bl	8004968 <lis3dh_set_mode>
}
 8002700:	b009      	add	sp, #36	@ 0x24
 8002702:	bd30      	pop	{r4, r5, pc}
			  sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2132      	movs	r1, #50	@ 0x32
 8002708:	2000      	movs	r0, #0
 800270a:	f002 f8b9 	bl	8004880 <lis3dh_init_sensor>
 800270e:	0004      	movs	r4, r0
 8002710:	e7c6      	b.n	80026a0 <lis3dh_configure_int+0xc>
	...

08002714 <GPIO_EXTI3_Callback>:
 *
 ******************************************************************************/

void GPIO_EXTI3_Callback()
{
	gMotionDetInt = true;
 8002714:	4b01      	ldr	r3, [pc, #4]	@ (800271c <GPIO_EXTI3_Callback+0x8>)
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
}
 800271a:	4770      	bx	lr
 800271c:	20000345 	.word	0x20000345

08002720 <GPIO_EXTI0_Callback>:

// Button SW2 interrupt handler
void GPIO_EXTI0_Callback()
{
 8002720:	b510      	push	{r4, lr}
	LEDS_INVERT(LED_RED_MASK);
 8002722:	2004      	movs	r0, #4
 8002724:	f7ff ff14 	bl	8002550 <LEDS_INVERT>
}
 8002728:	bd10      	pop	{r4, pc}
	...

0800272c <i2c_slave_write>:
*                              Power management section
 *
 ******************************************************************************/

bool i2c_slave_write(uint8_t bus, uint8_t addr, uint8_t  reg,  uint8_t *data, uint16_t len)
{
 800272c:	b530      	push	{r4, r5, lr}
 800272e:	a803      	add	r0, sp, #12
 8002730:	8800      	ldrh	r0, [r0, #0]
	// bus is not used in I2C transfer

	LL_I2C_HandleTransfer(I2C1, addr, LL_I2C_ADDRSLAVE_7BIT, len + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
 8002732:	3001      	adds	r0, #1
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002734:	0400      	lsls	r0, r0, #16
 8002736:	24ff      	movs	r4, #255	@ 0xff
 8002738:	0424      	lsls	r4, r4, #16
 800273a:	4020      	ands	r0, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800273c:	4308      	orrs	r0, r1
 800273e:	490e      	ldr	r1, [pc, #56]	@ (8002778 <i2c_slave_write+0x4c>)
 8002740:	4301      	orrs	r1, r0
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8002742:	480e      	ldr	r0, [pc, #56]	@ (800277c <i2c_slave_write+0x50>)
 8002744:	6844      	ldr	r4, [r0, #4]
 8002746:	4d0e      	ldr	r5, [pc, #56]	@ (8002780 <i2c_slave_write+0x54>)
 8002748:	402c      	ands	r4, r5
 800274a:	4321      	orrs	r1, r4
 800274c:	6041      	str	r1, [r0, #4]
  WRITE_REG(I2Cx->TXDR, Data);
 800274e:	6282      	str	r2, [r0, #40]	@ 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8002750:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <i2c_slave_write+0x50>)
 8002752:	6992      	ldr	r2, [r2, #24]
 8002754:	0692      	lsls	r2, r2, #26
 8002756:	d408      	bmi.n	800276a <i2c_slave_write+0x3e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8002758:	4a08      	ldr	r2, [pc, #32]	@ (800277c <i2c_slave_write+0x50>)
 800275a:	6992      	ldr	r2, [r2, #24]
 800275c:	0792      	lsls	r2, r2, #30
 800275e:	d5f7      	bpl.n	8002750 <i2c_slave_write+0x24>

	LL_I2C_TransmitData8(I2C1, reg);

	while( !LL_I2C_IsActiveFlag_STOP(I2C1)) {
		if ( LL_I2C_IsActiveFlag_TXIS(I2C1) ) {
			LL_I2C_TransmitData8(I2C1, *data++);
 8002760:	7819      	ldrb	r1, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 8002762:	4a06      	ldr	r2, [pc, #24]	@ (800277c <i2c_slave_write+0x50>)
 8002764:	6291      	str	r1, [r2, #40]	@ 0x28
 8002766:	3301      	adds	r3, #1
}
 8002768:	e7f2      	b.n	8002750 <i2c_slave_write+0x24>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800276a:	4a04      	ldr	r2, [pc, #16]	@ (800277c <i2c_slave_write+0x50>)
 800276c:	69d3      	ldr	r3, [r2, #28]
 800276e:	2120      	movs	r1, #32
 8002770:	430b      	orrs	r3, r1
 8002772:	61d3      	str	r3, [r2, #28]
	}

	LL_I2C_ClearFlag_STOP(I2C1);

	return false;
}
 8002774:	2000      	movs	r0, #0
 8002776:	bd30      	pop	{r4, r5, pc}
 8002778:	02002000 	.word	0x02002000
 800277c:	40005400 	.word	0x40005400
 8002780:	fc008000 	.word	0xfc008000

08002784 <RTC_DeactivateWakeUpTimer>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002784:	4b10      	ldr	r3, [pc, #64]	@ (80027c8 <RTC_DeactivateWakeUpTimer+0x44>)
 8002786:	22ca      	movs	r2, #202	@ 0xca
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800278a:	3a77      	subs	r2, #119	@ 0x77
 800278c:	625a      	str	r2, [r3, #36]	@ 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	490e      	ldr	r1, [pc, #56]	@ (80027cc <RTC_DeactivateWakeUpTimer+0x48>)
 8002792:	400a      	ands	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableIT_WUT(RTC_TypeDef *RTCx)
{
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTIE);
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	490d      	ldr	r1, [pc, #52]	@ (80027d0 <RTC_DeactivateWakeUpTimer+0x4c>)
 800279a:	400a      	ands	r2, r1
 800279c:	609a      	str	r2, [r3, #8]
	return SysTickCount;
 800279e:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <RTC_DeactivateWakeUpTimer+0x50>)
 80027a0:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF)) ? 1UL : 0UL);
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <RTC_DeactivateWakeUpTimer+0x44>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	075b      	lsls	r3, r3, #29
 80027a8:	d409      	bmi.n	80027be <RTC_DeactivateWakeUpTimer+0x3a>
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <RTC_DeactivateWakeUpTimer+0x50>)
 80027ac:	681b      	ldr	r3, [r3, #0]

  tickstart = portGetTickCount();
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (LL_RTC_IsActiveFlag_WUTW(RTC) == 0U)
  {
    if ((portGetTickCount() - tickstart) > RTC_TIMEOUT_VALUE)
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	21fa      	movs	r1, #250	@ 0xfa
 80027b2:	0089      	lsls	r1, r1, #2
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d9f4      	bls.n	80027a2 <RTC_DeactivateWakeUpTimer+0x1e>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <RTC_DeactivateWakeUpTimer+0x44>)
 80027ba:	22ff      	movs	r2, #255	@ 0xff
 80027bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80027be:	4b02      	ldr	r3, [pc, #8]	@ (80027c8 <RTC_DeactivateWakeUpTimer+0x44>)
 80027c0:	22ff      	movs	r2, #255	@ 0xff
 80027c2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTC);

}
 80027c4:	4770      	bx	lr
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	40002800 	.word	0x40002800
 80027cc:	fffffbff 	.word	0xfffffbff
 80027d0:	ffffbfff 	.word	0xffffbfff
 80027d4:	20000338 	.word	0x20000338

080027d8 <RTC_SetWakeUpTimer_IT>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80027d8:	4b28      	ldr	r3, [pc, #160]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 80027da:	22ca      	movs	r2, #202	@ 0xca
 80027dc:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80027de:	3a77      	subs	r2, #119	@ 0x77
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
  return ((READ_BIT(RTCx->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) ? 1UL : 0UL);
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	055b      	lsls	r3, r3, #21
 80027e6:	d510      	bpl.n	800280a <RTC_SetWakeUpTimer_IT+0x32>
	return SysTickCount;
 80027e8:	4b25      	ldr	r3, [pc, #148]	@ (8002880 <RTC_SetWakeUpTimer_IT+0xa8>)
 80027ea:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF)) ? 1UL : 0UL);
 80027ec:	4b23      	ldr	r3, [pc, #140]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	075b      	lsls	r3, r3, #29
 80027f2:	d50a      	bpl.n	800280a <RTC_SetWakeUpTimer_IT+0x32>
 80027f4:	4b22      	ldr	r3, [pc, #136]	@ (8002880 <RTC_SetWakeUpTimer_IT+0xa8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
	    tickstart = portGetTickCount();

	    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
	    while (LL_RTC_IsActiveFlag_WUTW(RTC)  == 1U)
	    {
	      if ((portGetTickCount() - tickstart) > RTC_TIMEOUT_VALUE)
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	21fa      	movs	r1, #250	@ 0xfa
 80027fc:	0089      	lsls	r1, r1, #2
 80027fe:	428b      	cmp	r3, r1
 8002800:	d9f4      	bls.n	80027ec <RTC_SetWakeUpTimer_IT+0x14>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002802:	4b1e      	ldr	r3, [pc, #120]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 8002804:	22ff      	movs	r2, #255	@ 0xff
 8002806:	625a      	str	r2, [r3, #36]	@ 0x24
	      {
	        /* Enable the write protection for RTC registers */
	    	  LL_RTC_EnableWriteProtection(RTC);
	          return;
 8002808:	e036      	b.n	8002878 <RTC_SetWakeUpTimer_IT+0xa0>
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 800280a:	4b1c      	ldr	r3, [pc, #112]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	491d      	ldr	r1, [pc, #116]	@ (8002884 <RTC_SetWakeUpTimer_IT+0xac>)
 8002810:	400a      	ands	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	21ff      	movs	r1, #255	@ 0xff
 8002818:	4011      	ands	r1, r2
 800281a:	4a1b      	ldr	r2, [pc, #108]	@ (8002888 <RTC_SetWakeUpTimer_IT+0xb0>)
 800281c:	430a      	orrs	r2, r1
 800281e:	60da      	str	r2, [r3, #12]
	return SysTickCount;
 8002820:	4b17      	ldr	r3, [pc, #92]	@ (8002880 <RTC_SetWakeUpTimer_IT+0xa8>)
 8002822:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF)) ? 1UL : 0UL);
 8002824:	4b15      	ldr	r3, [pc, #84]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	075b      	lsls	r3, r3, #29
 800282a:	d40a      	bmi.n	8002842 <RTC_SetWakeUpTimer_IT+0x6a>
 800282c:	4b14      	ldr	r3, [pc, #80]	@ (8002880 <RTC_SetWakeUpTimer_IT+0xa8>)
 800282e:	681b      	ldr	r3, [r3, #0]
	  tickstart = portGetTickCount();

	  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
	  while ( LL_RTC_IsActiveFlag_WUTW(RTC) == 0U)
	  {
	    if ((portGetTickCount() - tickstart) > RTC_TIMEOUT_VALUE)
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	21fa      	movs	r1, #250	@ 0xfa
 8002834:	0089      	lsls	r1, r1, #2
 8002836:	428b      	cmp	r3, r1
 8002838:	d9f4      	bls.n	8002824 <RTC_SetWakeUpTimer_IT+0x4c>
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800283a:	4b10      	ldr	r3, [pc, #64]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 800283c:	22ff      	movs	r2, #255	@ 0xff
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
	    {
	      /* Enable the write protection for RTC registers */

	    	  LL_RTC_EnableWriteProtection(RTC);
	      return ;
 8002840:	e01a      	b.n	8002878 <RTC_SetWakeUpTimer_IT+0xa0>
	    }
	  }

	  /* Configure the Wakeup Timer counter */
	  RTC->WUTR = WakeUpCounter;
 8002842:	4b0e      	ldr	r3, [pc, #56]	@ (800287c <RTC_SetWakeUpTimer_IT+0xa4>)
 8002844:	6158      	str	r0, [r3, #20]

	  /* Clear the Wakeup Timer clock source bits in CR register */
	  /* Configure the clock source */
	  // should be configured at startup
	  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL; // set prescaler to RTC_WAKEUPCLOCK_RTCCLK_DIV16
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	2107      	movs	r1, #7
 800284a:	438a      	bics	r2, r1
 800284c:	609a      	str	r2, [r3, #8]

	  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
	  EXTI->IMR |= EXTI_IMR_IM20;
 800284e:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <RTC_SetWakeUpTimer_IT+0xb4>)
 8002850:	6810      	ldr	r0, [r2, #0]
 8002852:	2180      	movs	r1, #128	@ 0x80
 8002854:	0349      	lsls	r1, r1, #13
 8002856:	4308      	orrs	r0, r1
 8002858:	6010      	str	r0, [r2, #0]
	  EXTI->RTSR |= EXTI_IMR_IM20;
 800285a:	6890      	ldr	r0, [r2, #8]
 800285c:	4301      	orrs	r1, r0
 800285e:	6091      	str	r1, [r2, #8]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	2280      	movs	r2, #128	@ 0x80
 8002864:	01d2      	lsls	r2, r2, #7
 8002866:	430a      	orrs	r2, r1
 8002868:	609a      	str	r2, [r3, #8]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	00d2      	lsls	r2, r2, #3
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002874:	22ff      	movs	r2, #255	@ 0xff
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
	  /* Enable the Wakeup Timer */
	  LL_RTC_WAKEUP_Enable( RTC );

	  /* Enable the write protection for RTC registers */
	  LL_RTC_EnableWriteProtection(RTC);
}
 8002878:	4770      	bx	lr
 800287a:	46c0      	nop			@ (mov r8, r8)
 800287c:	40002800 	.word	0x40002800
 8002880:	20000338 	.word	0x20000338
 8002884:	fffffbff 	.word	0xfffffbff
 8002888:	fffffb7f 	.word	0xfffffb7f
 800288c:	40010400 	.word	0x40010400

08002890 <UARTE_StopModeWakeUpSourceConfig>:
  * @note It is the application responsibility to enable the interrupt used as
  *       usart_wkup interrupt source before entering low-power mode.
  */

int UARTE_StopModeWakeUpSourceConfig(  )
{
 8002890:	b082      	sub	sp, #8
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_WUS));
 8002892:	4b26      	ldr	r3, [pc, #152]	@ (800292c <UARTE_StopModeWakeUpSourceConfig+0x9c>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	22c0      	movs	r2, #192	@ 0xc0
 8002898:	0392      	lsls	r2, r2, #14
 800289a:	4013      	ands	r3, r2
  int status = 0;
  volatile uint32_t tickstart;
  volatile uint32_t difference;

  uint32_t WakeUpType = LL_USART_GetWKUPType(USART2);
  if ( WakeUpType != USART_CR3_WUS_1 ) {
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	0392      	lsls	r2, r2, #14
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <UARTE_StopModeWakeUpSourceConfig+0x32>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80028a4:	4b21      	ldr	r3, [pc, #132]	@ (800292c <UARTE_StopModeWakeUpSourceConfig+0x9c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2001      	movs	r0, #1
 80028aa:	4382      	bics	r2, r0
 80028ac:	601a      	str	r2, [r3, #0]
	  LL_USART_Disable(USART2);
	  MODIFY_REG(USART2->CR3, USART_CR3_WUS, USART_CR3_WUS_1);
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002930 <UARTE_StopModeWakeUpSourceConfig+0xa0>)
 80028b2:	4011      	ands	r1, r2
 80028b4:	2280      	movs	r2, #128	@ 0x80
 80028b6:	0392      	lsls	r2, r2, #14
 80028b8:	430a      	orrs	r2, r1
 80028ba:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	4302      	orrs	r2, r0
 80028c0:	601a      	str	r2, [r3, #0]
	return SysTickCount;
 80028c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002934 <UARTE_StopModeWakeUpSourceConfig+0xa4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
	  LL_USART_Enable(USART2);
  }

  /* Init tickstart for timeout managment*/
  tickstart = portGetTickCount();
 80028c6:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <UARTE_StopModeWakeUpSourceConfig+0x9c>)
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	03db      	lsls	r3, r3, #15
 80028d0:	0011      	movs	r1, r2
 80028d2:	4019      	ands	r1, r3
 80028d4:	421a      	tst	r2, r3
 80028d6:	d00d      	beq.n	80028f4 <UARTE_StopModeWakeUpSourceConfig+0x64>
 80028d8:	2101      	movs	r1, #1
 80028da:	e00b      	b.n	80028f4 <UARTE_StopModeWakeUpSourceConfig+0x64>
	return SysTickCount;
 80028dc:	4b15      	ldr	r3, [pc, #84]	@ (8002934 <UARTE_StopModeWakeUpSourceConfig+0xa4>)
 80028de:	681b      	ldr	r3, [r3, #0]
  uint32_t REACK_Flag = LL_USART_IsActiveFlag_REACK(USART2);
  while ( REACK_Flag == 0 )
  {
	REACK_Flag = LL_USART_IsActiveFlag_REACK(USART2);
    /* Check for the Timeout */
	difference = portGetTickCount();
 80028e0:	9300      	str	r3, [sp, #0]
	difference -= tickstart;
 80028e2:	9a01      	ldr	r2, [sp, #4]
 80028e4:	9b00      	ldr	r3, [sp, #0]
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	9300      	str	r3, [sp, #0]
    if ( difference > RTC_TIMEOUT_VALUE )
 80028ea:	9a00      	ldr	r2, [sp, #0]
 80028ec:	23fa      	movs	r3, #250	@ 0xfa
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d80b      	bhi.n	800290c <UARTE_StopModeWakeUpSourceConfig+0x7c>
  while ( REACK_Flag == 0 )
 80028f4:	2900      	cmp	r1, #0
 80028f6:	d115      	bne.n	8002924 <UARTE_StopModeWakeUpSourceConfig+0x94>
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <UARTE_StopModeWakeUpSourceConfig+0x9c>)
 80028fa:	69da      	ldr	r2, [r3, #28]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	03db      	lsls	r3, r3, #15
 8002900:	0011      	movs	r1, r2
 8002902:	4019      	ands	r1, r3
 8002904:	421a      	tst	r2, r3
 8002906:	d0e9      	beq.n	80028dc <UARTE_StopModeWakeUpSourceConfig+0x4c>
 8002908:	2101      	movs	r1, #1
 800290a:	e7e7      	b.n	80028dc <UARTE_StopModeWakeUpSourceConfig+0x4c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(USART2->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <UARTE_StopModeWakeUpSourceConfig+0x9c>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4909      	ldr	r1, [pc, #36]	@ (8002938 <UARTE_StopModeWakeUpSourceConfig+0xa8>)
 8002912:	400a      	ands	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(USART2->CR3, USART_CR3_EIE);
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	31a3      	adds	r1, #163	@ 0xa3
 800291a:	31ff      	adds	r1, #255	@ 0xff
 800291c:	438a      	bics	r2, r1
 800291e:	609a      	str	r2, [r3, #8]

        status = 1;
 8002920:	2001      	movs	r0, #1
        break;
 8002922:	e000      	b.n	8002926 <UARTE_StopModeWakeUpSourceConfig+0x96>
  int status = 0;
 8002924:	2000      	movs	r0, #0
      }
  }

  return status;
}
 8002926:	b002      	add	sp, #8
 8002928:	4770      	bx	lr
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	40004400 	.word	0x40004400
 8002930:	ffcfffff 	.word	0xffcfffff
 8002934:	20000338 	.word	0x20000338
 8002938:	fffffe5f 	.word	0xfffffe5f

0800293c <SystemPower_Config>:
  * @retval None
  */
void SystemPower_Config(void)
{
  /* Enable Power Control clock */
	SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_PWREN));
 800293c:	4a06      	ldr	r2, [pc, #24]	@ (8002958 <SystemPower_Config+0x1c>)
 800293e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	055b      	lsls	r3, r3, #21
 8002944:	430b      	orrs	r3, r1
 8002946:	6393      	str	r3, [r2, #56]	@ 0x38
	/* Enable Ultra low power mode */
	SET_BIT(PWR->CR, PWR_CR_ULP);
 8002948:	4a04      	ldr	r2, [pc, #16]	@ (800295c <SystemPower_Config+0x20>)
 800294a:	6811      	ldr	r1, [r2, #0]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	430b      	orrs	r3, r1
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	4770      	bx	lr
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	40007000 	.word	0x40007000

08002960 <PWR_EnterSTOPMode>:
  uint32_t Regulator = PWR_CR_LPSDSR;

  uint32_t tmpreg = 0U;

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002960:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <PWR_EnterSTOPMode+0x24>)
 8002962:	6813      	ldr	r3, [r2, #0]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002964:	2103      	movs	r1, #3
 8002966:	438b      	bics	r3, r1

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002968:	3902      	subs	r1, #2
 800296a:	430b      	orrs	r3, r1

  /* Store the new value */
  PWR->CR = tmpreg;
 800296c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <PWR_EnterSTOPMode+0x28>)
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	3103      	adds	r1, #3
 8002974:	430a      	orrs	r2, r1
 8002976:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002978:	bf30      	wfi
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	438a      	bics	r2, r1
 800297e:	611a      	str	r2, [r3, #16]

}
 8002980:	4770      	bx	lr
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	40007000 	.word	0x40007000
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <low_power>:

/* @brief Low power implementation
 * @parm delay : low power sleeping time in ms
 * */
void low_power(uint32_t delay)
{
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	0004      	movs	r4, r0

    /* Disable Wakeup Counter */
	RTC_DeactivateWakeUpTimer();
 8002990:	f7ff fef8 	bl	8002784 <RTC_DeactivateWakeUpTimer>

    /* make sure that no UART transfer is on-going */
	while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 8002994:	e001      	b.n	800299a <low_power+0xe>
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <low_power+0x24>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800299a:	4b33      	ldr	r3, [pc, #204]	@ (8002a68 <low_power+0xdc>)
 800299c:	69da      	ldr	r2, [r3, #28]
 800299e:	2140      	movs	r1, #64	@ 0x40
 80029a0:	000b      	movs	r3, r1
 80029a2:	4013      	ands	r3, r2
 80029a4:	4211      	tst	r1, r2
 80029a6:	d0f6      	beq.n	8002996 <low_power+0xa>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e7f4      	b.n	8002996 <low_power+0xa>
    while( LL_USART_IsActiveFlag_BUSY(USART2) );
 80029ac:	2800      	cmp	r0, #0
 80029ae:	d00b      	beq.n	80029c8 <low_power+0x3c>
  return ((READ_BIT(USARTx->ISR, USART_ISR_BUSY) == (USART_ISR_BUSY)) ? 1UL : 0UL);
 80029b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a68 <low_power+0xdc>)
 80029b2:	69d1      	ldr	r1, [r2, #28]
 80029b4:	2280      	movs	r2, #128	@ 0x80
 80029b6:	0252      	lsls	r2, r2, #9
 80029b8:	0008      	movs	r0, r1
 80029ba:	4010      	ands	r0, r2
 80029bc:	4211      	tst	r1, r2
 80029be:	d0f5      	beq.n	80029ac <low_power+0x20>
 80029c0:	0018      	movs	r0, r3
 80029c2:	e7f3      	b.n	80029ac <low_power+0x20>
    /* make sure that UART is ready to receive
//    * (test carried out again later in UARTE_StopModeWakeUpSourceConfig) */
    while( LL_USART_IsActiveFlag_REACK(USART2) == 0 );
 80029c4:	2800      	cmp	r0, #0
 80029c6:	d109      	bne.n	80029dc <low_power+0x50>
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80029c8:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <low_power+0xdc>)
 80029ca:	69d1      	ldr	r1, [r2, #28]
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	03d2      	lsls	r2, r2, #15
 80029d0:	0008      	movs	r0, r1
 80029d2:	4010      	ands	r0, r2
 80029d4:	4211      	tst	r1, r2
 80029d6:	d0f5      	beq.n	80029c4 <low_power+0x38>
 80029d8:	0018      	movs	r0, r3
 80029da:	e7f3      	b.n	80029c4 <low_power+0x38>
      To configure the wake up timer to 20s the WakeUpCounter is set to 0x1FFF:
      RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
      Wakeup Time Base = 16 /(~39.000KHz) = ~0,410 ms
      Wakeup Time = ~20s = 0,410ms  * WakeUpCounter
        ==> WakeUpCounter = ~20s/0,410ms = 48780 = 0xBE8C */
    uint32_t WakeUpCounter = (delay * LSI_FREQ) / 16000;
 80029dc:	4823      	ldr	r0, [pc, #140]	@ (8002a6c <low_power+0xe0>)
 80029de:	4360      	muls	r0, r4
 80029e0:	21fa      	movs	r1, #250	@ 0xfa
 80029e2:	0189      	lsls	r1, r1, #6
 80029e4:	f7fd fbac 	bl	8000140 <__udivsi3>
    RTC_SetWakeUpTimer_IT( WakeUpCounter );
 80029e8:	f7ff fef6 	bl	80027d8 <RTC_SetWakeUpTimer_IT>

    /* set the wake-up event:
     * specify wake-up on RXNE flag */

    if ( UARTE_StopModeWakeUpSourceConfig(  )!= 0 )
 80029ec:	f7ff ff50 	bl	8002890 <UARTE_StopModeWakeUpSourceConfig>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	d135      	bne.n	8002a60 <low_power+0xd4>
    {
      Error_Handler();
    }

    /* Enable the UART Wake UP from stop mode Interrupt */
    USART2_ENABLE_IT( UART_IT_WUF );
 80029f4:	4d1c      	ldr	r5, [pc, #112]	@ (8002a68 <low_power+0xdc>)
 80029f6:	68aa      	ldr	r2, [r5, #8]
 80029f8:	2380      	movs	r3, #128	@ 0x80
 80029fa:	03db      	lsls	r3, r3, #15
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60ab      	str	r3, [r5, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a00:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	2601      	movs	r6, #1
 8002a06:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 8002a0a:	6829      	ldr	r1, [r5, #0]
 8002a0c:	2380      	movs	r3, #128	@ 0x80
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	430b      	orrs	r3, r1
 8002a12:	602b      	str	r3, [r5, #0]
 8002a14:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a18:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1c:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002a20:	68ab      	ldr	r3, [r5, #8]
 8002a22:	4333      	orrs	r3, r6
 8002a24:	60ab      	str	r3, [r5, #8]
 8002a26:	f382 8810 	msr	PRIMASK, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2e:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_UESM);
 8002a32:	682b      	ldr	r3, [r5, #0]
 8002a34:	2702      	movs	r7, #2
 8002a36:	433b      	orrs	r3, r7
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	f382 8810 	msr	PRIMASK, r2


     /* enable MCU wake-up by UART */
     LL_USART_EnableInStopMode(USART2);
    /* Configure the system Power */
    SystemPower_Config();
 8002a3e:	f7ff ff7d 	bl	800293c <SystemPower_Config>

    /* Enter Stop Mode */
    PWR_EnterSTOPMode();
 8002a42:	f7ff ff8d 	bl	8002960 <PWR_EnterSTOPMode>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a46:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4a:	f386 8810 	msr	PRIMASK, r6
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_UESM);
 8002a4e:	682b      	ldr	r3, [r5, #0]
 8002a50:	43bb      	bics	r3, r7
 8002a52:	602b      	str	r3, [r5, #0]
 8002a54:	f382 8810 	msr	PRIMASK, r2

    /* Wake Up based on RXNE flag successful */
    LL_USART_DisableInStopMode( USART2 );

    /* Correct tick value after the sleep */
    HAL_AdjustTickCount(delay);
 8002a58:	0020      	movs	r0, r4
 8002a5a:	f7ff fcdf 	bl	800241c <HAL_AdjustTickCount>

}
 8002a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      Error_Handler();
 8002a60:	f7fe feee 	bl	8001840 <Error_Handler>
 8002a64:	e7c6      	b.n	80029f4 <low_power+0x68>
 8002a66:	46c0      	nop			@ (mov r8, r8)
 8002a68:	40004400 	.word	0x40004400
 8002a6c:	00009088 	.word	0x00009088

08002a70 <UART2_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */

void UART2_IRQHandler()
{
 8002a70:	b570      	push	{r4, r5, r6, lr}
	  uint32_t isrflags   = READ_REG(USART2->ISR);
 8002a72:	4a3f      	ldr	r2, [pc, #252]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002a74:	69d3      	ldr	r3, [r2, #28]
	  uint32_t cr1its     = READ_REG(USART2->CR1);
 8002a76:	6811      	ldr	r1, [r2, #0]
	  uint32_t cr3its     = READ_REG(USART2->CR3);
 8002a78:	6892      	ldr	r2, [r2, #8]
	  uint32_t errorflags;
	  uint32_t errorcode = HAL_UART_ERROR_NONE;

	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
	  if (errorflags == 0U)
 8002a7a:	0718      	lsls	r0, r3, #28
 8002a7c:	d109      	bne.n	8002a92 <UART2_IRQHandler+0x22>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a7e:	0698      	lsls	r0, r3, #26
 8002a80:	d510      	bpl.n	8002aa4 <UART2_IRQHandler+0x34>
	        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a82:	0688      	lsls	r0, r1, #26
 8002a84:	d50e      	bpl.n	8002aa4 <UART2_IRQHandler+0x34>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002a86:	4b3a      	ldr	r3, [pc, #232]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002a88:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002a8a:	b2c0      	uxtb	r0, r0
	    {
	    	UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 8002a8c:	f7ff fc34 	bl	80022f8 <UART_RxCpltCallback>
	    	return;
 8002a90:	e014      	b.n	8002abc <UART2_IRQHandler+0x4c>
	    }
	  }

	  /* If some errors occur */
	  if ((errorflags != 0U)
	      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a92:	2001      	movs	r0, #1
 8002a94:	0005      	movs	r5, r0
 8002a96:	4015      	ands	r5, r2
 8002a98:	4210      	tst	r0, r2
 8002a9a:	d110      	bne.n	8002abe <UART2_IRQHandler+0x4e>
	          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002a9c:	3020      	adds	r0, #32
 8002a9e:	30ff      	adds	r0, #255	@ 0xff
 8002aa0:	4201      	tst	r1, r0
 8002aa2:	d10c      	bne.n	8002abe <UART2_IRQHandler+0x4e>
	    }
	    return;
	  } /* End if some error occurs */

	  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
	  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002aa4:	02d8      	lsls	r0, r3, #11
 8002aa6:	d501      	bpl.n	8002aac <UART2_IRQHandler+0x3c>
 8002aa8:	0252      	lsls	r2, r2, #9
 8002aaa:	d44f      	bmi.n	8002b4c <UART2_IRQHandler+0xdc>
		  LL_USART_ClearFlag_WKUP( USART2 );
  	      return;
	  }

	  /* UART in mode Transmitter ------------------------------------------------*/
	  if (((isrflags & USART_ISR_TXE) != 0U)
 8002aac:	061a      	lsls	r2, r3, #24
 8002aae:	d501      	bpl.n	8002ab4 <UART2_IRQHandler+0x44>
	      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ab0:	060a      	lsls	r2, r1, #24
 8002ab2:	d403      	bmi.n	8002abc <UART2_IRQHandler+0x4c>
	    // Transmit callback placeholder
	    return;
	  }

	  /* UART in mode Transmitter (transmission end) -----------------------------*/
	  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ab4:	065b      	lsls	r3, r3, #25
 8002ab6:	d501      	bpl.n	8002abc <UART2_IRQHandler+0x4c>
 8002ab8:	0649      	lsls	r1, r1, #25
 8002aba:	d44c      	bmi.n	8002b56 <UART2_IRQHandler+0xe6>
		  LL_USART_DisableIT_TC( USART2 );

	    return;
	  }

}
 8002abc:	bd70      	pop	{r4, r5, r6, pc}
	    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002abe:	2201      	movs	r2, #1
 8002ac0:	0014      	movs	r4, r2
 8002ac2:	401c      	ands	r4, r3
 8002ac4:	421a      	tst	r2, r3
 8002ac6:	d008      	beq.n	8002ada <UART2_IRQHandler+0x6a>
 8002ac8:	32ff      	adds	r2, #255	@ 0xff
 8002aca:	000c      	movs	r4, r1
 8002acc:	4014      	ands	r4, r2
 8002ace:	4211      	tst	r1, r2
 8002ad0:	d003      	beq.n	8002ada <UART2_IRQHandler+0x6a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8002ad2:	4a27      	ldr	r2, [pc, #156]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_PE;
 8002ad8:	2401      	movs	r4, #1
	    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ada:	079a      	lsls	r2, r3, #30
 8002adc:	d506      	bpl.n	8002aec <UART2_IRQHandler+0x7c>
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	d004      	beq.n	8002aec <UART2_IRQHandler+0x7c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8002ae2:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002ae4:	2002      	movs	r0, #2
 8002ae6:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_FE;
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4314      	orrs	r4, r2
	    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002aec:	075a      	lsls	r2, r3, #29
 8002aee:	d506      	bpl.n	8002afe <UART2_IRQHandler+0x8e>
 8002af0:	2d00      	cmp	r5, #0
 8002af2:	d004      	beq.n	8002afe <UART2_IRQHandler+0x8e>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8002af4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002af6:	2004      	movs	r0, #4
 8002af8:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_NE;
 8002afa:	2202      	movs	r2, #2
 8002afc:	4314      	orrs	r4, r2
	    if (((isrflags & USART_ISR_ORE) != 0U)
 8002afe:	071a      	lsls	r2, r3, #28
 8002b00:	d51b      	bpl.n	8002b3a <UART2_IRQHandler+0xca>
	        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b02:	068a      	lsls	r2, r1, #26
 8002b04:	d401      	bmi.n	8002b0a <UART2_IRQHandler+0x9a>
 8002b06:	2d00      	cmp	r5, #0
 8002b08:	d017      	beq.n	8002b3a <UART2_IRQHandler+0xca>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	4818      	ldr	r0, [pc, #96]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b0e:	6202      	str	r2, [r0, #32]
	    	errorcode |= HAL_UART_ERROR_ORE;
 8002b10:	4314      	orrs	r4, r2
	      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b12:	069b      	lsls	r3, r3, #26
 8002b14:	d501      	bpl.n	8002b1a <UART2_IRQHandler+0xaa>
	          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b16:	0689      	lsls	r1, r1, #26
 8002b18:	d412      	bmi.n	8002b40 <UART2_IRQHandler+0xd0>
	      if ((READ_BIT(USART2->CR3, USART_CR3_DMAR)) ||
 8002b1a:	4b15      	ldr	r3, [pc, #84]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	065b      	lsls	r3, r3, #25
 8002b20:	d401      	bmi.n	8002b26 <UART2_IRQHandler+0xb6>
 8002b22:	0724      	lsls	r4, r4, #28
 8002b24:	d5ca      	bpl.n	8002abc <UART2_IRQHandler+0x4c>
	        if (READ_BIT(USART2->CR3, USART_CR3_DMAR))
 8002b26:	4b12      	ldr	r3, [pc, #72]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	065b      	lsls	r3, r3, #25
 8002b2c:	d5c6      	bpl.n	8002abc <UART2_IRQHandler+0x4c>
	          CLEAR_BIT(USART2->CR3, USART_CR3_DMAR);
 8002b2e:	4a10      	ldr	r2, [pc, #64]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b30:	6893      	ldr	r3, [r2, #8]
 8002b32:	2140      	movs	r1, #64	@ 0x40
 8002b34:	438b      	bics	r3, r1
 8002b36:	6093      	str	r3, [r2, #8]
	    return;
 8002b38:	e7c0      	b.n	8002abc <UART2_IRQHandler+0x4c>
	    if ( errorcode != HAL_UART_ERROR_NONE)
 8002b3a:	2c00      	cmp	r4, #0
 8002b3c:	d0be      	beq.n	8002abc <UART2_IRQHandler+0x4c>
 8002b3e:	e7e8      	b.n	8002b12 <UART2_IRQHandler+0xa2>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b42:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002b44:	b2c0      	uxtb	r0, r0
		    	UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 8002b46:	f7ff fbd7 	bl	80022f8 <UART_RxCpltCallback>
 8002b4a:	e7e6      	b.n	8002b1a <UART2_IRQHandler+0xaa>
  WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
 8002b4c:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	0352      	lsls	r2, r2, #13
 8002b52:	621a      	str	r2, [r3, #32]
  	      return;
 8002b54:	e7b2      	b.n	8002abc <UART2_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b56:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8002b60:	4a03      	ldr	r2, [pc, #12]	@ (8002b70 <UART2_IRQHandler+0x100>)
 8002b62:	6813      	ldr	r3, [r2, #0]
 8002b64:	2040      	movs	r0, #64	@ 0x40
 8002b66:	4383      	bics	r3, r0
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	f381 8810 	msr	PRIMASK, r1
	    return;
 8002b6e:	e7a5      	b.n	8002abc <UART2_IRQHandler+0x4c>
 8002b70:	40004400 	.word	0x40004400

08002b74 <vTestModeMotionDetect>:
* for the interrupt to occur.
* On detecting motion turn on the blue LED, after a period of
* inactivity, turn off the LED and wait for another motion event.
*/
void vTestModeMotionDetect(void)
{
 8002b74:	b510      	push	{r4, lr}
    param_block_t *pbss = get_pbssConfig();
 8002b76:	f000 fcb9 	bl	80034ec <get_pbssConfig>
 8002b7a:	0004      	movs	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b7c:	b672      	cpsid	i

    __disable_irq();
    if( gMotionDetInt )
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <vTestModeMotionDetect+0x6c>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <vTestModeMotionDetect+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
 8002b86:	b662      	cpsie	i
    	gStationary = false;
    	start_timer( &gStationaryTimer );
        app.pcurrent_blink_interval_ms = &(pbss->blink.interval_in_ms);
    }
    __enable_irq();
    if ( !gStationary && check_timer(gStationaryTimer, MOTIONLESS_TIMER_VALUE ) ) {
 8002b88:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <vTestModeMotionDetect+0x70>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d014      	beq.n	8002bba <vTestModeMotionDetect+0x46>
    	gStationary = true;
        app.pcurrent_blink_interval_ms = &(pbss->blink.interval_slow_in_ms);
    }

    if(gStationary)
 8002b90:	4b14      	ldr	r3, [pc, #80]	@ (8002be4 <vTestModeMotionDetect+0x70>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01e      	beq.n	8002bd6 <vTestModeMotionDetect+0x62>
    {
        LEDS_OFF(LED_GREEN_MASK);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7ff fd1b 	bl	80025d4 <LEDS_OFF>
    }else{
        LEDS_ON(LED_GREEN_MASK);
    }
}
 8002b9e:	bd10      	pop	{r4, pc}
    	gMotionDetInt = false;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <vTestModeMotionDetect+0x6c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
    	gStationary = false;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <vTestModeMotionDetect+0x70>)
 8002ba8:	701a      	strb	r2, [r3, #0]
    	start_timer( &gStationaryTimer );
 8002baa:	480f      	ldr	r0, [pc, #60]	@ (8002be8 <vTestModeMotionDetect+0x74>)
 8002bac:	f7ff fc40 	bl	8002430 <start_timer>
        app.pcurrent_blink_interval_ms = &(pbss->blink.interval_in_ms);
 8002bb0:	0023      	movs	r3, r4
 8002bb2:	330c      	adds	r3, #12
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002bec <vTestModeMotionDetect+0x78>)
 8002bb6:	6093      	str	r3, [r2, #8]
 8002bb8:	e7e5      	b.n	8002b86 <vTestModeMotionDetect+0x12>
    if ( !gStationary && check_timer(gStationaryTimer, MOTIONLESS_TIMER_VALUE ) ) {
 8002bba:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <vTestModeMotionDetect+0x74>)
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <vTestModeMotionDetect+0x7c>)
 8002bc0:	f7ff fc3c 	bl	800243c <check_timer>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d0e3      	beq.n	8002b90 <vTestModeMotionDetect+0x1c>
    	gStationary = true;
 8002bc8:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <vTestModeMotionDetect+0x70>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
        app.pcurrent_blink_interval_ms = &(pbss->blink.interval_slow_in_ms);
 8002bce:	3410      	adds	r4, #16
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <vTestModeMotionDetect+0x78>)
 8002bd2:	609c      	str	r4, [r3, #8]
 8002bd4:	e7dc      	b.n	8002b90 <vTestModeMotionDetect+0x1c>
        LEDS_ON(LED_GREEN_MASK);
 8002bd6:	2001      	movs	r0, #1
 8002bd8:	f7ff fce6 	bl	80025a8 <LEDS_ON>
}
 8002bdc:	e7df      	b.n	8002b9e <vTestModeMotionDetect+0x2a>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	20000345 	.word	0x20000345
 8002be4:	2000033c 	.word	0x2000033c
 8002be8:	20000340 	.word	0x20000340
 8002bec:	2000021c 	.word	0x2000021c
 8002bf0:	00000bb8 	.word	0x00000bb8

08002bf4 <Restart>:
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c28 <Restart+0x34>)
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <Restart+0x38>)
 8002bf8:	601a      	str	r2, [r3, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002c30 <Restart+0x3c>)
 8002bfc:	601a      	str	r2, [r3, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8002c02:	320a      	adds	r2, #10
 8002c04:	609a      	str	r2, [r3, #8]
}
 8002c06:	e002      	b.n	8002c0e <Restart+0x1a>
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8002c08:	2300      	movs	r3, #0
{
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
  LL_IWDG_SetReloadCounter(IWDG, 10);
  while (LL_IWDG_IsReady(IWDG) != 1)
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d005      	beq.n	8002c1a <Restart+0x26>
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <Restart+0x34>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	075b      	lsls	r3, r3, #29
 8002c14:	d1f8      	bne.n	8002c08 <Restart+0x14>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e7f7      	b.n	8002c0a <Restart+0x16>
  WRITE_REG(IWDGx->WINR, IWDG_WINR_WIN & Window);
 8002c1a:	4b03      	ldr	r3, [pc, #12]	@ (8002c28 <Restart+0x34>)
 8002c1c:	220a      	movs	r2, #10
 8002c1e:	611a      	str	r2, [r3, #16]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8002c20:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <Restart+0x40>)
 8002c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c24:	b672      	cpsid	i

  LL_IWDG_SetWindow(IWDG, 10);
  LL_IWDG_ReloadCounter(IWDG);

  __disable_irq();
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <Restart+0x32>
 8002c28:	40003000 	.word	0x40003000
 8002c2c:	0000cccc 	.word	0x0000cccc
 8002c30:	00005555 	.word	0x00005555
 8002c34:	0000aaaa 	.word	0x0000aaaa

08002c38 <SendButton>:
  }

}

void SendButton(void)
{
 8002c38:	b510      	push	{r4, lr}
	dwt_starttx(DWT_START_TX_IMMEDIATE);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f000 ffe2 	bl	8003c04 <dwt_starttx>
}
 8002c40:	bd10      	pop	{r4, pc}

08002c42 <GPIO_EXTI4_15_Callback>:
{
 8002c42:	b510      	push	{r4, lr}
	SendButton();
 8002c44:	f7ff fff8 	bl	8002c38 <SendButton>
}
 8002c48:	bd10      	pop	{r4, pc}
	...

08002c4c <cmd_onERROR>:

/*
 * @brief "error" will be sent if error during parser or command execution returned error
 * */
static void cmd_onERROR(const char *err, control_t *pcmd)
{
 8002c4c:	b530      	push	{r4, r5, lr}
 8002c4e:	4c15      	ldr	r4, [pc, #84]	@ (8002ca4 <cmd_onERROR+0x58>)
 8002c50:	44a5      	add	sp, r4
 8002c52:	0004      	movs	r4, r0
	char str[MAX_STR_SIZE];

    strcpy(str, "error \r\n");
 8002c54:	466a      	mov	r2, sp
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <cmd_onERROR+0x5c>)
 8002c58:	cb21      	ldmia	r3!, {r0, r5}
 8002c5a:	c221      	stmia	r2!, {r0, r5}
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	7013      	strb	r3, [r2, #0]
    if ( strlen(err)< (sizeof(str)-6-3-1)) {
 8002c60:	0020      	movs	r0, r4
 8002c62:	f7fd fa5b 	bl	800011c <strlen>
 8002c66:	23fb      	movs	r3, #251	@ 0xfb
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	4298      	cmp	r0, r3
 8002c6c:	d30a      	bcc.n	8002c84 <cmd_onERROR+0x38>
        strcpy(&str[6], err);
        strcpy(&str[6 + strlen(err)], "\r\n");
    }
    port_tx_msg(str, strlen(str));
 8002c6e:	4668      	mov	r0, sp
 8002c70:	f7fd fa54 	bl	800011c <strlen>
 8002c74:	0001      	movs	r1, r0
 8002c76:	4668      	mov	r0, sp
 8002c78:	f7ff fb98 	bl	80023ac <port_tx_msg>
}
 8002c7c:	2381      	movs	r3, #129	@ 0x81
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	449d      	add	sp, r3
 8002c82:	bd30      	pop	{r4, r5, pc}
        strcpy(&str[6], err);
 8002c84:	0021      	movs	r1, r4
 8002c86:	466b      	mov	r3, sp
 8002c88:	1d98      	adds	r0, r3, #6
 8002c8a:	f002 fe82 	bl	8005992 <strcpy>
        strcpy(&str[6 + strlen(err)], "\r\n");
 8002c8e:	0020      	movs	r0, r4
 8002c90:	f7fd fa44 	bl	800011c <strlen>
 8002c94:	3006      	adds	r0, #6
 8002c96:	4468      	add	r0, sp
 8002c98:	4904      	ldr	r1, [pc, #16]	@ (8002cac <cmd_onERROR+0x60>)
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f002 fe81 	bl	80059a2 <memcpy>
 8002ca0:	e7e5      	b.n	8002c6e <cmd_onERROR+0x22>
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	fffffdfc 	.word	0xfffffdfc
 8002ca8:	08007198 	.word	0x08007198
 8002cac:	080071a4 	.word	0x080071a4

08002cb0 <command_parser>:
 * @brief    checks if input "text" string in known "COMMAND" or "PARAMETER VALUE" format,
 *             checks their execution permissions, a VALUE range if restrictions and
 *             executes COMMAND or sets the PARAMETER to the VALUE
 * */
void command_parser(char *text)
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	46c6      	mov	lr, r8
 8002cb4:	b500      	push	{lr}
 8002cb6:	b08a      	sub	sp, #40	@ 0x28
 8002cb8:	0005      	movs	r5, r0
    control_t   mcmd_console;
    control_t   *pcmd = &mcmd_console;
    command_t   *pk = NULL;

    memset (&mcmd_console, 0 , sizeof(mcmd_console));
 8002cba:	2224      	movs	r2, #36	@ 0x24
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	a801      	add	r0, sp, #4
 8002cc0:	f002 fdd2 	bl	8005868 <memset>

    pcmd->equal = _NO_COMMAND;
    pcmd->indx = 0;
 8002cc4:	e006      	b.n	8002cd4 <command_parser+0x24>

    do{
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 8002cc6:	700a      	strb	r2, [r1, #0]
    }while(text[ ++pcmd->indx ]);
 8002cc8:	9b01      	ldr	r3, [sp, #4]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	5ceb      	ldrb	r3, [r5, r3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <command_parser+0x3a>
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 8002cd4:	9b01      	ldr	r3, [sp, #4]
 8002cd6:	18e9      	adds	r1, r5, r3
 8002cd8:	5cea      	ldrb	r2, [r5, r3]
 8002cda:	4b2d      	ldr	r3, [pc, #180]	@ (8002d90 <command_parser+0xe0>)
 8002cdc:	5c98      	ldrb	r0, [r3, r2]
 8002cde:	2303      	movs	r3, #3
 8002ce0:	4003      	ands	r3, r0
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d1ef      	bne.n	8002cc6 <command_parser+0x16>
 8002ce6:	3a20      	subs	r2, #32
 8002ce8:	e7ed      	b.n	8002cc6 <command_parser+0x16>

    sscanf(text, CMD_FORMAT(MAX_COMMAND_SIZE), pcmd->cmd, &pcmd->val );
 8002cea:	492a      	ldr	r1, [pc, #168]	@ (8002d94 <command_parser+0xe4>)
 8002cec:	ab08      	add	r3, sp, #32
 8002cee:	aa03      	add	r2, sp, #12
 8002cf0:	0028      	movs	r0, r5
 8002cf2:	f002 fd41 	bl	8005778 <siscanf>

    pcmd->indx = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9301      	str	r3, [sp, #4]
    command_t   *pk = NULL;
 8002cfa:	2600      	movs	r6, #0
    while (known_commands[pcmd->indx].name != NULL)
 8002cfc:	e001      	b.n	8002d02 <command_parser+0x52>
                pcmd->equal = _COMMAND_ALLOWED;
                break;
            }
        }

        pcmd->indx++;
 8002cfe:	3401      	adds	r4, #1
 8002d00:	9401      	str	r4, [sp, #4]
    while (known_commands[pcmd->indx].name != NULL)
 8002d02:	9c01      	ldr	r4, [sp, #4]
 8002d04:	4a24      	ldr	r2, [pc, #144]	@ (8002d98 <command_parser+0xe8>)
 8002d06:	0063      	lsls	r3, r4, #1
 8002d08:	191b      	adds	r3, r3, r4
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	589f      	ldr	r7, [r3, r2]
 8002d0e:	2f00      	cmp	r7, #0
 8002d10:	d01a      	beq.n	8002d48 <command_parser+0x98>
        pk = (command_t *) &known_commands[pcmd->indx];
 8002d12:	0063      	lsls	r3, r4, #1
 8002d14:	191b      	adds	r3, r3, r4
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4e1f      	ldr	r6, [pc, #124]	@ (8002d98 <command_parser+0xe8>)
 8002d1a:	199e      	adds	r6, r3, r6
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8002d1c:	0039      	movs	r1, r7
 8002d1e:	a803      	add	r0, sp, #12
 8002d20:	f7fd f9f2 	bl	8000108 <strcmp>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1ea      	bne.n	8002cfe <command_parser+0x4e>
            ( strlen(pcmd->cmd) == strlen(pk->name)) )
 8002d28:	a803      	add	r0, sp, #12
 8002d2a:	f7fd f9f7 	bl	800011c <strlen>
 8002d2e:	4680      	mov	r8, r0
 8002d30:	0038      	movs	r0, r7
 8002d32:	f7fd f9f3 	bl	800011c <strlen>
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8002d36:	4580      	cmp	r8, r0
 8002d38:	d1e1      	bne.n	8002cfe <command_parser+0x4e>
            pcmd->equal = _COMMAND_FOUND;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	9302      	str	r3, [sp, #8]
            if ( pk->mode == mANY )
 8002d3e:	6873      	ldr	r3, [r6, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1dc      	bne.n	8002cfe <command_parser+0x4e>
                pcmd->equal = _COMMAND_ALLOWED;
 8002d44:	3302      	adds	r3, #2
 8002d46:	9302      	str	r3, [sp, #8]
    }


    switch (pcmd->equal)
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <command_parser+0xaa>
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d008      	beq.n	8002d64 <command_parser+0xb4>
            break;
        }
        default:
            break;
    }
}
 8002d52:	b00a      	add	sp, #40	@ 0x28
 8002d54:	bc80      	pop	{r7}
 8002d56:	46b8      	mov	r8, r7
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cmd_onERROR(" incompatible mode", pcmd);
 8002d5a:	4810      	ldr	r0, [pc, #64]	@ (8002d9c <command_parser+0xec>)
 8002d5c:	a901      	add	r1, sp, #4
 8002d5e:	f7ff ff75 	bl	8002c4c <cmd_onERROR>
            break;
 8002d62:	e7f6      	b.n	8002d52 <command_parser+0xa2>
            param_block_t *pbss = get_pbssConfig();
 8002d64:	f000 fbc2 	bl	80034ec <get_pbssConfig>
 8002d68:	0001      	movs	r1, r0
            pcmd->ret = pk->fn(text, pbss, pcmd->val);
 8002d6a:	68b3      	ldr	r3, [r6, #8]
 8002d6c:	9a08      	ldr	r2, [sp, #32]
 8002d6e:	0028      	movs	r0, r5
 8002d70:	4798      	blx	r3
 8002d72:	1e04      	subs	r4, r0, #0
 8002d74:	9009      	str	r0, [sp, #36]	@ 0x24
            if (pcmd->ret)
 8002d76:	d006      	beq.n	8002d86 <command_parser+0xd6>
                port_tx_msg((char *)pcmd->ret, strlen(pcmd->ret));
 8002d78:	f7fd f9d0 	bl	800011c <strlen>
 8002d7c:	0001      	movs	r1, r0
 8002d7e:	0020      	movs	r0, r4
 8002d80:	f7ff fb14 	bl	80023ac <port_tx_msg>
 8002d84:	e7e5      	b.n	8002d52 <command_parser+0xa2>
                cmd_onERROR(" function", pcmd);
 8002d86:	4806      	ldr	r0, [pc, #24]	@ (8002da0 <command_parser+0xf0>)
 8002d88:	a901      	add	r1, sp, #4
 8002d8a:	f7ff ff5f 	bl	8002c4c <cmd_onERROR>
}
 8002d8e:	e7e0      	b.n	8002d52 <command_parser+0xa2>
 8002d90:	080078f8 	.word	0x080078f8
 8002d94:	080071a8 	.word	0x080071a8
 8002d98:	08007478 	.word	0x08007478
 8002d9c:	080071b0 	.word	0x080071b0
 8002da0:	080071c4 	.word	0x080071c4

08002da4 <f_txCode>:
    }
    return (ret);
}
REG_FN(f_txCode)
{
    pbss->dwt_config.txCode = (uint8_t)(val);
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	710a      	strb	r2, [r1, #4]
    pbss->dwt_config.rxCode = (uint8_t)(val);
 8002da8:	714a      	strb	r2, [r1, #5]
    return (CMD_FN_RET_OK);
 8002daa:	4801      	ldr	r0, [pc, #4]	@ (8002db0 <f_txCode+0xc>)
}
 8002dac:	4770      	bx	lr
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	08007574 	.word	0x08007574

08002db4 <f_nsSFD>:
REG_FN(f_nsSFD)
{
    pbss->dwt_config.nsSFD = (val == 0)?(0):(1);
 8002db4:	1e53      	subs	r3, r2, #1
 8002db6:	419a      	sbcs	r2, r3
 8002db8:	718a      	strb	r2, [r1, #6]
    return (CMD_FN_RET_OK);
 8002dba:	4801      	ldr	r0, [pc, #4]	@ (8002dc0 <f_nsSFD+0xc>)
}     
 8002dbc:	4770      	bx	lr
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	08007574 	.word	0x08007574

08002dc4 <f_phrMode>:
    }
    return (ret);
}     
REG_FN(f_phrMode)
{
    pbss->dwt_config.phrMode = (val == 0)?(0):(1);
 8002dc4:	1e53      	subs	r3, r2, #1
 8002dc6:	419a      	sbcs	r2, r3
 8002dc8:	720a      	strb	r2, [r1, #8]
    return (CMD_FN_RET_OK);
 8002dca:	4801      	ldr	r0, [pc, #4]	@ (8002dd0 <f_phrMode+0xc>)
}     
 8002dcc:	4770      	bx	lr
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	08007574 	.word	0x08007574

08002dd4 <f_sfdTO>:
REG_FN(f_sfdTO)
{
    pbss->dwt_config.sfdTO = (uint16_t)(val);
 8002dd4:	b293      	uxth	r3, r2
 8002dd6:	20ff      	movs	r0, #255	@ 0xff
 8002dd8:	4002      	ands	r2, r0
 8002dda:	728a      	strb	r2, [r1, #10]
 8002ddc:	0a1b      	lsrs	r3, r3, #8
 8002dde:	72cb      	strb	r3, [r1, #11]
    return (CMD_FN_RET_OK);
 8002de0:	4800      	ldr	r0, [pc, #0]	@ (8002de4 <f_sfdTO+0x10>)
}     
 8002de2:	4770      	bx	lr
 8002de4:	08007574 	.word	0x08007574

08002de8 <f_smartPowerEn>:
REG_FN(f_smartPowerEn)
{
    pbss->smartPowerEn = (val == 0)?(0):(1);
 8002de8:	1e53      	subs	r3, r2, #1
 8002dea:	419a      	sbcs	r2, r3
 8002dec:	760a      	strb	r2, [r1, #24]
 8002dee:	2300      	movs	r3, #0
 8002df0:	764b      	strb	r3, [r1, #25]
    return (CMD_FN_RET_OK);
 8002df2:	4801      	ldr	r0, [pc, #4]	@ (8002df8 <f_smartPowerEn+0x10>)
}     
 8002df4:	4770      	bx	lr
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	08007574 	.word	0x08007574

08002dfc <f_interval_in_ms>:
REG_FN(f_interval_in_ms)
{
    pbss->blink.interval_in_ms = (uint32_t)(val);
 8002dfc:	730a      	strb	r2, [r1, #12]
 8002dfe:	0a13      	lsrs	r3, r2, #8
 8002e00:	734b      	strb	r3, [r1, #13]
 8002e02:	0c13      	lsrs	r3, r2, #16
 8002e04:	738b      	strb	r3, [r1, #14]
 8002e06:	0e12      	lsrs	r2, r2, #24
 8002e08:	73ca      	strb	r2, [r1, #15]
    return (CMD_FN_RET_OK);
 8002e0a:	4801      	ldr	r0, [pc, #4]	@ (8002e10 <f_interval_in_ms+0x14>)
}     
 8002e0c:	4770      	bx	lr
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	08007574 	.word	0x08007574

08002e14 <f_interval_slow_in_ms>:
REG_FN(f_interval_slow_in_ms)
{
    pbss->blink.interval_slow_in_ms = (uint32_t)(val);
 8002e14:	740a      	strb	r2, [r1, #16]
 8002e16:	0a13      	lsrs	r3, r2, #8
 8002e18:	744b      	strb	r3, [r1, #17]
 8002e1a:	0c13      	lsrs	r3, r2, #16
 8002e1c:	748b      	strb	r3, [r1, #18]
 8002e1e:	0e12      	lsrs	r2, r2, #24
 8002e20:	74ca      	strb	r2, [r1, #19]
    return (CMD_FN_RET_OK);
 8002e22:	4801      	ldr	r0, [pc, #4]	@ (8002e28 <f_interval_slow_in_ms+0x14>)
}     
 8002e24:	4770      	bx	lr
 8002e26:	46c0      	nop			@ (mov r8, r8)
 8002e28:	08007574 	.word	0x08007574

08002e2c <f_randomness>:
REG_FN(f_randomness)
{
    pbss->blink.randomness = (uint8_t)(val);
 8002e2c:	750a      	strb	r2, [r1, #20]
    return (CMD_FN_RET_OK);
 8002e2e:	4801      	ldr	r0, [pc, #4]	@ (8002e34 <f_randomness+0x8>)
}     
 8002e30:	4770      	bx	lr
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	08007574 	.word	0x08007574

08002e38 <f_tcwm>:
    return (ret);
}

REG_FN(f_tcwm)
{
    return (CMD_FN_RET_OK);
 8002e38:	4800      	ldr	r0, [pc, #0]	@ (8002e3c <f_tcwm+0x4>)
}
 8002e3a:	4770      	bx	lr
 8002e3c:	08007574 	.word	0x08007574

08002e40 <f_tcfm>:

REG_FN(f_tcfm)
{
    return (CMD_FN_RET_OK);
 8002e40:	4800      	ldr	r0, [pc, #0]	@ (8002e44 <f_tcfm+0x4>)
}
 8002e42:	4770      	bx	lr
 8002e44:	08007574 	.word	0x08007574

08002e48 <f_chan>:
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	000c      	movs	r4, r1
 8002e4c:	0010      	movs	r0, r2
    int tmp = chan_to_deca(val);
 8002e4e:	f002 f877 	bl	8004f40 <chan_to_deca>
    if(tmp>=0)
 8002e52:	2800      	cmp	r0, #0
 8002e54:	db02      	blt.n	8002e5c <f_chan+0x14>
      pbss->dwt_config.chan = tmp;
 8002e56:	7020      	strb	r0, [r4, #0]
      ret = CMD_FN_RET_OK;
 8002e58:	4801      	ldr	r0, [pc, #4]	@ (8002e60 <f_chan+0x18>)
}
 8002e5a:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002e5c:	2000      	movs	r0, #0
    return (ret);
 8002e5e:	e7fc      	b.n	8002e5a <f_chan+0x12>
 8002e60:	08007574 	.word	0x08007574

08002e64 <f_prf>:
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	000c      	movs	r4, r1
 8002e68:	0010      	movs	r0, r2
    int tmp = prf_to_deca(val);
 8002e6a:	f002 f89f 	bl	8004fac <prf_to_deca>
    if(tmp>=0)
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	db02      	blt.n	8002e78 <f_prf+0x14>
      pbss->dwt_config.prf = (uint8_t)(tmp);
 8002e72:	7060      	strb	r0, [r4, #1]
      ret = CMD_FN_RET_OK;
 8002e74:	4801      	ldr	r0, [pc, #4]	@ (8002e7c <f_prf+0x18>)
}
 8002e76:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002e78:	2000      	movs	r0, #0
    return (ret);
 8002e7a:	e7fc      	b.n	8002e76 <f_prf+0x12>
 8002e7c:	08007574 	.word	0x08007574

08002e80 <f_plen>:
{
 8002e80:	b510      	push	{r4, lr}
 8002e82:	000c      	movs	r4, r1
 8002e84:	0010      	movs	r0, r2
    int tmp = plen_to_deca(val);
 8002e86:	f002 f8d5 	bl	8005034 <plen_to_deca>
    if(tmp>=0)
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	db02      	blt.n	8002e94 <f_plen+0x14>
      pbss->dwt_config.txPreambLength = (uint16_t)(tmp);
 8002e8e:	70a0      	strb	r0, [r4, #2]
      ret = CMD_FN_RET_OK;
 8002e90:	4801      	ldr	r0, [pc, #4]	@ (8002e98 <f_plen+0x18>)
}
 8002e92:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002e94:	2000      	movs	r0, #0
    return (ret);
 8002e96:	e7fc      	b.n	8002e92 <f_plen+0x12>
 8002e98:	08007574 	.word	0x08007574

08002e9c <f_rxPAC>:
{
 8002e9c:	b510      	push	{r4, lr}
 8002e9e:	000c      	movs	r4, r1
 8002ea0:	0010      	movs	r0, r2
    int tmp = pac_to_deca(val);
 8002ea2:	f002 f899 	bl	8004fd8 <pac_to_deca>
    if(tmp>=0)
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	db02      	blt.n	8002eb0 <f_rxPAC+0x14>
      pbss->dwt_config.rxPAC = (uint8_t)(tmp);
 8002eaa:	70e0      	strb	r0, [r4, #3]
      ret = CMD_FN_RET_OK;
 8002eac:	4801      	ldr	r0, [pc, #4]	@ (8002eb4 <f_rxPAC+0x18>)
}
 8002eae:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002eb0:	2000      	movs	r0, #0
    return (ret);
 8002eb2:	e7fc      	b.n	8002eae <f_rxPAC+0x12>
 8002eb4:	08007574 	.word	0x08007574

08002eb8 <f_dataRate>:
{
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	000c      	movs	r4, r1
 8002ebc:	0010      	movs	r0, r2
    int tmp = bitrate_to_deca(val);
 8002ebe:	f002 f84b 	bl	8004f58 <bitrate_to_deca>
    if(tmp>=0)
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	db02      	blt.n	8002ecc <f_dataRate+0x14>
      pbss->dwt_config.dataRate = (uint8_t)(tmp);
 8002ec6:	71e0      	strb	r0, [r4, #7]
      ret = CMD_FN_RET_OK;
 8002ec8:	4801      	ldr	r0, [pc, #4]	@ (8002ed0 <f_dataRate+0x18>)
}     
 8002eca:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8002ecc:	2000      	movs	r0, #0
    return (ret);
 8002ece:	e7fc      	b.n	8002eca <f_dataRate+0x12>
 8002ed0:	08007574 	.word	0x08007574

08002ed4 <f_help_app>:
{
 8002ed4:	b511      	push	{r0, r4, lr}
 8002ed6:	b0ff      	sub	sp, #508	@ 0x1fc
    int        indx = 0;
 8002ed8:	2400      	movs	r4, #0
    while (known_commands[indx].name != NULL)
 8002eda:	e00b      	b.n	8002ef4 <f_help_app+0x20>
        sprintf(str,"%s \r\n", known_commands[indx].name);
 8002edc:	490a      	ldr	r1, [pc, #40]	@ (8002f08 <f_help_app+0x34>)
 8002ede:	4668      	mov	r0, sp
 8002ee0:	f002 fc28 	bl	8005734 <siprintf>
        port_tx_msg((char*)str, strlen(str));
 8002ee4:	4668      	mov	r0, sp
 8002ee6:	f7fd f919 	bl	800011c <strlen>
 8002eea:	0001      	movs	r1, r0
 8002eec:	4668      	mov	r0, sp
 8002eee:	f7ff fa5d 	bl	80023ac <port_tx_msg>
        indx++;
 8002ef2:	3401      	adds	r4, #1
    while (known_commands[indx].name != NULL)
 8002ef4:	4a05      	ldr	r2, [pc, #20]	@ (8002f0c <f_help_app+0x38>)
 8002ef6:	0063      	lsls	r3, r4, #1
 8002ef8:	191b      	adds	r3, r3, r4
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	589a      	ldr	r2, [r3, r2]
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d1ec      	bne.n	8002edc <f_help_app+0x8>
    return (ret);
 8002f02:	4803      	ldr	r0, [pc, #12]	@ (8002f10 <f_help_app+0x3c>)
}
 8002f04:	b07f      	add	sp, #508	@ 0x1fc
 8002f06:	bd12      	pop	{r1, r4, pc}
 8002f08:	080071d0 	.word	0x080071d0
 8002f0c:	08007478 	.word	0x08007478
 8002f10:	08007574 	.word	0x08007574

08002f14 <f_restore>:
/*
 * @brief restore NV configuration from defaults
 *
 * */
REG_FN(f_restore)
{
 8002f14:	b510      	push	{r4, lr}
	restore_nvm_fconfig();
 8002f16:	f000 faef 	bl	80034f8 <restore_nvm_fconfig>

	return (CMD_FN_RET_OK);
 8002f1a:	4801      	ldr	r0, [pc, #4]	@ (8002f20 <f_restore+0xc>)
}
 8002f1c:	bd10      	pop	{r4, pc}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	08007574 	.word	0x08007574

08002f24 <f_restart>:
/*
 * @brief restart the FW
 *
 * */
REG_FN(f_restart)
{
 8002f24:	b510      	push	{r4, lr}
	Restart();
 8002f26:	f7ff fe65 	bl	8002bf4 <Restart>
	return (CMD_FN_RET_OK);
 8002f2a:	4801      	ldr	r0, [pc, #4]	@ (8002f30 <f_restart+0xc>)
}
 8002f2c:	bd10      	pop	{r4, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	08007574 	.word	0x08007574

08002f34 <f_save>:
/*
 * @brief save configuration
 *
 * */
REG_FN(f_save)
{
 8002f34:	b510      	push	{r4, lr}
 8002f36:	0008      	movs	r0, r1
    save_bssConfig(pbss);
 8002f38:	f000 fa8e 	bl	8003458 <save_bssConfig>

    return (CMD_FN_RET_OK);
 8002f3c:	4800      	ldr	r0, [pc, #0]	@ (8002f40 <f_save+0xc>)
}
 8002f3e:	bd10      	pop	{r4, pc}
 8002f40:	08007574 	.word	0x08007574

08002f44 <f_decaTDoATag>:
{
 8002f44:	b510      	push	{r4, lr}
 8002f46:	4c29      	ldr	r4, [pc, #164]	@ (8002fec <f_decaTDoATag+0xa8>)
 8002f48:	44a5      	add	sp, r4
    const char ver[] = FULL_VERSION;
 8002f4a:	ac80      	add	r4, sp, #512	@ 0x200
 8002f4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <f_decaTDoATag+0xac>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	9280      	str	r2, [sp, #512]	@ 0x200
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	80a3      	strh	r3, [r4, #4]
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 8002f56:	4927      	ldr	r1, [pc, #156]	@ (8002ff4 <f_decaTDoATag+0xb0>)
 8002f58:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <f_decaTDoATag+0xb4>)
 8002f5a:	4668      	mov	r0, sp
 8002f5c:	f002 fbea 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"{\"Info\":{\r\n");
 8002f60:	4668      	mov	r0, sp
 8002f62:	f7fd f8db 	bl	800011c <strlen>
 8002f66:	4468      	add	r0, sp
 8002f68:	4924      	ldr	r1, [pc, #144]	@ (8002ffc <f_decaTDoATag+0xb8>)
 8002f6a:	220c      	movs	r2, #12
 8002f6c:	f002 fd19 	bl	80059a2 <memcpy>
    sprintf(&str[strlen(str)],"\"Device\":\"DWM1004C TDoA Tag\",\r\n");
 8002f70:	4668      	mov	r0, sp
 8002f72:	f7fd f8d3 	bl	800011c <strlen>
 8002f76:	4468      	add	r0, sp
 8002f78:	4921      	ldr	r1, [pc, #132]	@ (8003000 <f_decaTDoATag+0xbc>)
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f002 fd11 	bl	80059a2 <memcpy>
    sprintf(&str[strlen(str)],"\"Version\":\"%s\",\r\n", ver);
 8002f80:	4668      	mov	r0, sp
 8002f82:	f7fd f8cb 	bl	800011c <strlen>
 8002f86:	491f      	ldr	r1, [pc, #124]	@ (8003004 <f_decaTDoATag+0xc0>)
 8002f88:	4468      	add	r0, sp
 8002f8a:	0022      	movs	r2, r4
 8002f8c:	f002 fbd2 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"Build\":\"%s %s\",\r\n", __DATE__, __TIME__ );
 8002f90:	4668      	mov	r0, sp
 8002f92:	f7fd f8c3 	bl	800011c <strlen>
 8002f96:	4b1c      	ldr	r3, [pc, #112]	@ (8003008 <f_decaTDoATag+0xc4>)
 8002f98:	4a1c      	ldr	r2, [pc, #112]	@ (800300c <f_decaTDoATag+0xc8>)
 8002f9a:	491d      	ldr	r1, [pc, #116]	@ (8003010 <f_decaTDoATag+0xcc>)
 8002f9c:	4468      	add	r0, sp
 8002f9e:	f002 fbc9 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"Driver\":\"%s\"}}", DW1000_DEVICE_DRIVER_VER_STRING );
 8002fa2:	4668      	mov	r0, sp
 8002fa4:	f7fd f8ba 	bl	800011c <strlen>
 8002fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8003014 <f_decaTDoATag+0xd0>)
 8002faa:	491b      	ldr	r1, [pc, #108]	@ (8003018 <f_decaTDoATag+0xd4>)
 8002fac:	4468      	add	r0, sp
 8002fae:	f002 fbc1 	bl	8005734 <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);   //add formatted 4X of length, this will erase first '{'
 8002fb2:	4668      	mov	r0, sp
 8002fb4:	f7fd f8b2 	bl	800011c <strlen>
 8002fb8:	1f82      	subs	r2, r0, #6
 8002fba:	4918      	ldr	r1, [pc, #96]	@ (800301c <f_decaTDoATag+0xd8>)
 8002fbc:	466b      	mov	r3, sp
 8002fbe:	1c98      	adds	r0, r3, #2
 8002fc0:	f002 fbb8 	bl	8005734 <siprintf>
    str[hlen]='{';                            //restore the start bracket
 8002fc4:	237b      	movs	r3, #123	@ 0x7b
 8002fc6:	466a      	mov	r2, sp
 8002fc8:	7193      	strb	r3, [r2, #6]
    port_tx_msg(str, strlen(str));
 8002fca:	4668      	mov	r0, sp
 8002fcc:	f7fd f8a6 	bl	800011c <strlen>
 8002fd0:	0001      	movs	r1, r0
 8002fd2:	4668      	mov	r0, sp
 8002fd4:	f7ff f9ea 	bl	80023ac <port_tx_msg>
    port_tx_msg("\r\n", 2);
 8002fd8:	4811      	ldr	r0, [pc, #68]	@ (8003020 <f_decaTDoATag+0xdc>)
 8002fda:	2102      	movs	r1, #2
 8002fdc:	f7ff f9e6 	bl	80023ac <port_tx_msg>
    return (ret);
 8002fe0:	4810      	ldr	r0, [pc, #64]	@ (8003024 <f_decaTDoATag+0xe0>)
}
 8002fe2:	2382      	movs	r3, #130	@ 0x82
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	449d      	add	sp, r3
 8002fe8:	bd10      	pop	{r4, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	fffffdf8 	.word	0xfffffdf8
 8002ff0:	0800728c 	.word	0x0800728c
 8002ff4:	080071d8 	.word	0x080071d8
 8002ff8:	00005a5a 	.word	0x00005a5a
 8002ffc:	080071e0 	.word	0x080071e0
 8003000:	080071ec 	.word	0x080071ec
 8003004:	0800720c 	.word	0x0800720c
 8003008:	08007220 	.word	0x08007220
 800300c:	0800722c 	.word	0x0800722c
 8003010:	08007238 	.word	0x08007238
 8003014:	0800724c 	.word	0x0800724c
 8003018:	08007274 	.word	0x08007274
 800301c:	08007284 	.word	0x08007284
 8003020:	080071a4 	.word	0x080071a4
 8003024:	08007574 	.word	0x08007574

08003028 <f_jstat>:
{
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	46d6      	mov	lr, sl
 800302c:	464f      	mov	r7, r9
 800302e:	4646      	mov	r6, r8
 8003030:	b5c0      	push	{r6, r7, lr}
 8003032:	4c7e      	ldr	r4, [pc, #504]	@ (800322c <f_jstat+0x204>)
 8003034:	44a5      	add	sp, r4
 8003036:	000c      	movs	r4, r1
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 8003038:	497d      	ldr	r1, [pc, #500]	@ (8003230 <f_jstat+0x208>)
 800303a:	4a7e      	ldr	r2, [pc, #504]	@ (8003234 <f_jstat+0x20c>)
 800303c:	a806      	add	r0, sp, #24
 800303e:	f002 fb79 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"{\"UWB PARAM\":{\r\n");
 8003042:	a806      	add	r0, sp, #24
 8003044:	f7fd f86a 	bl	800011c <strlen>
 8003048:	ab06      	add	r3, sp, #24
 800304a:	469c      	mov	ip, r3
 800304c:	4460      	add	r0, ip
 800304e:	497a      	ldr	r1, [pc, #488]	@ (8003238 <f_jstat+0x210>)
 8003050:	2211      	movs	r2, #17
 8003052:	f002 fca6 	bl	80059a2 <memcpy>
    sprintf(&str[strlen(str)],"\"CHAN\":%d,\r\n",deca_to_chan(pbss->dwt_config.chan));
 8003056:	a806      	add	r0, sp, #24
 8003058:	f7fd f860 	bl	800011c <strlen>
 800305c:	0005      	movs	r5, r0
 800305e:	7820      	ldrb	r0, [r4, #0]
 8003060:	f001 ff75 	bl	8004f4e <deca_to_chan>
 8003064:	0002      	movs	r2, r0
 8003066:	4975      	ldr	r1, [pc, #468]	@ (800323c <f_jstat+0x214>)
 8003068:	ab06      	add	r3, sp, #24
 800306a:	1958      	adds	r0, r3, r5
 800306c:	f002 fb62 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"PRF\":%d,\r\n", deca_to_prf (pbss->dwt_config.prf));
 8003070:	a806      	add	r0, sp, #24
 8003072:	f7fd f853 	bl	800011c <strlen>
 8003076:	0005      	movs	r5, r0
 8003078:	7860      	ldrb	r0, [r4, #1]
 800307a:	f001 ffa2 	bl	8004fc2 <deca_to_prf>
 800307e:	0002      	movs	r2, r0
 8003080:	496f      	ldr	r1, [pc, #444]	@ (8003240 <f_jstat+0x218>)
 8003082:	ab06      	add	r3, sp, #24
 8003084:	1958      	adds	r0, r3, r5
 8003086:	f002 fb55 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"PLEN\":%d,\r\n",deca_to_plen(pbss->dwt_config.txPreambLength));
 800308a:	a806      	add	r0, sp, #24
 800308c:	f7fd f846 	bl	800011c <strlen>
 8003090:	0005      	movs	r5, r0
 8003092:	78a0      	ldrb	r0, [r4, #2]
 8003094:	f001 fffc 	bl	8005090 <deca_to_plen>
 8003098:	0002      	movs	r2, r0
 800309a:	496a      	ldr	r1, [pc, #424]	@ (8003244 <f_jstat+0x21c>)
 800309c:	ab06      	add	r3, sp, #24
 800309e:	1958      	adds	r0, r3, r5
 80030a0:	f002 fb48 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"DATARATE\":%d,\r\n",deca_to_bitrate(pbss->dwt_config.dataRate));
 80030a4:	a806      	add	r0, sp, #24
 80030a6:	f7fd f839 	bl	800011c <strlen>
 80030aa:	0005      	movs	r5, r0
 80030ac:	79e0      	ldrb	r0, [r4, #7]
 80030ae:	f001 ff69 	bl	8004f84 <deca_to_bitrate>
 80030b2:	0002      	movs	r2, r0
 80030b4:	4964      	ldr	r1, [pc, #400]	@ (8003248 <f_jstat+0x220>)
 80030b6:	ab06      	add	r3, sp, #24
 80030b8:	1958      	adds	r0, r3, r5
 80030ba:	f002 fb3b 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"TXCODE\":%d,\r\n",pbss->dwt_config.txCode);
 80030be:	a806      	add	r0, sp, #24
 80030c0:	f7fd f82c 	bl	800011c <strlen>
 80030c4:	7922      	ldrb	r2, [r4, #4]
 80030c6:	4961      	ldr	r1, [pc, #388]	@ (800324c <f_jstat+0x224>)
 80030c8:	ab06      	add	r3, sp, #24
 80030ca:	469c      	mov	ip, r3
 80030cc:	4460      	add	r0, ip
 80030ce:	f002 fb31 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"PAC\":%d,\r\n", deca_to_pac (pbss->dwt_config.rxPAC));
 80030d2:	a806      	add	r0, sp, #24
 80030d4:	f7fd f822 	bl	800011c <strlen>
 80030d8:	0005      	movs	r5, r0
 80030da:	78e0      	ldrb	r0, [r4, #3]
 80030dc:	f001 ff93 	bl	8005006 <deca_to_pac>
 80030e0:	0002      	movs	r2, r0
 80030e2:	495b      	ldr	r1, [pc, #364]	@ (8003250 <f_jstat+0x228>)
 80030e4:	ab06      	add	r3, sp, #24
 80030e6:	1958      	adds	r0, r3, r5
 80030e8:	f002 fb24 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"NSSFD\":%d,\r\n",pbss->dwt_config.nsSFD);
 80030ec:	a806      	add	r0, sp, #24
 80030ee:	f7fd f815 	bl	800011c <strlen>
 80030f2:	79a2      	ldrb	r2, [r4, #6]
 80030f4:	4957      	ldr	r1, [pc, #348]	@ (8003254 <f_jstat+0x22c>)
 80030f6:	ab06      	add	r3, sp, #24
 80030f8:	469c      	mov	ip, r3
 80030fa:	4460      	add	r0, ip
 80030fc:	f002 fb1a 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"PHRMODE\":%d,\r\n",pbss->dwt_config.phrMode);
 8003100:	a806      	add	r0, sp, #24
 8003102:	f7fd f80b 	bl	800011c <strlen>
 8003106:	7a22      	ldrb	r2, [r4, #8]
 8003108:	4953      	ldr	r1, [pc, #332]	@ (8003258 <f_jstat+0x230>)
 800310a:	ab06      	add	r3, sp, #24
 800310c:	469c      	mov	ip, r3
 800310e:	4460      	add	r0, ip
 8003110:	f002 fb10 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"SMARTPOWER\":%d,\r\n",pbss->smartPowerEn);
 8003114:	a806      	add	r0, sp, #24
 8003116:	f7fd f801 	bl	800011c <strlen>
 800311a:	7e23      	ldrb	r3, [r4, #24]
 800311c:	7e62      	ldrb	r2, [r4, #25]
 800311e:	0212      	lsls	r2, r2, #8
 8003120:	431a      	orrs	r2, r3
 8003122:	494e      	ldr	r1, [pc, #312]	@ (800325c <f_jstat+0x234>)
 8003124:	ab06      	add	r3, sp, #24
 8003126:	469c      	mov	ip, r3
 8003128:	4460      	add	r0, ip
 800312a:	f002 fb03 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKFAST\":%lu,\r\n",pbss->blink.interval_in_ms);
 800312e:	a806      	add	r0, sp, #24
 8003130:	f7fc fff4 	bl	800011c <strlen>
 8003134:	7b23      	ldrb	r3, [r4, #12]
 8003136:	7b62      	ldrb	r2, [r4, #13]
 8003138:	0212      	lsls	r2, r2, #8
 800313a:	431a      	orrs	r2, r3
 800313c:	7ba3      	ldrb	r3, [r4, #14]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	4313      	orrs	r3, r2
 8003142:	7be2      	ldrb	r2, [r4, #15]
 8003144:	0612      	lsls	r2, r2, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	4945      	ldr	r1, [pc, #276]	@ (8003260 <f_jstat+0x238>)
 800314a:	ab06      	add	r3, sp, #24
 800314c:	469c      	mov	ip, r3
 800314e:	4460      	add	r0, ip
 8003150:	f002 faf0 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKSLOW\":%lu,\r\n",pbss->blink.interval_slow_in_ms);
 8003154:	a806      	add	r0, sp, #24
 8003156:	f7fc ffe1 	bl	800011c <strlen>
 800315a:	7c23      	ldrb	r3, [r4, #16]
 800315c:	7c62      	ldrb	r2, [r4, #17]
 800315e:	0212      	lsls	r2, r2, #8
 8003160:	431a      	orrs	r2, r3
 8003162:	7ca3      	ldrb	r3, [r4, #18]
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	4313      	orrs	r3, r2
 8003168:	7ce2      	ldrb	r2, [r4, #19]
 800316a:	0612      	lsls	r2, r2, #24
 800316c:	431a      	orrs	r2, r3
 800316e:	493d      	ldr	r1, [pc, #244]	@ (8003264 <f_jstat+0x23c>)
 8003170:	ab06      	add	r3, sp, #24
 8003172:	469c      	mov	ip, r3
 8003174:	4460      	add	r0, ip
 8003176:	f002 fadd 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"RANDOMNESS\":%d,\r\n",pbss->blink.randomness);
 800317a:	a806      	add	r0, sp, #24
 800317c:	f7fc ffce 	bl	800011c <strlen>
 8003180:	7d22      	ldrb	r2, [r4, #20]
 8003182:	4939      	ldr	r1, [pc, #228]	@ (8003268 <f_jstat+0x240>)
 8003184:	ab06      	add	r3, sp, #24
 8003186:	469c      	mov	ip, r3
 8003188:	4460      	add	r0, ip
 800318a:	f002 fad3 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"TAGIDSET\":%d,\r\n",pbss->tagIDset);
 800318e:	a806      	add	r0, sp, #24
 8003190:	f7fc ffc4 	bl	800011c <strlen>
 8003194:	2322      	movs	r3, #34	@ 0x22
 8003196:	5ce2      	ldrb	r2, [r4, r3]
 8003198:	4934      	ldr	r1, [pc, #208]	@ (800326c <f_jstat+0x244>)
 800319a:	ab06      	add	r3, sp, #24
 800319c:	469c      	mov	ip, r3
 800319e:	4460      	add	r0, ip
 80031a0:	f002 fac8 	bl	8005734 <siprintf>
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x}}",
 80031a4:	a806      	add	r0, sp, #24
 80031a6:	f7fc ffb9 	bl	800011c <strlen>
                                               pbss->tagID[7], pbss->tagID[6], pbss->tagID[5], pbss->tagID[4],
 80031aa:	2321      	movs	r3, #33	@ 0x21
 80031ac:	5ce2      	ldrb	r2, [r4, r3]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	5ce3      	ldrb	r3, [r4, r3]
 80031b2:	469a      	mov	sl, r3
 80031b4:	7fe5      	ldrb	r5, [r4, #31]
 80031b6:	7fa6      	ldrb	r6, [r4, #30]
                                               pbss->tagID[3], pbss->tagID[2], pbss->tagID[1], pbss->tagID[0]);
 80031b8:	7f67      	ldrb	r7, [r4, #29]
 80031ba:	7f21      	ldrb	r1, [r4, #28]
 80031bc:	468c      	mov	ip, r1
 80031be:	7ee1      	ldrb	r1, [r4, #27]
 80031c0:	4688      	mov	r8, r1
 80031c2:	7ea4      	ldrb	r4, [r4, #26]
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x}}",
 80031c4:	492a      	ldr	r1, [pc, #168]	@ (8003270 <f_jstat+0x248>)
 80031c6:	ab06      	add	r3, sp, #24
 80031c8:	4699      	mov	r9, r3
 80031ca:	4448      	add	r0, r9
 80031cc:	9405      	str	r4, [sp, #20]
 80031ce:	4643      	mov	r3, r8
 80031d0:	9304      	str	r3, [sp, #16]
 80031d2:	4663      	mov	r3, ip
 80031d4:	9303      	str	r3, [sp, #12]
 80031d6:	9702      	str	r7, [sp, #8]
 80031d8:	9601      	str	r6, [sp, #4]
 80031da:	9500      	str	r5, [sp, #0]
 80031dc:	4653      	mov	r3, sl
 80031de:	f002 faa9 	bl	8005734 <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);//add formatted 4X of length, this will erase first '{'
 80031e2:	4648      	mov	r0, r9
 80031e4:	f7fc ff9a 	bl	800011c <strlen>
 80031e8:	1f82      	subs	r2, r0, #6
 80031ea:	4922      	ldr	r1, [pc, #136]	@ (8003274 <f_jstat+0x24c>)
 80031ec:	201a      	movs	r0, #26
 80031ee:	4468      	add	r0, sp
 80031f0:	f002 faa0 	bl	8005734 <siprintf>
    str[hlen]='{';                            //restore the start bracket
 80031f4:	464b      	mov	r3, r9
 80031f6:	227b      	movs	r2, #123	@ 0x7b
 80031f8:	719a      	strb	r2, [r3, #6]
    sprintf(&str[strlen(str)],"\r\n");
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fc ff8e 	bl	800011c <strlen>
 8003200:	4448      	add	r0, r9
 8003202:	491d      	ldr	r1, [pc, #116]	@ (8003278 <f_jstat+0x250>)
 8003204:	2203      	movs	r2, #3
 8003206:	f002 fbcc 	bl	80059a2 <memcpy>
    port_tx_msg(str, strlen(str));
 800320a:	4648      	mov	r0, r9
 800320c:	f7fc ff86 	bl	800011c <strlen>
 8003210:	0001      	movs	r1, r0
 8003212:	4648      	mov	r0, r9
 8003214:	f7ff f8ca 	bl	80023ac <port_tx_msg>
    return (CMD_FN_RET_OK);
 8003218:	4818      	ldr	r0, [pc, #96]	@ (800327c <f_jstat+0x254>)
}
 800321a:	2386      	movs	r3, #134	@ 0x86
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	449d      	add	sp, r3
 8003220:	bce0      	pop	{r5, r6, r7}
 8003222:	46ba      	mov	sl, r7
 8003224:	46b1      	mov	r9, r6
 8003226:	46a8      	mov	r8, r5
 8003228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	fffffde8 	.word	0xfffffde8
 8003230:	080071d8 	.word	0x080071d8
 8003234:	00005a5a 	.word	0x00005a5a
 8003238:	08007294 	.word	0x08007294
 800323c:	080072a8 	.word	0x080072a8
 8003240:	080072b8 	.word	0x080072b8
 8003244:	080072c4 	.word	0x080072c4
 8003248:	080072d4 	.word	0x080072d4
 800324c:	080072e8 	.word	0x080072e8
 8003250:	080072f8 	.word	0x080072f8
 8003254:	08007304 	.word	0x08007304
 8003258:	08007314 	.word	0x08007314
 800325c:	08007324 	.word	0x08007324
 8003260:	08007338 	.word	0x08007338
 8003264:	0800734c 	.word	0x0800734c
 8003268:	08007360 	.word	0x08007360
 800326c:	08007374 	.word	0x08007374
 8003270:	08007388 	.word	0x08007388
 8003274:	08007284 	.word	0x08007284
 8003278:	080071a4 	.word	0x080071a4
 800327c:	08007574 	.word	0x08007574

08003280 <f_stat>:
{
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	0004      	movs	r4, r0
 8003284:	000d      	movs	r5, r1
 8003286:	0016      	movs	r6, r2
    f_decaTDoATag(text, pbss, val);
 8003288:	f7ff fe5c 	bl	8002f44 <f_decaTDoATag>
    f_jstat(text, pbss, val);
 800328c:	0032      	movs	r2, r6
 800328e:	0029      	movs	r1, r5
 8003290:	0020      	movs	r0, r4
 8003292:	f7ff fec9 	bl	8003028 <f_jstat>
    return (ret);
 8003296:	4801      	ldr	r0, [pc, #4]	@ (800329c <f_stat+0x1c>)
}
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	08007574 	.word	0x08007574

080032a0 <waitForCommand>:
 *
 * @return  COMMAND_READY : the data for future processing can be found in app.local_buff : app.local_buff_len
 *          NO_DATA : no command yet
 */
uart_data_e waitForCommand(uint8_t *pBuf, uint16_t len)
{
 80032a0:	b570      	push	{r4, r5, r6, lr}
 80032a2:	0005      	movs	r5, r0
 80032a4:	000c      	movs	r4, r1
    static uint8_t cmdLen = 0;
    static uint8_t cmdBuf[COM_RX_BUF_SIZE]; /**< slow command buffer : small size */

    ret = NO_DATA;

    if (len <= 2)
 80032a6:	2902      	cmp	r1, #2
 80032a8:	d841      	bhi.n	800332e <waitForCommand+0x8e>
    {/* "slow" command mode: Human interface. Wait until '\r' or '\n' */
        if (cmdLen == 0)
 80032aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003364 <waitForCommand+0xc4>)
 80032ac:	781c      	ldrb	r4, [r3, #0]
 80032ae:	2c00      	cmp	r4, #0
 80032b0:	d00f      	beq.n	80032d2 <waitForCommand+0x32>
        {
            memset(cmdBuf, 0, sizeof(cmdBuf));
        }

        if (cmdLen < (sizeof(local_buff) - 1))
 80032b2:	2c3e      	cmp	r4, #62	@ 0x3e
 80032b4:	d832      	bhi.n	800331c <waitForCommand+0x7c>
        {
            if (*pBuf == '\n' || *pBuf == '\r')
 80032b6:	782b      	ldrb	r3, [r5, #0]
 80032b8:	2b0a      	cmp	r3, #10
 80032ba:	d010      	beq.n	80032de <waitForCommand+0x3e>
 80032bc:	2b0d      	cmp	r3, #13
 80032be:	d00e      	beq.n	80032de <waitForCommand+0x3e>

                    ret = COMMAND_READY;
                    cmdLen = 0;
                }
            }
            else if (*pBuf == '\b') //erase of a char in the terminal
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d01c      	beq.n	80032fe <waitForCommand+0x5e>
                }

            }
            else
            {
                cmdBuf[cmdLen] = *pBuf;
 80032c4:	4a28      	ldr	r2, [pc, #160]	@ (8003368 <waitForCommand+0xc8>)
 80032c6:	5513      	strb	r3, [r2, r4]
                cmdLen++;
 80032c8:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <waitForCommand+0xc4>)
 80032ca:	3401      	adds	r4, #1
 80032cc:	701c      	strb	r4, [r3, #0]
    ret = NO_DATA;
 80032ce:	2400      	movs	r4, #0
 80032d0:	e03d      	b.n	800334e <waitForCommand+0xae>
            memset(cmdBuf, 0, sizeof(cmdBuf));
 80032d2:	4825      	ldr	r0, [pc, #148]	@ (8003368 <waitForCommand+0xc8>)
 80032d4:	2240      	movs	r2, #64	@ 0x40
 80032d6:	2100      	movs	r1, #0
 80032d8:	f002 fac6 	bl	8005868 <memset>
 80032dc:	e7e9      	b.n	80032b2 <waitForCommand+0x12>
                if (cmdLen > 0)
 80032de:	2c00      	cmp	r4, #0
 80032e0:	d035      	beq.n	800334e <waitForCommand+0xae>
                    memcpy(local_buff, cmdBuf, cmdLen);
 80032e2:	4d22      	ldr	r5, [pc, #136]	@ (800336c <waitForCommand+0xcc>)
 80032e4:	4920      	ldr	r1, [pc, #128]	@ (8003368 <waitForCommand+0xc8>)
 80032e6:	0022      	movs	r2, r4
 80032e8:	0028      	movs	r0, r5
 80032ea:	f002 fb5a 	bl	80059a2 <memcpy>
                    local_buff_length = cmdLen;
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <waitForCommand+0xd0>)
 80032f0:	801c      	strh	r4, [r3, #0]
                    local_buff[cmdLen] = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	552b      	strb	r3, [r5, r4]
                    cmdLen = 0;
 80032f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <waitForCommand+0xc4>)
 80032f8:	7013      	strb	r3, [r2, #0]
                    ret = COMMAND_READY;
 80032fa:	2401      	movs	r4, #1
 80032fc:	e027      	b.n	800334e <waitForCommand+0xae>
                if (cmdLen > 0)
 80032fe:	2c00      	cmp	r4, #0
 8003300:	d025      	beq.n	800334e <waitForCommand+0xae>
                    --cmdLen;
 8003302:	3c01      	subs	r4, #1
 8003304:	b2e4      	uxtb	r4, r4
 8003306:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <waitForCommand+0xc4>)
 8003308:	701c      	strb	r4, [r3, #0]
                    cmdBuf[cmdLen] = 0;
 800330a:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <waitForCommand+0xc8>)
 800330c:	2200      	movs	r2, #0
 800330e:	551a      	strb	r2, [r3, r4]
                    port_tx_msg("\033[K", 3);
 8003310:	4818      	ldr	r0, [pc, #96]	@ (8003374 <waitForCommand+0xd4>)
 8003312:	2103      	movs	r1, #3
 8003314:	f7ff f84a 	bl	80023ac <port_tx_msg>
    ret = NO_DATA;
 8003318:	2400      	movs	r4, #0
 800331a:	e018      	b.n	800334e <waitForCommand+0xae>
            }
        }
        else
        {
            /* error in command protocol : flush everything */
            port_tx_msg("\r\n", 2);
 800331c:	4816      	ldr	r0, [pc, #88]	@ (8003378 <waitForCommand+0xd8>)
 800331e:	2102      	movs	r1, #2
 8003320:	f7ff f844 	bl	80023ac <port_tx_msg>
            cmdLen = 0;
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <waitForCommand+0xc4>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 800332a:	2400      	movs	r4, #0
 800332c:	e00f      	b.n	800334e <waitForCommand+0xae>
        }
    }
    else
    {/* "fast" command mode : assume every data buffer is "COMMAND_READY" */

        if (len < (sizeof(local_buff) - 1))
 800332e:	293e      	cmp	r1, #62	@ 0x3e
 8003330:	d80f      	bhi.n	8003352 <waitForCommand+0xb2>
        {
            memcpy(local_buff, pBuf, len);
 8003332:	4b0e      	ldr	r3, [pc, #56]	@ (800336c <waitForCommand+0xcc>)
 8003334:	000a      	movs	r2, r1
 8003336:	0001      	movs	r1, r0
 8003338:	001d      	movs	r5, r3
 800333a:	0018      	movs	r0, r3
 800333c:	f002 fb31 	bl	80059a2 <memcpy>

            local_buff_length = len;
 8003340:	4b0b      	ldr	r3, [pc, #44]	@ (8003370 <waitForCommand+0xd0>)
 8003342:	801c      	strh	r4, [r3, #0]
            local_buff[len] = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	552b      	strb	r3, [r5, r4]
            cmdLen = 0;
 8003348:	4a06      	ldr	r2, [pc, #24]	@ (8003364 <waitForCommand+0xc4>)
 800334a:	7013      	strb	r3, [r2, #0]

            ret = COMMAND_READY;
 800334c:	2401      	movs	r4, #1
            cmdLen = 0;
        }
    }

    return (ret);
}
 800334e:	0020      	movs	r0, r4
 8003350:	bd70      	pop	{r4, r5, r6, pc}
            port_tx_msg( "Error: \r\n", 2);
 8003352:	480a      	ldr	r0, [pc, #40]	@ (800337c <waitForCommand+0xdc>)
 8003354:	2102      	movs	r1, #2
 8003356:	f7ff f829 	bl	80023ac <port_tx_msg>
            cmdLen = 0;
 800335a:	4b02      	ldr	r3, [pc, #8]	@ (8003364 <waitForCommand+0xc4>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 8003360:	2400      	movs	r4, #0
 8003362:	e7f4      	b.n	800334e <waitForCommand+0xae>
 8003364:	20000388 	.word	0x20000388
 8003368:	20000348 	.word	0x20000348
 800336c:	2000038c 	.word	0x2000038c
 8003370:	2000038a 	.word	0x2000038a
 8003374:	08007468 	.word	0x08007468
 8003378:	080071a4 	.word	0x080071a4
 800337c:	0800746c 	.word	0x0800746c

08003380 <process_uartmsg>:
 *        into UART_COMMAND mode and perform operation
 *        based on uart input.
 * @param[in] void
 * */
void process_uartmsg(void)
{
 8003380:	b500      	push	{lr}
 8003382:	b091      	sub	sp, #68	@ 0x44
    uint8_t rx_buf[COM_RX_BUF_SIZE];
    int uartLen, res;

    memset(rx_buf,0,sizeof(rx_buf));
 8003384:	2240      	movs	r2, #64	@ 0x40
 8003386:	2100      	movs	r1, #0
 8003388:	4668      	mov	r0, sp
 800338a:	f002 fa6d 	bl	8005868 <memset>
    uartLen = deca_uart_receive( rx_buf, COM_RX_BUF_SIZE );
 800338e:	2140      	movs	r1, #64	@ 0x40
 8003390:	4668      	mov	r0, sp
 8003392:	f7ff f813 	bl	80023bc <deca_uart_receive>
    
    if(uartLen > 0)
 8003396:	2800      	cmp	r0, #0
 8003398:	dc01      	bgt.n	800339e <process_uartmsg+0x1e>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
          local_buff[len+1] = 0;
          command_parser((char *)local_buff);            //parse and execute the command
      }
    }
}
 800339a:	b011      	add	sp, #68	@ 0x44
 800339c:	bd00      	pop	{pc}
      res = waitForCommand(rx_buf, uartLen);
 800339e:	b281      	uxth	r1, r0
 80033a0:	4668      	mov	r0, sp
 80033a2:	f7ff ff7d 	bl	80032a0 <waitForCommand>
      if (res == COMMAND_READY)
 80033a6:	2801      	cmp	r0, #1
 80033a8:	d1f7      	bne.n	800339a <process_uartmsg+0x1a>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <process_uartmsg+0x44>)
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80033b2:	d900      	bls.n	80033b6 <process_uartmsg+0x36>
 80033b4:	233f      	movs	r3, #63	@ 0x3f
          local_buff[len+1] = 0;
 80033b6:	3301      	adds	r3, #1
 80033b8:	4803      	ldr	r0, [pc, #12]	@ (80033c8 <process_uartmsg+0x48>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	54c2      	strb	r2, [r0, r3]
          command_parser((char *)local_buff);            //parse and execute the command
 80033be:	f7ff fc77 	bl	8002cb0 <command_parser>
}
 80033c2:	e7ea      	b.n	800339a <process_uartmsg+0x1a>
 80033c4:	2000038a 	.word	0x2000038a
 80033c8:	2000038c 	.word	0x2000038c

080033cc <LockEeprom>:
/* Static functions */

/* Lock the EEPROM: */
static void LockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 80033cc:	4b06      	ldr	r3, [pc, #24]	@ (80033e8 <LockEeprom+0x1c>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	07db      	lsls	r3, r3, #31
 80033d2:	d4fb      	bmi.n	80033cc <LockEeprom>
   {
   }

   FLASH->PECR = FLASH->PECR & ~(FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* disable flash interrupts */
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <LockEeprom+0x1c>)
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	4904      	ldr	r1, [pc, #16]	@ (80033ec <LockEeprom+0x20>)
 80033da:	400a      	ands	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
   FLASH->PECR = FLASH->PECR | FLASH_PECR_PELOCK; /* Lock memory with PELOCK */
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	2101      	movs	r1, #1
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
}
 80033e6:	4770      	bx	lr
 80033e8:	40022000 	.word	0x40022000
 80033ec:	fffcffff 	.word	0xfffcffff

080033f0 <UnlockEeprom>:
#define FLASH_OPTKEY2              ((uint32_t)0x24252627U) /*!< Flash option key2: used with FLASH_OPTKEY1 to
																unlock the write access to the option byte block */

static void UnlockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 80033f0:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <UnlockEeprom+0x28>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	07db      	lsls	r3, r3, #31
 80033f6:	d4fb      	bmi.n	80033f0 <UnlockEeprom>
   {
   }

   if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0) /* If PELOCK is locked */
 80033f8:	4b07      	ldr	r3, [pc, #28]	@ (8003418 <UnlockEeprom+0x28>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	07db      	lsls	r3, r3, #31
 80033fe:	d504      	bpl.n	800340a <UnlockEeprom+0x1a>
   {
      FLASH->PEKEYR = FLASH_PEKEY1; /* Unlock PELOCK */
 8003400:	4b05      	ldr	r3, [pc, #20]	@ (8003418 <UnlockEeprom+0x28>)
 8003402:	4a06      	ldr	r2, [pc, #24]	@ (800341c <UnlockEeprom+0x2c>)
 8003404:	60da      	str	r2, [r3, #12]
      FLASH->PEKEYR = FLASH_PEKEY2;
 8003406:	4a06      	ldr	r2, [pc, #24]	@ (8003420 <UnlockEeprom+0x30>)
 8003408:	60da      	str	r2, [r3, #12]
   }
   FLASH->PECR = FLASH->PECR | (FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* enable flash interrupts */
 800340a:	4a03      	ldr	r2, [pc, #12]	@ (8003418 <UnlockEeprom+0x28>)
 800340c:	6851      	ldr	r1, [r2, #4]
 800340e:	23c0      	movs	r3, #192	@ 0xc0
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	430b      	orrs	r3, r1
 8003414:	6053      	str	r3, [r2, #4]
}
 8003416:	4770      	bx	lr
 8003418:	40022000 	.word	0x40022000
 800341c:	89abcdef 	.word	0x89abcdef
 8003420:	02030405 	.word	0x02030405

08003424 <EepromProgram>:
* Retval None
*/
static void EepromProgram(uint32_t * addr, const uint32_t ee_data)
{
/* NOTE: The EEPROM must be unlocked and the flash interrupts must have been enabled prior to calling this function.*/
   *addr = ee_data; /* write data to EEPROM */
 8003424:	6001      	str	r1, [r0, #0]
   __WFI();
 8003426:	bf30      	wfi
   if (*addr != ee_data)
   {
   }
}
 8003428:	4770      	bx	lr
	...

0800342c <CRC8_Calculate>:

static uint8_t CRC8_Calculate( uint8_t * pdata, uint32_t size)
{
 800342c:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800342e:	4a09      	ldr	r2, [pc, #36]	@ (8003454 <CRC8_Calculate+0x28>)
 8003430:	6893      	ldr	r3, [r2, #8]
 8003432:	2401      	movs	r4, #1
 8003434:	4323      	orrs	r3, r4
 8003436:	6093      	str	r3, [r2, #8]
}
 8003438:	e004      	b.n	8003444 <CRC8_Calculate+0x18>

	LL_CRC_ResetCRCCalculationUnit(CRC);
	while ( size-- > 0)
	{
		LL_CRC_FeedData8(CRC, *pdata++);
 800343a:	7801      	ldrb	r1, [r0, #0]
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 800343c:	4a05      	ldr	r2, [pc, #20]	@ (8003454 <CRC8_Calculate+0x28>)
 800343e:	7011      	strb	r1, [r2, #0]
	while ( size-- > 0)
 8003440:	0019      	movs	r1, r3
		LL_CRC_FeedData8(CRC, *pdata++);
 8003442:	3001      	adds	r0, #1
	while ( size-- > 0)
 8003444:	1e4b      	subs	r3, r1, #1
 8003446:	2900      	cmp	r1, #0
 8003448:	d1f7      	bne.n	800343a <CRC8_Calculate+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (8 bits).
  */
__STATIC_INLINE uint8_t LL_CRC_ReadData8(const CRC_TypeDef *CRCx)
{
  return (uint8_t)READ_REG(CRCx->DR);
 800344a:	4b02      	ldr	r3, [pc, #8]	@ (8003454 <CRC8_Calculate+0x28>)
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	b2c0      	uxtb	r0, r0
	}
	return LL_CRC_ReadData8(CRC);
}
 8003450:	bd10      	pop	{r4, pc}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	40023000 	.word	0x40023000

08003458 <save_bssConfig>:
/* @brief    Writes buffer to the nonvolatile config location &FConfig
 * assumes data fold to page
 *
 */
void save_bssConfig( const param_block_t * pbuf)
{
 8003458:	b510      	push	{r4, lr}
 800345a:	b0c0      	sub	sp, #256	@ 0x100
 800345c:	0004      	movs	r4, r0
	CRCprotected_param_t temp_protected_config;
	memset(&temp_protected_config.free, 0xFF, sizeof(temp_protected_config.free));
 800345e:	229c      	movs	r2, #156	@ 0x9c
 8003460:	21ff      	movs	r1, #255	@ 0xff
 8003462:	a819      	add	r0, sp, #100	@ 0x64
 8003464:	f002 fa00 	bl	8005868 <memset>
	memcpy(&temp_protected_config.params, pbuf, sizeof(temp_protected_config.params));
 8003468:	2263      	movs	r2, #99	@ 0x63
 800346a:	0021      	movs	r1, r4
 800346c:	4668      	mov	r0, sp
 800346e:	f002 fa98 	bl	80059a2 <memcpy>

	temp_protected_config.CRC8 = CRC8_Calculate( (uint8_t *) &temp_protected_config.params, sizeof(temp_protected_config.params));
 8003472:	2163      	movs	r1, #99	@ 0x63
 8003474:	4668      	mov	r0, sp
 8003476:	f7ff ffd9 	bl	800342c <CRC8_Calculate>
 800347a:	2363      	movs	r3, #99	@ 0x63
 800347c:	466a      	mov	r2, sp
 800347e:	54d0      	strb	r0, [r2, r3]
 8003480:	b672      	cpsid	i
		// extra dword to fit the rest of
		num_dwords++;
	}

	__disable_irq();
    UnlockEeprom();
 8003482:	f7ff ffb5 	bl	80033f0 <UnlockEeprom>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8003486:	2400      	movs	r4, #0
 8003488:	e007      	b.n	800349a <save_bssConfig+0x42>
    {
    	EepromProgram(FConfig_dword_pointer + i, current_dword_pointer[i] );
 800348a:	00a0      	lsls	r0, r4, #2
 800348c:	466b      	mov	r3, sp
 800348e:	5819      	ldr	r1, [r3, r0]
 8003490:	4b05      	ldr	r3, [pc, #20]	@ (80034a8 <save_bssConfig+0x50>)
 8003492:	18c0      	adds	r0, r0, r3
 8003494:	f7ff ffc6 	bl	8003424 <EepromProgram>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8003498:	3401      	adds	r4, #1
 800349a:	2c3f      	cmp	r4, #63	@ 0x3f
 800349c:	d9f5      	bls.n	800348a <save_bssConfig+0x32>
    }
    LockEeprom();
 800349e:	f7ff ff95 	bl	80033cc <LockEeprom>
  __ASM volatile ("cpsie i" : : : "memory");
 80034a2:	b662      	cpsie	i
    __enable_irq();
}
 80034a4:	b040      	add	sp, #256	@ 0x100
 80034a6:	bd10      	pop	{r4, pc}
 80034a8:	20000100 	.word	0x20000100

080034ac <load_bssConfig>:

void load_bssConfig(void)
{
 80034ac:	b510      	push	{r4, lr}
	uint8_t tempCRC = CRC8_Calculate( (uint8_t *) &FConfig.params, sizeof(FConfig.params));
 80034ae:	4c0b      	ldr	r4, [pc, #44]	@ (80034dc <load_bssConfig+0x30>)
 80034b0:	2163      	movs	r1, #99	@ 0x63
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7ff ffba 	bl	800342c <CRC8_Calculate>

	if ( tempCRC != FConfig.CRC8 ) {
 80034b8:	2363      	movs	r3, #99	@ 0x63
 80034ba:	5ce3      	ldrb	r3, [r4, r3]
 80034bc:	4283      	cmp	r3, r0
 80034be:	d108      	bne.n	80034d2 <load_bssConfig+0x26>
		save_bssConfig( &defaultFConfig);
	}

	memcpy(&tmpConfig, &FConfig.params, sizeof(tmpConfig));
 80034c0:	4c07      	ldr	r4, [pc, #28]	@ (80034e0 <load_bssConfig+0x34>)
 80034c2:	4906      	ldr	r1, [pc, #24]	@ (80034dc <load_bssConfig+0x30>)
 80034c4:	2263      	movs	r2, #99	@ 0x63
 80034c6:	0020      	movs	r0, r4
 80034c8:	f002 fa6b 	bl	80059a2 <memcpy>
    app.pConfig = &tmpConfig;
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <load_bssConfig+0x38>)
 80034ce:	601c      	str	r4, [r3, #0]
}
 80034d0:	bd10      	pop	{r4, pc}
		save_bssConfig( &defaultFConfig);
 80034d2:	4805      	ldr	r0, [pc, #20]	@ (80034e8 <load_bssConfig+0x3c>)
 80034d4:	f7ff ffc0 	bl	8003458 <save_bssConfig>
 80034d8:	e7f2      	b.n	80034c0 <load_bssConfig+0x14>
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	20000100 	.word	0x20000100
 80034e0:	20000400 	.word	0x20000400
 80034e4:	2000021c 	.word	0x2000021c
 80034e8:	08007a00 	.word	0x08007a00

080034ec <get_pbssConfig>:

param_block_t *get_pbssConfig(void)
{
  return app.pConfig;
 80034ec:	4b01      	ldr	r3, [pc, #4]	@ (80034f4 <get_pbssConfig+0x8>)
 80034ee:	6818      	ldr	r0, [r3, #0]
}
 80034f0:	4770      	bx	lr
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	2000021c 	.word	0x2000021c

080034f8 <restore_nvm_fconfig>:
/* @fn       restore_nvm_fconfig
 * @brief    init main program run-time configuration parameters from NVM
 *           assumes that memory model .text and .bss the same
 * */
void restore_nvm_fconfig(void)
{    
 80034f8:	b510      	push	{r4, lr}
	save_bssConfig( &defaultFConfig);
 80034fa:	4803      	ldr	r0, [pc, #12]	@ (8003508 <restore_nvm_fconfig+0x10>)
 80034fc:	f7ff ffac 	bl	8003458 <save_bssConfig>
    load_bssConfig();
 8003500:	f7ff ffd4 	bl	80034ac <load_bssConfig>
}
 8003504:	bd10      	pop	{r4, pc}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	08007a00 	.word	0x08007a00

0800350c <dwt_getpartid>:
{
#ifdef DWT_API_ERROR_CHECK
    assert(pdw1000local->otp_mask & DWT_READ_OTP_PID);
#endif

    return pdw1000local->partID;
 800350c:	4b01      	ldr	r3, [pc, #4]	@ (8003514 <dwt_getpartid+0x8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6818      	ldr	r0, [r3, #0]
}
 8003512:	4770      	bx	lr
 8003514:	20000004 	.word	0x20000004

08003518 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8003518:	b530      	push	{r4, r5, lr}
 800351a:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 800351c:	2900      	cmp	r1, #0
 800351e:	d10a      	bne.n	8003536 <dwt_writetodevice+0x1e>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8003520:	3980      	subs	r1, #128	@ 0x80
 8003522:	4301      	orrs	r1, r0
 8003524:	a801      	add	r0, sp, #4
 8003526:	7001      	strb	r1, [r0, #0]
 8003528:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800352a:	b280      	uxth	r0, r0
 800352c:	a901      	add	r1, sp, #4
 800352e:	f7fe fe07 	bl	8002140 <writetospi>
} // end dwt_writetodevice()
 8003532:	b003      	add	sp, #12
 8003534:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8003536:	2440      	movs	r4, #64	@ 0x40
 8003538:	4264      	negs	r4, r4
 800353a:	4320      	orrs	r0, r4
 800353c:	ac01      	add	r4, sp, #4
 800353e:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8003540:	297f      	cmp	r1, #127	@ 0x7f
 8003542:	d802      	bhi.n	800354a <dwt_writetodevice+0x32>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8003544:	7061      	strb	r1, [r4, #1]
 8003546:	2002      	movs	r0, #2
 8003548:	e7ef      	b.n	800352a <dwt_writetodevice+0x12>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800354a:	b2cd      	uxtb	r5, r1
 800354c:	ac01      	add	r4, sp, #4
 800354e:	2080      	movs	r0, #128	@ 0x80
 8003550:	4240      	negs	r0, r0
 8003552:	4328      	orrs	r0, r5
 8003554:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8003556:	09c9      	lsrs	r1, r1, #7
 8003558:	70a1      	strb	r1, [r4, #2]
 800355a:	2003      	movs	r0, #3
 800355c:	e7e5      	b.n	800352a <dwt_writetodevice+0x12>

0800355e <dwt_writetxdata>:
{
 800355e:	b510      	push	{r4, lr}
 8003560:	000b      	movs	r3, r1
 8003562:	0011      	movs	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 8003564:	1814      	adds	r4, r2, r0
 8003566:	2280      	movs	r2, #128	@ 0x80
 8003568:	00d2      	lsls	r2, r2, #3
 800356a:	4294      	cmp	r4, r2
 800356c:	dc05      	bgt.n	800357a <dwt_writetxdata+0x1c>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 800356e:	1e82      	subs	r2, r0, #2
 8003570:	2009      	movs	r0, #9
 8003572:	f7ff ffd1 	bl	8003518 <dwt_writetodevice>
        return DWT_SUCCESS;
 8003576:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8003578:	bd10      	pop	{r4, pc}
        return DWT_ERROR;
 800357a:	2001      	movs	r0, #1
 800357c:	4240      	negs	r0, r0
 800357e:	e7fb      	b.n	8003578 <dwt_writetxdata+0x1a>

08003580 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8003580:	b530      	push	{r4, r5, lr}
 8003582:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8003584:	2900      	cmp	r1, #0
 8003586:	d108      	bne.n	800359a <dwt_readfromdevice+0x1a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8003588:	a901      	add	r1, sp, #4
 800358a:	7008      	strb	r0, [r1, #0]
 800358c:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 800358e:	b280      	uxth	r0, r0
 8003590:	a901      	add	r1, sp, #4
 8003592:	f7fe fe21 	bl	80021d8 <readfromspi>
} // end dwt_readfromdevice()
 8003596:	b003      	add	sp, #12
 8003598:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800359a:	2440      	movs	r4, #64	@ 0x40
 800359c:	4320      	orrs	r0, r4
 800359e:	ac01      	add	r4, sp, #4
 80035a0:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80035a2:	297f      	cmp	r1, #127	@ 0x7f
 80035a4:	d802      	bhi.n	80035ac <dwt_readfromdevice+0x2c>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80035a6:	7061      	strb	r1, [r4, #1]
 80035a8:	2002      	movs	r0, #2
 80035aa:	e7f0      	b.n	800358e <dwt_readfromdevice+0xe>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80035ac:	b2cd      	uxtb	r5, r1
 80035ae:	ac01      	add	r4, sp, #4
 80035b0:	2080      	movs	r0, #128	@ 0x80
 80035b2:	4240      	negs	r0, r0
 80035b4:	4328      	orrs	r0, r5
 80035b6:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80035b8:	09c9      	lsrs	r1, r1, #7
 80035ba:	70a1      	strb	r1, [r4, #2]
 80035bc:	2003      	movs	r0, #3
 80035be:	e7e6      	b.n	800358e <dwt_readfromdevice+0xe>

080035c0 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80035c0:	b500      	push	{lr}
 80035c2:	b083      	sub	sp, #12
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80035c4:	b289      	uxth	r1, r1
 80035c6:	b280      	uxth	r0, r0
 80035c8:	ab01      	add	r3, sp, #4
 80035ca:	2204      	movs	r2, #4
 80035cc:	f7ff ffd8 	bl	8003580 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80035d0:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 80035d2:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 80035d4:	e004      	b.n	80035e0 <dwt_read32bitoffsetreg+0x20>
    {
        regval = (regval << 8) + buffer[j] ;
 80035d6:	0200      	lsls	r0, r0, #8
 80035d8:	aa01      	add	r2, sp, #4
 80035da:	5cd2      	ldrb	r2, [r2, r3]
 80035dc:	1880      	adds	r0, r0, r2
    for (j = 3 ; j >= 0 ; j --)
 80035de:	3b01      	subs	r3, #1
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	daf8      	bge.n	80035d6 <dwt_read32bitoffsetreg+0x16>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 80035e4:	b003      	add	sp, #12
 80035e6:	bd00      	pop	{pc}

080035e8 <dwt_readdevid>:
{
 80035e8:	b510      	push	{r4, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80035ea:	2100      	movs	r1, #0
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7ff ffe7 	bl	80035c0 <dwt_read32bitoffsetreg>
}
 80035f2:	bd10      	pop	{r4, pc}

080035f4 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 80035f4:	b500      	push	{lr}
 80035f6:	b083      	sub	sp, #12
    uint16  regval = 0 ;
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80035f8:	b289      	uxth	r1, r1
 80035fa:	b280      	uxth	r0, r0
 80035fc:	ab01      	add	r3, sp, #4
 80035fe:	2202      	movs	r2, #2
 8003600:	f7ff ffbe 	bl	8003580 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8003604:	466b      	mov	r3, sp
 8003606:	7958      	ldrb	r0, [r3, #5]
 8003608:	0200      	lsls	r0, r0, #8
 800360a:	791b      	ldrb	r3, [r3, #4]
 800360c:	18c0      	adds	r0, r0, r3
 800360e:	b280      	uxth	r0, r0
    return regval ;

} // end dwt_read16bitoffsetreg()
 8003610:	b003      	add	sp, #12
 8003612:	bd00      	pop	{pc}

08003614 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8003614:	b510      	push	{r4, lr}
 8003616:	b082      	sub	sp, #8
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8003618:	466b      	mov	r3, sp
 800361a:	1ddc      	adds	r4, r3, #7
 800361c:	b289      	uxth	r1, r1
 800361e:	b280      	uxth	r0, r0
 8003620:	0023      	movs	r3, r4
 8003622:	2201      	movs	r2, #1
 8003624:	f7ff ffac 	bl	8003580 <dwt_readfromdevice>

    return regval ;
 8003628:	7820      	ldrb	r0, [r4, #0]
}
 800362a:	b002      	add	sp, #8
 800362c:	bd10      	pop	{r4, pc}

0800362e <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 800362e:	b500      	push	{lr}
 8003630:	b083      	sub	sp, #12
 8003632:	466b      	mov	r3, sp
 8003634:	3307      	adds	r3, #7
 8003636:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8003638:	b289      	uxth	r1, r1
 800363a:	b280      	uxth	r0, r0
 800363c:	2201      	movs	r2, #1
 800363e:	f7ff ff6b 	bl	8003518 <dwt_writetodevice>
}
 8003642:	b003      	add	sp, #12
 8003644:	bd00      	pop	{pc}

08003646 <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 8003646:	b500      	push	{lr}
 8003648:	b083      	sub	sp, #12
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800364a:	466b      	mov	r3, sp
 800364c:	711a      	strb	r2, [r3, #4]
    buffer[1] = regval >> 8 ;
 800364e:	0a12      	lsrs	r2, r2, #8
 8003650:	715a      	strb	r2, [r3, #5]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8003652:	b289      	uxth	r1, r1
 8003654:	b280      	uxth	r0, r0
 8003656:	ab01      	add	r3, sp, #4
 8003658:	2202      	movs	r2, #2
 800365a:	f7ff ff5d 	bl	8003518 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 800365e:	b003      	add	sp, #12
 8003660:	bd00      	pop	{pc}

08003662 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8003662:	b510      	push	{r4, lr}
 8003664:	b082      	sub	sp, #8
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8003666:	2300      	movs	r3, #0
 8003668:	e003      	b.n	8003672 <dwt_write32bitoffsetreg+0x10>
    {
        buffer[j] = regval & 0xff ;
 800366a:	ac01      	add	r4, sp, #4
 800366c:	54e2      	strb	r2, [r4, r3]
        regval >>= 8 ;
 800366e:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 8003670:	3301      	adds	r3, #1
 8003672:	2b03      	cmp	r3, #3
 8003674:	ddf9      	ble.n	800366a <dwt_write32bitoffsetreg+0x8>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8003676:	b289      	uxth	r1, r1
 8003678:	b280      	uxth	r0, r0
 800367a:	ab01      	add	r3, sp, #4
 800367c:	2204      	movs	r2, #4
 800367e:	f7ff ff4b 	bl	8003518 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8003682:	b002      	add	sp, #8
 8003684:	bd10      	pop	{r4, pc}

08003686 <dwt_configuretxrf>:
{
 8003686:	b510      	push	{r4, lr}
 8003688:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 800368a:	7802      	ldrb	r2, [r0, #0]
 800368c:	210b      	movs	r1, #11
 800368e:	202a      	movs	r0, #42	@ 0x2a
 8003690:	f7ff ffcd 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8003694:	6862      	ldr	r2, [r4, #4]
 8003696:	2100      	movs	r1, #0
 8003698:	201e      	movs	r0, #30
 800369a:	f7ff ffe2 	bl	8003662 <dwt_write32bitoffsetreg>
}
 800369e:	bd10      	pop	{r4, pc}

080036a0 <dwt_writetxfctrl>:
{
 80036a0:	b510      	push	{r4, lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <dwt_writetxfctrl+0x1c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4318      	orrs	r0, r3
 80036aa:	0589      	lsls	r1, r1, #22
 80036ac:	4308      	orrs	r0, r1
 80036ae:	03d2      	lsls	r2, r2, #15
 80036b0:	4302      	orrs	r2, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 80036b2:	2100      	movs	r1, #0
 80036b4:	2008      	movs	r0, #8
 80036b6:	f7ff ffd4 	bl	8003662 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80036ba:	bd10      	pop	{r4, pc}
 80036bc:	20000004 	.word	0x20000004

080036c0 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	0002      	movs	r2, r0
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80036c4:	2104      	movs	r1, #4
 80036c6:	202d      	movs	r0, #45	@ 0x2d
 80036c8:	f7ff ffbd 	bl	8003646 <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80036cc:	2203      	movs	r2, #3
 80036ce:	2106      	movs	r1, #6
 80036d0:	202d      	movs	r0, #45	@ 0x2d
 80036d2:	f7ff ffac 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80036d6:	2200      	movs	r2, #0
 80036d8:	2106      	movs	r1, #6
 80036da:	202d      	movs	r0, #45	@ 0x2d
 80036dc:	f7ff ffa7 	bl	800362e <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80036e0:	210a      	movs	r1, #10
 80036e2:	202d      	movs	r0, #45	@ 0x2d
 80036e4:	f7ff ff6c 	bl	80035c0 <dwt_read32bitoffsetreg>

    // Return the 32bit of read data
    return ret_data;
}
 80036e8:	bd10      	pop	{r4, pc}

080036ea <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80036ea:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80036ec:	2200      	movs	r2, #0
 80036ee:	2102      	movs	r1, #2
 80036f0:	202c      	movs	r0, #44	@ 0x2c
 80036f2:	f7ff ff9c 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80036f6:	2202      	movs	r2, #2
 80036f8:	2102      	movs	r1, #2
 80036fa:	202c      	movs	r0, #44	@ 0x2c
 80036fc:	f7ff ff97 	bl	800362e <dwt_write8bitoffsetreg>
}
 8003700:	bd10      	pop	{r4, pc}
	...

08003704 <dwt_configuresleep>:
 * output parameters
 *
 * no return value
 */
void dwt_configuresleep(uint16 mode, uint8 wake)
{
 8003704:	b510      	push	{r4, lr}
 8003706:	000c      	movs	r4, r1
    // Add predefined sleep settings before writing the mode
    mode |= pdw1000local->sleep_mode;
 8003708:	4b06      	ldr	r3, [pc, #24]	@ (8003724 <dwt_configuresleep+0x20>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	8ada      	ldrh	r2, [r3, #22]
 800370e:	4302      	orrs	r2, r0
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, mode);
 8003710:	2100      	movs	r1, #0
 8003712:	202c      	movs	r0, #44	@ 0x2c
 8003714:	f7ff ff97 	bl	8003646 <dwt_write16bitoffsetreg>

    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, wake);
 8003718:	0022      	movs	r2, r4
 800371a:	2106      	movs	r1, #6
 800371c:	202c      	movs	r0, #44	@ 0x2c
 800371e:	f7ff ff86 	bl	800362e <dwt_write8bitoffsetreg>
}
 8003722:	bd10      	pop	{r4, pc}
 8003724:	20000004 	.word	0x20000004

08003728 <dwt_entersleepaftertx>:
 * output parameters
 *
 * no return value
 */
void dwt_entersleepaftertx(int enable)
{
 8003728:	b510      	push	{r4, lr}
 800372a:	0004      	movs	r4, r0
    uint32 reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 800372c:	2104      	movs	r1, #4
 800372e:	2036      	movs	r0, #54	@ 0x36
 8003730:	f7ff ff46 	bl	80035c0 <dwt_read32bitoffsetreg>
 8003734:	0002      	movs	r2, r0
    // Set the auto TX -> sleep bit
    if(enable)
 8003736:	2c00      	cmp	r4, #0
 8003738:	d007      	beq.n	800374a <dwt_entersleepaftertx+0x22>
    {
        reg |= PMSC_CTRL1_ATXSLP;
 800373a:	2380      	movs	r3, #128	@ 0x80
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	431a      	orrs	r2, r3
    }
    else
    {
        reg &= ~(PMSC_CTRL1_ATXSLP);
    }
    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 8003740:	2104      	movs	r1, #4
 8003742:	2036      	movs	r0, #54	@ 0x36
 8003744:	f7ff ff8d 	bl	8003662 <dwt_write32bitoffsetreg>
}
 8003748:	bd10      	pop	{r4, pc}
        reg &= ~(PMSC_CTRL1_ATXSLP);
 800374a:	4b01      	ldr	r3, [pc, #4]	@ (8003750 <dwt_entersleepaftertx+0x28>)
 800374c:	401a      	ands	r2, r3
 800374e:	e7f7      	b.n	8003740 <dwt_entersleepaftertx+0x18>
 8003750:	fffff7ff 	.word	0xfffff7ff

08003754 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8003754:	b510      	push	{r4, lr}
 8003756:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 8003758:	226d      	movs	r2, #109	@ 0x6d
 800375a:	4909      	ldr	r1, [pc, #36]	@ (8003780 <_dwt_configlde+0x2c>)
 800375c:	202e      	movs	r0, #46	@ 0x2e
 800375e:	f7ff ff66 	bl	800362e <dwt_write8bitoffsetreg>

    if(prfIndex)
 8003762:	2c00      	cmp	r4, #0
 8003764:	d005      	beq.n	8003772 <_dwt_configlde+0x1e>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 8003766:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <_dwt_configlde+0x30>)
 8003768:	4907      	ldr	r1, [pc, #28]	@ (8003788 <_dwt_configlde+0x34>)
 800376a:	202e      	movs	r0, #46	@ 0x2e
 800376c:	f7ff ff6b 	bl	8003646 <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8003770:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8003772:	4a06      	ldr	r2, [pc, #24]	@ (800378c <_dwt_configlde+0x38>)
 8003774:	4904      	ldr	r1, [pc, #16]	@ (8003788 <_dwt_configlde+0x34>)
 8003776:	202e      	movs	r0, #46	@ 0x2e
 8003778:	f7ff ff65 	bl	8003646 <dwt_write16bitoffsetreg>
}
 800377c:	e7f8      	b.n	8003770 <_dwt_configlde+0x1c>
 800377e:	46c0      	nop			@ (mov r8, r8)
 8003780:	00000806 	.word	0x00000806
 8003784:	00000607 	.word	0x00000607
 8003788:	00001806 	.word	0x00001806
 800378c:	00001607 	.word	0x00001607

08003790 <dwt_configure>:
{
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	46ce      	mov	lr, r9
 8003794:	4647      	mov	r7, r8
 8003796:	b580      	push	{r7, lr}
 8003798:	0004      	movs	r4, r0
    uint8 chan = config->chan ;
 800379a:	7806      	ldrb	r6, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 800379c:	7942      	ldrb	r2, [r0, #5]
 800379e:	4b7f      	ldr	r3, [pc, #508]	@ (800399c <dwt_configure+0x20c>)
 80037a0:	0052      	lsls	r2, r2, #1
 80037a2:	5ad7      	ldrh	r7, [r2, r3]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80037a4:	7845      	ldrb	r5, [r0, #1]
 80037a6:	3d01      	subs	r5, #1
 80037a8:	b2ed      	uxtb	r5, r5
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80037aa:	2e04      	cmp	r6, #4
 80037ac:	d100      	bne.n	80037b0 <dwt_configure+0x20>
 80037ae:	e0d0      	b.n	8003952 <dwt_configure+0x1c2>
 80037b0:	2e07      	cmp	r6, #7
 80037b2:	d100      	bne.n	80037b6 <dwt_configure+0x26>
 80037b4:	e0ca      	b.n	800394c <dwt_configure+0x1bc>
 80037b6:	2300      	movs	r3, #0
 80037b8:	4698      	mov	r8, r3
    if(DWT_BR_110K == config->dataRate)
 80037ba:	79e3      	ldrb	r3, [r4, #7]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d000      	beq.n	80037c2 <dwt_configure+0x32>
 80037c0:	e0ca      	b.n	8003958 <dwt_configure+0x1c8>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80037c2:	4b77      	ldr	r3, [pc, #476]	@ (80039a0 <dwt_configure+0x210>)
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	6911      	ldr	r1, [r2, #16]
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	03db      	lsls	r3, r3, #15
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80037d0:	08ff      	lsrs	r7, r7, #3
    pdw1000local->longFrames = config->phrMode ;
 80037d2:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <dwt_configure+0x210>)
 80037d4:	6819      	ldr	r1, [r3, #0]
 80037d6:	7a23      	ldrb	r3, [r4, #8]
 80037d8:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80037da:	690a      	ldr	r2, [r1, #16]
 80037dc:	4b71      	ldr	r3, [pc, #452]	@ (80039a4 <dwt_configure+0x214>)
 80037de:	401a      	ands	r2, r3
 80037e0:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80037e2:	7a23      	ldrb	r3, [r4, #8]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	20c0      	movs	r0, #192	@ 0xc0
 80037e8:	0280      	lsls	r0, r0, #10
 80037ea:	4003      	ands	r3, r0
 80037ec:	431a      	orrs	r2, r3
 80037ee:	610a      	str	r2, [r1, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80037f0:	2100      	movs	r1, #0
 80037f2:	2004      	movs	r0, #4
 80037f4:	f7ff ff35 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80037f8:	003a      	movs	r2, r7
 80037fa:	496b      	ldr	r1, [pc, #428]	@ (80039a8 <dwt_configure+0x218>)
 80037fc:	202e      	movs	r0, #46	@ 0x2e
 80037fe:	f7ff ff22 	bl	8003646 <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 8003802:	0028      	movs	r0, r5
 8003804:	f7ff ffa6 	bl	8003754 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 8003808:	4b68      	ldr	r3, [pc, #416]	@ (80039ac <dwt_configure+0x21c>)
 800380a:	5d9b      	ldrb	r3, [r3, r6]
 800380c:	4699      	mov	r9, r3
 800380e:	4b68      	ldr	r3, [pc, #416]	@ (80039b0 <dwt_configure+0x220>)
 8003810:	464a      	mov	r2, r9
 8003812:	0097      	lsls	r7, r2, #2
 8003814:	58fa      	ldr	r2, [r7, r3]
 8003816:	2107      	movs	r1, #7
 8003818:	202b      	movs	r0, #43	@ 0x2b
 800381a:	f7ff ff22 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800381e:	4b65      	ldr	r3, [pc, #404]	@ (80039b4 <dwt_configure+0x224>)
 8003820:	464a      	mov	r2, r9
 8003822:	5c9a      	ldrb	r2, [r3, r2]
 8003824:	210b      	movs	r1, #11
 8003826:	202b      	movs	r0, #43	@ 0x2b
 8003828:	f7ff ff01 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800382c:	4b62      	ldr	r3, [pc, #392]	@ (80039b8 <dwt_configure+0x228>)
 800382e:	4642      	mov	r2, r8
 8003830:	5c9a      	ldrb	r2, [r3, r2]
 8003832:	210b      	movs	r1, #11
 8003834:	2028      	movs	r0, #40	@ 0x28
 8003836:	f7ff fefa 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800383a:	4b60      	ldr	r3, [pc, #384]	@ (80039bc <dwt_configure+0x22c>)
 800383c:	58fa      	ldr	r2, [r7, r3]
 800383e:	210c      	movs	r1, #12
 8003840:	2028      	movs	r0, #40	@ 0x28
 8003842:	f7ff ff0e 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 8003846:	79e3      	ldrb	r3, [r4, #7]
 8003848:	79a1      	ldrb	r1, [r4, #6]
 800384a:	4a5d      	ldr	r2, [pc, #372]	@ (80039c0 <dwt_configure+0x230>)
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	185b      	adds	r3, r3, r1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	5a9a      	ldrh	r2, [r3, r2]
 8003854:	2102      	movs	r1, #2
 8003856:	2027      	movs	r0, #39	@ 0x27
 8003858:	f7ff fef5 	bl	8003646 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 800385c:	4b59      	ldr	r3, [pc, #356]	@ (80039c4 <dwt_configure+0x234>)
 800385e:	006a      	lsls	r2, r5, #1
 8003860:	5ad2      	ldrh	r2, [r2, r3]
 8003862:	2104      	movs	r1, #4
 8003864:	2027      	movs	r0, #39	@ 0x27
 8003866:	f7ff feee 	bl	8003646 <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 800386a:	79e3      	ldrb	r3, [r4, #7]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d100      	bne.n	8003872 <dwt_configure+0xe2>
 8003870:	e079      	b.n	8003966 <dwt_configure+0x1d6>
        if(config->txPreambLength == DWT_PLEN_64)
 8003872:	78a3      	ldrb	r3, [r4, #2]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d100      	bne.n	800387a <dwt_configure+0xea>
 8003878:	e07b      	b.n	8003972 <dwt_configure+0x1e2>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800387a:	2220      	movs	r2, #32
 800387c:	2106      	movs	r1, #6
 800387e:	2027      	movs	r0, #39	@ 0x27
 8003880:	f7ff fee1 	bl	8003646 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8003884:	2228      	movs	r2, #40	@ 0x28
 8003886:	2126      	movs	r1, #38	@ 0x26
 8003888:	2027      	movs	r0, #39	@ 0x27
 800388a:	f7ff fed0 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 800388e:	78e1      	ldrb	r1, [r4, #3]
 8003890:	4a4d      	ldr	r2, [pc, #308]	@ (80039c8 <dwt_configure+0x238>)
 8003892:	00ab      	lsls	r3, r5, #2
 8003894:	185b      	adds	r3, r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	589a      	ldr	r2, [r3, r2]
 800389a:	2108      	movs	r1, #8
 800389c:	2027      	movs	r0, #39	@ 0x27
 800389e:	f7ff fee0 	bl	8003662 <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 80038a2:	8963      	ldrh	r3, [r4, #10]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <dwt_configure+0x11c>
        config->sfdTO = DWT_SFDTOC_DEF;
 80038a8:	4b48      	ldr	r3, [pc, #288]	@ (80039cc <dwt_configure+0x23c>)
 80038aa:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80038ac:	8962      	ldrh	r2, [r4, #10]
 80038ae:	2120      	movs	r1, #32
 80038b0:	2027      	movs	r0, #39	@ 0x27
 80038b2:	f7ff fec8 	bl	8003646 <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80038b6:	4f46      	ldr	r7, [pc, #280]	@ (80039d0 <dwt_configure+0x240>)
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	210c      	movs	r1, #12
 80038bc:	2023      	movs	r0, #35	@ 0x23
 80038be:	f7ff fed0 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80038c2:	006d      	lsls	r5, r5, #1
 80038c4:	197f      	adds	r7, r7, r5
 80038c6:	88ba      	ldrh	r2, [r7, #4]
 80038c8:	2104      	movs	r1, #4
 80038ca:	2023      	movs	r0, #35	@ 0x23
 80038cc:	f7ff febb 	bl	8003646 <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 80038d0:	79a3      	ldrb	r3, [r4, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d158      	bne.n	8003988 <dwt_configure+0x1f8>
    uint8 useDWnsSFD = 0;
 80038d6:	0019      	movs	r1, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80038d8:	220f      	movs	r2, #15
 80038da:	4032      	ands	r2, r6
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80038dc:	0136      	lsls	r6, r6, #4
 80038de:	20ff      	movs	r0, #255	@ 0xff
 80038e0:	4030      	ands	r0, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80038e2:	4302      	orrs	r2, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80038e4:	7860      	ldrb	r0, [r4, #1]
 80038e6:	0480      	lsls	r0, r0, #18
 80038e8:	25c0      	movs	r5, #192	@ 0xc0
 80038ea:	032d      	lsls	r5, r5, #12
 80038ec:	4028      	ands	r0, r5
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80038ee:	4302      	orrs	r2, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80038f0:	051b      	lsls	r3, r3, #20
 80038f2:	20c0      	movs	r0, #192	@ 0xc0
 80038f4:	0380      	lsls	r0, r0, #14
 80038f6:	4003      	ands	r3, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80038f8:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80038fa:	044b      	lsls	r3, r1, #17
 80038fc:	2180      	movs	r1, #128	@ 0x80
 80038fe:	0289      	lsls	r1, r1, #10
 8003900:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8003902:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8003904:	7923      	ldrb	r3, [r4, #4]
 8003906:	059b      	lsls	r3, r3, #22
 8003908:	21f8      	movs	r1, #248	@ 0xf8
 800390a:	04c9      	lsls	r1, r1, #19
 800390c:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 800390e:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8003910:	7963      	ldrb	r3, [r4, #5]
 8003912:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8003914:	431a      	orrs	r2, r3
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8003916:	2100      	movs	r1, #0
 8003918:	201f      	movs	r0, #31
 800391a:	f7ff fea2 	bl	8003662 <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 800391e:	78a2      	ldrb	r2, [r4, #2]
 8003920:	7863      	ldrb	r3, [r4, #1]
 8003922:	431a      	orrs	r2, r3
 8003924:	0412      	lsls	r2, r2, #16
 8003926:	79e3      	ldrb	r3, [r4, #7]
 8003928:	035b      	lsls	r3, r3, #13
 800392a:	491d      	ldr	r1, [pc, #116]	@ (80039a0 <dwt_configure+0x210>)
 800392c:	6809      	ldr	r1, [r1, #0]
 800392e:	431a      	orrs	r2, r3
 8003930:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8003932:	2100      	movs	r1, #0
 8003934:	2008      	movs	r0, #8
 8003936:	f7ff fe94 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800393a:	2242      	movs	r2, #66	@ 0x42
 800393c:	2100      	movs	r1, #0
 800393e:	200d      	movs	r0, #13
 8003940:	f7ff fe75 	bl	800362e <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8003944:	bcc0      	pop	{r6, r7}
 8003946:	46b9      	mov	r9, r7
 8003948:	46b0      	mov	r8, r6
 800394a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800394c:	2301      	movs	r3, #1
 800394e:	4698      	mov	r8, r3
 8003950:	e733      	b.n	80037ba <dwt_configure+0x2a>
 8003952:	2301      	movs	r3, #1
 8003954:	4698      	mov	r8, r3
 8003956:	e730      	b.n	80037ba <dwt_configure+0x2a>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 8003958:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <dwt_configure+0x210>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	6913      	ldr	r3, [r2, #16]
 800395e:	491d      	ldr	r1, [pc, #116]	@ (80039d4 <dwt_configure+0x244>)
 8003960:	400b      	ands	r3, r1
 8003962:	6113      	str	r3, [r2, #16]
 8003964:	e735      	b.n	80037d2 <dwt_configure+0x42>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 8003966:	2264      	movs	r2, #100	@ 0x64
 8003968:	2106      	movs	r1, #6
 800396a:	2027      	movs	r0, #39	@ 0x27
 800396c:	f7ff fe6b 	bl	8003646 <dwt_write16bitoffsetreg>
 8003970:	e78d      	b.n	800388e <dwt_configure+0xfe>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8003972:	2210      	movs	r2, #16
 8003974:	2106      	movs	r1, #6
 8003976:	2027      	movs	r0, #39	@ 0x27
 8003978:	f7ff fe65 	bl	8003646 <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 800397c:	2210      	movs	r2, #16
 800397e:	2126      	movs	r1, #38	@ 0x26
 8003980:	2027      	movs	r0, #39	@ 0x27
 8003982:	f7ff fe54 	bl	800362e <dwt_write8bitoffsetreg>
 8003986:	e782      	b.n	800388e <dwt_configure+0xfe>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 8003988:	79e3      	ldrb	r3, [r4, #7]
 800398a:	4a13      	ldr	r2, [pc, #76]	@ (80039d8 <dwt_configure+0x248>)
 800398c:	5cd2      	ldrb	r2, [r2, r3]
 800398e:	2100      	movs	r1, #0
 8003990:	2021      	movs	r0, #33	@ 0x21
 8003992:	f7ff fe4c 	bl	800362e <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 8003996:	2101      	movs	r1, #1
        nsSfd_result = 3 ;
 8003998:	2303      	movs	r3, #3
 800399a:	e79d      	b.n	80038d8 <dwt_configure+0x148>
 800399c:	080075b8 	.word	0x080075b8
 80039a0:	20000004 	.word	0x20000004
 80039a4:	fffcffff 	.word	0xfffcffff
 80039a8:	00002804 	.word	0x00002804
 80039ac:	08007664 	.word	0x08007664
 80039b0:	08007634 	.word	0x08007634
 80039b4:	0800762c 	.word	0x0800762c
 80039b8:	08007628 	.word	0x08007628
 80039bc:	0800764c 	.word	0x0800764c
 80039c0:	08007610 	.word	0x08007610
 80039c4:	0800760c 	.word	0x0800760c
 80039c8:	080075ec 	.word	0x080075ec
 80039cc:	00001041 	.word	0x00001041
 80039d0:	08007620 	.word	0x08007620
 80039d4:	ffbfffff 	.word	0xffbfffff
 80039d8:	0800761c 	.word	0x0800761c

080039dc <dwt_setsmarttxpower>:
 * output parameters
 *
 * no return value
 */
void dwt_setsmarttxpower(int enable)
{
 80039dc:	b570      	push	{r4, r5, r6, lr}
 80039de:	0004      	movs	r4, r0
    // Config system register
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80039e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a20 <dwt_setsmarttxpower+0x44>)
 80039e2:	681d      	ldr	r5, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	2004      	movs	r0, #4
 80039e8:	f7ff fdea 	bl	80035c0 <dwt_read32bitoffsetreg>
 80039ec:	6128      	str	r0, [r5, #16]

    // Disable smart power configuration
    if(enable)
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	d00d      	beq.n	8003a0e <dwt_setsmarttxpower+0x32>
    {
        pdw1000local->sysCFGreg &= ~(SYS_CFG_DIS_STXP) ;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <dwt_setsmarttxpower+0x44>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6913      	ldr	r3, [r2, #16]
 80039f8:	490a      	ldr	r1, [pc, #40]	@ (8003a24 <dwt_setsmarttxpower+0x48>)
 80039fa:	400b      	ands	r3, r1
 80039fc:	6113      	str	r3, [r2, #16]
    else
    {
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <dwt_setsmarttxpower+0x44>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	2100      	movs	r1, #0
 8003a06:	2004      	movs	r0, #4
 8003a08:	f7ff fe2b 	bl	8003662 <dwt_write32bitoffsetreg>
}
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
 8003a0e:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <dwt_setsmarttxpower+0x44>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	6911      	ldr	r1, [r2, #16]
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	02db      	lsls	r3, r3, #11
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6113      	str	r3, [r2, #16]
 8003a1c:	e7ef      	b.n	80039fe <dwt_setsmarttxpower+0x22>
 8003a1e:	46c0      	nop			@ (mov r8, r8)
 8003a20:	20000004 	.word	0x20000004
 8003a24:	fffbffff 	.word	0xfffbffff

08003a28 <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 8003a28:	b510      	push	{r4, lr}
    pdw1000local->cbTxDone = cbTxDone;
 8003a2a:	4c03      	ldr	r4, [pc, #12]	@ (8003a38 <dwt_setcallbacks+0x10>)
 8003a2c:	6824      	ldr	r4, [r4, #0]
 8003a2e:	62a0      	str	r0, [r4, #40]	@ 0x28
    pdw1000local->cbRxOk = cbRxOk;
 8003a30:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 8003a32:	6322      	str	r2, [r4, #48]	@ 0x30
    pdw1000local->cbRxErr = cbRxErr;
 8003a34:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003a36:	bd10      	pop	{r4, pc}
 8003a38:	20000004 	.word	0x20000004

08003a3c <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	0004      	movs	r4, r0
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8003a40:	07c3      	lsls	r3, r0, #31
 8003a42:	d52e      	bpl.n	8003aa2 <dwt_setleds+0x66>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8003a44:	2100      	movs	r1, #0
 8003a46:	2026      	movs	r0, #38	@ 0x26
 8003a48:	f7ff fdba 	bl	80035c0 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <dwt_setleds+0x7c>)
 8003a4e:	4018      	ands	r0, r3
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8003a50:	22a0      	movs	r2, #160	@ 0xa0
 8003a52:	0152      	lsls	r2, r2, #5
 8003a54:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8003a56:	2100      	movs	r1, #0
 8003a58:	2026      	movs	r0, #38	@ 0x26
 8003a5a:	f7ff fe02 	bl	8003662 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2036      	movs	r0, #54	@ 0x36
 8003a62:	f7ff fdad 	bl	80035c0 <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 8003a66:	2284      	movs	r2, #132	@ 0x84
 8003a68:	0412      	lsls	r2, r2, #16
 8003a6a:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	2036      	movs	r0, #54	@ 0x36
 8003a70:	f7ff fdf7 	bl	8003662 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8003a74:	2302      	movs	r3, #2
 8003a76:	001d      	movs	r5, r3
 8003a78:	4025      	ands	r5, r4
 8003a7a:	4223      	tst	r3, r4
 8003a7c:	d10f      	bne.n	8003a9e <dwt_setleds+0x62>
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8003a7e:	2488      	movs	r4, #136	@ 0x88
 8003a80:	0064      	lsls	r4, r4, #1
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8003a82:	0022      	movs	r2, r4
 8003a84:	2128      	movs	r1, #40	@ 0x28
 8003a86:	2036      	movs	r0, #54	@ 0x36
 8003a88:	f7ff fdeb 	bl	8003662 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	d012      	beq.n	8003ab6 <dwt_setleds+0x7a>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8003a90:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <dwt_setleds+0x80>)
 8003a92:	4022      	ands	r2, r4
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8003a94:	2128      	movs	r1, #40	@ 0x28
 8003a96:	2036      	movs	r0, #54	@ 0x36
 8003a98:	f7ff fde3 	bl	8003662 <dwt_write32bitoffsetreg>
 8003a9c:	e00b      	b.n	8003ab6 <dwt_setleds+0x7a>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 8003a9e:	4c08      	ldr	r4, [pc, #32]	@ (8003ac0 <dwt_setleds+0x84>)
 8003aa0:	e7ef      	b.n	8003a82 <dwt_setleds+0x46>
        }
    }
    else
    {
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	2026      	movs	r0, #38	@ 0x26
 8003aa6:	f7ff fd8b 	bl	80035c0 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8003aaa:	4a03      	ldr	r2, [pc, #12]	@ (8003ab8 <dwt_setleds+0x7c>)
 8003aac:	4002      	ands	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	2026      	movs	r0, #38	@ 0x26
 8003ab2:	f7ff fdd6 	bl	8003662 <dwt_write32bitoffsetreg>
    }
}
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	ffffc3ff 	.word	0xffffc3ff
 8003abc:	fff0ffff 	.word	0xfff0ffff
 8003ac0:	000f0110 	.word	0x000f0110

08003ac4 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	0004      	movs	r4, r0
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 8003aca:	ab01      	add	r3, sp, #4
 8003acc:	2202      	movs	r2, #2
 8003ace:	2100      	movs	r1, #0
 8003ad0:	2036      	movs	r0, #54	@ 0x36
 8003ad2:	f7ff fd55 	bl	8003580 <dwt_readfromdevice>
    switch(clocks)
 8003ad6:	2c0e      	cmp	r4, #14
 8003ad8:	d80a      	bhi.n	8003af0 <_dwt_enableclocks+0x2c>
 8003ada:	00a4      	lsls	r4, r4, #2
 8003adc:	4b2c      	ldr	r3, [pc, #176]	@ (8003b90 <_dwt_enableclocks+0xcc>)
 8003ade:	591b      	ldr	r3, [r3, r4]
 8003ae0:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 8003ae2:	ab01      	add	r3, sp, #4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 8003ae8:	785a      	ldrb	r2, [r3, #1]
 8003aea:	2101      	movs	r1, #1
 8003aec:	438a      	bics	r2, r1
 8003aee:	705a      	strb	r2, [r3, #1]
        break;
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 8003af0:	ab01      	add	r3, sp, #4
 8003af2:	2201      	movs	r2, #1
 8003af4:	2100      	movs	r1, #0
 8003af6:	2036      	movs	r0, #54	@ 0x36
 8003af8:	f7ff fd0e 	bl	8003518 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8003afc:	466b      	mov	r3, sp
 8003afe:	3305      	adds	r3, #5
 8003b00:	2201      	movs	r2, #1
 8003b02:	2101      	movs	r1, #1
 8003b04:	2036      	movs	r0, #54	@ 0x36
 8003b06:	f7ff fd07 	bl	8003518 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8003b0a:	b002      	add	sp, #8
 8003b0c:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8003b0e:	aa01      	add	r2, sp, #4
 8003b10:	7813      	ldrb	r3, [r2, #0]
 8003b12:	2103      	movs	r1, #3
 8003b14:	438b      	bics	r3, r1
 8003b16:	2101      	movs	r1, #1
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	7013      	strb	r3, [r2, #0]
        break;
 8003b1c:	e7e8      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8003b1e:	aa01      	add	r2, sp, #4
 8003b20:	7813      	ldrb	r3, [r2, #0]
 8003b22:	2103      	movs	r1, #3
 8003b24:	438b      	bics	r3, r1
 8003b26:	2102      	movs	r1, #2
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	7013      	strb	r3, [r2, #0]
        break;
 8003b2c:	e7e0      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8003b2e:	aa01      	add	r2, sp, #4
 8003b30:	7813      	ldrb	r3, [r2, #0]
 8003b32:	214c      	movs	r1, #76	@ 0x4c
 8003b34:	438b      	bics	r3, r1
 8003b36:	2148      	movs	r1, #72	@ 0x48
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	7013      	strb	r3, [r2, #0]
            reg[1] = 0x80 | reg[1];
 8003b3c:	7851      	ldrb	r1, [r2, #1]
 8003b3e:	2380      	movs	r3, #128	@ 0x80
 8003b40:	425b      	negs	r3, r3
 8003b42:	430b      	orrs	r3, r1
 8003b44:	7053      	strb	r3, [r2, #1]
        break;
 8003b46:	e7d3      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[0] = reg[0] & 0xb3;
 8003b48:	ab01      	add	r3, sp, #4
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	214c      	movs	r1, #76	@ 0x4c
 8003b4e:	438a      	bics	r2, r1
 8003b50:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8003b52:	7859      	ldrb	r1, [r3, #1]
 8003b54:	227f      	movs	r2, #127	@ 0x7f
 8003b56:	400a      	ands	r2, r1
 8003b58:	705a      	strb	r2, [r3, #1]
        break;
 8003b5a:	e7c9      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[1] = 0x02 | reg[1];
 8003b5c:	aa01      	add	r2, sp, #4
 8003b5e:	7853      	ldrb	r3, [r2, #1]
 8003b60:	2102      	movs	r1, #2
 8003b62:	430b      	orrs	r3, r1
 8003b64:	7053      	strb	r3, [r2, #1]
        break;
 8003b66:	e7c3      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[1] = reg[1] & 0xfd;
 8003b68:	aa01      	add	r2, sp, #4
 8003b6a:	7853      	ldrb	r3, [r2, #1]
 8003b6c:	2102      	movs	r1, #2
 8003b6e:	438b      	bics	r3, r1
 8003b70:	7053      	strb	r3, [r2, #1]
        break;
 8003b72:	e7bd      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8003b74:	aa01      	add	r2, sp, #4
 8003b76:	7813      	ldrb	r3, [r2, #0]
 8003b78:	2130      	movs	r1, #48	@ 0x30
 8003b7a:	438b      	bics	r3, r1
 8003b7c:	2120      	movs	r1, #32
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	7013      	strb	r3, [r2, #0]
        break;
 8003b82:	e7b5      	b.n	8003af0 <_dwt_enableclocks+0x2c>
            reg[0] = 0x01;
 8003b84:	ab01      	add	r3, sp, #4
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 8003b8a:	3202      	adds	r2, #2
 8003b8c:	705a      	strb	r2, [r3, #1]
        break;
 8003b8e:	e7af      	b.n	8003af0 <_dwt_enableclocks+0x2c>
 8003b90:	0800757c 	.word	0x0800757c

08003b94 <dwt_otpread>:
{
 8003b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b96:	46c6      	mov	lr, r8
 8003b98:	b500      	push	{lr}
 8003b9a:	4680      	mov	r8, r0
 8003b9c:	000f      	movs	r7, r1
 8003b9e:	0016      	movs	r6, r2
    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: Set system clock to XTAL - this is necessary to make sure the values read by _dwt_otpread are reliable
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7ff ff8f 	bl	8003ac4 <_dwt_enableclocks>
    for(i=0; i<length; i++)
 8003ba6:	2400      	movs	r4, #0
 8003ba8:	e008      	b.n	8003bbc <dwt_otpread+0x28>
        array[i] = _dwt_otpread(address + i) ;
 8003baa:	00a5      	lsls	r5, r4, #2
 8003bac:	197d      	adds	r5, r7, r5
 8003bae:	4643      	mov	r3, r8
 8003bb0:	1918      	adds	r0, r3, r4
 8003bb2:	b280      	uxth	r0, r0
 8003bb4:	f7ff fd84 	bl	80036c0 <_dwt_otpread>
 8003bb8:	6028      	str	r0, [r5, #0]
    for(i=0; i<length; i++)
 8003bba:	3401      	adds	r4, #1
 8003bbc:	42a6      	cmp	r6, r4
 8003bbe:	dcf4      	bgt.n	8003baa <dwt_otpread+0x16>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Restore system clock to PLL
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7ff ff7f 	bl	8003ac4 <_dwt_enableclocks>
}
 8003bc6:	bc80      	pop	{r7}
 8003bc8:	46b8      	mov	r8, r7
 8003bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bcc <_dwt_loaducodefromrom>:
{
 8003bcc:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_LDE);
 8003bce:	200e      	movs	r0, #14
 8003bd0:	f7ff ff78 	bl	8003ac4 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 8003bd4:	2280      	movs	r2, #128	@ 0x80
 8003bd6:	0212      	lsls	r2, r2, #8
 8003bd8:	2106      	movs	r1, #6
 8003bda:	202d      	movs	r0, #45	@ 0x2d
 8003bdc:	f7ff fd33 	bl	8003646 <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 8003be0:	2001      	movs	r0, #1
 8003be2:	f7fe faa1 	bl	8002128 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8003be6:	2001      	movs	r0, #1
 8003be8:	f7ff ff6c 	bl	8003ac4 <_dwt_enableclocks>
}
 8003bec:	bd10      	pop	{r4, pc}

08003bee <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 8003bee:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff ff67 	bl	8003ac4 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2104      	movs	r1, #4
 8003bfa:	2036      	movs	r0, #54	@ 0x36
 8003bfc:	f7ff fd23 	bl	8003646 <dwt_write16bitoffsetreg>
}
 8003c00:	bd10      	pop	{r4, pc}
	...

08003c04 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8003c04:	b510      	push	{r4, lr}
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 8003c06:	2302      	movs	r3, #2
 8003c08:	001a      	movs	r2, r3
 8003c0a:	4002      	ands	r2, r0
 8003c0c:	4203      	tst	r3, r0
 8003c0e:	d004      	beq.n	8003c1a <dwt_starttx+0x16>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 8003c10:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <dwt_starttx+0x60>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2201      	movs	r2, #1
 8003c16:	755a      	strb	r2, [r3, #21]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8003c18:	327f      	adds	r2, #127	@ 0x7f
    }

    if (mode & DWT_START_TX_DELAYED)
 8003c1a:	07c0      	lsls	r0, r0, #31
 8003c1c:	d518      	bpl.n	8003c50 <dwt_starttx+0x4c>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8003c1e:	2306      	movs	r3, #6
 8003c20:	431a      	orrs	r2, r3
 8003c22:	b2d2      	uxtb	r2, r2
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8003c24:	2100      	movs	r1, #0
 8003c26:	200d      	movs	r0, #13
 8003c28:	f7ff fd01 	bl	800362e <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8003c2c:	2103      	movs	r1, #3
 8003c2e:	200f      	movs	r0, #15
 8003c30:	f7ff fce0 	bl	80035f4 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8003c34:	2381      	movs	r3, #129	@ 0x81
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4218      	tst	r0, r3
 8003c3a:	d101      	bne.n	8003c40 <dwt_starttx+0x3c>
        {
            retval = DWT_SUCCESS ; // All okay
 8003c3c:	2000      	movs	r0, #0
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;
 8003c3e:	e00f      	b.n	8003c60 <dwt_starttx+0x5c>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8003c40:	2240      	movs	r2, #64	@ 0x40
 8003c42:	2100      	movs	r1, #0
 8003c44:	200d      	movs	r0, #13
 8003c46:	f7ff fcf2 	bl	800362e <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	4240      	negs	r0, r0
 8003c4e:	e007      	b.n	8003c60 <dwt_starttx+0x5c>
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8003c50:	2302      	movs	r3, #2
 8003c52:	431a      	orrs	r2, r3
 8003c54:	b2d2      	uxtb	r2, r2
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8003c56:	2100      	movs	r1, #0
 8003c58:	200d      	movs	r0, #13
 8003c5a:	f7ff fce8 	bl	800362e <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
 8003c5e:	2000      	movs	r0, #0

} // end dwt_starttx()
 8003c60:	bd10      	pop	{r4, pc}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	20000004 	.word	0x20000004

08003c68 <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 8003c68:	b510      	push	{r4, lr}
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 8003c6a:	2103      	movs	r1, #3
 8003c6c:	200f      	movs	r0, #15
 8003c6e:	f7ff fcd1 	bl	8003614 <dwt_read8bitoffsetreg>

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8003c72:	0043      	lsls	r3, r0, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8003c74:	4058      	eors	r0, r3
 8003c76:	0600      	lsls	r0, r0, #24
 8003c78:	d400      	bmi.n	8003c7c <dwt_syncrxbufptrs+0x14>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 8003c7a:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2103      	movs	r1, #3
 8003c80:	200d      	movs	r0, #13
 8003c82:	f7ff fcd4 	bl	800362e <dwt_write8bitoffsetreg>
}
 8003c86:	e7f8      	b.n	8003c7a <dwt_syncrxbufptrs+0x12>

08003c88 <dwt_forcetrxoff>:
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	200e      	movs	r0, #14
 8003c8e:	f7ff fc97 	bl	80035c0 <dwt_read32bitoffsetreg>
 8003c92:	0005      	movs	r5, r0
    stat = decamutexon() ;
 8003c94:	f7fe fc28 	bl	80024e8 <decamutexon>
 8003c98:	0004      	movs	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	200e      	movs	r0, #14
 8003ca0:	f7ff fcdf 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 8003ca4:	2240      	movs	r2, #64	@ 0x40
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	200d      	movs	r0, #13
 8003caa:	f7ff fcc0 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 8003cae:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <dwt_forcetrxoff+0x50>)
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	200f      	movs	r0, #15
 8003cb4:	f7ff fcd5 	bl	8003662 <dwt_write32bitoffsetreg>
    dwt_syncrxbufptrs();
 8003cb8:	f7ff ffd6 	bl	8003c68 <dwt_syncrxbufptrs>
    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 8003cbc:	002a      	movs	r2, r5
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	200e      	movs	r0, #14
 8003cc2:	f7ff fcce 	bl	8003662 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 8003cc6:	0020      	movs	r0, r4
 8003cc8:	f7fe fc10 	bl	80024ec <decamutexoff>
    pdw1000local->wait4resp = 0;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <dwt_forcetrxoff+0x54>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	755a      	strb	r2, [r3, #21]
} // end deviceforcetrxoff()
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	2427fff8 	.word	0x2427fff8
 8003cdc:	20000004 	.word	0x20000004

08003ce0 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 8003ce0:	b510      	push	{r4, lr}
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 8003ce2:	22e0      	movs	r2, #224	@ 0xe0
 8003ce4:	2103      	movs	r1, #3
 8003ce6:	2036      	movs	r0, #54	@ 0x36
 8003ce8:	f7ff fca1 	bl	800362e <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8003cec:	22f0      	movs	r2, #240	@ 0xf0
 8003cee:	2103      	movs	r1, #3
 8003cf0:	2036      	movs	r0, #54	@ 0x36
 8003cf2:	f7ff fc9c 	bl	800362e <dwt_write8bitoffsetreg>
}
 8003cf6:	bd10      	pop	{r4, pc}

08003cf8 <dwt_isr>:
{
 8003cf8:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 8003cfa:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <dwt_isr+0x150>)
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	200f      	movs	r0, #15
 8003d02:	f7ff fc5d 	bl	80035c0 <dwt_read32bitoffsetreg>
 8003d06:	0004      	movs	r4, r0
 8003d08:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
 8003d0a:	0443      	lsls	r3, r0, #17
 8003d0c:	d40a      	bmi.n	8003d24 <dwt_isr+0x2c>
    if(status & SYS_STATUS_TXFRS)
 8003d0e:	0623      	lsls	r3, r4, #24
 8003d10:	d455      	bmi.n	8003dbe <dwt_isr+0xc6>
    if(status & SYS_STATUS_ALL_RX_TO)
 8003d12:	2388      	movs	r3, #136	@ 0x88
 8003d14:	039b      	lsls	r3, r3, #14
 8003d16:	421c      	tst	r4, r3
 8003d18:	d16a      	bne.n	8003df0 <dwt_isr+0xf8>
    if(status & SYS_STATUS_ALL_RX_ERR)
 8003d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e4c <dwt_isr+0x154>)
 8003d1c:	421c      	tst	r4, r3
 8003d1e:	d000      	beq.n	8003d22 <dwt_isr+0x2a>
 8003d20:	e07c      	b.n	8003e1c <dwt_isr+0x124>
}
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 8003d24:	22de      	movs	r2, #222	@ 0xde
 8003d26:	01d2      	lsls	r2, r2, #7
 8003d28:	2100      	movs	r1, #0
 8003d2a:	200f      	movs	r0, #15
 8003d2c:	f7ff fc99 	bl	8003662 <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
 8003d30:	4d45      	ldr	r5, [pc, #276]	@ (8003e48 <dwt_isr+0x150>)
 8003d32:	682a      	ldr	r2, [r5, #0]
 8003d34:	2324      	movs	r3, #36	@ 0x24
 8003d36:	2100      	movs	r1, #0
 8003d38:	54d1      	strb	r1, [r2, r3]
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 8003d3a:	2010      	movs	r0, #16
 8003d3c:	f7ff fc5a 	bl	80035f4 <dwt_read16bitoffsetreg>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8003d40:	0582      	lsls	r2, r0, #22
 8003d42:	0d92      	lsrs	r2, r2, #22
        if(pdw1000local->longFrames == 0)
 8003d44:	682b      	ldr	r3, [r5, #0]
 8003d46:	7a99      	ldrb	r1, [r3, #10]
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	d101      	bne.n	8003d50 <dwt_isr+0x58>
            len &= RX_FINFO_RXFLEN_MASK;
 8003d4c:	227f      	movs	r2, #127	@ 0x7f
 8003d4e:	4002      	ands	r2, r0
        pdw1000local->cbData.datalength = len;
 8003d50:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
 8003d52:	0400      	lsls	r0, r0, #16
 8003d54:	d41f      	bmi.n	8003d96 <dwt_isr+0x9e>
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
 8003d56:	3322      	adds	r3, #34	@ 0x22
 8003d58:	2202      	movs	r2, #2
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	2011      	movs	r0, #17
 8003d5e:	f7ff fc0f 	bl	8003580 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 8003d62:	0723      	lsls	r3, r4, #28
 8003d64:	d505      	bpl.n	8003d72 <dwt_isr+0x7a>
 8003d66:	4b38      	ldr	r3, [pc, #224]	@ (8003e48 <dwt_isr+0x150>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2322      	movs	r3, #34	@ 0x22
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	d517      	bpl.n	8003da2 <dwt_isr+0xaa>
        if(pdw1000local->cbRxOk != NULL)
 8003d72:	4b35      	ldr	r3, [pc, #212]	@ (8003e48 <dwt_isr+0x150>)
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <dwt_isr+0x88>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
 8003d7c:	301c      	adds	r0, #28
 8003d7e:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
 8003d80:	4b31      	ldr	r3, [pc, #196]	@ (8003e48 <dwt_isr+0x150>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	7d1b      	ldrb	r3, [r3, #20]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0c1      	beq.n	8003d0e <dwt_isr+0x16>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2103      	movs	r1, #3
 8003d8e:	200d      	movs	r0, #13
 8003d90:	f7ff fc4d 	bl	800362e <dwt_write8bitoffsetreg>
 8003d94:	e7bb      	b.n	8003d0e <dwt_isr+0x16>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8003d96:	2124      	movs	r1, #36	@ 0x24
 8003d98:	5c5a      	ldrb	r2, [r3, r1]
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	4302      	orrs	r2, r0
 8003d9e:	545a      	strb	r2, [r3, r1]
 8003da0:	e7d9      	b.n	8003d56 <dwt_isr+0x5e>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 8003da2:	2208      	movs	r2, #8
 8003da4:	2100      	movs	r1, #0
 8003da6:	200f      	movs	r0, #15
 8003da8:	f7ff fc5b 	bl	8003662 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8003dac:	4b26      	ldr	r3, [pc, #152]	@ (8003e48 <dwt_isr+0x150>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	2108      	movs	r1, #8
 8003db4:	438a      	bics	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 8003db8:	2200      	movs	r2, #0
 8003dba:	755a      	strb	r2, [r3, #21]
 8003dbc:	e7d9      	b.n	8003d72 <dwt_isr+0x7a>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 8003dbe:	22f8      	movs	r2, #248	@ 0xf8
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	200f      	movs	r0, #15
 8003dc4:	f7ff fc4d 	bl	8003662 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
 8003dc8:	0723      	lsls	r3, r4, #28
 8003dca:	d504      	bpl.n	8003dd6 <dwt_isr+0xde>
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e48 <dwt_isr+0x150>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	7d5b      	ldrb	r3, [r3, #21]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d107      	bne.n	8003de6 <dwt_isr+0xee>
        if(pdw1000local->cbTxDone != NULL)
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <dwt_isr+0x150>)
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d098      	beq.n	8003d12 <dwt_isr+0x1a>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
 8003de0:	301c      	adds	r0, #28
 8003de2:	4798      	blx	r3
 8003de4:	e795      	b.n	8003d12 <dwt_isr+0x1a>
            dwt_forcetrxoff(); // Turn the RX off
 8003de6:	f7ff ff4f 	bl	8003c88 <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 8003dea:	f7ff ff79 	bl	8003ce0 <dwt_rxreset>
 8003dee:	e7f2      	b.n	8003dd6 <dwt_isr+0xde>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 8003df0:	2280      	movs	r2, #128	@ 0x80
 8003df2:	0292      	lsls	r2, r2, #10
 8003df4:	2100      	movs	r1, #0
 8003df6:	200f      	movs	r0, #15
 8003df8:	f7ff fc33 	bl	8003662 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8003dfc:	4d12      	ldr	r5, [pc, #72]	@ (8003e48 <dwt_isr+0x150>)
 8003dfe:	682b      	ldr	r3, [r5, #0]
 8003e00:	2200      	movs	r2, #0
 8003e02:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 8003e04:	f7ff ff40 	bl	8003c88 <dwt_forcetrxoff>
        dwt_rxreset();
 8003e08:	f7ff ff6a 	bl	8003ce0 <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
 8003e0c:	6828      	ldr	r0, [r5, #0]
 8003e0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d100      	bne.n	8003e16 <dwt_isr+0x11e>
 8003e14:	e781      	b.n	8003d1a <dwt_isr+0x22>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
 8003e16:	301c      	adds	r0, #28
 8003e18:	4798      	blx	r3
 8003e1a:	e77e      	b.n	8003d1a <dwt_isr+0x22>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 8003e1c:	001a      	movs	r2, r3
 8003e1e:	2100      	movs	r1, #0
 8003e20:	200f      	movs	r0, #15
 8003e22:	f7ff fc1e 	bl	8003662 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8003e26:	4c08      	ldr	r4, [pc, #32]	@ (8003e48 <dwt_isr+0x150>)
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 8003e2e:	f7ff ff2b 	bl	8003c88 <dwt_forcetrxoff>
        dwt_rxreset();
 8003e32:	f7ff ff55 	bl	8003ce0 <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
 8003e36:	6820      	ldr	r0, [r4, #0]
 8003e38:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d100      	bne.n	8003e40 <dwt_isr+0x148>
 8003e3e:	e770      	b.n	8003d22 <dwt_isr+0x2a>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 8003e40:	301c      	adds	r0, #28
 8003e42:	4798      	blx	r3
}
 8003e44:	e76d      	b.n	8003d22 <dwt_isr+0x2a>
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	20000004 	.word	0x20000004
 8003e4c:	24059000 	.word	0x24059000

08003e50 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8003e50:	b510      	push	{r4, lr}
    _dwt_disablesequencing();
 8003e52:	f7ff fecc 	bl	8003bee <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	202c      	movs	r0, #44	@ 0x2c
 8003e5c:	f7ff fbf3 	bl	8003646 <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8003e60:	2200      	movs	r2, #0
 8003e62:	2106      	movs	r1, #6
 8003e64:	202c      	movs	r0, #44	@ 0x2c
 8003e66:	f7ff fbe2 	bl	800362e <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8003e6a:	f7ff fc3e 	bl	80036ea <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2103      	movs	r1, #3
 8003e72:	2036      	movs	r0, #54	@ 0x36
 8003e74:	f7ff fbdb 	bl	800362e <dwt_write8bitoffsetreg>
    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
//    deca_sleep(1);

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8003e78:	22f0      	movs	r2, #240	@ 0xf0
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	2036      	movs	r0, #54	@ 0x36
 8003e7e:	f7ff fbd6 	bl	800362e <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8003e82:	4b02      	ldr	r3, [pc, #8]	@ (8003e8c <dwt_softreset+0x3c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2200      	movs	r2, #0
 8003e88:	755a      	strb	r2, [r3, #21]
}
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	20000004 	.word	0x20000004

08003e90 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8003e90:	b510      	push	{r4, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8003e92:	221f      	movs	r2, #31
 8003e94:	4002      	ands	r2, r0
 8003e96:	2360      	movs	r3, #96	@ 0x60
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	210e      	movs	r1, #14
 8003e9e:	202b      	movs	r0, #43	@ 0x2b
 8003ea0:	f7ff fbc5 	bl	800362e <dwt_write8bitoffsetreg>
}
 8003ea4:	bd10      	pop	{r4, pc}
	...

08003ea8 <dwt_initialise>:
{
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	0004      	movs	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8003eac:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <dwt_initialise+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8003eb4:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8003eb6:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
 8003eb8:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8003eba:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8003ebe:	635a      	str	r2, [r3, #52]	@ 0x34
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8003ec0:	f7ff fb92 	bl	80035e8 <dwt_readdevid>
 8003ec4:	4b67      	ldr	r3, [pc, #412]	@ (8004064 <dwt_initialise+0x1bc>)
 8003ec6:	4298      	cmp	r0, r3
 8003ec8:	d000      	beq.n	8003ecc <dwt_initialise+0x24>
 8003eca:	e0c6      	b.n	800405a <dwt_initialise+0x1b2>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8003ecc:	2302      	movs	r3, #2
 8003ece:	001d      	movs	r5, r3
 8003ed0:	4025      	ands	r5, r4
 8003ed2:	4223      	tst	r3, r4
 8003ed4:	d020      	beq.n	8003f18 <dwt_initialise+0x70>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8003ed6:	2d00      	cmp	r5, #0
 8003ed8:	d002      	beq.n	8003ee0 <dwt_initialise+0x38>
 8003eda:	23f8      	movs	r3, #248	@ 0xf8
 8003edc:	4223      	tst	r3, r4
 8003ede:	d102      	bne.n	8003ee6 <dwt_initialise+0x3e>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7ff fdef 	bl	8003ac4 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	2100      	movs	r1, #0
 8003eea:	2024      	movs	r0, #36	@ 0x24
 8003eec:	f7ff fb9f 	bl	800362e <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
 8003ef0:	2d00      	cmp	r5, #0
 8003ef2:	d121      	bne.n	8003f38 <dwt_initialise+0x90>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8003ef4:	2004      	movs	r0, #4
 8003ef6:	f7ff fbe3 	bl	80036c0 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 8003efa:	23ff      	movs	r3, #255	@ 0xff
 8003efc:	4203      	tst	r3, r0
 8003efe:	d10e      	bne.n	8003f1e <dwt_initialise+0x76>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8003f00:	2d00      	cmp	r5, #0
 8003f02:	d028      	beq.n	8003f56 <dwt_initialise+0xae>
 8003f04:	230a      	movs	r3, #10
 8003f06:	4023      	ands	r3, r4
 8003f08:	2b0a      	cmp	r3, #10
 8003f0a:	d024      	beq.n	8003f56 <dwt_initialise+0xae>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8003f0c:	4b54      	ldr	r3, [pc, #336]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	72da      	strb	r2, [r3, #11]
    uint16 otp_xtaltrim_and_rev = 0;
 8003f14:	2000      	movs	r0, #0
 8003f16:	e026      	b.n	8003f66 <dwt_initialise+0xbe>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8003f18:	f7ff ff9a 	bl	8003e50 <dwt_softreset>
 8003f1c:	e7db      	b.n	8003ed6 <dwt_initialise+0x2e>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8003f1e:	2202      	movs	r2, #2
 8003f20:	2112      	movs	r1, #18
 8003f22:	202d      	movs	r0, #45	@ 0x2d
 8003f24:	f7ff fb83 	bl	800362e <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8003f28:	4b4d      	ldr	r3, [pc, #308]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	8ad1      	ldrh	r1, [r2, #22]
 8003f2e:	2380      	movs	r3, #128	@ 0x80
 8003f30:	015b      	lsls	r3, r3, #5
 8003f32:	430b      	orrs	r3, r1
 8003f34:	82d3      	strh	r3, [r2, #22]
 8003f36:	e7e3      	b.n	8003f00 <dwt_initialise+0x58>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8003f38:	2130      	movs	r1, #48	@ 0x30
 8003f3a:	2028      	movs	r0, #40	@ 0x28
 8003f3c:	f7ff fb40 	bl	80035c0 <dwt_read32bitoffsetreg>
 8003f40:	4b49      	ldr	r3, [pc, #292]	@ (8004068 <dwt_initialise+0x1c0>)
 8003f42:	4298      	cmp	r0, r3
 8003f44:	d0dc      	beq.n	8003f00 <dwt_initialise+0x58>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8003f46:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	8ad1      	ldrh	r1, [r2, #22]
 8003f4c:	2380      	movs	r3, #128	@ 0x80
 8003f4e:	015b      	lsls	r3, r3, #5
 8003f50:	430b      	orrs	r3, r1
 8003f52:	82d3      	strh	r3, [r2, #22]
 8003f54:	e7d4      	b.n	8003f00 <dwt_initialise+0x58>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8003f56:	201e      	movs	r0, #30
 8003f58:	f7ff fbb2 	bl	80036c0 <_dwt_otpread>
 8003f5c:	b280      	uxth	r0, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8003f5e:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	0a02      	lsrs	r2, r0, #8
 8003f64:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
 8003f66:	2d00      	cmp	r5, #0
 8003f68:	d105      	bne.n	8003f76 <dwt_initialise+0xce>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8003f6a:	06c3      	lsls	r3, r0, #27
 8003f6c:	d100      	bne.n	8003f70 <dwt_initialise+0xc8>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8003f6e:	2010      	movs	r0, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8003f70:	b2c0      	uxtb	r0, r0
 8003f72:	f7ff ff8d 	bl	8003e90 <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
 8003f76:	06e3      	lsls	r3, r4, #27
 8003f78:	d43d      	bmi.n	8003ff6 <dwt_initialise+0x14e>
        pdw1000local->partID = 0;
 8003f7a:	4b39      	ldr	r3, [pc, #228]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
 8003f82:	06a3      	lsls	r3, r4, #26
 8003f84:	d43e      	bmi.n	8004004 <dwt_initialise+0x15c>
        pdw1000local->lotID = 0;
 8003f86:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
 8003f8e:	0663      	lsls	r3, r4, #25
 8003f90:	d43f      	bmi.n	8004012 <dwt_initialise+0x16a>
        pdw1000local->vBatP = 0;
 8003f92:	4b33      	ldr	r3, [pc, #204]	@ (8004060 <dwt_initialise+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 8003f9a:	0623      	lsls	r3, r4, #24
 8003f9c:	d440      	bmi.n	8004020 <dwt_initialise+0x178>
        pdw1000local->tempP = 0;
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <dwt_initialise+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	d14d      	bne.n	8004046 <dwt_initialise+0x19e>
        if(DWT_LOADUCODE & config)
 8003faa:	07e4      	lsls	r4, r4, #31
 8003fac:	d53f      	bpl.n	800402e <dwt_initialise+0x186>
            _dwt_loaducodefromrom();
 8003fae:	f7ff fe0d 	bl	8003bcc <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <dwt_initialise+0x1b8>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	8ad1      	ldrh	r1, [r2, #22]
 8003fb8:	2380      	movs	r3, #128	@ 0x80
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7ff fd7f 	bl	8003ac4 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	210a      	movs	r1, #10
 8003fca:	202c      	movs	r0, #44	@ 0x2c
 8003fcc:	f7ff fb2f 	bl	800362e <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8003fd0:	4c23      	ldr	r4, [pc, #140]	@ (8004060 <dwt_initialise+0x1b8>)
 8003fd2:	6825      	ldr	r5, [r4, #0]
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	2004      	movs	r0, #4
 8003fd8:	f7ff faf2 	bl	80035c0 <dwt_read32bitoffsetreg>
 8003fdc:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8003fde:	6824      	ldr	r4, [r4, #0]
 8003fe0:	8a62      	ldrh	r2, [r4, #18]
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8003fe8:	2100      	movs	r1, #0
 8003fea:	2008      	movs	r0, #8
 8003fec:	f7ff fae8 	bl	80035c0 <dwt_read32bitoffsetreg>
 8003ff0:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
 8003ff2:	2000      	movs	r0, #0
} // end dwt_initialise()
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <dwt_initialise+0x1b8>)
 8003ff8:	681e      	ldr	r6, [r3, #0]
 8003ffa:	2006      	movs	r0, #6
 8003ffc:	f7ff fb60 	bl	80036c0 <_dwt_otpread>
 8004000:	6030      	str	r0, [r6, #0]
 8004002:	e7be      	b.n	8003f82 <dwt_initialise+0xda>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <dwt_initialise+0x1b8>)
 8004006:	681e      	ldr	r6, [r3, #0]
 8004008:	2007      	movs	r0, #7
 800400a:	f7ff fb59 	bl	80036c0 <_dwt_otpread>
 800400e:	6070      	str	r0, [r6, #4]
 8004010:	e7bd      	b.n	8003f8e <dwt_initialise+0xe6>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8004012:	2008      	movs	r0, #8
 8004014:	f7ff fb54 	bl	80036c0 <_dwt_otpread>
 8004018:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <dwt_initialise+0x1b8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	7218      	strb	r0, [r3, #8]
 800401e:	e7bc      	b.n	8003f9a <dwt_initialise+0xf2>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8004020:	2009      	movs	r0, #9
 8004022:	f7ff fb4d 	bl	80036c0 <_dwt_otpread>
 8004026:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <dwt_initialise+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	7258      	strb	r0, [r3, #9]
 800402c:	e7bb      	b.n	8003fa6 <dwt_initialise+0xfe>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 800402e:	2105      	movs	r1, #5
 8004030:	2036      	movs	r0, #54	@ 0x36
 8004032:	f7ff fadf 	bl	80035f4 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <dwt_initialise+0x1c4>)
 8004038:	4018      	ands	r0, r3
 800403a:	b282      	uxth	r2, r0
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 800403c:	2105      	movs	r1, #5
 800403e:	2036      	movs	r0, #54	@ 0x36
 8004040:	f7ff fb01 	bl	8003646 <dwt_write16bitoffsetreg>
 8004044:	e7bc      	b.n	8003fc0 <dwt_initialise+0x118>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8004046:	0764      	lsls	r4, r4, #29
 8004048:	d4ba      	bmi.n	8003fc0 <dwt_initialise+0x118>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 800404a:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <dwt_initialise+0x1b8>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	8ad1      	ldrh	r1, [r2, #22]
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	430b      	orrs	r3, r1
 8004056:	82d3      	strh	r3, [r2, #22]
 8004058:	e7b2      	b.n	8003fc0 <dwt_initialise+0x118>
        return DWT_ERROR ;
 800405a:	2001      	movs	r0, #1
 800405c:	4240      	negs	r0, r0
 800405e:	e7c9      	b.n	8003ff4 <dwt_initialise+0x14c>
 8004060:	20000004 	.word	0x20000004
 8004064:	deca0130 	.word	0xdeca0130
 8004068:	88888888 	.word	0x88888888
 800406c:	fffffdff 	.word	0xfffffdff

08004070 <dwt_readtempvbat>:
 * output parameters
 *
 * returns  (temp_raw<<8)|(vbat_raw)
 */
uint16 dwt_readtempvbat(uint8 fastSPI)
{
 8004070:	b530      	push	{r4, r5, lr}
 8004072:	b083      	sub	sp, #12
 8004074:	0004      	movs	r4, r0
    uint8 wr_buf[2];
    uint8 vbat_raw;
    uint8 temp_raw;

    // These writes should be single writes and in sequence
    wr_buf[0] = 0x80; // Enable TLD Bias
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	466a      	mov	r2, sp
 800407a:	7113      	strb	r3, [r2, #4]
    dwt_writetodevice(RF_CONF_ID,0x11,1,wr_buf);
 800407c:	ab01      	add	r3, sp, #4
 800407e:	2201      	movs	r2, #1
 8004080:	2111      	movs	r1, #17
 8004082:	2028      	movs	r0, #40	@ 0x28
 8004084:	f7ff fa48 	bl	8003518 <dwt_writetodevice>

    wr_buf[0] = 0x0A; // Enable TLD Bias and ADC Bias
 8004088:	230a      	movs	r3, #10
 800408a:	466a      	mov	r2, sp
 800408c:	7113      	strb	r3, [r2, #4]
    dwt_writetodevice(RF_CONF_ID,0x12,1,wr_buf);
 800408e:	ab01      	add	r3, sp, #4
 8004090:	2201      	movs	r2, #1
 8004092:	2112      	movs	r1, #18
 8004094:	2028      	movs	r0, #40	@ 0x28
 8004096:	f7ff fa3f 	bl	8003518 <dwt_writetodevice>

    wr_buf[0] = 0x0f; // Enable Outputs (only after Biases are up and running)
 800409a:	230f      	movs	r3, #15
 800409c:	466a      	mov	r2, sp
 800409e:	7113      	strb	r3, [r2, #4]
    dwt_writetodevice(RF_CONF_ID,0x12,1,wr_buf);    //
 80040a0:	ab01      	add	r3, sp, #4
 80040a2:	2201      	movs	r2, #1
 80040a4:	2112      	movs	r1, #18
 80040a6:	2028      	movs	r0, #40	@ 0x28
 80040a8:	f7ff fa36 	bl	8003518 <dwt_writetodevice>

    if(fastSPI == 1)
 80040ac:	2c01      	cmp	r4, #1
 80040ae:	d02b      	beq.n	8004108 <dwt_readtempvbat+0x98>
        // Read voltage and temperature.
        dwt_readfromdevice(TX_CAL_ID, TC_SARL_SAR_LVBAT_OFFSET,2,wr_buf);
    }
    else //change to a slow clock
    {
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read are reliable
 80040b0:	2000      	movs	r0, #0
 80040b2:	f7ff fd07 	bl	8003ac4 <_dwt_enableclocks>
        // Reading All SAR inputs
        wr_buf[0] = 0x00;
 80040b6:	2300      	movs	r3, #0
 80040b8:	466a      	mov	r2, sp
 80040ba:	7113      	strb	r3, [r2, #4]
        dwt_writetodevice(TX_CAL_ID, TC_SARL_SAR_C,1,wr_buf);
 80040bc:	ab01      	add	r3, sp, #4
 80040be:	2201      	movs	r2, #1
 80040c0:	2100      	movs	r1, #0
 80040c2:	202a      	movs	r0, #42	@ 0x2a
 80040c4:	f7ff fa28 	bl	8003518 <dwt_writetodevice>
        wr_buf[0] = 0x01; // Set SAR enable
 80040c8:	2301      	movs	r3, #1
 80040ca:	466a      	mov	r2, sp
 80040cc:	7113      	strb	r3, [r2, #4]
        dwt_writetodevice(TX_CAL_ID, TC_SARL_SAR_C,1,wr_buf);
 80040ce:	ab01      	add	r3, sp, #4
 80040d0:	2201      	movs	r2, #1
 80040d2:	2100      	movs	r1, #0
 80040d4:	202a      	movs	r0, #42	@ 0x2a
 80040d6:	f7ff fa1f 	bl	8003518 <dwt_writetodevice>

        // Read voltage and temperature.
        dwt_readfromdevice(TX_CAL_ID, TC_SARL_SAR_LVBAT_OFFSET,2,wr_buf);
 80040da:	ab01      	add	r3, sp, #4
 80040dc:	2202      	movs	r2, #2
 80040de:	2103      	movs	r1, #3
 80040e0:	202a      	movs	r0, #42	@ 0x2a
 80040e2:	f7ff fa4d 	bl	8003580 <dwt_readfromdevice>
        // Default clocks (ENABLE_ALL_SEQ)
        _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80040e6:	2001      	movs	r0, #1
 80040e8:	f7ff fcec 	bl	8003ac4 <_dwt_enableclocks>
    }

    vbat_raw = wr_buf[0];
 80040ec:	ab01      	add	r3, sp, #4
 80040ee:	781d      	ldrb	r5, [r3, #0]
    temp_raw = wr_buf[1];
 80040f0:	785c      	ldrb	r4, [r3, #1]

    wr_buf[0] = 0x00; // Clear SAR enable
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(TX_CAL_ID, TC_SARL_SAR_C,1,wr_buf);
 80040f6:	3201      	adds	r2, #1
 80040f8:	2100      	movs	r1, #0
 80040fa:	202a      	movs	r0, #42	@ 0x2a
 80040fc:	f7ff fa0c 	bl	8003518 <dwt_writetodevice>

    return (((uint16)temp_raw<<8)|(vbat_raw));
 8004100:	0220      	lsls	r0, r4, #8
 8004102:	4328      	orrs	r0, r5
}
 8004104:	b003      	add	sp, #12
 8004106:	bd30      	pop	{r4, r5, pc}
        wr_buf[0] = 0x00;
 8004108:	2300      	movs	r3, #0
 800410a:	466a      	mov	r2, sp
 800410c:	7113      	strb	r3, [r2, #4]
        dwt_writetodevice(TX_CAL_ID, TC_SARL_SAR_C,1,wr_buf);
 800410e:	ab01      	add	r3, sp, #4
 8004110:	2201      	movs	r2, #1
 8004112:	2100      	movs	r1, #0
 8004114:	202a      	movs	r0, #42	@ 0x2a
 8004116:	f7ff f9ff 	bl	8003518 <dwt_writetodevice>
        wr_buf[0] = 0x01; // Set SAR enable
 800411a:	2301      	movs	r3, #1
 800411c:	466a      	mov	r2, sp
 800411e:	7113      	strb	r3, [r2, #4]
        dwt_writetodevice(TX_CAL_ID, TC_SARL_SAR_C,1,wr_buf);
 8004120:	ab01      	add	r3, sp, #4
 8004122:	2201      	movs	r2, #1
 8004124:	2100      	movs	r1, #0
 8004126:	202a      	movs	r0, #42	@ 0x2a
 8004128:	f7ff f9f6 	bl	8003518 <dwt_writetodevice>
        deca_sleep(1); // If using PLL clocks(and fast SPI rate) then this sleep is needed
 800412c:	2001      	movs	r0, #1
 800412e:	f7fd fffb 	bl	8002128 <deca_sleep>
        dwt_readfromdevice(TX_CAL_ID, TC_SARL_SAR_LVBAT_OFFSET,2,wr_buf);
 8004132:	ab01      	add	r3, sp, #4
 8004134:	2202      	movs	r2, #2
 8004136:	2103      	movs	r1, #3
 8004138:	202a      	movs	r0, #42	@ 0x2a
 800413a:	f7ff fa21 	bl	8003580 <dwt_readfromdevice>
 800413e:	e7d5      	b.n	80040ec <dwt_readtempvbat+0x7c>

08004140 <dwt_calcbandwidthtempadj>:
 * output parameters:
 *
 * returns: (uint32) The setting to be programmed into the PG_DELAY value
 */
uint32 dwt_calcbandwidthtempadj(uint16 target_count)
{
 8004140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004142:	46de      	mov	lr, fp
 8004144:	4657      	mov	r7, sl
 8004146:	464e      	mov	r6, r9
 8004148:	4645      	mov	r5, r8
 800414a:	b5e0      	push	{r5, r6, r7, lr}
 800414c:	b083      	sub	sp, #12
 800414e:	4680      	mov	r8, r0
    uint8 old_pmsc_ctrl0;
    uint16 old_pmsc_ctrl1;
    uint32 old_rf_conf_txpow_mask;

    // Record the current values of these registers, to restore later
    old_pmsc_ctrl0 = dwt_read8bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 8004150:	2100      	movs	r1, #0
 8004152:	2036      	movs	r0, #54	@ 0x36
 8004154:	f7ff fa5e 	bl	8003614 <dwt_read8bitoffsetreg>
 8004158:	4683      	mov	fp, r0
    old_pmsc_ctrl1 = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 800415a:	2104      	movs	r1, #4
 800415c:	2036      	movs	r0, #54	@ 0x36
 800415e:	f7ff fa49 	bl	80035f4 <dwt_read16bitoffsetreg>
 8004162:	4682      	mov	sl, r0
    old_rf_conf_txpow_mask = dwt_read32bitreg(RF_CONF_ID);
 8004164:	2100      	movs	r1, #0
 8004166:	2028      	movs	r0, #40	@ 0x28
 8004168:	f7ff fa2a 	bl	80035c0 <dwt_read32bitoffsetreg>
 800416c:	4681      	mov	r9, r0

    //  Set clock to XTAL
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, PMSC_CTRL0_SYSCLKS_19M);
 800416e:	2201      	movs	r2, #1
 8004170:	2100      	movs	r1, #0
 8004172:	2036      	movs	r0, #54	@ 0x36
 8004174:	f7ff fa5b 	bl	800362e <dwt_write8bitoffsetreg>

    //  Disable sequencing
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE);
 8004178:	2200      	movs	r2, #0
 800417a:	2104      	movs	r1, #4
 800417c:	2036      	movs	r0, #54	@ 0x36
 800417e:	f7ff fa62 	bl	8003646 <dwt_write16bitoffsetreg>

    //  Turn on CLK PLL, Mix Bias and PG
    dwt_write32bitreg(RF_CONF_ID, RF_CONF_TXPOW_MASK | RF_CONF_PGMIXBIASEN_MASK);
 8004182:	4a2b      	ldr	r2, [pc, #172]	@ (8004230 <dwt_calcbandwidthtempadj+0xf0>)
 8004184:	2100      	movs	r1, #0
 8004186:	2028      	movs	r0, #40	@ 0x28
 8004188:	f7ff fa6b 	bl	8003662 <dwt_write32bitoffsetreg>

    //  Set sys and TX clock to PLL
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, PMSC_CTRL0_SYSCLKS_125M | PMSC_CTRL0_TXCLKS_125M);
 800418c:	2222      	movs	r2, #34	@ 0x22
 800418e:	2100      	movs	r1, #0
 8004190:	2036      	movs	r0, #54	@ 0x36
 8004192:	f7ff fa4c 	bl	800362e <dwt_write8bitoffsetreg>
    // Set starting bit
    bit_field = 0x80;
    // Initial lowest delta is the maximum difference that we should allow the count value to be from the target.
    // If the algorithm is successful, it will be overwritten by a smaller value where the count value is closer
    // to the target
    delta_lowest = 300;
 8004196:	2796      	movs	r7, #150	@ 0x96
 8004198:	007f      	lsls	r7, r7, #1
    uint32 best_bw = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	9301      	str	r3, [sp, #4]
    curr_bw = 0x80;
 800419e:	2480      	movs	r4, #128	@ 0x80
    bit_field = 0x80;
 80041a0:	2580      	movs	r5, #128	@ 0x80

    for (i = 0; i < 7; i++)
 80041a2:	2600      	movs	r6, #0
 80041a4:	e000      	b.n	80041a8 <dwt_calcbandwidthtempadj+0x68>
 80041a6:	3601      	adds	r6, #1
 80041a8:	2e06      	cmp	r6, #6
 80041aa:	dc29      	bgt.n	8004200 <dwt_calcbandwidthtempadj+0xc0>
    {
        // start with 0xc0 and test.
        bit_field = bit_field >> 1;
 80041ac:	086d      	lsrs	r5, r5, #1
        curr_bw = curr_bw | bit_field;
 80041ae:	432c      	orrs	r4, r5
 80041b0:	b2e4      	uxtb	r4, r4

        // Write bw setting to PG_DELAY register
        dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, curr_bw);
 80041b2:	0022      	movs	r2, r4
 80041b4:	210b      	movs	r1, #11
 80041b6:	202a      	movs	r0, #42	@ 0x2a
 80041b8:	f7ff fa39 	bl	800362e <dwt_write8bitoffsetreg>

        // Set cal direction and time
        dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGCCTRL_OFFSET, TC_PGCCTRL_DIR_CONV | TC_PGCCTRL_TMEAS_MASK);
 80041bc:	22bc      	movs	r2, #188	@ 0xbc
 80041be:	2108      	movs	r1, #8
 80041c0:	202a      	movs	r0, #42	@ 0x2a
 80041c2:	f7ff fa34 	bl	800362e <dwt_write8bitoffsetreg>

        // Start cal
        dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGCCTRL_OFFSET, TC_PGCCTRL_DIR_CONV | TC_PGCCTRL_TMEAS_MASK | TC_PGCCTRL_CALSTART);
 80041c6:	22bd      	movs	r2, #189	@ 0xbd
 80041c8:	2108      	movs	r1, #8
 80041ca:	202a      	movs	r0, #42	@ 0x2a
 80041cc:	f7ff fa2f 	bl	800362e <dwt_write8bitoffsetreg>
        // Allow cal to complete
        deca_sleep(1);
 80041d0:	2001      	movs	r0, #1
 80041d2:	f7fd ffa9 	bl	8002128 <deca_sleep>


        // Read count value from the PG cal block
        raw_count = dwt_read16bitoffsetreg(TX_CAL_ID, TC_PGCAL_STATUS_OFFSET) & TC_PGCAL_STATUS_DELAY_MASK;
 80041d6:	2109      	movs	r1, #9
 80041d8:	202a      	movs	r0, #42	@ 0x2a
 80041da:	f7ff fa0b 	bl	80035f4 <dwt_read16bitoffsetreg>
 80041de:	0500      	lsls	r0, r0, #20
 80041e0:	0d00      	lsrs	r0, r0, #20

        // lets keep track of the closest value to the target in case we overshoot
        delta_count = abs((int)raw_count - (int)target_count);
 80041e2:	4643      	mov	r3, r8
 80041e4:	1ac3      	subs	r3, r0, r3
 80041e6:	17da      	asrs	r2, r3, #31
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	4053      	eors	r3, r2
        if (delta_count < delta_lowest)
 80041ec:	429f      	cmp	r7, r3
 80041ee:	dd01      	ble.n	80041f4 <dwt_calcbandwidthtempadj+0xb4>
        {
            delta_lowest = delta_count;
            best_bw = curr_bw;
 80041f0:	9401      	str	r4, [sp, #4]
            delta_lowest = delta_count;
 80041f2:	001f      	movs	r7, r3
        }

        // Test the count results
        if (raw_count > target_count)
 80041f4:	4540      	cmp	r0, r8
 80041f6:	d8d6      	bhi.n	80041a6 <dwt_calcbandwidthtempadj+0x66>
            // Count was lower, BW was lower so increase PG DELAY
            curr_bw = curr_bw | bit_field;
        else
            // Count was higher
            curr_bw = curr_bw & (~(bit_field));
 80041f8:	43eb      	mvns	r3, r5
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	401c      	ands	r4, r3
 80041fe:	e7d2      	b.n	80041a6 <dwt_calcbandwidthtempadj+0x66>
    }

    // Restore old register values
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, old_pmsc_ctrl0);
 8004200:	465a      	mov	r2, fp
 8004202:	2100      	movs	r1, #0
 8004204:	2036      	movs	r0, #54	@ 0x36
 8004206:	f7ff fa12 	bl	800362e <dwt_write8bitoffsetreg>
    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, old_pmsc_ctrl1);
 800420a:	4652      	mov	r2, sl
 800420c:	2104      	movs	r1, #4
 800420e:	2036      	movs	r0, #54	@ 0x36
 8004210:	f7ff fa19 	bl	8003646 <dwt_write16bitoffsetreg>
    dwt_write32bitreg(RF_CONF_ID, old_rf_conf_txpow_mask);
 8004214:	464a      	mov	r2, r9
 8004216:	2100      	movs	r1, #0
 8004218:	2028      	movs	r0, #40	@ 0x28
 800421a:	f7ff fa22 	bl	8003662 <dwt_write32bitoffsetreg>

    // Returns the best PG_DELAY setting
    return best_bw;
}
 800421e:	9801      	ldr	r0, [sp, #4]
 8004220:	b003      	add	sp, #12
 8004222:	bcf0      	pop	{r4, r5, r6, r7}
 8004224:	46bb      	mov	fp, r7
 8004226:	46b2      	mov	sl, r6
 8004228:	46a9      	mov	r9, r5
 800422a:	46a0      	mov	r8, r4
 800422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	001fa700 	.word	0x001fa700

08004234 <instance_txcallback>:
 *
 * */
void instance_txcallback(const dwt_cb_data_t *txd)
{
    //empty function
}
 8004234:	4770      	bx	lr

08004236 <instance_rxgood>:
 *
 * */
void instance_rxgood(const dwt_cb_data_t *rxd)
{
   //empty function
}
 8004236:	4770      	bx	lr

08004238 <instance_rxtimeout>:
 *
 * */
void instance_rxtimeout(const dwt_cb_data_t *rxd)
{
    //empty function
}
 8004238:	4770      	bx	lr

0800423a <instance_rxerror>:
 *
 * */
void instance_rxerror(const dwt_cb_data_t *rxd)
{
    //empty function
}
 800423a:	4770      	bx	lr

0800423c <instance_init>:
{
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	0006      	movs	r6, r0
    param_block_t * pbss = get_pbssConfig();
 8004240:	f7ff f954 	bl	80034ec <get_pbssConfig>
 8004244:	0005      	movs	r5, r0
    instance_data.testAppState = TA_INIT ;
 8004246:	4b25      	ldr	r3, [pc, #148]	@ (80042dc <instance_init+0xa0>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
    dwt_softreset();
 800424c:	f7ff fe00 	bl	8003e50 <dwt_softreset>
    result = dwt_initialise( DWT_READ_OTP_PID ) ;
 8004250:	2010      	movs	r0, #16
 8004252:	f7ff fe29 	bl	8003ea8 <dwt_initialise>
 8004256:	0004      	movs	r4, r0
    if (sleep_enable) {
 8004258:	2e00      	cmp	r6, #0
 800425a:	d030      	beq.n	80042be <instance_init+0x82>
        dwt_configuresleep(AON_WCFG_ONW_LLDE | DWT_PRESRV_SLEEP|DWT_CONFIG ,
 800425c:	2094      	movs	r0, #148	@ 0x94
 800425e:	2105      	movs	r1, #5
 8004260:	0100      	lsls	r0, r0, #4
 8004262:	f7ff fa4f 	bl	8003704 <dwt_configuresleep>
    dwt_setleds(3);
 8004266:	2003      	movs	r0, #3
 8004268:	f7ff fbe8 	bl	8003a3c <dwt_setleds>
    dwt_setsmarttxpower( (pbss->smartPowerEn != 0) );
 800426c:	7e2a      	ldrb	r2, [r5, #24]
 800426e:	7e68      	ldrb	r0, [r5, #25]
 8004270:	0200      	lsls	r0, r0, #8
 8004272:	4310      	orrs	r0, r2
 8004274:	1e43      	subs	r3, r0, #1
 8004276:	4198      	sbcs	r0, r3
 8004278:	f7ff fbb0 	bl	80039dc <dwt_setsmarttxpower>
    if((ref.power == 0) && (ref.pgcnt == 0) && (ref.temp == 0) && (ref.pgdly == 0))
 800427c:	4b18      	ldr	r3, [pc, #96]	@ (80042e0 <instance_init+0xa4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <instance_init+0x5a>
 8004284:	4b16      	ldr	r3, [pc, #88]	@ (80042e0 <instance_init+0xa4>)
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	4b16      	ldr	r3, [pc, #88]	@ (80042e4 <instance_init+0xa8>)
 800428a:	421a      	tst	r2, r3
 800428c:	d103      	bne.n	8004296 <instance_init+0x5a>
 800428e:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <instance_init+0xa4>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d019      	beq.n	80042ca <instance_init+0x8e>
    dwt_entersleepaftertx(1);
 8004296:	2001      	movs	r0, #1
 8004298:	f7ff fa46 	bl	8003728 <dwt_entersleepaftertx>
    if (DWT_SUCCESS != result)
 800429c:	2c00      	cmp	r4, #0
 800429e:	d119      	bne.n	80042d4 <instance_init+0x98>
    dwt_setcallbacks(instance_txcallback,
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <instance_init+0xac>)
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <instance_init+0xb0>)
 80042a4:	4912      	ldr	r1, [pc, #72]	@ (80042f0 <instance_init+0xb4>)
 80042a6:	4813      	ldr	r0, [pc, #76]	@ (80042f4 <instance_init+0xb8>)
 80042a8:	f7ff fbbe 	bl	8003a28 <dwt_setcallbacks>
    instance_data.frame_sn = 0;
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <instance_init+0xa0>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	759a      	strb	r2, [r3, #22]
    instance_data.timeron = 0;
 80042b2:	769a      	strb	r2, [r3, #26]
    instance_data.event[0] = 0;
 80042b4:	75da      	strb	r2, [r3, #23]
    instance_data.event[1] = 0;
 80042b6:	761a      	strb	r2, [r3, #24]
    instance_data.eventCnt = 0;
 80042b8:	765a      	strb	r2, [r3, #25]
}
 80042ba:	0020      	movs	r0, r4
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
        dwt_configuresleep(AON_WCFG_ONW_LLDE | DWT_PRESRV_SLEEP|DWT_CONFIG ,
 80042be:	2094      	movs	r0, #148	@ 0x94
 80042c0:	2104      	movs	r1, #4
 80042c2:	0100      	lsls	r0, r0, #4
 80042c4:	f7ff fa1e 	bl	8003704 <dwt_configuresleep>
 80042c8:	e7cd      	b.n	8004266 <instance_init+0x2a>
      tvc_otp_read_txcfgref(&ref, pbss->dwt_config.chan);
 80042ca:	7829      	ldrb	r1, [r5, #0]
 80042cc:	4804      	ldr	r0, [pc, #16]	@ (80042e0 <instance_init+0xa4>)
 80042ce:	f000 feff 	bl	80050d0 <tvc_otp_read_txcfgref>
 80042d2:	e7e0      	b.n	8004296 <instance_init+0x5a>
        return (DWT_ERROR) ;        // device initialize has failed
 80042d4:	2401      	movs	r4, #1
 80042d6:	4264      	negs	r4, r4
 80042d8:	e7ef      	b.n	80042ba <instance_init+0x7e>
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	2000049c 	.word	0x2000049c
 80042e0:	200004c0 	.word	0x200004c0
 80042e4:	ffff00ff 	.word	0xffff00ff
 80042e8:	0800423b 	.word	0x0800423b
 80042ec:	08004239 	.word	0x08004239
 80042f0:	08004237 	.word	0x08004237
 80042f4:	08004235 	.word	0x08004235

080042f8 <instance_config>:
{
 80042f8:	b510      	push	{r4, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	0004      	movs	r4, r0
    dwt_configure(&pbss->dwt_config) ;
 80042fe:	f7ff fa47 	bl	8003790 <dwt_configure>
    configTx.PGdly = ref.pgdly;
 8004302:	4b0c      	ldr	r3, [pc, #48]	@ (8004334 <instance_config+0x3c>)
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	4669      	mov	r1, sp
 8004308:	700a      	strb	r2, [r1, #0]
    configTx.power = ref.power;
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	9101      	str	r1, [sp, #4]
    if(pbss->smartPowerEn == 0)
 800430e:	7e22      	ldrb	r2, [r4, #24]
 8004310:	7e63      	ldrb	r3, [r4, #25]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	4313      	orrs	r3, r2
 8004316:	d107      	bne.n	8004328 <instance_config+0x30>
        uint32 pow = configTx.power & 0xff;
 8004318:	22ff      	movs	r2, #255	@ 0xff
 800431a:	400a      	ands	r2, r1
        configTx.power = (pow << 24) + (pow << 16) + (pow << 8) + pow;
 800431c:	0211      	lsls	r1, r2, #8
 800431e:	188b      	adds	r3, r1, r2
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	185b      	adds	r3, r3, r1
 8004324:	189b      	adds	r3, r3, r2
 8004326:	9301      	str	r3, [sp, #4]
    dwt_configuretxrf(&configTx);
 8004328:	4668      	mov	r0, sp
 800432a:	f7ff f9ac 	bl	8003686 <dwt_configuretxrf>
}
 800432e:	b002      	add	sp, #8
 8004330:	bd10      	pop	{r4, pc}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	200004c0 	.word	0x200004c0

08004338 <check_device_id>:
 * @fn   check_device_id
 * @brief Read decawave device id.it's proper then return 0 otherwise
 *        return -1.
 * */
int check_device_id(void)
{
 8004338:	b510      	push	{r4, lr}
    uint32_t DEV_ID=0;

    // Set SPI clock to 2MHz
    port_set_dw1000_slowrate();
 800433a:	f7fe f88f 	bl	800245c <port_set_dw1000_slowrate>
    // Read Decawave chip ID
    DEV_ID = dwt_readdevid();
 800433e:	f7ff f953 	bl	80035e8 <dwt_readdevid>

    if(DWT_DEVICE_ID != DEV_ID)
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <check_device_id+0x38>)
 8004344:	4298      	cmp	r0, r3
 8004346:	d10b      	bne.n	8004360 <check_device_id+0x28>
        port_wakeup_dw1000();
        // SPI not working or Unsupported Device ID
        DEV_ID = dwt_readdevid() ;
    }

    dwt_setleds(3);
 8004348:	2003      	movs	r0, #3
 800434a:	f7ff fb77 	bl	8003a3c <dwt_setleds>

    // Set SPI to 16MHz clock
    port_set_dw1000_fastrate();
 800434e:	f7fe f8a9 	bl	80024a4 <port_set_dw1000_fastrate>
    // Read Decawave chip ID
    DEV_ID = dwt_readdevid() ;
 8004352:	f7ff f949 	bl	80035e8 <dwt_readdevid>

    if (DWT_DEVICE_ID != DEV_ID)   // Means it is NOT MP device
 8004356:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <check_device_id+0x38>)
 8004358:	4298      	cmp	r0, r3
 800435a:	d106      	bne.n	800436a <check_device_id+0x32>
    {
        // SPI not working or Unsupported Device ID
        return -1;
    }
    return 0;
 800435c:	2000      	movs	r0, #0
}
 800435e:	bd10      	pop	{r4, pc}
        port_wakeup_dw1000();
 8004360:	f7fe f8e8 	bl	8002534 <port_wakeup_dw1000>
        DEV_ID = dwt_readdevid() ;
 8004364:	f7ff f940 	bl	80035e8 <dwt_readdevid>
 8004368:	e7ee      	b.n	8004348 <check_device_id+0x10>
        return -1;
 800436a:	2001      	movs	r0, #1
 800436c:	4240      	negs	r0, r0
 800436e:	e7f6      	b.n	800435e <check_device_id+0x26>
 8004370:	deca0130 	.word	0xdeca0130

08004374 <ulong2littleEndian>:
        v.ui=prm;        //
        SWAP(v.uc[0], v.uc[3]);
        SWAP(v.uc[1], v.uc[2]);
    }
    return v.ui;
}
 8004374:	4770      	bx	lr
	...

08004378 <instancesettagaddress>:
{
 8004378:	b530      	push	{r4, r5, lr}
 800437a:	b083      	sub	sp, #12
 800437c:	0005      	movs	r5, r0
    uint8 eui64[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xCA, 0xDE};
 800437e:	466a      	mov	r2, sp
 8004380:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <instancesettagaddress+0x54>)
 8004382:	cb11      	ldmia	r3!, {r0, r4}
 8004384:	c211      	stmia	r2!, {r0, r4}
    param_block_t * pbss = get_pbssConfig();
 8004386:	f7ff f8b1 	bl	80034ec <get_pbssConfig>
 800438a:	0004      	movs	r4, r0
    if(pbss->tagIDset == 0)
 800438c:	2322      	movs	r3, #34	@ 0x22
 800438e:	5cc3      	ldrb	r3, [r0, r3]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d112      	bne.n	80043ba <instancesettagaddress+0x42>
        uint32 id= ulong2littleEndian(dwt_getpartid());
 8004394:	f7ff f8ba 	bl	800350c <dwt_getpartid>
 8004398:	f7ff ffec 	bl	8004374 <ulong2littleEndian>
        memcpy(eui64, &id, sizeof(uint32));
 800439c:	9000      	str	r0, [sp, #0]
        memcpy(inst->msg.tagID, eui64, ADDR_BYTE_SIZE);
 800439e:	0028      	movs	r0, r5
 80043a0:	300a      	adds	r0, #10
 80043a2:	2208      	movs	r2, #8
 80043a4:	4669      	mov	r1, sp
 80043a6:	f001 fafc 	bl	80059a2 <memcpy>
        memcpy(pbss->tagID, eui64, ADDR_BYTE_SIZE);
 80043aa:	0020      	movs	r0, r4
 80043ac:	301a      	adds	r0, #26
 80043ae:	2208      	movs	r2, #8
 80043b0:	4669      	mov	r1, sp
 80043b2:	f001 faf6 	bl	80059a2 <memcpy>
}
 80043b6:	b003      	add	sp, #12
 80043b8:	bd30      	pop	{r4, r5, pc}
        memcpy(inst->msg.tagID, pbss->tagID, ADDR_BYTE_SIZE);
 80043ba:	0028      	movs	r0, r5
 80043bc:	300a      	adds	r0, #10
 80043be:	0021      	movs	r1, r4
 80043c0:	311a      	adds	r1, #26
 80043c2:	2208      	movs	r2, #8
 80043c4:	f001 faed 	bl	80059a2 <memcpy>
}
 80043c8:	e7f5      	b.n	80043b6 <instancesettagaddress+0x3e>
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	08007160 	.word	0x08007160

080043d0 <testapprun>:
{
 80043d0:	b570      	push	{r4, r5, r6, lr}
 80043d2:	0004      	movs	r4, r0
 80043d4:	000d      	movs	r5, r1
	param_block_t * pbss = get_pbssConfig();
 80043d6:	f7ff f889 	bl	80034ec <get_pbssConfig>
    switch (inst->testAppState)
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d00f      	beq.n	8004400 <testapprun+0x30>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d023      	beq.n	800442c <testapprun+0x5c>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <testapprun+0x2c>
            instancesettagaddress(inst);
 80043e8:	0020      	movs	r0, r4
 80043ea:	f7ff ffc5 	bl	8004378 <instancesettagaddress>
            dwt_configuresleep(AON_WCFG_ONW_RADC | DWT_PRESRV_SLEEP| DWT_CONFIG,
 80043ee:	2042      	movs	r0, #66	@ 0x42
 80043f0:	2105      	movs	r1, #5
 80043f2:	30ff      	adds	r0, #255	@ 0xff
 80043f4:	f7ff f986 	bl	8003704 <dwt_configuresleep>
            inst->testAppState = TA_TXBLINK_WAIT_SEND;
 80043f8:	2302      	movs	r3, #2
 80043fa:	6023      	str	r3, [r4, #0]
    return inst->done;
 80043fc:	6860      	ldr	r0, [r4, #4]
} // end testapprun()
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
            if(message != DWT_SIG_RX_TIMEOUT)
 8004400:	2d04      	cmp	r5, #4
 8004402:	d002      	beq.n	800440a <testapprun+0x3a>
                inst->done = 1;
 8004404:	2301      	movs	r3, #1
 8004406:	6063      	str	r3, [r4, #4]
                break;
 8004408:	e7f8      	b.n	80043fc <testapprun+0x2c>
            if (DWT_DEVICE_ID == dwt_readdevid() )
 800440a:	f7ff f8ed 	bl	80035e8 <dwt_readdevid>
 800440e:	4b18      	ldr	r3, [pc, #96]	@ (8004470 <testapprun+0xa0>)
 8004410:	4298      	cmp	r0, r3
 8004412:	d104      	bne.n	800441e <testapprun+0x4e>
                inst->done = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	6063      	str	r3, [r4, #4]
                inst->testAppState = TA_TXBLINK_WAIT_SEND;
 8004418:	3302      	adds	r3, #2
 800441a:	6023      	str	r3, [r4, #0]
                break;//TA_SLEEP_DONE
 800441c:	e7ee      	b.n	80043fc <testapprun+0x2c>
            port_wakeup_dw1000();
 800441e:	f7fe f889 	bl	8002534 <port_wakeup_dw1000>
            inst->done = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	6063      	str	r3, [r4, #4]
            inst->testAppState = TA_TXBLINK_WAIT_SEND;
 8004426:	3302      	adds	r3, #2
 8004428:	6023      	str	r3, [r4, #0]
            break; //TA_SLEEP_DONE
 800442a:	e7e7      	b.n	80043fc <testapprun+0x2c>
            tvc_comp(&tx_cfg, &ref, pbss->dwt_config.chan);
 800442c:	7802      	ldrb	r2, [r0, #0]
 800442e:	4911      	ldr	r1, [pc, #68]	@ (8004474 <testapprun+0xa4>)
 8004430:	4d11      	ldr	r5, [pc, #68]	@ (8004478 <testapprun+0xa8>)
 8004432:	0028      	movs	r0, r5
 8004434:	f000 ff89 	bl	800534a <tvc_comp>
            dwt_configuretxrf(&tx_cfg);
 8004438:	0028      	movs	r0, r5
 800443a:	f7ff f924 	bl	8003686 <dwt_configuretxrf>
            inst->msg.frameCtrl = FCS_EUI_64 ;
 800443e:	23c5      	movs	r3, #197	@ 0xc5
 8004440:	7223      	strb	r3, [r4, #8]
            inst->msg.seqNum = inst->frame_sn++;
 8004442:	7da3      	ldrb	r3, [r4, #22]
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	75a2      	strb	r2, [r4, #22]
 8004448:	7263      	strb	r3, [r4, #9]
            dwt_writetxdata(length, (uint8 *)  (&inst->msg), 0) ;
 800444a:	0021      	movs	r1, r4
 800444c:	3108      	adds	r1, #8
 800444e:	2200      	movs	r2, #0
 8004450:	200c      	movs	r0, #12
 8004452:	f7ff f884 	bl	800355e <dwt_writetxdata>
            dwt_writetxfctrl(length, 0, 0);
 8004456:	2200      	movs	r2, #0
 8004458:	2100      	movs	r1, #0
 800445a:	200c      	movs	r0, #12
 800445c:	f7ff f920 	bl	80036a0 <dwt_writetxfctrl>
            dwt_starttx(DWT_START_TX_IMMEDIATE); //always using immediate TX DWT_START_TX_DELAYED
 8004460:	2000      	movs	r0, #0
 8004462:	f7ff fbcf 	bl	8003c04 <dwt_starttx>
            inst->done = 2; //don't sleep here but kick off the TagTimeoutTimer
 8004466:	2302      	movs	r3, #2
 8004468:	6063      	str	r3, [r4, #4]
            inst->testAppState = TA_SLEEP_DONE;
 800446a:	3b01      	subs	r3, #1
 800446c:	6023      	str	r3, [r4, #0]
            break; //TA_TXBLINK_WAIT_SEND
 800446e:	e7c5      	b.n	80043fc <testapprun+0x2c>
 8004470:	deca0130 	.word	0xdeca0130
 8004474:	200004c0 	.word	0x200004c0
 8004478:	200004d0 	.word	0x200004d0

0800447c <instance_run>:
{
 800447c:	b570      	push	{r4, r5, r6, lr}
    int done = instance_data.done = 0;
 800447e:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <instance_run+0x12c>)
 8004480:	2200      	movs	r2, #0
 8004482:	605a      	str	r2, [r3, #4]
    int message = instance_data.event[0];
 8004484:	7dde      	ldrb	r6, [r3, #23]
    param_block_t *pbss = get_pbssConfig();
 8004486:	f7ff f831 	bl	80034ec <get_pbssConfig>
 800448a:	0004      	movs	r4, r0
    int done = instance_data.done = 0;
 800448c:	2500      	movs	r5, #0
    while(!done)
 800448e:	e001      	b.n	8004494 <instance_run+0x18>
        message = 0;
 8004490:	0006      	movs	r6, r0
 8004492:	0005      	movs	r5, r0
    while(!done)
 8004494:	2d00      	cmp	r5, #0
 8004496:	d11b      	bne.n	80044d0 <instance_run+0x54>
        done = testapprun(&instance_data, message) ;
 8004498:	4843      	ldr	r0, [pc, #268]	@ (80045a8 <instance_run+0x12c>)
 800449a:	0031      	movs	r1, r6
 800449c:	f7ff ff98 	bl	80043d0 <testapprun>
        if(message) // there was an event in the buffer
 80044a0:	2e00      	cmp	r6, #0
 80044a2:	d005      	beq.n	80044b0 <instance_run+0x34>
            instance_data.event[0] = 0; //clear the buffer
 80044a4:	4b40      	ldr	r3, [pc, #256]	@ (80045a8 <instance_run+0x12c>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	75da      	strb	r2, [r3, #23]
            instance_data.eventCnt--;
 80044aa:	7e5a      	ldrb	r2, [r3, #25]
 80044ac:	3a01      	subs	r2, #1
 80044ae:	765a      	strb	r2, [r3, #25]
        if(done)//ready for next event
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d0ed      	beq.n	8004490 <instance_run+0x14>
            if(instance_data.event[1])
 80044b4:	4b3c      	ldr	r3, [pc, #240]	@ (80045a8 <instance_run+0x12c>)
 80044b6:	7e1e      	ldrb	r6, [r3, #24]
 80044b8:	2e00      	cmp	r6, #0
 80044ba:	d007      	beq.n	80044cc <instance_run+0x50>
                instance_data.event[1] = 0; //clear the buffer
 80044bc:	2100      	movs	r1, #0
 80044be:	7619      	strb	r1, [r3, #24]
                instance_data.eventCnt--;
 80044c0:	7e5a      	ldrb	r2, [r3, #25]
 80044c2:	3a01      	subs	r2, #1
 80044c4:	765a      	strb	r2, [r3, #25]
                instance_data.done = done = 0; //wait for next done
 80044c6:	6059      	str	r1, [r3, #4]
 80044c8:	0028      	movs	r0, r5
 80044ca:	e7e2      	b.n	8004492 <instance_run+0x16>
        message = 0;
 80044cc:	002e      	movs	r6, r5
 80044ce:	e7e0      	b.n	8004492 <instance_run+0x16>
    if(done == 2)
 80044d0:	2d02      	cmp	r5, #2
 80044d2:	d005      	beq.n	80044e0 <instance_run+0x64>
    if(instance_data.timeron == 1)
 80044d4:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <instance_run+0x12c>)
 80044d6:	7e9b      	ldrb	r3, [r3, #26]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d04e      	beq.n	800457a <instance_run+0xfe>
    return 0;
 80044dc:	2000      	movs	r0, #0
}
 80044de:	bd70      	pop	{r4, r5, r6, pc}
        uint32_t currentInterval = *(app.pcurrent_blink_interval_ms);
 80044e0:	4b32      	ldr	r3, [pc, #200]	@ (80045ac <instance_run+0x130>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	681e      	ldr	r6, [r3, #0]
        uint32_t currentRand = pbss->blink.randomness;
 80044e6:	7d24      	ldrb	r4, [r4, #20]
        currentRand = (currentRand < 1)?(1):((currentRand > 50)?(50):currentRand);
 80044e8:	2c00      	cmp	r4, #0
 80044ea:	d003      	beq.n	80044f4 <instance_run+0x78>
 80044ec:	2c32      	cmp	r4, #50	@ 0x32
 80044ee:	d902      	bls.n	80044f6 <instance_run+0x7a>
 80044f0:	2432      	movs	r4, #50	@ 0x32
 80044f2:	e000      	b.n	80044f6 <instance_run+0x7a>
 80044f4:	2401      	movs	r4, #1
        delay = currentInterval * ( rand()%(currentRand*2) )/100;
 80044f6:	f001 f81b 	bl	8005530 <rand>
 80044fa:	0061      	lsls	r1, r4, #1
 80044fc:	f7fb fea6 	bl	800024c <__aeabi_uidivmod>
 8004500:	4371      	muls	r1, r6
 8004502:	0008      	movs	r0, r1
 8004504:	2164      	movs	r1, #100	@ 0x64
 8004506:	f7fb fe1b 	bl	8000140 <__udivsi3>
 800450a:	0005      	movs	r5, r0
        delay = (currentInterval + (currentInterval * currentRand/100)) \
 800450c:	0020      	movs	r0, r4
 800450e:	4370      	muls	r0, r6
 8004510:	2164      	movs	r1, #100	@ 0x64
 8004512:	f7fb fe15 	bl	8000140 <__udivsi3>
 8004516:	1984      	adds	r4, r0, r6
                - delay - LOWPOWER_RESTART_TIME ;
 8004518:	1b64      	subs	r4, r4, r5
 800451a:	0025      	movs	r5, r4
 800451c:	3d0f      	subs	r5, #15
        if(delay > 0)
 800451e:	2d00      	cmp	r5, #0
 8004520:	dd0b      	ble.n	800453a <instance_run+0xbe>
          if ( delay < MAXIMUM_LED_ON_TIME * 2 ) {
 8004522:	2d63      	cmp	r5, #99	@ 0x63
 8004524:	dc12      	bgt.n	800454c <instance_run+0xd0>
              LEDS_INVERT(LED_BLUE_MASK);
 8004526:	2002      	movs	r0, #2
 8004528:	f7fe f812 	bl	8002550 <LEDS_INVERT>
              low_power(delay);
 800452c:	0028      	movs	r0, r5
 800452e:	f7fe fa2d 	bl	800298c <low_power>
              if(check_device_id() != 0) {
 8004532:	f7ff ff01 	bl	8004338 <check_device_id>
 8004536:	2800      	cmp	r0, #0
 8004538:	d130      	bne.n	800459c <instance_run+0x120>
        instance_data.timeout = portGetTickCount();
 800453a:	f7fd ff69 	bl	8002410 <portGetTickCount>
 800453e:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <instance_run+0x12c>)
 8004540:	61d8      	str	r0, [r3, #28]
        instance_data.timeron = 1;
 8004542:	2201      	movs	r2, #1
 8004544:	769a      	strb	r2, [r3, #26]
        instance_data.done = 0;
 8004546:	2200      	movs	r2, #0
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e7c3      	b.n	80044d4 <instance_run+0x58>
              LEDS_OFF(LED_BLUE_MASK);
 800454c:	2002      	movs	r0, #2
 800454e:	f7fe f841 	bl	80025d4 <LEDS_OFF>
              low_power( delay - MAXIMUM_LED_ON_TIME );
 8004552:	0020      	movs	r0, r4
 8004554:	3841      	subs	r0, #65	@ 0x41
 8004556:	f7fe fa19 	bl	800298c <low_power>
              LEDS_ON(LED_BLUE_MASK);
 800455a:	2002      	movs	r0, #2
 800455c:	f7fe f824 	bl	80025a8 <LEDS_ON>
              low_power( MAXIMUM_LED_ON_TIME );
 8004560:	2032      	movs	r0, #50	@ 0x32
 8004562:	f7fe fa13 	bl	800298c <low_power>
              LEDS_OFF(LED_BLUE_MASK);
 8004566:	2002      	movs	r0, #2
 8004568:	f7fe f834 	bl	80025d4 <LEDS_OFF>
              if(check_device_id() != 0) { // Read device id after Low_Power mode.
 800456c:	f7ff fee4 	bl	8004338 <check_device_id>
 8004570:	2800      	cmp	r0, #0
 8004572:	d0e2      	beq.n	800453a <instance_run+0xbe>
            	  return -1;
 8004574:	2001      	movs	r0, #1
 8004576:	4240      	negs	r0, r0
 8004578:	e7b1      	b.n	80044de <instance_run+0x62>
        if(instance_data.timeout <= portGetTickCount())
 800457a:	4b0b      	ldr	r3, [pc, #44]	@ (80045a8 <instance_run+0x12c>)
 800457c:	69dc      	ldr	r4, [r3, #28]
 800457e:	f7fd ff47 	bl	8002410 <portGetTickCount>
 8004582:	4284      	cmp	r4, r0
 8004584:	d80d      	bhi.n	80045a2 <instance_run+0x126>
            instance_data.timeron = 0;
 8004586:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <instance_run+0x12c>)
 8004588:	2200      	movs	r2, #0
 800458a:	769a      	strb	r2, [r3, #26]
            instance_data.event[instance_data.eventCnt++] \
 800458c:	7e5a      	ldrb	r2, [r3, #25]
 800458e:	1c51      	adds	r1, r2, #1
 8004590:	7659      	strb	r1, [r3, #25]
                 = DWT_SIG_RX_TIMEOUT;
 8004592:	189b      	adds	r3, r3, r2
 8004594:	2204      	movs	r2, #4
 8004596:	75da      	strb	r2, [r3, #23]
    return 0;
 8004598:	2000      	movs	r0, #0
 800459a:	e7a0      	b.n	80044de <instance_run+0x62>
            	  return -1;
 800459c:	2001      	movs	r0, #1
 800459e:	4240      	negs	r0, r0
 80045a0:	e79d      	b.n	80044de <instance_run+0x62>
    return 0;
 80045a2:	2000      	movs	r0, #0
 80045a4:	e79b      	b.n	80044de <instance_run+0x62>
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	2000049c 	.word	0x2000049c
 80045ac:	2000021c 	.word	0x2000021c

080045b0 <lis3dh_i2c_read>:


#define I2C_AUTO_INCREMENT (0x80)

static bool lis3dh_i2c_read(lis3dh_sensor_t* dev, uint8_t reg, uint8_t *data, uint16_t len)
{
 80045b0:	b530      	push	{r4, r5, lr}
 80045b2:	b083      	sub	sp, #12
 80045b4:	0004      	movs	r4, r0
 80045b6:	000d      	movs	r5, r1
    if (!dev || !data) return false;
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d019      	beq.n	80045f0 <lis3dh_i2c_read+0x40>
 80045bc:	2a00      	cmp	r2, #0
 80045be:	d019      	beq.n	80045f4 <lis3dh_i2c_read+0x44>

    debug_dev ("Read %d byte from i2c slave register %02x.", __FUNCTION__, dev, len, reg);

    if (len > 1)
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d903      	bls.n	80045cc <lis3dh_i2c_read+0x1c>
        reg |= I2C_AUTO_INCREMENT;
 80045c4:	2180      	movs	r1, #128	@ 0x80
 80045c6:	4249      	negs	r1, r1
 80045c8:	430d      	orrs	r5, r1
 80045ca:	b2ed      	uxtb	r5, r5
    
    int result = i2c_slave_read(dev->bus, dev->addr, reg, data, len);
 80045cc:	7961      	ldrb	r1, [r4, #5]
 80045ce:	7920      	ldrb	r0, [r4, #4]
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	0013      	movs	r3, r2
 80045d4:	002a      	movs	r2, r5
 80045d6:	f7fe f817 	bl	8002608 <i2c_slave_read>

    if (result)
 80045da:	2800      	cmp	r0, #0
 80045dc:	d102      	bne.n	80045e4 <lis3dh_i2c_read+0x34>
    for (int i=0; i < len; i++)
        printf("%02x ", data[i]);
    printf("\n");
#   endif

    return true;
 80045de:	2001      	movs	r0, #1
}
 80045e0:	b003      	add	sp, #12
 80045e2:	bd30      	pop	{r4, r5, pc}
        dev->error_code |= (result == -EBUSY) ? LIS3DH_I2C_BUSY : LIS3DH_I2C_READ_FAILED;
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	2201      	movs	r2, #1
 80045e8:	4313      	orrs	r3, r2
 80045ea:	6023      	str	r3, [r4, #0]
        return false;
 80045ec:	2000      	movs	r0, #0
 80045ee:	e7f7      	b.n	80045e0 <lis3dh_i2c_read+0x30>
    if (!dev || !data) return false;
 80045f0:	2000      	movs	r0, #0
 80045f2:	e7f5      	b.n	80045e0 <lis3dh_i2c_read+0x30>
 80045f4:	2000      	movs	r0, #0
 80045f6:	e7f3      	b.n	80045e0 <lis3dh_i2c_read+0x30>

080045f8 <lis3dh_spi_read>:
{
 80045f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fa:	46ce      	mov	lr, r9
 80045fc:	4647      	mov	r7, r8
 80045fe:	b580      	push	{r7, lr}
 8004600:	b083      	sub	sp, #12
 8004602:	0006      	movs	r6, r0
 8004604:	0015      	movs	r5, r2
 8004606:	001c      	movs	r4, r3
    if (!dev || !data) return false;
 8004608:	2800      	cmp	r0, #0
 800460a:	d03b      	beq.n	8004684 <lis3dh_spi_read+0x8c>
 800460c:	2a00      	cmp	r2, #0
 800460e:	d03b      	beq.n	8004688 <lis3dh_spi_read+0x90>
    if (len >= LIS3DH_SPI_BUF_SIZE)
 8004610:	2b3f      	cmp	r3, #63	@ 0x3f
 8004612:	d909      	bls.n	8004628 <lis3dh_spi_read+0x30>
        dev->error_code |= LIS3DH_SPI_BUFFER_OVERFLOW;
 8004614:	6803      	ldr	r3, [r0, #0]
 8004616:	2206      	movs	r2, #6
 8004618:	4313      	orrs	r3, r2
 800461a:	6003      	str	r3, [r0, #0]
        return false;
 800461c:	2000      	movs	r0, #0
}
 800461e:	b003      	add	sp, #12
 8004620:	bcc0      	pop	{r6, r7}
 8004622:	46b9      	mov	r9, r7
 8004624:	46b0      	mov	r8, r6
 8004626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t addr = (reg & 0x3f) | LIS3DH_SPI_READ_FLAG | LIS3DH_SPI_AUTO_INC_FLAG;
 8004628:	2340      	movs	r3, #64	@ 0x40
 800462a:	425b      	negs	r3, r3
 800462c:	430b      	orrs	r3, r1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	4698      	mov	r8, r3
    memset (mosi, 0xff, LIS3DH_SPI_BUF_SIZE);
 8004632:	4f16      	ldr	r7, [pc, #88]	@ (800468c <lis3dh_spi_read+0x94>)
 8004634:	2240      	movs	r2, #64	@ 0x40
 8004636:	21ff      	movs	r1, #255	@ 0xff
 8004638:	0038      	movs	r0, r7
 800463a:	f001 f915 	bl	8005868 <memset>
    memset (miso, 0xff, LIS3DH_SPI_BUF_SIZE);
 800463e:	4b14      	ldr	r3, [pc, #80]	@ (8004690 <lis3dh_spi_read+0x98>)
 8004640:	2240      	movs	r2, #64	@ 0x40
 8004642:	21ff      	movs	r1, #255	@ 0xff
 8004644:	4699      	mov	r9, r3
 8004646:	0018      	movs	r0, r3
 8004648:	f001 f90e 	bl	8005868 <memset>
    mosi[0] = addr;
 800464c:	4643      	mov	r3, r8
 800464e:	703b      	strb	r3, [r7, #0]
    if (!spi_transfer_pf (dev->bus, dev->cs, mosi, miso, len+1))
 8004650:	79b1      	ldrb	r1, [r6, #6]
 8004652:	7930      	ldrb	r0, [r6, #4]
 8004654:	1c63      	adds	r3, r4, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	464b      	mov	r3, r9
 800465c:	003a      	movs	r2, r7
 800465e:	f7fd ffd1 	bl	8002604 <spi_transfer_pf>
 8004662:	2800      	cmp	r0, #0
 8004664:	d001      	beq.n	800466a <lis3dh_spi_read+0x72>
    for (int i=0; i < len; i++)
 8004666:	2100      	movs	r1, #0
 8004668:	e009      	b.n	800467e <lis3dh_spi_read+0x86>
        dev->error_code |= LIS3DH_SPI_READ_FAILED;
 800466a:	6833      	ldr	r3, [r6, #0]
 800466c:	2205      	movs	r2, #5
 800466e:	4313      	orrs	r3, r2
 8004670:	6033      	str	r3, [r6, #0]
        return false;
 8004672:	e7d4      	b.n	800461e <lis3dh_spi_read+0x26>
      data[i] = miso[i+1];
 8004674:	1c4b      	adds	r3, r1, #1
 8004676:	4a06      	ldr	r2, [pc, #24]	@ (8004690 <lis3dh_spi_read+0x98>)
 8004678:	5cd2      	ldrb	r2, [r2, r3]
 800467a:	546a      	strb	r2, [r5, r1]
    for (int i=0; i < len; i++)
 800467c:	0019      	movs	r1, r3
 800467e:	428c      	cmp	r4, r1
 8004680:	dcf8      	bgt.n	8004674 <lis3dh_spi_read+0x7c>
 8004682:	e7cc      	b.n	800461e <lis3dh_spi_read+0x26>
    if (!dev || !data) return false;
 8004684:	2000      	movs	r0, #0
 8004686:	e7ca      	b.n	800461e <lis3dh_spi_read+0x26>
 8004688:	2000      	movs	r0, #0
 800468a:	e7c8      	b.n	800461e <lis3dh_spi_read+0x26>
 800468c:	20000558 	.word	0x20000558
 8004690:	20000518 	.word	0x20000518

08004694 <lis3dh_spi_write>:
{
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	0006      	movs	r6, r0
 800469a:	0008      	movs	r0, r1
    if (!dev || !data) return false;
 800469c:	2e00      	cmp	r6, #0
 800469e:	d02b      	beq.n	80046f8 <lis3dh_spi_write+0x64>
 80046a0:	2a00      	cmp	r2, #0
 80046a2:	d02b      	beq.n	80046fc <lis3dh_spi_write+0x68>
    uint8_t addr = (reg & 0x3f) | LIS3DH_SPI_WRITE_FLAG | LIS3DH_SPI_AUTO_INC_FLAG;
 80046a4:	213f      	movs	r1, #63	@ 0x3f
 80046a6:	4001      	ands	r1, r0
 80046a8:	2040      	movs	r0, #64	@ 0x40
 80046aa:	4301      	orrs	r1, r0
 80046ac:	b2c9      	uxtb	r1, r1
    if (len >= LIS3DH_SPI_BUF_SIZE)
 80046ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80046b0:	d803      	bhi.n	80046ba <lis3dh_spi_write+0x26>
    mosi[0] = addr;
 80046b2:	4813      	ldr	r0, [pc, #76]	@ (8004700 <lis3dh_spi_write+0x6c>)
 80046b4:	7001      	strb	r1, [r0, #0]
    for (int i = 0; i < len; i++)
 80046b6:	2100      	movs	r1, #0
 80046b8:	e00a      	b.n	80046d0 <lis3dh_spi_write+0x3c>
        dev->error_code |= LIS3DH_SPI_BUFFER_OVERFLOW;
 80046ba:	6833      	ldr	r3, [r6, #0]
 80046bc:	2206      	movs	r2, #6
 80046be:	4313      	orrs	r3, r2
 80046c0:	6033      	str	r3, [r6, #0]
        return false;
 80046c2:	2000      	movs	r0, #0
 80046c4:	e011      	b.n	80046ea <lis3dh_spi_write+0x56>
        mosi[i+1] = data[i];
 80046c6:	1854      	adds	r4, r2, r1
 80046c8:	3101      	adds	r1, #1
 80046ca:	7825      	ldrb	r5, [r4, #0]
 80046cc:	4c0c      	ldr	r4, [pc, #48]	@ (8004700 <lis3dh_spi_write+0x6c>)
 80046ce:	5465      	strb	r5, [r4, r1]
    for (int i = 0; i < len; i++)
 80046d0:	428b      	cmp	r3, r1
 80046d2:	dcf8      	bgt.n	80046c6 <lis3dh_spi_write+0x32>
    if (!spi_transfer_pf (dev->bus, dev->cs, mosi, NULL, len+1))
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <lis3dh_spi_write+0x6c>)
 80046d6:	79b1      	ldrb	r1, [r6, #6]
 80046d8:	7930      	ldrb	r0, [r6, #4]
 80046da:	3301      	adds	r3, #1
 80046dc:	b29b      	uxth	r3, r3
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	2300      	movs	r3, #0
 80046e2:	f7fd ff8f 	bl	8002604 <spi_transfer_pf>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	d001      	beq.n	80046ee <lis3dh_spi_write+0x5a>
}
 80046ea:	b002      	add	sp, #8
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
        dev->error_code |= LIS3DH_SPI_WRITE_FAILED;
 80046ee:	6833      	ldr	r3, [r6, #0]
 80046f0:	2204      	movs	r2, #4
 80046f2:	4313      	orrs	r3, r2
 80046f4:	6033      	str	r3, [r6, #0]
        return false;
 80046f6:	e7f8      	b.n	80046ea <lis3dh_spi_write+0x56>
    if (!dev || !data) return false;
 80046f8:	2000      	movs	r0, #0
 80046fa:	e7f6      	b.n	80046ea <lis3dh_spi_write+0x56>
 80046fc:	2000      	movs	r0, #0
 80046fe:	e7f4      	b.n	80046ea <lis3dh_spi_write+0x56>
 8004700:	200004d8 	.word	0x200004d8

08004704 <lis3dh_i2c_write>:


static bool lis3dh_i2c_write(lis3dh_sensor_t* dev, uint8_t reg, uint8_t *data, uint16_t len)
{
 8004704:	b530      	push	{r4, r5, lr}
 8004706:	b083      	sub	sp, #12
 8004708:	0004      	movs	r4, r0
 800470a:	000d      	movs	r5, r1
    if (!dev || !data) return false;
 800470c:	2800      	cmp	r0, #0
 800470e:	d019      	beq.n	8004744 <lis3dh_i2c_write+0x40>
 8004710:	2a00      	cmp	r2, #0
 8004712:	d019      	beq.n	8004748 <lis3dh_i2c_write+0x44>

    debug_dev ("Write %d byte to i2c slave register %02x.", __FUNCTION__, dev, len, reg);

    if (len > 1)
 8004714:	2b01      	cmp	r3, #1
 8004716:	d903      	bls.n	8004720 <lis3dh_i2c_write+0x1c>
        reg |= I2C_AUTO_INCREMENT;
 8004718:	2180      	movs	r1, #128	@ 0x80
 800471a:	4249      	negs	r1, r1
 800471c:	430d      	orrs	r5, r1
 800471e:	b2ed      	uxtb	r5, r5

    int result = i2c_slave_write(dev->bus, dev->addr, reg, data, len);
 8004720:	7961      	ldrb	r1, [r4, #5]
 8004722:	7920      	ldrb	r0, [r4, #4]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	0013      	movs	r3, r2
 8004728:	002a      	movs	r2, r5
 800472a:	f7fd ffff 	bl	800272c <i2c_slave_write>

    if (result)
 800472e:	2800      	cmp	r0, #0
 8004730:	d102      	bne.n	8004738 <lis3dh_i2c_write+0x34>
    for (int i=0; i < len; i++)
        printf("%02x ", data[i]);
    printf("\n");
#   endif

    return true;
 8004732:	2001      	movs	r0, #1
}
 8004734:	b003      	add	sp, #12
 8004736:	bd30      	pop	{r4, r5, pc}
        dev->error_code |= (result == -EBUSY) ? LIS3DH_I2C_BUSY : LIS3DH_I2C_WRITE_FAILED;
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	2202      	movs	r2, #2
 800473c:	4313      	orrs	r3, r2
 800473e:	6023      	str	r3, [r4, #0]
        return false;
 8004740:	2000      	movs	r0, #0
 8004742:	e7f7      	b.n	8004734 <lis3dh_i2c_write+0x30>
    if (!dev || !data) return false;
 8004744:	2000      	movs	r0, #0
 8004746:	e7f5      	b.n	8004734 <lis3dh_i2c_write+0x30>
 8004748:	2000      	movs	r0, #0
 800474a:	e7f3      	b.n	8004734 <lis3dh_i2c_write+0x30>

0800474c <lis3dh_reg_read>:
{
 800474c:	b510      	push	{r4, lr}
    if (!dev || !data) return false;
 800474e:	2800      	cmp	r0, #0
 8004750:	d00a      	beq.n	8004768 <lis3dh_reg_read+0x1c>
 8004752:	2a00      	cmp	r2, #0
 8004754:	d00a      	beq.n	800476c <lis3dh_reg_read+0x20>
    return (dev->addr) ? lis3dh_i2c_read (dev, reg, data, len)
 8004756:	7944      	ldrb	r4, [r0, #5]
                       : lis3dh_spi_read (dev, reg, data, len);
 8004758:	2c00      	cmp	r4, #0
 800475a:	d002      	beq.n	8004762 <lis3dh_reg_read+0x16>
    return (dev->addr) ? lis3dh_i2c_read (dev, reg, data, len)
 800475c:	f7ff ff28 	bl	80045b0 <lis3dh_i2c_read>
}
 8004760:	bd10      	pop	{r4, pc}
                       : lis3dh_spi_read (dev, reg, data, len);
 8004762:	f7ff ff49 	bl	80045f8 <lis3dh_spi_read>
 8004766:	e7fb      	b.n	8004760 <lis3dh_reg_read+0x14>
    if (!dev || !data) return false;
 8004768:	2000      	movs	r0, #0
 800476a:	e7f9      	b.n	8004760 <lis3dh_reg_read+0x14>
 800476c:	2000      	movs	r0, #0
 800476e:	e7f7      	b.n	8004760 <lis3dh_reg_read+0x14>

08004770 <lis3dh_is_available>:
{
 8004770:	b510      	push	{r4, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	1e04      	subs	r4, r0, #0
    if (!dev)
 8004776:	d013      	beq.n	80047a0 <lis3dh_is_available+0x30>
    dev->error_code = LIS3DH_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	6003      	str	r3, [r0, #0]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_WHO_AM_I, &chip_id, 1))
 800477c:	3301      	adds	r3, #1
 800477e:	466a      	mov	r2, sp
 8004780:	3207      	adds	r2, #7
 8004782:	210f      	movs	r1, #15
 8004784:	f7ff ffe2 	bl	800474c <lis3dh_reg_read>
 8004788:	2800      	cmp	r0, #0
 800478a:	d00a      	beq.n	80047a2 <lis3dh_is_available+0x32>
    if (chip_id != LIS3DH_CHIP_ID)
 800478c:	466b      	mov	r3, sp
 800478e:	3307      	adds	r3, #7
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b33      	cmp	r3, #51	@ 0x33
 8004794:	d005      	beq.n	80047a2 <lis3dh_is_available+0x32>
        dev->error_code = LIS3DH_WRONG_CHIP_ID;
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	6023      	str	r3, [r4, #0]
        return false;
 800479c:	2000      	movs	r0, #0
 800479e:	e000      	b.n	80047a2 <lis3dh_is_available+0x32>
		return false;
 80047a0:	2000      	movs	r0, #0
}
 80047a2:	b002      	add	sp, #8
 80047a4:	bd10      	pop	{r4, pc}

080047a6 <lis3dh_get_hpf_ref>:
{
 80047a6:	b510      	push	{r4, lr}
 80047a8:	b082      	sub	sp, #8
 80047aa:	1e04      	subs	r4, r0, #0
    if (!dev) return 0;
 80047ac:	d014      	beq.n	80047d8 <lis3dh_get_hpf_ref+0x32>
    dev->error_code = LIS3DH_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	6003      	str	r3, [r0, #0]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_REFERENCE, (uint8_t*)&ref, 1))
 80047b2:	3301      	adds	r3, #1
 80047b4:	466a      	mov	r2, sp
 80047b6:	3207      	adds	r2, #7
 80047b8:	2126      	movs	r1, #38	@ 0x26
 80047ba:	f7ff ffc7 	bl	800474c <lis3dh_reg_read>
 80047be:	2800      	cmp	r0, #0
 80047c0:	d004      	beq.n	80047cc <lis3dh_get_hpf_ref+0x26>
    return ref;
 80047c2:	466b      	mov	r3, sp
 80047c4:	2007      	movs	r0, #7
 80047c6:	5618      	ldrsb	r0, [r3, r0]
}
 80047c8:	b002      	add	sp, #8
 80047ca:	bd10      	pop	{r4, pc}
        dev->error_code |= LIS3DH_CONFIG_HPF_FAILED;
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	2390      	movs	r3, #144	@ 0x90
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	4313      	orrs	r3, r2
 80047d4:	6023      	str	r3, [r4, #0]
        return 0;
 80047d6:	e7f7      	b.n	80047c8 <lis3dh_get_hpf_ref+0x22>
    if (!dev) return 0;
 80047d8:	2000      	movs	r0, #0
 80047da:	e7f5      	b.n	80047c8 <lis3dh_get_hpf_ref+0x22>

080047dc <lis3dh_reg_write>:
{
 80047dc:	b510      	push	{r4, lr}
    if (!dev || !data) return false;
 80047de:	2800      	cmp	r0, #0
 80047e0:	d00a      	beq.n	80047f8 <lis3dh_reg_write+0x1c>
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d00a      	beq.n	80047fc <lis3dh_reg_write+0x20>
    return (dev->addr) ? lis3dh_i2c_write (dev, reg, data, len)
 80047e6:	7944      	ldrb	r4, [r0, #5]
                       : lis3dh_spi_write (dev, reg, data, len);
 80047e8:	2c00      	cmp	r4, #0
 80047ea:	d002      	beq.n	80047f2 <lis3dh_reg_write+0x16>
    return (dev->addr) ? lis3dh_i2c_write (dev, reg, data, len)
 80047ec:	f7ff ff8a 	bl	8004704 <lis3dh_i2c_write>
}
 80047f0:	bd10      	pop	{r4, pc}
                       : lis3dh_spi_write (dev, reg, data, len);
 80047f2:	f7ff ff4f 	bl	8004694 <lis3dh_spi_write>
 80047f6:	e7fb      	b.n	80047f0 <lis3dh_reg_write+0x14>
    if (!dev || !data) return false;
 80047f8:	2000      	movs	r0, #0
 80047fa:	e7f9      	b.n	80047f0 <lis3dh_reg_write+0x14>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e7f7      	b.n	80047f0 <lis3dh_reg_write+0x14>

08004800 <lis3dh_reset>:
{
 8004800:	b510      	push	{r4, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	1e04      	subs	r4, r0, #0
    if (!dev) return false;
 8004806:	d039      	beq.n	800487c <lis3dh_reset+0x7c>
    dev->error_code = LIS3DH_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	6003      	str	r3, [r0, #0]
    uint8_t reg[8] = { 0 };
 800480c:	2208      	movs	r2, #8
 800480e:	2100      	movs	r1, #0
 8004810:	4668      	mov	r0, sp
 8004812:	f001 f829 	bl	8005868 <memset>
    lis3dh_reg_write (dev, LIS3DH_REG_TEMP_CFG , reg, 8);
 8004816:	2308      	movs	r3, #8
 8004818:	466a      	mov	r2, sp
 800481a:	211f      	movs	r1, #31
 800481c:	0020      	movs	r0, r4
 800481e:	f7ff ffdd 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_FIFO_CTRL, reg, 1);
 8004822:	2301      	movs	r3, #1
 8004824:	466a      	mov	r2, sp
 8004826:	212e      	movs	r1, #46	@ 0x2e
 8004828:	0020      	movs	r0, r4
 800482a:	f7ff ffd7 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT1_CFG , reg, 1);
 800482e:	2301      	movs	r3, #1
 8004830:	466a      	mov	r2, sp
 8004832:	2130      	movs	r1, #48	@ 0x30
 8004834:	0020      	movs	r0, r4
 8004836:	f7ff ffd1 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT1_THS , reg, 2);
 800483a:	2302      	movs	r3, #2
 800483c:	466a      	mov	r2, sp
 800483e:	2132      	movs	r1, #50	@ 0x32
 8004840:	0020      	movs	r0, r4
 8004842:	f7ff ffcb 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT2_CFG , reg, 1);
 8004846:	2301      	movs	r3, #1
 8004848:	466a      	mov	r2, sp
 800484a:	2134      	movs	r1, #52	@ 0x34
 800484c:	0020      	movs	r0, r4
 800484e:	f7ff ffc5 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT2_THS , reg, 2);
 8004852:	2302      	movs	r3, #2
 8004854:	466a      	mov	r2, sp
 8004856:	2136      	movs	r1, #54	@ 0x36
 8004858:	0020      	movs	r0, r4
 800485a:	f7ff ffbf 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_CLICK_CFG, reg, 1);
 800485e:	2301      	movs	r3, #1
 8004860:	466a      	mov	r2, sp
 8004862:	2138      	movs	r1, #56	@ 0x38
 8004864:	0020      	movs	r0, r4
 8004866:	f7ff ffb9 	bl	80047dc <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_CLICK_THS, reg, 4);
 800486a:	2304      	movs	r3, #4
 800486c:	466a      	mov	r2, sp
 800486e:	213a      	movs	r1, #58	@ 0x3a
 8004870:	0020      	movs	r0, r4
 8004872:	f7ff ffb3 	bl	80047dc <lis3dh_reg_write>
    return true;
 8004876:	2001      	movs	r0, #1
}
 8004878:	b002      	add	sp, #8
 800487a:	bd10      	pop	{r4, pc}
    if (!dev) return false;
 800487c:	2000      	movs	r0, #0
 800487e:	e7fb      	b.n	8004878 <lis3dh_reset+0x78>

08004880 <lis3dh_init_sensor>:
{
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004882:	b083      	sub	sp, #12
 8004884:	0007      	movs	r7, r0
 8004886:	000e      	movs	r6, r1
 8004888:	0015      	movs	r5, r2
    if ((dev = malloc (sizeof(lis3dh_sensor_t))) == NULL)
 800488a:	200c      	movs	r0, #12
 800488c:	f000 fd8a 	bl	80053a4 <malloc>
 8004890:	1e04      	subs	r4, r0, #0
 8004892:	d064      	beq.n	800495e <lis3dh_init_sensor+0xde>
    sensor = dev;
 8004894:	4b33      	ldr	r3, [pc, #204]	@ (8004964 <lis3dh_init_sensor+0xe4>)
 8004896:	6018      	str	r0, [r3, #0]
    dev->bus    = bus;
 8004898:	7107      	strb	r7, [r0, #4]
    dev->addr   = addr;
 800489a:	7146      	strb	r6, [r0, #5]
    dev->cs     = cs;
 800489c:	7185      	strb	r5, [r0, #6]
    dev->error_code = LIS3DH_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	6003      	str	r3, [r0, #0]
    dev->scale      = lis3dh_scale_2_g;
 80048a2:	71c3      	strb	r3, [r0, #7]
    dev->fifo_mode  = lis3dh_bypass;
 80048a4:	7243      	strb	r3, [r0, #9]
    dev->fifo_first = true;
 80048a6:	3301      	adds	r3, #1
 80048a8:	7283      	strb	r3, [r0, #10]
    if (!addr && !spi_device_init (bus, cs))
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	d105      	bne.n	80048ba <lis3dh_init_sensor+0x3a>
 80048ae:	0029      	movs	r1, r5
 80048b0:	0038      	movs	r0, r7
 80048b2:	f7fd fea5 	bl	8002600 <spi_device_init>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d038      	beq.n	800492c <lis3dh_init_sensor+0xac>
    if (!lis3dh_is_available (dev))
 80048ba:	0020      	movs	r0, r4
 80048bc:	f7ff ff58 	bl	8004770 <lis3dh_is_available>
 80048c0:	2800      	cmp	r0, #0
 80048c2:	d03b      	beq.n	800493c <lis3dh_init_sensor+0xbc>
    if (!lis3dh_reset(dev))
 80048c4:	0020      	movs	r0, r4
 80048c6:	f7ff ff9b 	bl	8004800 <lis3dh_reset>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d03e      	beq.n	800494c <lis3dh_init_sensor+0xcc>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, lis3dh_scale_2_g);
 80048ce:	2301      	movs	r3, #1
 80048d0:	aa01      	add	r2, sp, #4
 80048d2:	2123      	movs	r1, #35	@ 0x23
 80048d4:	0020      	movs	r0, r4
 80048d6:	f7ff ff39 	bl	800474c <lis3dh_reg_read>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d03e      	beq.n	800495c <lis3dh_init_sensor+0xdc>
 80048de:	466b      	mov	r3, sp
 80048e0:	791b      	ldrb	r3, [r3, #4]
 80048e2:	2230      	movs	r2, #48	@ 0x30
 80048e4:	4393      	bics	r3, r2
 80048e6:	466a      	mov	r2, sp
 80048e8:	7113      	strb	r3, [r2, #4]
 80048ea:	2301      	movs	r3, #1
 80048ec:	aa01      	add	r2, sp, #4
 80048ee:	2123      	movs	r1, #35	@ 0x23
 80048f0:	0020      	movs	r0, r4
 80048f2:	f7ff ff73 	bl	80047dc <lis3dh_reg_write>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d030      	beq.n	800495c <lis3dh_init_sensor+0xdc>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, BDU, 1);
 80048fa:	2301      	movs	r3, #1
 80048fc:	aa01      	add	r2, sp, #4
 80048fe:	2123      	movs	r1, #35	@ 0x23
 8004900:	0020      	movs	r0, r4
 8004902:	f7ff ff23 	bl	800474c <lis3dh_reg_read>
 8004906:	2800      	cmp	r0, #0
 8004908:	d00e      	beq.n	8004928 <lis3dh_init_sensor+0xa8>
 800490a:	466b      	mov	r3, sp
 800490c:	791a      	ldrb	r2, [r3, #4]
 800490e:	2380      	movs	r3, #128	@ 0x80
 8004910:	425b      	negs	r3, r3
 8004912:	4313      	orrs	r3, r2
 8004914:	466a      	mov	r2, sp
 8004916:	7113      	strb	r3, [r2, #4]
 8004918:	2301      	movs	r3, #1
 800491a:	aa01      	add	r2, sp, #4
 800491c:	2123      	movs	r1, #35	@ 0x23
 800491e:	0020      	movs	r0, r4
 8004920:	f7ff ff5c 	bl	80047dc <lis3dh_reg_write>
 8004924:	2800      	cmp	r0, #0
 8004926:	d11a      	bne.n	800495e <lis3dh_init_sensor+0xde>
 8004928:	2400      	movs	r4, #0
 800492a:	e018      	b.n	800495e <lis3dh_init_sensor+0xde>
        free (dev);
 800492c:	0020      	movs	r0, r4
 800492e:	f000 fd43 	bl	80053b8 <free>
        sensor = NULL;
 8004932:	4b0c      	ldr	r3, [pc, #48]	@ (8004964 <lis3dh_init_sensor+0xe4>)
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
        return NULL;
 8004938:	2400      	movs	r4, #0
 800493a:	e010      	b.n	800495e <lis3dh_init_sensor+0xde>
        free (dev);
 800493c:	0020      	movs	r0, r4
 800493e:	f000 fd3b 	bl	80053b8 <free>
        sensor = NULL;
 8004942:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <lis3dh_init_sensor+0xe4>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
        return NULL;
 8004948:	2400      	movs	r4, #0
 800494a:	e008      	b.n	800495e <lis3dh_init_sensor+0xde>
        free (dev);
 800494c:	0020      	movs	r0, r4
 800494e:	f000 fd33 	bl	80053b8 <free>
        sensor = NULL;
 8004952:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <lis3dh_init_sensor+0xe4>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
        return NULL;
 8004958:	2400      	movs	r4, #0
 800495a:	e000      	b.n	800495e <lis3dh_init_sensor+0xde>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, lis3dh_scale_2_g);
 800495c:	2400      	movs	r4, #0
}
 800495e:	0020      	movs	r0, r4
 8004960:	b003      	add	sp, #12
 8004962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004964:	20000598 	.word	0x20000598

08004968 <lis3dh_set_mode>:
{
 8004968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800496a:	46d6      	mov	lr, sl
 800496c:	4647      	mov	r7, r8
 800496e:	b580      	push	{r7, lr}
 8004970:	b085      	sub	sp, #20
 8004972:	0004      	movs	r4, r0
 8004974:	9101      	str	r1, [sp, #4]
 8004976:	0015      	movs	r5, r2
 8004978:	001e      	movs	r6, r3
 800497a:	ab0c      	add	r3, sp, #48	@ 0x30
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	469a      	mov	sl, r3
 8004980:	ab0d      	add	r3, sp, #52	@ 0x34
 8004982:	781f      	ldrb	r7, [r3, #0]
    if (!dev) return false;
 8004984:	2800      	cmp	r0, #0
 8004986:	d009      	beq.n	800499c <lis3dh_set_mode+0x34>
    dev->error_code = LIS3DH_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	6003      	str	r3, [r0, #0]
    dev->res = res;
 800498c:	7202      	strb	r2, [r0, #8]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_CTRL1, (uint8_t*)&reg, 1))
 800498e:	3301      	adds	r3, #1
 8004990:	aa03      	add	r2, sp, #12
 8004992:	2120      	movs	r1, #32
 8004994:	f7ff feda 	bl	800474c <lis3dh_reg_read>
 8004998:	2800      	cmp	r0, #0
 800499a:	d105      	bne.n	80049a8 <lis3dh_set_mode+0x40>
}
 800499c:	2000      	movs	r0, #0
 800499e:	b005      	add	sp, #20
 80049a0:	bcc0      	pop	{r6, r7}
 80049a2:	46ba      	mov	sl, r7
 80049a4:	46b0      	mov	r8, r6
 80049a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    old_odr = reg.ODR;
 80049a8:	ab03      	add	r3, sp, #12
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	0910      	lsrs	r0, r2, #4
 80049ae:	4680      	mov	r8, r0
    reg.Xen  = x;
 80049b0:	2101      	movs	r1, #1
 80049b2:	400e      	ands	r6, r1
 80049b4:	2001      	movs	r0, #1
 80049b6:	4382      	bics	r2, r0
 80049b8:	4332      	orrs	r2, r6
 80049ba:	701a      	strb	r2, [r3, #0]
    reg.Yen  = y;
 80049bc:	4652      	mov	r2, sl
 80049be:	400a      	ands	r2, r1
 80049c0:	0052      	lsls	r2, r2, #1
 80049c2:	7818      	ldrb	r0, [r3, #0]
 80049c4:	2602      	movs	r6, #2
 80049c6:	43b0      	bics	r0, r6
 80049c8:	4302      	orrs	r2, r0
 80049ca:	701a      	strb	r2, [r3, #0]
    reg.Zen  = z;
 80049cc:	003a      	movs	r2, r7
 80049ce:	400a      	ands	r2, r1
 80049d0:	0092      	lsls	r2, r2, #2
 80049d2:	7818      	ldrb	r0, [r3, #0]
 80049d4:	3602      	adds	r6, #2
 80049d6:	43b0      	bics	r0, r6
 80049d8:	4302      	orrs	r2, r0
 80049da:	701a      	strb	r2, [r3, #0]
    reg.ODR  = odr;
 80049dc:	9f01      	ldr	r7, [sp, #4]
 80049de:	0138      	lsls	r0, r7, #4
 80049e0:	b2d6      	uxtb	r6, r2
 80049e2:	220f      	movs	r2, #15
 80049e4:	4032      	ands	r2, r6
 80049e6:	4302      	orrs	r2, r0
 80049e8:	701a      	strb	r2, [r3, #0]
    reg.LPen = (res == lis3dh_low_power);
 80049ea:	426a      	negs	r2, r5
 80049ec:	416a      	adcs	r2, r5
 80049ee:	4011      	ands	r1, r2
 80049f0:	00c9      	lsls	r1, r1, #3
 80049f2:	781a      	ldrb	r2, [r3, #0]
 80049f4:	2008      	movs	r0, #8
 80049f6:	4382      	bics	r2, r0
 80049f8:	430a      	orrs	r2, r1
 80049fa:	701a      	strb	r2, [r3, #0]
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4,
 80049fc:	2301      	movs	r3, #1
 80049fe:	aa02      	add	r2, sp, #8
 8004a00:	2123      	movs	r1, #35	@ 0x23
 8004a02:	0020      	movs	r0, r4
 8004a04:	f7ff fea2 	bl	800474c <lis3dh_reg_read>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d0c7      	beq.n	800499c <lis3dh_set_mode+0x34>
 8004a0c:	3d02      	subs	r5, #2
 8004a0e:	426b      	negs	r3, r5
 8004a10:	415d      	adcs	r5, r3
 8004a12:	00ed      	lsls	r5, r5, #3
 8004a14:	ab02      	add	r3, sp, #8
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	4393      	bics	r3, r2
 8004a1c:	432b      	orrs	r3, r5
 8004a1e:	aa02      	add	r2, sp, #8
 8004a20:	7013      	strb	r3, [r2, #0]
 8004a22:	2301      	movs	r3, #1
 8004a24:	2123      	movs	r1, #35	@ 0x23
 8004a26:	0020      	movs	r0, r4
 8004a28:	f7ff fed8 	bl	80047dc <lis3dh_reg_write>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d0b5      	beq.n	800499c <lis3dh_set_mode+0x34>
    if (!lis3dh_reg_write (dev, LIS3DH_REG_CTRL1, (uint8_t*)&reg, 1))
 8004a30:	2301      	movs	r3, #1
 8004a32:	aa03      	add	r2, sp, #12
 8004a34:	2120      	movs	r1, #32
 8004a36:	0020      	movs	r0, r4
 8004a38:	f7ff fed0 	bl	80047dc <lis3dh_reg_write>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d0ad      	beq.n	800499c <lis3dh_set_mode+0x34>
    if (old_odr == lis3dh_power_down && odr != lis3dh_power_down)
 8004a40:	4643      	mov	r3, r8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1aa      	bne.n	800499c <lis3dh_set_mode+0x34>
 8004a46:	2f00      	cmp	r7, #0
 8004a48:	d0a8      	beq.n	800499c <lis3dh_set_mode+0x34>
    	LL_mDelay(100);
 8004a4a:	2064      	movs	r0, #100	@ 0x64
 8004a4c:	f7fd fb52 	bl	80020f4 <LL_mDelay>
 8004a50:	e7a4      	b.n	800499c <lis3dh_set_mode+0x34>

08004a52 <lis3dh_set_scale>:
{
 8004a52:	b530      	push	{r4, r5, lr}
 8004a54:	b083      	sub	sp, #12
 8004a56:	0004      	movs	r4, r0
 8004a58:	000d      	movs	r5, r1
    if (!dev) return false;
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d01f      	beq.n	8004a9e <lis3dh_set_scale+0x4c>
    dev->error_code = LIS3DH_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6003      	str	r3, [r0, #0]
    dev->scale = scale;
 8004a62:	71c1      	strb	r1, [r0, #7]
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, scale);
 8004a64:	3301      	adds	r3, #1
 8004a66:	aa01      	add	r2, sp, #4
 8004a68:	2123      	movs	r1, #35	@ 0x23
 8004a6a:	f7ff fe6f 	bl	800474c <lis3dh_reg_read>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d102      	bne.n	8004a78 <lis3dh_set_scale+0x26>
 8004a72:	2000      	movs	r0, #0
}
 8004a74:	b003      	add	sp, #12
 8004a76:	bd30      	pop	{r4, r5, pc}
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, scale);
 8004a78:	2203      	movs	r2, #3
 8004a7a:	402a      	ands	r2, r5
 8004a7c:	0112      	lsls	r2, r2, #4
 8004a7e:	466b      	mov	r3, sp
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2130      	movs	r1, #48	@ 0x30
 8004a84:	438b      	bics	r3, r1
 8004a86:	4313      	orrs	r3, r2
 8004a88:	466a      	mov	r2, sp
 8004a8a:	7113      	strb	r3, [r2, #4]
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	aa01      	add	r2, sp, #4
 8004a90:	390d      	subs	r1, #13
 8004a92:	0020      	movs	r0, r4
 8004a94:	f7ff fea2 	bl	80047dc <lis3dh_reg_write>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d1eb      	bne.n	8004a74 <lis3dh_set_scale+0x22>
 8004a9c:	e7e9      	b.n	8004a72 <lis3dh_set_scale+0x20>
    if (!dev) return false;
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e7e8      	b.n	8004a74 <lis3dh_set_scale+0x22>
	...

08004aa4 <lis3dh_enable_int>:
{
 8004aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa6:	46ce      	mov	lr, r9
 8004aa8:	4647      	mov	r7, r8
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b083      	sub	sp, #12
 8004aae:	0004      	movs	r4, r0
 8004ab0:	000f      	movs	r7, r1
 8004ab2:	0015      	movs	r5, r2
 8004ab4:	001e      	movs	r6, r3
    if (!dev) return false;
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d100      	bne.n	8004abc <lis3dh_enable_int+0x18>
 8004aba:	e09d      	b.n	8004bf8 <lis3dh_enable_int+0x154>
    dev->error_code = LIS3DH_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	6003      	str	r3, [r0, #0]
    if (type == lis3dh_int_data_ready     ||
 8004ac0:	2902      	cmp	r1, #2
 8004ac2:	d906      	bls.n	8004ad2 <lis3dh_enable_int+0x2e>
    else if (signal == lis3dh_int1_signal)
 8004ac4:	2a00      	cmp	r2, #0
 8004ac6:	d117      	bne.n	8004af8 <lis3dh_enable_int+0x54>
        addr = LIS3DH_REG_CTRL3;
 8004ac8:	3322      	adds	r3, #34	@ 0x22
 8004aca:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl3;
 8004acc:	ab01      	add	r3, sp, #4
 8004ace:	4699      	mov	r9, r3
 8004ad0:	e003      	b.n	8004ada <lis3dh_enable_int+0x36>
        addr = LIS3DH_REG_CTRL3;
 8004ad2:	2322      	movs	r3, #34	@ 0x22
 8004ad4:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl3;
 8004ad6:	ab01      	add	r3, sp, #4
 8004ad8:	4699      	mov	r9, r3
    if (!lis3dh_reg_read (dev, addr, reg, 1))
 8004ada:	2301      	movs	r3, #1
 8004adc:	464a      	mov	r2, r9
 8004ade:	4641      	mov	r1, r8
 8004ae0:	0020      	movs	r0, r4
 8004ae2:	f7ff fe33 	bl	800474c <lis3dh_reg_read>
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	d00a      	beq.n	8004b00 <lis3dh_enable_int+0x5c>
    switch (type)
 8004aea:	2f05      	cmp	r7, #5
 8004aec:	d900      	bls.n	8004af0 <lis3dh_enable_int+0x4c>
 8004aee:	e078      	b.n	8004be2 <lis3dh_enable_int+0x13e>
 8004af0:	00bf      	lsls	r7, r7, #2
 8004af2:	4b42      	ldr	r3, [pc, #264]	@ (8004bfc <lis3dh_enable_int+0x158>)
 8004af4:	59db      	ldr	r3, [r3, r7]
 8004af6:	469f      	mov	pc, r3
        addr = LIS3DH_REG_CTRL6;
 8004af8:	2325      	movs	r3, #37	@ 0x25
 8004afa:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl6;
 8004afc:	46e9      	mov	r9, sp
 8004afe:	e7ec      	b.n	8004ada <lis3dh_enable_int+0x36>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 8004b00:	6822      	ldr	r2, [r4, #0]
 8004b02:	23e0      	movs	r3, #224	@ 0xe0
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4313      	orrs	r3, r2
 8004b08:	6023      	str	r3, [r4, #0]
        return false;
 8004b0a:	e010      	b.n	8004b2e <lis3dh_enable_int+0x8a>
        case lis3dh_int_data_ready:     ctrl3.IT_DRDY1 = value;
 8004b0c:	aa01      	add	r2, sp, #4
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4031      	ands	r1, r6
 8004b12:	0109      	lsls	r1, r1, #4
 8004b14:	7813      	ldrb	r3, [r2, #0]
 8004b16:	2010      	movs	r0, #16
 8004b18:	4383      	bics	r3, r0
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	7013      	strb	r3, [r2, #0]
    if (!lis3dh_reg_write (dev, addr, reg, 1))
 8004b1e:	2301      	movs	r3, #1
 8004b20:	464a      	mov	r2, r9
 8004b22:	4641      	mov	r1, r8
 8004b24:	0020      	movs	r0, r4
 8004b26:	f7ff fe59 	bl	80047dc <lis3dh_reg_write>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d05e      	beq.n	8004bec <lis3dh_enable_int+0x148>
}
 8004b2e:	b003      	add	sp, #12
 8004b30:	bcc0      	pop	{r6, r7}
 8004b32:	46b9      	mov	r9, r7
 8004b34:	46b0      	mov	r8, r6
 8004b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case lis3dh_int_fifo_watermark: ctrl3.I1_WTM1 = value;
 8004b38:	aa01      	add	r2, sp, #4
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	4031      	ands	r1, r6
 8004b3e:	0089      	lsls	r1, r1, #2
 8004b40:	7813      	ldrb	r3, [r2, #0]
 8004b42:	2004      	movs	r0, #4
 8004b44:	4383      	bics	r3, r0
 8004b46:	430b      	orrs	r3, r1
 8004b48:	7013      	strb	r3, [r2, #0]
                                        break;
 8004b4a:	e7e8      	b.n	8004b1e <lis3dh_enable_int+0x7a>
        case lis3dh_int_fifo_overrun:   ctrl3.I1_OVERRUN = value;
 8004b4c:	aa01      	add	r2, sp, #4
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4031      	ands	r1, r6
 8004b52:	0049      	lsls	r1, r1, #1
 8004b54:	7813      	ldrb	r3, [r2, #0]
 8004b56:	2002      	movs	r0, #2
 8004b58:	4383      	bics	r3, r0
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	7013      	strb	r3, [r2, #0]
                                        break;
 8004b5e:	e7de      	b.n	8004b1e <lis3dh_enable_int+0x7a>
        case lis3dh_int_event1:         if (signal == lis3dh_int1_signal)
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	d109      	bne.n	8004b78 <lis3dh_enable_int+0xd4>
                                            ctrl3.I1_AOI1 = value;
 8004b64:	aa01      	add	r2, sp, #4
 8004b66:	2101      	movs	r1, #1
 8004b68:	4031      	ands	r1, r6
 8004b6a:	0189      	lsls	r1, r1, #6
 8004b6c:	7813      	ldrb	r3, [r2, #0]
 8004b6e:	2040      	movs	r0, #64	@ 0x40
 8004b70:	4383      	bics	r3, r0
 8004b72:	430b      	orrs	r3, r1
 8004b74:	7013      	strb	r3, [r2, #0]
 8004b76:	e7d2      	b.n	8004b1e <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_AOI1 = value;
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4032      	ands	r2, r6
 8004b7c:	0192      	lsls	r2, r2, #6
 8004b7e:	466b      	mov	r3, sp
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2140      	movs	r1, #64	@ 0x40
 8004b84:	438b      	bics	r3, r1
 8004b86:	4313      	orrs	r3, r2
 8004b88:	466a      	mov	r2, sp
 8004b8a:	7013      	strb	r3, [r2, #0]
 8004b8c:	e7c7      	b.n	8004b1e <lis3dh_enable_int+0x7a>
        case lis3dh_int_event2:         if (signal == lis3dh_int1_signal)
 8004b8e:	2d00      	cmp	r5, #0
 8004b90:	d109      	bne.n	8004ba6 <lis3dh_enable_int+0x102>
                                            ctrl3.I1_AOI2 = value;
 8004b92:	aa01      	add	r2, sp, #4
 8004b94:	2101      	movs	r1, #1
 8004b96:	4031      	ands	r1, r6
 8004b98:	0149      	lsls	r1, r1, #5
 8004b9a:	7813      	ldrb	r3, [r2, #0]
 8004b9c:	2020      	movs	r0, #32
 8004b9e:	4383      	bics	r3, r0
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	7013      	strb	r3, [r2, #0]
 8004ba4:	e7bb      	b.n	8004b1e <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_AOI2 = value;
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4032      	ands	r2, r6
 8004baa:	0152      	lsls	r2, r2, #5
 8004bac:	466b      	mov	r3, sp
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2120      	movs	r1, #32
 8004bb2:	438b      	bics	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	466a      	mov	r2, sp
 8004bb8:	7013      	strb	r3, [r2, #0]
 8004bba:	e7b0      	b.n	8004b1e <lis3dh_enable_int+0x7a>
        case lis3dh_int_click:          if (signal == lis3dh_int1_signal)
 8004bbc:	2d00      	cmp	r5, #0
 8004bbe:	d107      	bne.n	8004bd0 <lis3dh_enable_int+0x12c>
                                            ctrl3.I1_CLICK = value;
 8004bc0:	ab01      	add	r3, sp, #4
 8004bc2:	01f2      	lsls	r2, r6, #7
 8004bc4:	7819      	ldrb	r1, [r3, #0]
 8004bc6:	267f      	movs	r6, #127	@ 0x7f
 8004bc8:	400e      	ands	r6, r1
 8004bca:	4316      	orrs	r6, r2
 8004bcc:	701e      	strb	r6, [r3, #0]
 8004bce:	e7a6      	b.n	8004b1e <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_CLICK = value;
 8004bd0:	01f6      	lsls	r6, r6, #7
 8004bd2:	466b      	mov	r3, sp
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	237f      	movs	r3, #127	@ 0x7f
 8004bd8:	4013      	ands	r3, r2
 8004bda:	4333      	orrs	r3, r6
 8004bdc:	466a      	mov	r2, sp
 8004bde:	7013      	strb	r3, [r2, #0]
 8004be0:	e79d      	b.n	8004b1e <lis3dh_enable_int+0x7a>
        default: dev->error_code = LIS3DH_WRONG_INT_TYPE; 
 8004be2:	23a0      	movs	r3, #160	@ 0xa0
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	6023      	str	r3, [r4, #0]
                 return false;
 8004be8:	2000      	movs	r0, #0
 8004bea:	e7a0      	b.n	8004b2e <lis3dh_enable_int+0x8a>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	23e0      	movs	r3, #224	@ 0xe0
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	6023      	str	r3, [r4, #0]
        return false;
 8004bf6:	e79a      	b.n	8004b2e <lis3dh_enable_int+0x8a>
    if (!dev) return false;
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e798      	b.n	8004b2e <lis3dh_enable_int+0x8a>
 8004bfc:	0800766c 	.word	0x0800766c

08004c00 <lis3dh_set_int_event_config>:
{
 8004c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c02:	46ce      	mov	lr, r9
 8004c04:	4647      	mov	r7, r8
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	0005      	movs	r5, r0
 8004c0c:	000c      	movs	r4, r1
 8004c0e:	0016      	movs	r6, r2
    if (!dev || !config) return false;
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d100      	bne.n	8004c16 <lis3dh_set_int_event_config+0x16>
 8004c14:	e115      	b.n	8004e42 <lis3dh_set_int_event_config+0x242>
 8004c16:	2900      	cmp	r1, #0
 8004c18:	d100      	bne.n	8004c1c <lis3dh_set_int_event_config+0x1c>
 8004c1a:	e114      	b.n	8004e46 <lis3dh_set_int_event_config+0x246>
    dev->error_code = LIS3DH_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	6003      	str	r3, [r0, #0]
    intx_cfg.XLIE = config->x_low_enabled;
 8004c20:	7888      	ldrb	r0, [r1, #2]
 8004c22:	ab01      	add	r3, sp, #4
 8004c24:	2101      	movs	r1, #1
 8004c26:	4008      	ands	r0, r1
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	2701      	movs	r7, #1
 8004c2c:	43ba      	bics	r2, r7
 8004c2e:	4302      	orrs	r2, r0
 8004c30:	701a      	strb	r2, [r3, #0]
    intx_cfg.XHIE = config->x_high_enabled;
 8004c32:	78e0      	ldrb	r0, [r4, #3]
 8004c34:	4008      	ands	r0, r1
 8004c36:	0040      	lsls	r0, r0, #1
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	3701      	adds	r7, #1
 8004c3c:	43ba      	bics	r2, r7
 8004c3e:	4302      	orrs	r2, r0
 8004c40:	701a      	strb	r2, [r3, #0]
    intx_cfg.YLIE = config->y_low_enabled;
 8004c42:	7920      	ldrb	r0, [r4, #4]
 8004c44:	4008      	ands	r0, r1
 8004c46:	0080      	lsls	r0, r0, #2
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	3702      	adds	r7, #2
 8004c4c:	43ba      	bics	r2, r7
 8004c4e:	4302      	orrs	r2, r0
 8004c50:	701a      	strb	r2, [r3, #0]
    intx_cfg.YHIE = config->y_high_enabled;
 8004c52:	7960      	ldrb	r0, [r4, #5]
 8004c54:	4008      	ands	r0, r1
 8004c56:	00c0      	lsls	r0, r0, #3
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	3704      	adds	r7, #4
 8004c5c:	43ba      	bics	r2, r7
 8004c5e:	4302      	orrs	r2, r0
 8004c60:	701a      	strb	r2, [r3, #0]
    intx_cfg.ZLIE = config->z_low_enabled;
 8004c62:	79a0      	ldrb	r0, [r4, #6]
 8004c64:	4008      	ands	r0, r1
 8004c66:	0100      	lsls	r0, r0, #4
 8004c68:	b2d2      	uxtb	r2, r2
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	43ba      	bics	r2, r7
 8004c6e:	4302      	orrs	r2, r0
 8004c70:	701a      	strb	r2, [r3, #0]
    intx_cfg.ZHIE = config->z_high_enabled;
 8004c72:	79e2      	ldrb	r2, [r4, #7]
 8004c74:	4011      	ands	r1, r2
 8004c76:	0149      	lsls	r1, r1, #5
 8004c78:	781a      	ldrb	r2, [r3, #0]
 8004c7a:	2020      	movs	r0, #32
 8004c7c:	4382      	bics	r2, r0
 8004c7e:	4311      	orrs	r1, r2
 8004c80:	7019      	strb	r1, [r3, #0]
    switch (config->mode)
 8004c82:	7823      	ldrb	r3, [r4, #0]
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d852      	bhi.n	8004d2e <lis3dh_set_int_event_config+0x12e>
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4a70      	ldr	r2, [pc, #448]	@ (8004e4c <lis3dh_set_int_event_config+0x24c>)
 8004c8c:	58d3      	ldr	r3, [r2, r3]
 8004c8e:	469f      	mov	pc, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	4699      	mov	r9, r3
        case lis3dh_6d_position : intx_cfg.AOI = 1; intx_cfg.SIXD = 1; break;
 8004c94:	ab01      	add	r3, sp, #4
 8004c96:	7819      	ldrb	r1, [r3, #0]
 8004c98:	2280      	movs	r2, #128	@ 0x80
 8004c9a:	4252      	negs	r2, r2
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	2140      	movs	r1, #64	@ 0x40
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	e00a      	b.n	8004cc0 <lis3dh_set_int_event_config+0xc0>
    switch (config->mode)
 8004caa:	2300      	movs	r3, #0
 8004cac:	4699      	mov	r9, r3
        case lis3dh_6d_movement : intx_cfg.AOI = 0; intx_cfg.SIXD = 1; break;
 8004cae:	ab01      	add	r3, sp, #4
 8004cb0:	7819      	ldrb	r1, [r3, #0]
 8004cb2:	227f      	movs	r2, #127	@ 0x7f
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	b2d2      	uxtb	r2, r2
 8004cba:	2140      	movs	r1, #64	@ 0x40
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	701a      	strb	r2, [r3, #0]
    uint8_t intx_cfg_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_CFG : LIS3DH_REG_INT2_CFG;
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	d137      	bne.n	8004d34 <lis3dh_set_int_event_config+0x134>
 8004cc4:	2132      	movs	r1, #50	@ 0x32
 8004cc6:	2330      	movs	r3, #48	@ 0x30
 8004cc8:	4698      	mov	r8, r3
    uint8_t intx_dur_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_DUR : LIS3DH_REG_INT2_DUR;
 8004cca:	2733      	movs	r7, #51	@ 0x33
        !lis3dh_reg_write (dev, intx_ths_addr, &config->threshold, 1) ||
 8004ccc:	1c62      	adds	r2, r4, #1
 8004cce:	2301      	movs	r3, #1
 8004cd0:	0028      	movs	r0, r5
 8004cd2:	f7ff fd83 	bl	80047dc <lis3dh_reg_write>
    if (// write the thresholds to registers IG_THS_*
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	d131      	bne.n	8004d3e <lis3dh_set_int_event_config+0x13e>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 8004cda:	682a      	ldr	r2, [r5, #0]
 8004cdc:	23e0      	movs	r3, #224	@ 0xe0
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	602b      	str	r3, [r5, #0]
        return false;
 8004ce4:	2000      	movs	r0, #0
}
 8004ce6:	b003      	add	sp, #12
 8004ce8:	bcc0      	pop	{r6, r7}
 8004cea:	46b9      	mov	r9, r7
 8004cec:	46b0      	mov	r8, r6
 8004cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case lis3dh_wake_up     : intx_cfg.AOI = 0; intx_cfg.SIXD = 0; break;
 8004cf0:	ab01      	add	r3, sp, #4
 8004cf2:	7819      	ldrb	r1, [r3, #0]
 8004cf4:	227f      	movs	r2, #127	@ 0x7f
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	2140      	movs	r1, #64	@ 0x40
 8004cfe:	438a      	bics	r2, r1
 8004d00:	701a      	strb	r2, [r3, #0]
    bool d4d_int = false;
 8004d02:	2300      	movs	r3, #0
 8004d04:	4699      	mov	r9, r3
        case lis3dh_wake_up     : intx_cfg.AOI = 0; intx_cfg.SIXD = 0; break;
 8004d06:	e7db      	b.n	8004cc0 <lis3dh_set_int_event_config+0xc0>
        case lis3dh_free_fall   : intx_cfg.AOI = 1; intx_cfg.SIXD = 0; break;
 8004d08:	ab01      	add	r3, sp, #4
 8004d0a:	7819      	ldrb	r1, [r3, #0]
 8004d0c:	2280      	movs	r2, #128	@ 0x80
 8004d0e:	4252      	negs	r2, r2
 8004d10:	430a      	orrs	r2, r1
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	2140      	movs	r1, #64	@ 0x40
 8004d18:	438a      	bics	r2, r1
 8004d1a:	701a      	strb	r2, [r3, #0]
    bool d4d_int = false;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	4699      	mov	r9, r3
        case lis3dh_free_fall   : intx_cfg.AOI = 1; intx_cfg.SIXD = 0; break;
 8004d20:	e7ce      	b.n	8004cc0 <lis3dh_set_int_event_config+0xc0>
        case lis3dh_4d_movement : d4d_int = true;
 8004d22:	2301      	movs	r3, #1
 8004d24:	4699      	mov	r9, r3
 8004d26:	e7c2      	b.n	8004cae <lis3dh_set_int_event_config+0xae>
        case lis3dh_4d_position : d4d_int = true;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	e7b2      	b.n	8004c94 <lis3dh_set_int_event_config+0x94>
    switch (config->mode)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4699      	mov	r9, r3
 8004d32:	e7c5      	b.n	8004cc0 <lis3dh_set_int_event_config+0xc0>
 8004d34:	2136      	movs	r1, #54	@ 0x36
 8004d36:	2334      	movs	r3, #52	@ 0x34
 8004d38:	4698      	mov	r8, r3
    uint8_t intx_dur_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_DUR : LIS3DH_REG_INT2_DUR;
 8004d3a:	2737      	movs	r7, #55	@ 0x37
 8004d3c:	e7c6      	b.n	8004ccc <lis3dh_set_int_event_config+0xcc>
        !lis3dh_reg_write (dev, intx_dur_addr, &config->duration, 1) ||
 8004d3e:	2301      	movs	r3, #1
 8004d40:	0022      	movs	r2, r4
 8004d42:	3209      	adds	r2, #9
 8004d44:	0039      	movs	r1, r7
 8004d46:	0028      	movs	r0, r5
 8004d48:	f7ff fd48 	bl	80047dc <lis3dh_reg_write>
        !lis3dh_reg_write (dev, intx_ths_addr, &config->threshold, 1) ||
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d0c4      	beq.n	8004cda <lis3dh_set_int_event_config+0xda>
        !lis3dh_reg_write (dev, intx_cfg_addr, (uint8_t*)&intx_cfg, 1))
 8004d50:	2301      	movs	r3, #1
 8004d52:	aa01      	add	r2, sp, #4
 8004d54:	4641      	mov	r1, r8
 8004d56:	0028      	movs	r0, r5
 8004d58:	f7ff fd40 	bl	80047dc <lis3dh_reg_write>
        !lis3dh_reg_write (dev, intx_dur_addr, &config->duration, 1) ||
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d0bc      	beq.n	8004cda <lis3dh_set_int_event_config+0xda>
    if (gen == lis3dh_int_event1_gen)
 8004d60:	2e00      	cmp	r6, #0
 8004d62:	d137      	bne.n	8004dd4 <lis3dh_set_int_event_config+0x1d4>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, LIR_INT1, config->latch);
 8004d64:	2301      	movs	r3, #1
 8004d66:	466a      	mov	r2, sp
 8004d68:	2124      	movs	r1, #36	@ 0x24
 8004d6a:	0028      	movs	r0, r5
 8004d6c:	f7ff fcee 	bl	800474c <lis3dh_reg_read>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d101      	bne.n	8004d78 <lis3dh_set_int_event_config+0x178>
 8004d74:	2000      	movs	r0, #0
 8004d76:	e7b6      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004d78:	7a23      	ldrb	r3, [r4, #8]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	00d2      	lsls	r2, r2, #3
 8004d80:	466b      	mov	r3, sp
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2108      	movs	r1, #8
 8004d86:	438b      	bics	r3, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	466a      	mov	r2, sp
 8004d8c:	7013      	strb	r3, [r2, #0]
 8004d8e:	2301      	movs	r3, #1
 8004d90:	311c      	adds	r1, #28
 8004d92:	0028      	movs	r0, r5
 8004d94:	f7ff fd22 	bl	80047dc <lis3dh_reg_write>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d0eb      	beq.n	8004d74 <lis3dh_set_int_event_config+0x174>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, D4D_INT1, d4d_int);
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	466a      	mov	r2, sp
 8004da0:	2124      	movs	r1, #36	@ 0x24
 8004da2:	0028      	movs	r0, r5
 8004da4:	f7ff fcd2 	bl	800474c <lis3dh_reg_read>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d101      	bne.n	8004db0 <lis3dh_set_int_event_config+0x1b0>
 8004dac:	2000      	movs	r0, #0
 8004dae:	e79a      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004db0:	464b      	mov	r3, r9
 8004db2:	009a      	lsls	r2, r3, #2
 8004db4:	466b      	mov	r3, sp
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2104      	movs	r1, #4
 8004dba:	438b      	bics	r3, r1
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	466a      	mov	r2, sp
 8004dc0:	7013      	strb	r3, [r2, #0]
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	3120      	adds	r1, #32
 8004dc6:	0028      	movs	r0, r5
 8004dc8:	f7ff fd08 	bl	80047dc <lis3dh_reg_write>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d000      	beq.n	8004dd2 <lis3dh_set_int_event_config+0x1d2>
 8004dd0:	e789      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004dd2:	e7eb      	b.n	8004dac <lis3dh_set_int_event_config+0x1ac>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, LIR_INT2, config->latch);
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	466a      	mov	r2, sp
 8004dd8:	2124      	movs	r1, #36	@ 0x24
 8004dda:	0028      	movs	r0, r5
 8004ddc:	f7ff fcb6 	bl	800474c <lis3dh_reg_read>
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d101      	bne.n	8004de8 <lis3dh_set_int_event_config+0x1e8>
 8004de4:	2000      	movs	r0, #0
 8004de6:	e77e      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004de8:	7a23      	ldrb	r3, [r4, #8]
 8004dea:	2201      	movs	r2, #1
 8004dec:	401a      	ands	r2, r3
 8004dee:	0052      	lsls	r2, r2, #1
 8004df0:	466b      	mov	r3, sp
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	2102      	movs	r1, #2
 8004df6:	438b      	bics	r3, r1
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	466a      	mov	r2, sp
 8004dfc:	7013      	strb	r3, [r2, #0]
 8004dfe:	2301      	movs	r3, #1
 8004e00:	3122      	adds	r1, #34	@ 0x22
 8004e02:	0028      	movs	r0, r5
 8004e04:	f7ff fcea 	bl	80047dc <lis3dh_reg_write>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d0eb      	beq.n	8004de4 <lis3dh_set_int_event_config+0x1e4>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, D4D_INT2, d4d_int);
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	466a      	mov	r2, sp
 8004e10:	2124      	movs	r1, #36	@ 0x24
 8004e12:	0028      	movs	r0, r5
 8004e14:	f7ff fc9a 	bl	800474c <lis3dh_reg_read>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d101      	bne.n	8004e20 <lis3dh_set_int_event_config+0x220>
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e762      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004e20:	466b      	mov	r3, sp
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4393      	bics	r3, r2
 8004e28:	464a      	mov	r2, r9
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	466a      	mov	r2, sp
 8004e2e:	7013      	strb	r3, [r2, #0]
 8004e30:	2301      	movs	r3, #1
 8004e32:	2124      	movs	r1, #36	@ 0x24
 8004e34:	0028      	movs	r0, r5
 8004e36:	f7ff fcd1 	bl	80047dc <lis3dh_reg_write>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d000      	beq.n	8004e40 <lis3dh_set_int_event_config+0x240>
 8004e3e:	e752      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004e40:	e7ec      	b.n	8004e1c <lis3dh_set_int_event_config+0x21c>
    if (!dev || !config) return false;
 8004e42:	2000      	movs	r0, #0
 8004e44:	e74f      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e74d      	b.n	8004ce6 <lis3dh_set_int_event_config+0xe6>
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	08007684 	.word	0x08007684

08004e50 <lis3dh_config_hpf>:
{
 8004e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e52:	46ce      	mov	lr, r9
 8004e54:	4647      	mov	r7, r8
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	0004      	movs	r4, r0
 8004e5c:	0016      	movs	r6, r2
 8004e5e:	aa0a      	add	r2, sp, #40	@ 0x28
 8004e60:	7812      	ldrb	r2, [r2, #0]
 8004e62:	4691      	mov	r9, r2
 8004e64:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e66:	7817      	ldrb	r7, [r2, #0]
 8004e68:	aa0c      	add	r2, sp, #48	@ 0x30
 8004e6a:	7815      	ldrb	r5, [r2, #0]
    if (!dev) return false;
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d043      	beq.n	8004ef8 <lis3dh_config_hpf+0xa8>
    dev->error_code = LIS3DH_OK;
 8004e70:	2200      	movs	r2, #0
 8004e72:	6002      	str	r2, [r0, #0]
    reg.HPM  = mode;
 8004e74:	aa01      	add	r2, sp, #4
 8004e76:	0189      	lsls	r1, r1, #6
 8004e78:	468c      	mov	ip, r1
 8004e7a:	7811      	ldrb	r1, [r2, #0]
 8004e7c:	4688      	mov	r8, r1
 8004e7e:	213f      	movs	r1, #63	@ 0x3f
 8004e80:	4640      	mov	r0, r8
 8004e82:	4001      	ands	r1, r0
 8004e84:	4660      	mov	r0, ip
 8004e86:	4301      	orrs	r1, r0
 8004e88:	7011      	strb	r1, [r2, #0]
    reg.HPCF = cutoff;
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	400e      	ands	r6, r1
 8004e8e:	0136      	lsls	r6, r6, #4
 8004e90:	7811      	ldrb	r1, [r2, #0]
 8004e92:	2030      	movs	r0, #48	@ 0x30
 8004e94:	4381      	bics	r1, r0
 8004e96:	4331      	orrs	r1, r6
 8004e98:	7011      	strb	r1, [r2, #0]
    reg.FDS  = data;
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	400b      	ands	r3, r1
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	7816      	ldrb	r6, [r2, #0]
 8004ea2:	3828      	subs	r0, #40	@ 0x28
 8004ea4:	4386      	bics	r6, r0
 8004ea6:	4333      	orrs	r3, r6
 8004ea8:	7013      	strb	r3, [r2, #0]
    reg.HPCLICK = click;
 8004eaa:	4648      	mov	r0, r9
 8004eac:	4008      	ands	r0, r1
 8004eae:	0080      	lsls	r0, r0, #2
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2604      	movs	r6, #4
 8004eb4:	43b3      	bics	r3, r6
 8004eb6:	4303      	orrs	r3, r0
 8004eb8:	7013      	strb	r3, [r2, #0]
    reg.HPIS1   = int1;
 8004eba:	400f      	ands	r7, r1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	4383      	bics	r3, r0
 8004ec2:	433b      	orrs	r3, r7
 8004ec4:	7013      	strb	r3, [r2, #0]
    reg.HPIS2   = int2;
 8004ec6:	4029      	ands	r1, r5
 8004ec8:	0049      	lsls	r1, r1, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	3001      	adds	r0, #1
 8004ece:	4383      	bics	r3, r0
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	7013      	strb	r3, [r2, #0]
    if (!lis3dh_reg_write (dev, LIS3DH_REG_CTRL2, (uint8_t*)&reg, 1))
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	2121      	movs	r1, #33	@ 0x21
 8004ed8:	0020      	movs	r0, r4
 8004eda:	f7ff fc7f 	bl	80047dc <lis3dh_reg_write>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d004      	beq.n	8004eec <lis3dh_config_hpf+0x9c>
}
 8004ee2:	b003      	add	sp, #12
 8004ee4:	bcc0      	pop	{r6, r7}
 8004ee6:	46b9      	mov	r9, r7
 8004ee8:	46b0      	mov	r8, r6
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dev->error_code |= LIS3DH_CONFIG_HPF_FAILED;
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	2390      	movs	r3, #144	@ 0x90
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	6023      	str	r3, [r4, #0]
        return false;
 8004ef6:	e7f4      	b.n	8004ee2 <lis3dh_config_hpf+0x92>
    if (!dev) return false;
 8004ef8:	2000      	movs	r0, #0
 8004efa:	e7f2      	b.n	8004ee2 <lis3dh_config_hpf+0x92>

08004efc <lis3dh_powerdown>:

void lis3dh_powerdown()
{
 8004efc:	b500      	push	{lr}
 8004efe:	b083      	sub	sp, #12
	if (sensor == NULL ) {
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <lis3dh_powerdown+0x34>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <lis3dh_powerdown+0x22>
		sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
	}

    lis3dh_set_mode (sensor, lis3dh_power_down, lis3dh_low_power, false, false, false);
 8004f08:	4b09      	ldr	r3, [pc, #36]	@ (8004f30 <lis3dh_powerdown+0x34>)
 8004f0a:	6818      	ldr	r0, [r3, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	f7ff fd27 	bl	8004968 <lis3dh_set_mode>
//    lis3dh_power_OFF();
}
 8004f1a:	b003      	add	sp, #12
 8004f1c:	bd00      	pop	{pc}
		sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2132      	movs	r1, #50	@ 0x32
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7ff fcac 	bl	8004880 <lis3dh_init_sensor>
 8004f28:	4b01      	ldr	r3, [pc, #4]	@ (8004f30 <lis3dh_powerdown+0x34>)
 8004f2a:	6018      	str	r0, [r3, #0]
 8004f2c:	e7ec      	b.n	8004f08 <lis3dh_powerdown+0xc>
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	20000598 	.word	0x20000598

08004f34 <lis3dh_get_device>:
 */


lis3dh_sensor_t* lis3dh_get_device()
{
		return sensor;
 8004f34:	4b01      	ldr	r3, [pc, #4]	@ (8004f3c <lis3dh_get_device+0x8>)
 8004f36:	6818      	ldr	r0, [r3, #0]
}
 8004f38:	4770      	bx	lr
 8004f3a:	46c0      	nop			@ (mov r8, r8)
 8004f3c:	20000598 	.word	0x20000598

08004f40 <chan_to_deca>:

/* Channel */
// Only channels 2 and 5 are supported
int chan_to_deca(int i)
{
    switch (i)
 8004f40:	2802      	cmp	r0, #2
 8004f42:	d003      	beq.n	8004f4c <chan_to_deca+0xc>
 8004f44:	2805      	cmp	r0, #5
 8004f46:	d001      	beq.n	8004f4c <chan_to_deca+0xc>
    case 2 :
        return 2;
    case 5 :
        return 5;
    default :
        return -1;
 8004f48:	2001      	movs	r0, #1
 8004f4a:	4240      	negs	r0, r0
    }
}
 8004f4c:	4770      	bx	lr

08004f4e <deca_to_chan>:

int deca_to_chan(int i)
{
 8004f4e:	b510      	push	{r4, lr}
    return(chan_to_deca(i));
 8004f50:	f7ff fff6 	bl	8004f40 <chan_to_deca>
}
 8004f54:	bd10      	pop	{r4, pc}
	...

08004f58 <bitrate_to_deca>:


/* Bitrate */
int bitrate_to_deca(int i)
{
    switch (i)
 8004f58:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <bitrate_to_deca+0x24>)
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	d006      	beq.n	8004f6c <bitrate_to_deca+0x14>
 8004f5e:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <bitrate_to_deca+0x28>)
 8004f60:	4298      	cmp	r0, r3
 8004f62:	d005      	beq.n	8004f70 <bitrate_to_deca+0x18>
 8004f64:	286e      	cmp	r0, #110	@ 0x6e
 8004f66:	d105      	bne.n	8004f74 <bitrate_to_deca+0x1c>
 8004f68:	2000      	movs	r0, #0
 8004f6a:	e002      	b.n	8004f72 <bitrate_to_deca+0x1a>
    {
    case 110 :
        return DWT_BR_110K;
    case 850 :
        return DWT_BR_850K;
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	e000      	b.n	8004f72 <bitrate_to_deca+0x1a>
    case 6810 :
        return DWT_BR_6M8;
 8004f70:	2002      	movs	r0, #2
    default :
        return -1;
    }
}
 8004f72:	4770      	bx	lr
        return -1;
 8004f74:	2001      	movs	r0, #1
 8004f76:	4240      	negs	r0, r0
 8004f78:	e7fb      	b.n	8004f72 <bitrate_to_deca+0x1a>
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	00000352 	.word	0x00000352
 8004f80:	00001a9a 	.word	0x00001a9a

08004f84 <deca_to_bitrate>:

int deca_to_bitrate(int i)
{
    switch (i)
 8004f84:	2801      	cmp	r0, #1
 8004f86:	d005      	beq.n	8004f94 <deca_to_bitrate+0x10>
 8004f88:	2802      	cmp	r0, #2
 8004f8a:	d005      	beq.n	8004f98 <deca_to_bitrate+0x14>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d105      	bne.n	8004f9c <deca_to_bitrate+0x18>
 8004f90:	306e      	adds	r0, #110	@ 0x6e
 8004f92:	e002      	b.n	8004f9a <deca_to_bitrate+0x16>
    {
    case DWT_BR_110K :
        return 110;
    case DWT_BR_850K :
        return 850;
 8004f94:	4803      	ldr	r0, [pc, #12]	@ (8004fa4 <deca_to_bitrate+0x20>)
 8004f96:	e000      	b.n	8004f9a <deca_to_bitrate+0x16>
    case DWT_BR_6M8 :
        return 6810;
 8004f98:	4803      	ldr	r0, [pc, #12]	@ (8004fa8 <deca_to_bitrate+0x24>)
    default :
        return -1;
    }
}
 8004f9a:	4770      	bx	lr
        return -1;
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	4240      	negs	r0, r0
 8004fa0:	e7fb      	b.n	8004f9a <deca_to_bitrate+0x16>
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	00000352 	.word	0x00000352
 8004fa8:	00001a9a 	.word	0x00001a9a

08004fac <prf_to_deca>:


/* PRF */
int prf_to_deca(int i)
{
    switch (i)
 8004fac:	2810      	cmp	r0, #16
 8004fae:	d003      	beq.n	8004fb8 <prf_to_deca+0xc>
 8004fb0:	2840      	cmp	r0, #64	@ 0x40
 8004fb2:	d103      	bne.n	8004fbc <prf_to_deca+0x10>
    {
    case 16 :
        return DWT_PRF_16M;
    case 64 :
        return DWT_PRF_64M;
 8004fb4:	383e      	subs	r0, #62	@ 0x3e
 8004fb6:	e000      	b.n	8004fba <prf_to_deca+0xe>
    switch (i)
 8004fb8:	2001      	movs	r0, #1
    default :
        return -1;
    }
}
 8004fba:	4770      	bx	lr
        return -1;
 8004fbc:	2001      	movs	r0, #1
 8004fbe:	4240      	negs	r0, r0
 8004fc0:	e7fb      	b.n	8004fba <prf_to_deca+0xe>

08004fc2 <deca_to_prf>:


int deca_to_prf(int i)
{
    switch (i)
 8004fc2:	2801      	cmp	r0, #1
 8004fc4:	d003      	beq.n	8004fce <deca_to_prf+0xc>
 8004fc6:	2802      	cmp	r0, #2
 8004fc8:	d103      	bne.n	8004fd2 <deca_to_prf+0x10>
    {
    case  DWT_PRF_16M:
        return 16;
    case  DWT_PRF_64M:
        return 64;
 8004fca:	303e      	adds	r0, #62	@ 0x3e
 8004fcc:	e000      	b.n	8004fd0 <deca_to_prf+0xe>
    switch (i)
 8004fce:	2010      	movs	r0, #16
    default :
        return -1;
    }
}
 8004fd0:	4770      	bx	lr
        return -1;
 8004fd2:	2001      	movs	r0, #1
 8004fd4:	4240      	negs	r0, r0
 8004fd6:	e7fb      	b.n	8004fd0 <deca_to_prf+0xe>

08004fd8 <pac_to_deca>:


/* PAC */
int pac_to_deca(int i)
{
    switch (i)
 8004fd8:	2820      	cmp	r0, #32
 8004fda:	d00a      	beq.n	8004ff2 <pac_to_deca+0x1a>
 8004fdc:	dc05      	bgt.n	8004fea <pac_to_deca+0x12>
 8004fde:	2808      	cmp	r0, #8
 8004fe0:	d009      	beq.n	8004ff6 <pac_to_deca+0x1e>
 8004fe2:	2810      	cmp	r0, #16
 8004fe4:	d109      	bne.n	8004ffa <pac_to_deca+0x22>
    {
    case 8 :
        return DWT_PAC8;
    case 16 :
        return DWT_PAC16;
 8004fe6:	380f      	subs	r0, #15
 8004fe8:	e004      	b.n	8004ff4 <pac_to_deca+0x1c>
    switch (i)
 8004fea:	2840      	cmp	r0, #64	@ 0x40
 8004fec:	d108      	bne.n	8005000 <pac_to_deca+0x28>
    case 32 :
        return DWT_PAC32;
    case 64 :
        return DWT_PAC64;
 8004fee:	383d      	subs	r0, #61	@ 0x3d
 8004ff0:	e000      	b.n	8004ff4 <pac_to_deca+0x1c>
        return DWT_PAC32;
 8004ff2:	2002      	movs	r0, #2
    default :
        return -1;
    }
}
 8004ff4:	4770      	bx	lr
    switch (i)
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	e7fc      	b.n	8004ff4 <pac_to_deca+0x1c>
        return -1;
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	4240      	negs	r0, r0
 8004ffe:	e7f9      	b.n	8004ff4 <pac_to_deca+0x1c>
 8005000:	2001      	movs	r0, #1
 8005002:	4240      	negs	r0, r0
 8005004:	e7f6      	b.n	8004ff4 <pac_to_deca+0x1c>

08005006 <deca_to_pac>:

int deca_to_pac(int i)
{
    switch (i)
 8005006:	2802      	cmp	r0, #2
 8005008:	d00a      	beq.n	8005020 <deca_to_pac+0x1a>
 800500a:	dc05      	bgt.n	8005018 <deca_to_pac+0x12>
 800500c:	2800      	cmp	r0, #0
 800500e:	d009      	beq.n	8005024 <deca_to_pac+0x1e>
 8005010:	2801      	cmp	r0, #1
 8005012:	d109      	bne.n	8005028 <deca_to_pac+0x22>
    {
    case DWT_PAC8 :
        return 8;
    case DWT_PAC16 :
        return 16;
 8005014:	300f      	adds	r0, #15
 8005016:	e004      	b.n	8005022 <deca_to_pac+0x1c>
    switch (i)
 8005018:	2803      	cmp	r0, #3
 800501a:	d108      	bne.n	800502e <deca_to_pac+0x28>
    case DWT_PAC32 :
        return 32;
    case DWT_PAC64 :
        return 64;
 800501c:	303d      	adds	r0, #61	@ 0x3d
 800501e:	e000      	b.n	8005022 <deca_to_pac+0x1c>
        return 32;
 8005020:	2020      	movs	r0, #32
    default :
        return -1;
    }
}
 8005022:	4770      	bx	lr
    switch (i)
 8005024:	2008      	movs	r0, #8
 8005026:	e7fc      	b.n	8005022 <deca_to_pac+0x1c>
        return -1;
 8005028:	2001      	movs	r0, #1
 800502a:	4240      	negs	r0, r0
 800502c:	e7f9      	b.n	8005022 <deca_to_pac+0x1c>
 800502e:	2001      	movs	r0, #1
 8005030:	4240      	negs	r0, r0
 8005032:	e7f6      	b.n	8005022 <deca_to_pac+0x1c>

08005034 <plen_to_deca>:


/* PLEN */
int plen_to_deca(int i)
{
    switch (i)
 8005034:	2380      	movs	r3, #128	@ 0x80
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4298      	cmp	r0, r3
 800503a:	d018      	beq.n	800506e <plen_to_deca+0x3a>
 800503c:	dc09      	bgt.n	8005052 <plen_to_deca+0x1e>
 800503e:	2880      	cmp	r0, #128	@ 0x80
 8005040:	d017      	beq.n	8005072 <plen_to_deca+0x3e>
 8005042:	3b01      	subs	r3, #1
 8005044:	3bff      	subs	r3, #255	@ 0xff
 8005046:	4298      	cmp	r0, r3
 8005048:	d015      	beq.n	8005076 <plen_to_deca+0x42>
 800504a:	2840      	cmp	r0, #64	@ 0x40
 800504c:	d115      	bne.n	800507a <plen_to_deca+0x46>
    case 256 :
        return DWT_PLEN_256;
    case 128 :
        return DWT_PLEN_128;
    case 64 :
        return DWT_PLEN_64;
 800504e:	383c      	subs	r0, #60	@ 0x3c
    default :
        return -1;
    }
}
 8005050:	4770      	bx	lr
    switch (i)
 8005052:	23c0      	movs	r3, #192	@ 0xc0
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4298      	cmp	r0, r3
 8005058:	d012      	beq.n	8005080 <plen_to_deca+0x4c>
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	4298      	cmp	r0, r3
 8005060:	d010      	beq.n	8005084 <plen_to_deca+0x50>
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	00db      	lsls	r3, r3, #3
 8005066:	4298      	cmp	r0, r3
 8005068:	d10e      	bne.n	8005088 <plen_to_deca+0x54>
        return DWT_PLEN_1024;
 800506a:	2008      	movs	r0, #8
 800506c:	e7f0      	b.n	8005050 <plen_to_deca+0x1c>
        return DWT_PLEN_512;
 800506e:	2034      	movs	r0, #52	@ 0x34
 8005070:	e7ee      	b.n	8005050 <plen_to_deca+0x1c>
        return DWT_PLEN_128;
 8005072:	2014      	movs	r0, #20
 8005074:	e7ec      	b.n	8005050 <plen_to_deca+0x1c>
        return DWT_PLEN_256;
 8005076:	2024      	movs	r0, #36	@ 0x24
 8005078:	e7ea      	b.n	8005050 <plen_to_deca+0x1c>
        return -1;
 800507a:	2001      	movs	r0, #1
 800507c:	4240      	negs	r0, r0
 800507e:	e7e7      	b.n	8005050 <plen_to_deca+0x1c>
        return DWT_PLEN_1536;
 8005080:	2018      	movs	r0, #24
 8005082:	e7e5      	b.n	8005050 <plen_to_deca+0x1c>
    switch (i)
 8005084:	2028      	movs	r0, #40	@ 0x28
 8005086:	e7e3      	b.n	8005050 <plen_to_deca+0x1c>
        return -1;
 8005088:	2001      	movs	r0, #1
 800508a:	4240      	negs	r0, r0
 800508c:	e7e0      	b.n	8005050 <plen_to_deca+0x1c>
	...

08005090 <deca_to_plen>:

int deca_to_plen(int i)
{
    switch (i)
 8005090:	3804      	subs	r0, #4
 8005092:	2830      	cmp	r0, #48	@ 0x30
 8005094:	d813      	bhi.n	80050be <deca_to_plen+0x2e>
 8005096:	0080      	lsls	r0, r0, #2
 8005098:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <deca_to_plen+0x3c>)
 800509a:	581b      	ldr	r3, [r3, r0]
 800509c:	469f      	mov	pc, r3
 800509e:	2080      	movs	r0, #128	@ 0x80
 80050a0:	0100      	lsls	r0, r0, #4
 80050a2:	e001      	b.n	80050a8 <deca_to_plen+0x18>
    case DWT_PLEN_2048 :
        return 2048;
    case DWT_PLEN_1536 :
        return 1536;
    case DWT_PLEN_1024 :
        return 1024;
 80050a4:	2080      	movs	r0, #128	@ 0x80
 80050a6:	00c0      	lsls	r0, r0, #3
    case DWT_PLEN_64 :
        return 64;
    default :
        return -1;
    }
}
 80050a8:	4770      	bx	lr
        return 512;
 80050aa:	2080      	movs	r0, #128	@ 0x80
 80050ac:	0080      	lsls	r0, r0, #2
 80050ae:	e7fb      	b.n	80050a8 <deca_to_plen+0x18>
        return 256;
 80050b0:	2080      	movs	r0, #128	@ 0x80
 80050b2:	0040      	lsls	r0, r0, #1
 80050b4:	e7f8      	b.n	80050a8 <deca_to_plen+0x18>
        return 128;
 80050b6:	2080      	movs	r0, #128	@ 0x80
 80050b8:	e7f6      	b.n	80050a8 <deca_to_plen+0x18>
        return 64;
 80050ba:	2040      	movs	r0, #64	@ 0x40
 80050bc:	e7f4      	b.n	80050a8 <deca_to_plen+0x18>
        return -1;
 80050be:	2001      	movs	r0, #1
 80050c0:	4240      	negs	r0, r0
 80050c2:	e7f1      	b.n	80050a8 <deca_to_plen+0x18>
        return 1536;
 80050c4:	20c0      	movs	r0, #192	@ 0xc0
 80050c6:	00c0      	lsls	r0, r0, #3
 80050c8:	e7ee      	b.n	80050a8 <deca_to_plen+0x18>
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	0800769c 	.word	0x0800769c

080050d0 <tvc_otp_read_txcfgref>:
 * @param[in] ref_values_t pointer to the reference structure
 * @param[out] ref values
 * @return  1 if CH2/CH5, 0 for other channels
 */
uint8_t tvc_otp_read_txcfgref(ref_values_t* ref, uint8 chan)
{
 80050d0:	b530      	push	{r4, r5, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	0005      	movs	r5, r0
 80050d6:	000c      	movs	r4, r1
  /* OTP reading: transmission parameters */
  uint32 val[5];
  uint8 txp_address ;

  switch (chan)
 80050d8:	2902      	cmp	r1, #2
 80050da:	d003      	beq.n	80050e4 <tvc_otp_read_txcfgref+0x14>
 80050dc:	2905      	cmp	r1, #5
 80050de:	d005      	beq.n	80050ec <tvc_otp_read_txcfgref+0x1c>
 80050e0:	2000      	movs	r0, #0
 80050e2:	e056      	b.n	8005192 <tvc_otp_read_txcfgref+0xc2>

  default:
      return 0;
  }

  if(chan == 5 || chan == 2)
 80050e4:	2902      	cmp	r1, #2
 80050e6:	d156      	bne.n	8005196 <tvc_otp_read_txcfgref+0xc6>
      txp_address = OTP_TXPWR_CH2_PRF64_ADDRESS;
 80050e8:	2013      	movs	r0, #19
 80050ea:	e000      	b.n	80050ee <tvc_otp_read_txcfgref+0x1e>
  switch (chan)
 80050ec:	2019      	movs	r0, #25
  {
      /* OTP reading: from reference registers, should be calibrated during production test */
      dwt_otpread(txp_address, val, 1);
 80050ee:	2201      	movs	r2, #1
 80050f0:	a901      	add	r1, sp, #4
 80050f2:	f7fe fd4f 	bl	8003b94 <dwt_otpread>
      dwt_otpread(OTP_PGCNT_ADDRESS, val+1, 1);
 80050f6:	2201      	movs	r2, #1
 80050f8:	a902      	add	r1, sp, #8
 80050fa:	201b      	movs	r0, #27
 80050fc:	f7fe fd4a 	bl	8003b94 <dwt_otpread>
      dwt_otpread(OTP_XTRIM_ADDRESS, val+2, 1);
 8005100:	2201      	movs	r2, #1
 8005102:	a903      	add	r1, sp, #12
 8005104:	201e      	movs	r0, #30
 8005106:	f7fe fd45 	bl	8003b94 <dwt_otpread>
      dwt_otpread(OTP_TEMP_VBAT_ADDRESS, val+3, 1);
 800510a:	2201      	movs	r2, #1
 800510c:	a904      	add	r1, sp, #16
 800510e:	201d      	movs	r0, #29
 8005110:	f7fe fd40 	bl	8003b94 <dwt_otpread>
      dwt_otpread(OTP_ANT_DLY, val+4, 1);
 8005114:	2201      	movs	r2, #1
 8005116:	a905      	add	r1, sp, #20
 8005118:	201c      	movs	r0, #28
 800511a:	f7fe fd3b 	bl	8003b94 <dwt_otpread>

      if (OTP_VALID(val[0]) && OTP_VALID(val[1]) && OTP_VALID(val[2]) && OTP_VALID(val[3]) && OTP_VALID(val[4]) ) {
 800511e:	9a01      	ldr	r2, [sp, #4]
 8005120:	1e53      	subs	r3, r2, #1
 8005122:	3303      	adds	r3, #3
 8005124:	d827      	bhi.n	8005176 <tvc_otp_read_txcfgref+0xa6>
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	3b01      	subs	r3, #1
 800512a:	3303      	adds	r3, #3
 800512c:	d823      	bhi.n	8005176 <tvc_otp_read_txcfgref+0xa6>
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	3b01      	subs	r3, #1
 8005132:	3303      	adds	r3, #3
 8005134:	d81f      	bhi.n	8005176 <tvc_otp_read_txcfgref+0xa6>
 8005136:	9b04      	ldr	r3, [sp, #16]
 8005138:	3b01      	subs	r3, #1
 800513a:	3303      	adds	r3, #3
 800513c:	d81b      	bhi.n	8005176 <tvc_otp_read_txcfgref+0xa6>
 800513e:	9b05      	ldr	r3, [sp, #20]
 8005140:	3b01      	subs	r3, #1
 8005142:	3303      	adds	r3, #3
 8005144:	d817      	bhi.n	8005176 <tvc_otp_read_txcfgref+0xa6>
          ref->power = val[0];
 8005146:	606a      	str	r2, [r5, #4]

          if (chan == 5)
 8005148:	2c05      	cmp	r4, #5
 800514a:	d00c      	beq.n	8005166 <tvc_otp_read_txcfgref+0x96>
              ref->pgdly = (val[2] >> 16) & 0xff;
              ref->antdly = (val[4]) & 0xffff;
          }
          else
          {
              ref->pgcnt = (val[1] >> 16) & 0xffff;
 800514c:	ab01      	add	r3, sp, #4
 800514e:	88da      	ldrh	r2, [r3, #6]
 8005150:	816a      	strh	r2, [r5, #10]
              ref->pgdly = (val[2] >> 24) & 0xff;
 8005152:	7ada      	ldrb	r2, [r3, #11]
 8005154:	702a      	strb	r2, [r5, #0]
              ref->antdly = (val[4] >> 16) & 0xffff;
 8005156:	8a5b      	ldrh	r3, [r3, #18]
 8005158:	81eb      	strh	r3, [r5, #14]
          }
          ref->temp  = val[3] & 0xff;
 800515a:	9b04      	ldr	r3, [sp, #16]
 800515c:	722b      	strb	r3, [r5, #8]
          ref->vbat  = (val[3] >> 8) & 0xff;
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	732b      	strb	r3, [r5, #12]
  else
  {
      // Error channel must be either 2 or 5 with DWM1001 TDoA Tag project
	  return 0;
  }
  return 1;
 8005162:	2001      	movs	r0, #1
          ref->vbat  = (val[3] >> 8) & 0xff;
 8005164:	e015      	b.n	8005192 <tvc_otp_read_txcfgref+0xc2>
              ref->pgcnt = (val[1]) & 0xffff;
 8005166:	ab01      	add	r3, sp, #4
 8005168:	9a02      	ldr	r2, [sp, #8]
 800516a:	816a      	strh	r2, [r5, #10]
              ref->pgdly = (val[2] >> 16) & 0xff;
 800516c:	895a      	ldrh	r2, [r3, #10]
 800516e:	702a      	strb	r2, [r5, #0]
              ref->antdly = (val[4]) & 0xffff;
 8005170:	9b05      	ldr	r3, [sp, #20]
 8005172:	81eb      	strh	r3, [r5, #14]
 8005174:	e7f1      	b.n	800515a <tvc_otp_read_txcfgref+0x8a>
          ref->power = ref_goldenval[chan].power;
 8005176:	4a09      	ldr	r2, [pc, #36]	@ (800519c <tvc_otp_read_txcfgref+0xcc>)
 8005178:	0124      	lsls	r4, r4, #4
 800517a:	1913      	adds	r3, r2, r4
 800517c:	6859      	ldr	r1, [r3, #4]
 800517e:	6069      	str	r1, [r5, #4]
          ref->pgcnt = ref_goldenval[chan].pgcnt;
 8005180:	8959      	ldrh	r1, [r3, #10]
 8005182:	8169      	strh	r1, [r5, #10]
          ref->temp  = ref_goldenval[chan].temp;
 8005184:	7a19      	ldrb	r1, [r3, #8]
 8005186:	7229      	strb	r1, [r5, #8]
          ref->pgdly = ref_goldenval[chan].pgdly;    
 8005188:	5ca2      	ldrb	r2, [r4, r2]
 800518a:	702a      	strb	r2, [r5, #0]
          ref->vbat  = ref_goldenval[chan].vbat;
 800518c:	7b1b      	ldrb	r3, [r3, #12]
 800518e:	732b      	strb	r3, [r5, #12]
  return 1;
 8005190:	2001      	movs	r0, #1
}
 8005192:	b007      	add	sp, #28
 8005194:	bd30      	pop	{r4, r5, pc}
	  return 0;
 8005196:	2000      	movs	r0, #0
 8005198:	e7fb      	b.n	8005192 <tvc_otp_read_txcfgref+0xc2>
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	08007760 	.word	0x08007760

080051a0 <tvc_calcpowertempadj>:
int8 tvc_calcpowertempadj(uint8 channel, int delta_temp)
{
    int8 delta_power;
    int negative = 0;

    if(delta_temp < 0)
 80051a0:	2900      	cmp	r1, #0
 80051a2:	db08      	blt.n	80051b6 <tvc_calcpowertempadj+0x16>
    int negative = 0;
 80051a4:	2300      	movs	r3, #0
        negative = 1;
        delta_temp = -delta_temp; //make (-)ve into (+)ve number
    }

    // Calculate the expected power differential at the current temperature
    if(channel == 5)
 80051a6:	2805      	cmp	r0, #5
 80051a8:	d008      	beq.n	80051bc <tvc_calcpowertempadj+0x1c>
    {
        delta_power = ((((delta_temp * SAR_TEMP_TO_CELCIUS_CONV_INT) / 65536) * TEMP_COMP_FACTOR_CH5) >> 12) ; //>>12 is same as /4096
    }
    else if(channel == 2)
 80051aa:	2802      	cmp	r0, #2
 80051ac:	d014      	beq.n	80051d8 <tvc_calcpowertempadj+0x38>
    {
        delta_power = ((((delta_temp * SAR_TEMP_TO_CELCIUS_CONV_INT) / 65536) * TEMP_COMP_FACTOR_CH2) >> 12) ; //>>12 is same as /4096
    }
    else
    {
        delta_power = 0;
 80051ae:	2000      	movs	r0, #0
    }

    if(negative == 1)
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d021      	beq.n	80051f8 <tvc_calcpowertempadj+0x58>
    {
        delta_power = -delta_power; //restore the sign
    }
    return delta_power;
}
 80051b4:	4770      	bx	lr
        delta_temp = -delta_temp; //make (-)ve into (+)ve number
 80051b6:	4249      	negs	r1, r1
        negative = 1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7f4      	b.n	80051a6 <tvc_calcpowertempadj+0x6>
        delta_power = ((((delta_temp * SAR_TEMP_TO_CELCIUS_CONV_INT) / 65536) * TEMP_COMP_FACTOR_CH5) >> 12) ; //>>12 is same as /4096
 80051bc:	4a10      	ldr	r2, [pc, #64]	@ (8005200 <tvc_calcpowertempadj+0x60>)
 80051be:	4351      	muls	r1, r2
 80051c0:	17ca      	asrs	r2, r1, #31
 80051c2:	0412      	lsls	r2, r2, #16
 80051c4:	0c12      	lsrs	r2, r2, #16
 80051c6:	1852      	adds	r2, r2, r1
 80051c8:	1412      	asrs	r2, r2, #16
 80051ca:	0090      	lsls	r0, r2, #2
 80051cc:	1880      	adds	r0, r0, r2
 80051ce:	01c0      	lsls	r0, r0, #7
 80051d0:	1a80      	subs	r0, r0, r2
 80051d2:	1300      	asrs	r0, r0, #12
 80051d4:	b240      	sxtb	r0, r0
 80051d6:	e7eb      	b.n	80051b0 <tvc_calcpowertempadj+0x10>
        delta_power = ((((delta_temp * SAR_TEMP_TO_CELCIUS_CONV_INT) / 65536) * TEMP_COMP_FACTOR_CH2) >> 12) ; //>>12 is same as /4096
 80051d8:	4a09      	ldr	r2, [pc, #36]	@ (8005200 <tvc_calcpowertempadj+0x60>)
 80051da:	4351      	muls	r1, r2
 80051dc:	17ca      	asrs	r2, r1, #31
 80051de:	0412      	lsls	r2, r2, #16
 80051e0:	0c12      	lsrs	r2, r2, #16
 80051e2:	1852      	adds	r2, r2, r1
 80051e4:	1412      	asrs	r2, r2, #16
 80051e6:	0090      	lsls	r0, r2, #2
 80051e8:	1880      	adds	r0, r0, r2
 80051ea:	00c0      	lsls	r0, r0, #3
 80051ec:	1880      	adds	r0, r0, r2
 80051ee:	00c0      	lsls	r0, r0, #3
 80051f0:	1a80      	subs	r0, r0, r2
 80051f2:	1300      	asrs	r0, r0, #12
 80051f4:	b240      	sxtb	r0, r0
 80051f6:	e7db      	b.n	80051b0 <tvc_calcpowertempadj+0x10>
        delta_power = -delta_power; //restore the sign
 80051f8:	4240      	negs	r0, r0
 80051fa:	b240      	sxtb	r0, r0
 80051fc:	e7da      	b.n	80051b4 <tvc_calcpowertempadj+0x14>
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	000123d7 	.word	0x000123d7

08005204 <tvc_calcpowervbatadj>:
     /* 2^12 = 4096
      * 2^17 = 131072
      * 2^19 = 524288
      * 2^23 = 8388608     */

     if(channel == 5)
 8005204:	2805      	cmp	r0, #5
 8005206:	d003      	beq.n	8005210 <tvc_calcpowervbatadj+0xc>
     {
         delta_power = ((((delta_voltage * VBAT_COMP_FACTOR_INT_CH5 ) / 4096) * SAR_VBAT_TO_VOLT_CONV_INT) / 8388608);
     }
     else if(channel == 2)
 8005208:	2802      	cmp	r0, #2
 800520a:	d01b      	beq.n	8005244 <tvc_calcpowervbatadj+0x40>
     {
         delta_power = ((((delta_voltage * VBAT_COMP_FACTOR_INT_CH2 ) / 524288) * SAR_VBAT_TO_VOLT_CONV_INT) / 8388608);
     }
     else
     {
         delta_power = 0;
 800520c:	2000      	movs	r0, #0
     }

     return delta_power;
}
 800520e:	4770      	bx	lr
         delta_power = ((((delta_voltage * VBAT_COMP_FACTOR_INT_CH5 ) / 4096) * SAR_VBAT_TO_VOLT_CONV_INT) / 8388608);
 8005210:	044b      	lsls	r3, r1, #17
 8005212:	1a5b      	subs	r3, r3, r1
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	185b      	adds	r3, r3, r1
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	185b      	adds	r3, r3, r1
 800521c:	015b      	lsls	r3, r3, #5
 800521e:	1a5b      	subs	r3, r3, r1
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	1a5b      	subs	r3, r3, r1
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	1a59      	subs	r1, r3, r1
 8005228:	17cb      	asrs	r3, r1, #31
 800522a:	051b      	lsls	r3, r3, #20
 800522c:	0d1b      	lsrs	r3, r3, #20
 800522e:	185b      	adds	r3, r3, r1
 8005230:	131b      	asrs	r3, r3, #12
 8005232:	4a12      	ldr	r2, [pc, #72]	@ (800527c <tvc_calcpowervbatadj+0x78>)
 8005234:	4353      	muls	r3, r2
 8005236:	17d8      	asrs	r0, r3, #31
 8005238:	0240      	lsls	r0, r0, #9
 800523a:	0a40      	lsrs	r0, r0, #9
 800523c:	18c0      	adds	r0, r0, r3
 800523e:	15c0      	asrs	r0, r0, #23
 8005240:	b240      	sxtb	r0, r0
 8005242:	e7e4      	b.n	800520e <tvc_calcpowervbatadj+0xa>
         delta_power = ((((delta_voltage * VBAT_COMP_FACTOR_INT_CH2 ) / 524288) * SAR_VBAT_TO_VOLT_CONV_INT) / 8388608);
 8005244:	00ca      	lsls	r2, r1, #3
 8005246:	1852      	adds	r2, r2, r1
 8005248:	0113      	lsls	r3, r2, #4
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	019a      	lsls	r2, r3, #6
 8005252:	189b      	adds	r3, r3, r2
 8005254:	021a      	lsls	r2, r3, #8
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	1a5b      	subs	r3, r3, r1
 800525c:	011a      	lsls	r2, r3, #4
 800525e:	1ad2      	subs	r2, r2, r3
 8005260:	0052      	lsls	r2, r2, #1
 8005262:	17d3      	asrs	r3, r2, #31
 8005264:	035b      	lsls	r3, r3, #13
 8005266:	0b5b      	lsrs	r3, r3, #13
 8005268:	189b      	adds	r3, r3, r2
 800526a:	14db      	asrs	r3, r3, #19
 800526c:	4a03      	ldr	r2, [pc, #12]	@ (800527c <tvc_calcpowervbatadj+0x78>)
 800526e:	4353      	muls	r3, r2
 8005270:	17d8      	asrs	r0, r3, #31
 8005272:	0240      	lsls	r0, r0, #9
 8005274:	0a40      	lsrs	r0, r0, #9
 8005276:	18c0      	adds	r0, r0, r3
 8005278:	15c0      	asrs	r0, r0, #23
 800527a:	e7c8      	b.n	800520e <tvc_calcpowervbatadj+0xa>
 800527c:	0000bd69 	.word	0x0000bd69

08005280 <tvc_computetxpowersetting_lut>:
  * output parameters:
  *
  * returns: (uint32) The setting to be programmed into the TX_POWER register
  */
 uint32 tvc_computetxpowersetting_lut(uint32 ref_powerreg, int32 power_adj)
 {
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	46de      	mov	lr, fp
 8005284:	4657      	mov	r7, sl
 8005286:	464e      	mov	r6, r9
 8005288:	4645      	mov	r5, r8
 800528a:	b5e0      	push	{r5, r6, r7, lr}
 800528c:	4683      	mov	fp, r0
 800528e:	4688      	mov	r8, r1
    uint8 current_mixer_gain = 0 ;
    uint32 new_regval = 0;
    int32 new_gain = 0 ;
    int i;

    for(i = 0; i < 4; i++)
 8005290:	2500      	movs	r5, #0
    uint32 new_regval = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	469a      	mov	sl, r3
    for(i = 0; i < 4; i++)
 8005296:	e008      	b.n	80052aa <tvc_computetxpowersetting_lut+0x2a>

     // assuming da_attn will never be 111 (no output)
     current_da_attn = 0b110 - current_da_attn;
     new_gain = current_da_attn * MIX_DA_FACTOR + current_mixer_gain + power_adj ;
     if ( new_gain < 0 ) {
         new_gain = 0;
 8005298:	2000      	movs	r0, #0
     }
     if ( new_gain >= (int32) (sizeof(tx_gain_lookup) / (int32) sizeof(tx_gain_lookup[0])) ) {
         new_gain = sizeof(tx_gain_lookup) / sizeof(tx_gain_lookup[0]) - 1;
     }

     new_regval |= (uint32) (tx_gain_lookup[ new_gain ] ) << (i * 8) ;
 800529a:	4b1e      	ldr	r3, [pc, #120]	@ (8005314 <tvc_computetxpowersetting_lut+0x94>)
 800529c:	5c1b      	ldrb	r3, [r3, r0]
 800529e:	464a      	mov	r2, r9
 80052a0:	4093      	lsls	r3, r2
 80052a2:	4652      	mov	r2, sl
 80052a4:	431a      	orrs	r2, r3
 80052a6:	4692      	mov	sl, r2
    for(i = 0; i < 4; i++)
 80052a8:	3501      	adds	r5, #1
 80052aa:	2d03      	cmp	r5, #3
 80052ac:	dc2b      	bgt.n	8005306 <tvc_computetxpowersetting_lut+0x86>
     current_da_attn = ((ref_powerreg >> (i*8)) & 0xE0) >> 5;
 80052ae:	00eb      	lsls	r3, r5, #3
 80052b0:	4699      	mov	r9, r3
 80052b2:	465c      	mov	r4, fp
 80052b4:	40dc      	lsrs	r4, r3
 80052b6:	0963      	lsrs	r3, r4, #5
 80052b8:	2207      	movs	r2, #7
 80052ba:	4013      	ands	r3, r2
     current_mixer_gain = (ref_powerreg >> (i*8)) & 0x1F;
 80052bc:	3218      	adds	r2, #24
 80052be:	4014      	ands	r4, r2
     current_da_attn = 0b110 - current_da_attn;
 80052c0:	2006      	movs	r0, #6
 80052c2:	1ac0      	subs	r0, r0, r3
 80052c4:	b2c0      	uxtb	r0, r0
     new_gain = current_da_attn * MIX_DA_FACTOR + current_mixer_gain + power_adj ;
 80052c6:	f7fb fedd 	bl	8001084 <__aeabi_i2d>
 80052ca:	2200      	movs	r2, #0
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <tvc_computetxpowersetting_lut+0x98>)
 80052ce:	f7fb fbb7 	bl	8000a40 <__aeabi_dmul>
 80052d2:	0006      	movs	r6, r0
 80052d4:	000f      	movs	r7, r1
 80052d6:	0020      	movs	r0, r4
 80052d8:	f7fb fed4 	bl	8001084 <__aeabi_i2d>
 80052dc:	0032      	movs	r2, r6
 80052de:	003b      	movs	r3, r7
 80052e0:	f7fa ffe8 	bl	80002b4 <__aeabi_dadd>
 80052e4:	0006      	movs	r6, r0
 80052e6:	000f      	movs	r7, r1
 80052e8:	4640      	mov	r0, r8
 80052ea:	f7fb fecb 	bl	8001084 <__aeabi_i2d>
 80052ee:	0032      	movs	r2, r6
 80052f0:	003b      	movs	r3, r7
 80052f2:	f7fa ffdf 	bl	80002b4 <__aeabi_dadd>
 80052f6:	f7fb fe89 	bl	800100c <__aeabi_d2iz>
     if ( new_gain < 0 ) {
 80052fa:	2800      	cmp	r0, #0
 80052fc:	dbcc      	blt.n	8005298 <tvc_computetxpowersetting_lut+0x18>
     if ( new_gain >= (int32) (sizeof(tx_gain_lookup) / (int32) sizeof(tx_gain_lookup[0])) ) {
 80052fe:	283d      	cmp	r0, #61	@ 0x3d
 8005300:	ddcb      	ble.n	800529a <tvc_computetxpowersetting_lut+0x1a>
         new_gain = sizeof(tx_gain_lookup) / sizeof(tx_gain_lookup[0]) - 1;
 8005302:	203d      	movs	r0, #61	@ 0x3d
 8005304:	e7c9      	b.n	800529a <tvc_computetxpowersetting_lut+0x1a>
    }

    return (uint32)new_regval;
 }
 8005306:	4650      	mov	r0, sl
 8005308:	bcf0      	pop	{r4, r5, r6, r7}
 800530a:	46bb      	mov	fp, r7
 800530c:	46b2      	mov	sl, r6
 800530e:	46a9      	mov	r9, r5
 8005310:	46a0      	mov	r8, r4
 8005312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005314:	080077c0 	.word	0x080077c0
 8005318:	40140000 	.word	0x40140000

0800531c <tvc_calcpowertempvbatadj>:
 * output parameters: None
 *
 * returns: (uint32) The corrected TX_POWER register value
 */
 uint32 tvc_calcpowertempvbatadj(uint8 channel, uint32 ref_powerreg, int delta_temp, int delta_voltage)
{
 800531c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531e:	0005      	movs	r5, r0
 8005320:	000c      	movs	r4, r1
 8005322:	0017      	movs	r7, r2
 8005324:	0019      	movs	r1, r3
    int8 delta_power;

    delta_power =  tvc_calcpowervbatadj(channel, delta_voltage);
 8005326:	f7ff ff6d 	bl	8005204 <tvc_calcpowervbatadj>
 800532a:	0006      	movs	r6, r0
    delta_power += tvc_calcpowertempadj(channel, delta_temp);
 800532c:	0039      	movs	r1, r7
 800532e:	0028      	movs	r0, r5
 8005330:	f7ff ff36 	bl	80051a0 <tvc_calcpowertempadj>
 8005334:	b2c3      	uxtb	r3, r0
 8005336:	199b      	adds	r3, r3, r6
 8005338:	b259      	sxtb	r1, r3

    if(delta_power == 0)
 800533a:	2900      	cmp	r1, #0
 800533c:	d003      	beq.n	8005346 <tvc_calcpowertempvbatadj+0x2a>
    {
        return ref_powerreg ; //no change to power register
    }

    // Adjust the TX_POWER register value
    return tvc_computetxpowersetting_lut(ref_powerreg, delta_power);
 800533e:	0020      	movs	r0, r4
 8005340:	f7ff ff9e 	bl	8005280 <tvc_computetxpowersetting_lut>
}
 8005344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return ref_powerreg ; //no change to power register
 8005346:	0020      	movs	r0, r4
 8005348:	e7fc      	b.n	8005344 <tvc_calcpowertempvbatadj+0x28>

0800534a <tvc_comp>:
{
 800534a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534c:	46c6      	mov	lr, r8
 800534e:	b500      	push	{lr}
 8005350:	0005      	movs	r5, r0
 8005352:	000c      	movs	r4, r1
 8005354:	0016      	movs	r6, r2
  if ((ref->power) && (ref->pgcnt) && (ref->temp))
 8005356:	684b      	ldr	r3, [r1, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d005      	beq.n	8005368 <tvc_comp+0x1e>
 800535c:	894b      	ldrh	r3, [r1, #10]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <tvc_comp+0x1e>
 8005362:	7a0b      	ldrb	r3, [r1, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <tvc_comp+0x24>
}
 8005368:	bc80      	pop	{r7}
 800536a:	46b8      	mov	r8, r7
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    port_set_dw1000_slowrate();         
 800536e:	f7fd f875 	bl	800245c <port_set_dw1000_slowrate>
    tempvbat = dwt_readtempvbat(0);    
 8005372:	2000      	movs	r0, #0
 8005374:	f7fe fe7c 	bl	8004070 <dwt_readtempvbat>
    curr_vbat = tempvbat & 0xff;
 8005378:	b2c3      	uxtb	r3, r0
    curr_temp = (tempvbat >> 8) & 0xff;
 800537a:	0a07      	lsrs	r7, r0, #8
 800537c:	b2ff      	uxtb	r7, r7
    delta_temp = (int) (curr_temp - ref->temp);
 800537e:	7a22      	ldrb	r2, [r4, #8]
 8005380:	1abf      	subs	r7, r7, r2
    delta_voltage = (int) (curr_vbat - ref->vbat);
 8005382:	7b22      	ldrb	r2, [r4, #12]
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	4698      	mov	r8, r3
    tx_cfg->PGdly = dwt_calcbandwidthtempadj(ref->pgcnt);
 8005388:	8960      	ldrh	r0, [r4, #10]
 800538a:	f7fe fed9 	bl	8004140 <dwt_calcbandwidthtempadj>
 800538e:	7028      	strb	r0, [r5, #0]
    tx_cfg->power = tvc_calcpowertempvbatadj(channel, ref->power, delta_temp, delta_voltage);
 8005390:	6861      	ldr	r1, [r4, #4]
 8005392:	4643      	mov	r3, r8
 8005394:	003a      	movs	r2, r7
 8005396:	0030      	movs	r0, r6
 8005398:	f7ff ffc0 	bl	800531c <tvc_calcpowertempvbatadj>
 800539c:	6068      	str	r0, [r5, #4]
    port_set_dw1000_fastrate();
 800539e:	f7fd f881 	bl	80024a4 <port_set_dw1000_fastrate>
}
 80053a2:	e7e1      	b.n	8005368 <tvc_comp+0x1e>

080053a4 <malloc>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4b03      	ldr	r3, [pc, #12]	@ (80053b4 <malloc+0x10>)
 80053a8:	0001      	movs	r1, r0
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	f000 f830 	bl	8005410 <_malloc_r>
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	20000014 	.word	0x20000014

080053b8 <free>:
 80053b8:	b510      	push	{r4, lr}
 80053ba:	4b03      	ldr	r3, [pc, #12]	@ (80053c8 <free+0x10>)
 80053bc:	0001      	movs	r1, r0
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	f000 fb16 	bl	80059f0 <_free_r>
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	46c0      	nop			@ (mov r8, r8)
 80053c8:	20000014 	.word	0x20000014

080053cc <sbrk_aligned>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	4e0f      	ldr	r6, [pc, #60]	@ (800540c <sbrk_aligned+0x40>)
 80053d0:	000d      	movs	r5, r1
 80053d2:	6831      	ldr	r1, [r6, #0]
 80053d4:	0004      	movs	r4, r0
 80053d6:	2900      	cmp	r1, #0
 80053d8:	d102      	bne.n	80053e0 <sbrk_aligned+0x14>
 80053da:	f000 fa87 	bl	80058ec <_sbrk_r>
 80053de:	6030      	str	r0, [r6, #0]
 80053e0:	0029      	movs	r1, r5
 80053e2:	0020      	movs	r0, r4
 80053e4:	f000 fa82 	bl	80058ec <_sbrk_r>
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d103      	bne.n	80053f4 <sbrk_aligned+0x28>
 80053ec:	2501      	movs	r5, #1
 80053ee:	426d      	negs	r5, r5
 80053f0:	0028      	movs	r0, r5
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	2303      	movs	r3, #3
 80053f6:	1cc5      	adds	r5, r0, #3
 80053f8:	439d      	bics	r5, r3
 80053fa:	42a8      	cmp	r0, r5
 80053fc:	d0f8      	beq.n	80053f0 <sbrk_aligned+0x24>
 80053fe:	1a29      	subs	r1, r5, r0
 8005400:	0020      	movs	r0, r4
 8005402:	f000 fa73 	bl	80058ec <_sbrk_r>
 8005406:	3001      	adds	r0, #1
 8005408:	d1f2      	bne.n	80053f0 <sbrk_aligned+0x24>
 800540a:	e7ef      	b.n	80053ec <sbrk_aligned+0x20>
 800540c:	2000059c 	.word	0x2000059c

08005410 <_malloc_r>:
 8005410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005412:	2203      	movs	r2, #3
 8005414:	1ccb      	adds	r3, r1, #3
 8005416:	4393      	bics	r3, r2
 8005418:	3308      	adds	r3, #8
 800541a:	0005      	movs	r5, r0
 800541c:	001f      	movs	r7, r3
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d234      	bcs.n	800548c <_malloc_r+0x7c>
 8005422:	270c      	movs	r7, #12
 8005424:	42b9      	cmp	r1, r7
 8005426:	d833      	bhi.n	8005490 <_malloc_r+0x80>
 8005428:	0028      	movs	r0, r5
 800542a:	f000 f871 	bl	8005510 <__malloc_lock>
 800542e:	4e37      	ldr	r6, [pc, #220]	@ (800550c <_malloc_r+0xfc>)
 8005430:	6833      	ldr	r3, [r6, #0]
 8005432:	001c      	movs	r4, r3
 8005434:	2c00      	cmp	r4, #0
 8005436:	d12f      	bne.n	8005498 <_malloc_r+0x88>
 8005438:	0039      	movs	r1, r7
 800543a:	0028      	movs	r0, r5
 800543c:	f7ff ffc6 	bl	80053cc <sbrk_aligned>
 8005440:	0004      	movs	r4, r0
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	d15f      	bne.n	8005506 <_malloc_r+0xf6>
 8005446:	6834      	ldr	r4, [r6, #0]
 8005448:	9400      	str	r4, [sp, #0]
 800544a:	9b00      	ldr	r3, [sp, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d14a      	bne.n	80054e6 <_malloc_r+0xd6>
 8005450:	2c00      	cmp	r4, #0
 8005452:	d052      	beq.n	80054fa <_malloc_r+0xea>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	0028      	movs	r0, r5
 8005458:	18e3      	adds	r3, r4, r3
 800545a:	9900      	ldr	r1, [sp, #0]
 800545c:	9301      	str	r3, [sp, #4]
 800545e:	f000 fa45 	bl	80058ec <_sbrk_r>
 8005462:	9b01      	ldr	r3, [sp, #4]
 8005464:	4283      	cmp	r3, r0
 8005466:	d148      	bne.n	80054fa <_malloc_r+0xea>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	0028      	movs	r0, r5
 800546c:	1aff      	subs	r7, r7, r3
 800546e:	0039      	movs	r1, r7
 8005470:	f7ff ffac 	bl	80053cc <sbrk_aligned>
 8005474:	3001      	adds	r0, #1
 8005476:	d040      	beq.n	80054fa <_malloc_r+0xea>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	19db      	adds	r3, r3, r7
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	6833      	ldr	r3, [r6, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	2a00      	cmp	r2, #0
 8005484:	d133      	bne.n	80054ee <_malloc_r+0xde>
 8005486:	9b00      	ldr	r3, [sp, #0]
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	e019      	b.n	80054c0 <_malloc_r+0xb0>
 800548c:	2b00      	cmp	r3, #0
 800548e:	dac9      	bge.n	8005424 <_malloc_r+0x14>
 8005490:	230c      	movs	r3, #12
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	2000      	movs	r0, #0
 8005496:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005498:	6821      	ldr	r1, [r4, #0]
 800549a:	1bc9      	subs	r1, r1, r7
 800549c:	d420      	bmi.n	80054e0 <_malloc_r+0xd0>
 800549e:	290b      	cmp	r1, #11
 80054a0:	d90a      	bls.n	80054b8 <_malloc_r+0xa8>
 80054a2:	19e2      	adds	r2, r4, r7
 80054a4:	6027      	str	r7, [r4, #0]
 80054a6:	42a3      	cmp	r3, r4
 80054a8:	d104      	bne.n	80054b4 <_malloc_r+0xa4>
 80054aa:	6032      	str	r2, [r6, #0]
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	6011      	str	r1, [r2, #0]
 80054b0:	6053      	str	r3, [r2, #4]
 80054b2:	e005      	b.n	80054c0 <_malloc_r+0xb0>
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	e7f9      	b.n	80054ac <_malloc_r+0x9c>
 80054b8:	6862      	ldr	r2, [r4, #4]
 80054ba:	42a3      	cmp	r3, r4
 80054bc:	d10e      	bne.n	80054dc <_malloc_r+0xcc>
 80054be:	6032      	str	r2, [r6, #0]
 80054c0:	0028      	movs	r0, r5
 80054c2:	f000 f82d 	bl	8005520 <__malloc_unlock>
 80054c6:	0020      	movs	r0, r4
 80054c8:	2207      	movs	r2, #7
 80054ca:	300b      	adds	r0, #11
 80054cc:	1d23      	adds	r3, r4, #4
 80054ce:	4390      	bics	r0, r2
 80054d0:	1ac2      	subs	r2, r0, r3
 80054d2:	4298      	cmp	r0, r3
 80054d4:	d0df      	beq.n	8005496 <_malloc_r+0x86>
 80054d6:	1a1b      	subs	r3, r3, r0
 80054d8:	50a3      	str	r3, [r4, r2]
 80054da:	e7dc      	b.n	8005496 <_malloc_r+0x86>
 80054dc:	605a      	str	r2, [r3, #4]
 80054de:	e7ef      	b.n	80054c0 <_malloc_r+0xb0>
 80054e0:	0023      	movs	r3, r4
 80054e2:	6864      	ldr	r4, [r4, #4]
 80054e4:	e7a6      	b.n	8005434 <_malloc_r+0x24>
 80054e6:	9c00      	ldr	r4, [sp, #0]
 80054e8:	6863      	ldr	r3, [r4, #4]
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	e7ad      	b.n	800544a <_malloc_r+0x3a>
 80054ee:	001a      	movs	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	42a3      	cmp	r3, r4
 80054f4:	d1fb      	bne.n	80054ee <_malloc_r+0xde>
 80054f6:	2300      	movs	r3, #0
 80054f8:	e7da      	b.n	80054b0 <_malloc_r+0xa0>
 80054fa:	230c      	movs	r3, #12
 80054fc:	0028      	movs	r0, r5
 80054fe:	602b      	str	r3, [r5, #0]
 8005500:	f000 f80e 	bl	8005520 <__malloc_unlock>
 8005504:	e7c6      	b.n	8005494 <_malloc_r+0x84>
 8005506:	6007      	str	r7, [r0, #0]
 8005508:	e7da      	b.n	80054c0 <_malloc_r+0xb0>
 800550a:	46c0      	nop			@ (mov r8, r8)
 800550c:	200005a0 	.word	0x200005a0

08005510 <__malloc_lock>:
 8005510:	b510      	push	{r4, lr}
 8005512:	4802      	ldr	r0, [pc, #8]	@ (800551c <__malloc_lock+0xc>)
 8005514:	f000 fa3b 	bl	800598e <__retarget_lock_acquire_recursive>
 8005518:	bd10      	pop	{r4, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	200006e4 	.word	0x200006e4

08005520 <__malloc_unlock>:
 8005520:	b510      	push	{r4, lr}
 8005522:	4802      	ldr	r0, [pc, #8]	@ (800552c <__malloc_unlock+0xc>)
 8005524:	f000 fa34 	bl	8005990 <__retarget_lock_release_recursive>
 8005528:	bd10      	pop	{r4, pc}
 800552a:	46c0      	nop			@ (mov r8, r8)
 800552c:	200006e4 	.word	0x200006e4

08005530 <rand>:
 8005530:	4b16      	ldr	r3, [pc, #88]	@ (800558c <rand+0x5c>)
 8005532:	b510      	push	{r4, lr}
 8005534:	681c      	ldr	r4, [r3, #0]
 8005536:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <rand+0x3a>
 800553c:	2018      	movs	r0, #24
 800553e:	f7ff ff31 	bl	80053a4 <malloc>
 8005542:	1e02      	subs	r2, r0, #0
 8005544:	6320      	str	r0, [r4, #48]	@ 0x30
 8005546:	d104      	bne.n	8005552 <rand+0x22>
 8005548:	2152      	movs	r1, #82	@ 0x52
 800554a:	4b11      	ldr	r3, [pc, #68]	@ (8005590 <rand+0x60>)
 800554c:	4811      	ldr	r0, [pc, #68]	@ (8005594 <rand+0x64>)
 800554e:	f000 fa31 	bl	80059b4 <__assert_func>
 8005552:	4b11      	ldr	r3, [pc, #68]	@ (8005598 <rand+0x68>)
 8005554:	2100      	movs	r1, #0
 8005556:	6003      	str	r3, [r0, #0]
 8005558:	4b10      	ldr	r3, [pc, #64]	@ (800559c <rand+0x6c>)
 800555a:	6043      	str	r3, [r0, #4]
 800555c:	4b10      	ldr	r3, [pc, #64]	@ (80055a0 <rand+0x70>)
 800555e:	6083      	str	r3, [r0, #8]
 8005560:	230b      	movs	r3, #11
 8005562:	8183      	strh	r3, [r0, #12]
 8005564:	2001      	movs	r0, #1
 8005566:	6110      	str	r0, [r2, #16]
 8005568:	6151      	str	r1, [r2, #20]
 800556a:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 800556c:	4a0d      	ldr	r2, [pc, #52]	@ (80055a4 <rand+0x74>)
 800556e:	6920      	ldr	r0, [r4, #16]
 8005570:	6961      	ldr	r1, [r4, #20]
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <rand+0x78>)
 8005574:	f7fa fe70 	bl	8000258 <__aeabi_lmul>
 8005578:	2201      	movs	r2, #1
 800557a:	2300      	movs	r3, #0
 800557c:	1880      	adds	r0, r0, r2
 800557e:	4159      	adcs	r1, r3
 8005580:	6120      	str	r0, [r4, #16]
 8005582:	6161      	str	r1, [r4, #20]
 8005584:	0048      	lsls	r0, r1, #1
 8005586:	0840      	lsrs	r0, r0, #1
 8005588:	bd10      	pop	{r4, pc}
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	20000014 	.word	0x20000014
 8005590:	080077fe 	.word	0x080077fe
 8005594:	08007815 	.word	0x08007815
 8005598:	abcd330e 	.word	0xabcd330e
 800559c:	e66d1234 	.word	0xe66d1234
 80055a0:	0005deec 	.word	0x0005deec
 80055a4:	4c957f2d 	.word	0x4c957f2d
 80055a8:	5851f42d 	.word	0x5851f42d

080055ac <std>:
 80055ac:	2300      	movs	r3, #0
 80055ae:	b510      	push	{r4, lr}
 80055b0:	0004      	movs	r4, r0
 80055b2:	6003      	str	r3, [r0, #0]
 80055b4:	6043      	str	r3, [r0, #4]
 80055b6:	6083      	str	r3, [r0, #8]
 80055b8:	8181      	strh	r1, [r0, #12]
 80055ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80055bc:	81c2      	strh	r2, [r0, #14]
 80055be:	6103      	str	r3, [r0, #16]
 80055c0:	6143      	str	r3, [r0, #20]
 80055c2:	6183      	str	r3, [r0, #24]
 80055c4:	0019      	movs	r1, r3
 80055c6:	2208      	movs	r2, #8
 80055c8:	305c      	adds	r0, #92	@ 0x5c
 80055ca:	f000 f94d 	bl	8005868 <memset>
 80055ce:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <std+0x50>)
 80055d0:	6224      	str	r4, [r4, #32]
 80055d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80055d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005600 <std+0x54>)
 80055d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <std+0x58>)
 80055da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <std+0x5c>)
 80055de:	6323      	str	r3, [r4, #48]	@ 0x30
 80055e0:	4b0a      	ldr	r3, [pc, #40]	@ (800560c <std+0x60>)
 80055e2:	429c      	cmp	r4, r3
 80055e4:	d005      	beq.n	80055f2 <std+0x46>
 80055e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005610 <std+0x64>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d002      	beq.n	80055f2 <std+0x46>
 80055ec:	4b09      	ldr	r3, [pc, #36]	@ (8005614 <std+0x68>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d103      	bne.n	80055fa <std+0x4e>
 80055f2:	0020      	movs	r0, r4
 80055f4:	3058      	adds	r0, #88	@ 0x58
 80055f6:	f000 f9c9 	bl	800598c <__retarget_lock_init_recursive>
 80055fa:	bd10      	pop	{r4, pc}
 80055fc:	080057cd 	.word	0x080057cd
 8005600:	080057f9 	.word	0x080057f9
 8005604:	08005831 	.word	0x08005831
 8005608:	0800585d 	.word	0x0800585d
 800560c:	200005a4 	.word	0x200005a4
 8005610:	2000060c 	.word	0x2000060c
 8005614:	20000674 	.word	0x20000674

08005618 <stdio_exit_handler>:
 8005618:	b510      	push	{r4, lr}
 800561a:	4a03      	ldr	r2, [pc, #12]	@ (8005628 <stdio_exit_handler+0x10>)
 800561c:	4903      	ldr	r1, [pc, #12]	@ (800562c <stdio_exit_handler+0x14>)
 800561e:	4804      	ldr	r0, [pc, #16]	@ (8005630 <stdio_exit_handler+0x18>)
 8005620:	f000 f86c 	bl	80056fc <_fwalk_sglue>
 8005624:	bd10      	pop	{r4, pc}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	20000008 	.word	0x20000008
 800562c:	08006785 	.word	0x08006785
 8005630:	20000018 	.word	0x20000018

08005634 <cleanup_stdio>:
 8005634:	6841      	ldr	r1, [r0, #4]
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <cleanup_stdio+0x30>)
 8005638:	b510      	push	{r4, lr}
 800563a:	0004      	movs	r4, r0
 800563c:	4299      	cmp	r1, r3
 800563e:	d001      	beq.n	8005644 <cleanup_stdio+0x10>
 8005640:	f001 f8a0 	bl	8006784 <_fflush_r>
 8005644:	68a1      	ldr	r1, [r4, #8]
 8005646:	4b08      	ldr	r3, [pc, #32]	@ (8005668 <cleanup_stdio+0x34>)
 8005648:	4299      	cmp	r1, r3
 800564a:	d002      	beq.n	8005652 <cleanup_stdio+0x1e>
 800564c:	0020      	movs	r0, r4
 800564e:	f001 f899 	bl	8006784 <_fflush_r>
 8005652:	68e1      	ldr	r1, [r4, #12]
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <cleanup_stdio+0x38>)
 8005656:	4299      	cmp	r1, r3
 8005658:	d002      	beq.n	8005660 <cleanup_stdio+0x2c>
 800565a:	0020      	movs	r0, r4
 800565c:	f001 f892 	bl	8006784 <_fflush_r>
 8005660:	bd10      	pop	{r4, pc}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	200005a4 	.word	0x200005a4
 8005668:	2000060c 	.word	0x2000060c
 800566c:	20000674 	.word	0x20000674

08005670 <global_stdio_init.part.0>:
 8005670:	b510      	push	{r4, lr}
 8005672:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <global_stdio_init.part.0+0x28>)
 8005674:	4a09      	ldr	r2, [pc, #36]	@ (800569c <global_stdio_init.part.0+0x2c>)
 8005676:	2104      	movs	r1, #4
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	4809      	ldr	r0, [pc, #36]	@ (80056a0 <global_stdio_init.part.0+0x30>)
 800567c:	2200      	movs	r2, #0
 800567e:	f7ff ff95 	bl	80055ac <std>
 8005682:	2201      	movs	r2, #1
 8005684:	2109      	movs	r1, #9
 8005686:	4807      	ldr	r0, [pc, #28]	@ (80056a4 <global_stdio_init.part.0+0x34>)
 8005688:	f7ff ff90 	bl	80055ac <std>
 800568c:	2202      	movs	r2, #2
 800568e:	2112      	movs	r1, #18
 8005690:	4805      	ldr	r0, [pc, #20]	@ (80056a8 <global_stdio_init.part.0+0x38>)
 8005692:	f7ff ff8b 	bl	80055ac <std>
 8005696:	bd10      	pop	{r4, pc}
 8005698:	200006dc 	.word	0x200006dc
 800569c:	08005619 	.word	0x08005619
 80056a0:	200005a4 	.word	0x200005a4
 80056a4:	2000060c 	.word	0x2000060c
 80056a8:	20000674 	.word	0x20000674

080056ac <__sfp_lock_acquire>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	4802      	ldr	r0, [pc, #8]	@ (80056b8 <__sfp_lock_acquire+0xc>)
 80056b0:	f000 f96d 	bl	800598e <__retarget_lock_acquire_recursive>
 80056b4:	bd10      	pop	{r4, pc}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	200006e5 	.word	0x200006e5

080056bc <__sfp_lock_release>:
 80056bc:	b510      	push	{r4, lr}
 80056be:	4802      	ldr	r0, [pc, #8]	@ (80056c8 <__sfp_lock_release+0xc>)
 80056c0:	f000 f966 	bl	8005990 <__retarget_lock_release_recursive>
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	200006e5 	.word	0x200006e5

080056cc <__sinit>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	0004      	movs	r4, r0
 80056d0:	f7ff ffec 	bl	80056ac <__sfp_lock_acquire>
 80056d4:	6a23      	ldr	r3, [r4, #32]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <__sinit+0x14>
 80056da:	f7ff ffef 	bl	80056bc <__sfp_lock_release>
 80056de:	bd10      	pop	{r4, pc}
 80056e0:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <__sinit+0x28>)
 80056e2:	6223      	str	r3, [r4, #32]
 80056e4:	4b04      	ldr	r3, [pc, #16]	@ (80056f8 <__sinit+0x2c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f6      	bne.n	80056da <__sinit+0xe>
 80056ec:	f7ff ffc0 	bl	8005670 <global_stdio_init.part.0>
 80056f0:	e7f3      	b.n	80056da <__sinit+0xe>
 80056f2:	46c0      	nop			@ (mov r8, r8)
 80056f4:	08005635 	.word	0x08005635
 80056f8:	200006dc 	.word	0x200006dc

080056fc <_fwalk_sglue>:
 80056fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056fe:	0014      	movs	r4, r2
 8005700:	2600      	movs	r6, #0
 8005702:	9000      	str	r0, [sp, #0]
 8005704:	9101      	str	r1, [sp, #4]
 8005706:	68a5      	ldr	r5, [r4, #8]
 8005708:	6867      	ldr	r7, [r4, #4]
 800570a:	3f01      	subs	r7, #1
 800570c:	d504      	bpl.n	8005718 <_fwalk_sglue+0x1c>
 800570e:	6824      	ldr	r4, [r4, #0]
 8005710:	2c00      	cmp	r4, #0
 8005712:	d1f8      	bne.n	8005706 <_fwalk_sglue+0xa>
 8005714:	0030      	movs	r0, r6
 8005716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005718:	89ab      	ldrh	r3, [r5, #12]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d908      	bls.n	8005730 <_fwalk_sglue+0x34>
 800571e:	220e      	movs	r2, #14
 8005720:	5eab      	ldrsh	r3, [r5, r2]
 8005722:	3301      	adds	r3, #1
 8005724:	d004      	beq.n	8005730 <_fwalk_sglue+0x34>
 8005726:	0029      	movs	r1, r5
 8005728:	9800      	ldr	r0, [sp, #0]
 800572a:	9b01      	ldr	r3, [sp, #4]
 800572c:	4798      	blx	r3
 800572e:	4306      	orrs	r6, r0
 8005730:	3568      	adds	r5, #104	@ 0x68
 8005732:	e7ea      	b.n	800570a <_fwalk_sglue+0xe>

08005734 <siprintf>:
 8005734:	b40e      	push	{r1, r2, r3}
 8005736:	b510      	push	{r4, lr}
 8005738:	2400      	movs	r4, #0
 800573a:	490c      	ldr	r1, [pc, #48]	@ (800576c <siprintf+0x38>)
 800573c:	b09d      	sub	sp, #116	@ 0x74
 800573e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005740:	9002      	str	r0, [sp, #8]
 8005742:	9006      	str	r0, [sp, #24]
 8005744:	9107      	str	r1, [sp, #28]
 8005746:	9104      	str	r1, [sp, #16]
 8005748:	4809      	ldr	r0, [pc, #36]	@ (8005770 <siprintf+0x3c>)
 800574a:	490a      	ldr	r1, [pc, #40]	@ (8005774 <siprintf+0x40>)
 800574c:	cb04      	ldmia	r3!, {r2}
 800574e:	9105      	str	r1, [sp, #20]
 8005750:	6800      	ldr	r0, [r0, #0]
 8005752:	a902      	add	r1, sp, #8
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005758:	f000 f9f4 	bl	8005b44 <_svfiprintf_r>
 800575c:	9b02      	ldr	r3, [sp, #8]
 800575e:	701c      	strb	r4, [r3, #0]
 8005760:	b01d      	add	sp, #116	@ 0x74
 8005762:	bc10      	pop	{r4}
 8005764:	bc08      	pop	{r3}
 8005766:	b003      	add	sp, #12
 8005768:	4718      	bx	r3
 800576a:	46c0      	nop			@ (mov r8, r8)
 800576c:	7fffffff 	.word	0x7fffffff
 8005770:	20000014 	.word	0x20000014
 8005774:	ffff0208 	.word	0xffff0208

08005778 <siscanf>:
 8005778:	b40e      	push	{r1, r2, r3}
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	2381      	movs	r3, #129	@ 0x81
 800577e:	b09d      	sub	sp, #116	@ 0x74
 8005780:	466a      	mov	r2, sp
 8005782:	2500      	movs	r5, #0
 8005784:	ac21      	add	r4, sp, #132	@ 0x84
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	cc40      	ldmia	r4!, {r6}
 800578a:	8293      	strh	r3, [r2, #20]
 800578c:	951b      	str	r5, [sp, #108]	@ 0x6c
 800578e:	9002      	str	r0, [sp, #8]
 8005790:	9006      	str	r0, [sp, #24]
 8005792:	f7fa fcc3 	bl	800011c <strlen>
 8005796:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <siscanf+0x4c>)
 8005798:	466a      	mov	r2, sp
 800579a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800579c:	2301      	movs	r3, #1
 800579e:	9003      	str	r0, [sp, #12]
 80057a0:	9007      	str	r0, [sp, #28]
 80057a2:	4809      	ldr	r0, [pc, #36]	@ (80057c8 <siscanf+0x50>)
 80057a4:	425b      	negs	r3, r3
 80057a6:	82d3      	strh	r3, [r2, #22]
 80057a8:	a902      	add	r1, sp, #8
 80057aa:	0023      	movs	r3, r4
 80057ac:	0032      	movs	r2, r6
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	950f      	str	r5, [sp, #60]	@ 0x3c
 80057b2:	9514      	str	r5, [sp, #80]	@ 0x50
 80057b4:	9401      	str	r4, [sp, #4]
 80057b6:	f000 fb1f 	bl	8005df8 <__ssvfiscanf_r>
 80057ba:	b01d      	add	sp, #116	@ 0x74
 80057bc:	bc70      	pop	{r4, r5, r6}
 80057be:	bc08      	pop	{r3}
 80057c0:	b003      	add	sp, #12
 80057c2:	4718      	bx	r3
 80057c4:	080057f5 	.word	0x080057f5
 80057c8:	20000014 	.word	0x20000014

080057cc <__sread>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	000c      	movs	r4, r1
 80057d0:	250e      	movs	r5, #14
 80057d2:	5f49      	ldrsh	r1, [r1, r5]
 80057d4:	f000 f876 	bl	80058c4 <_read_r>
 80057d8:	2800      	cmp	r0, #0
 80057da:	db03      	blt.n	80057e4 <__sread+0x18>
 80057dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80057de:	181b      	adds	r3, r3, r0
 80057e0:	6563      	str	r3, [r4, #84]	@ 0x54
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	4a02      	ldr	r2, [pc, #8]	@ (80057f0 <__sread+0x24>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	e7f9      	b.n	80057e2 <__sread+0x16>
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	ffffefff 	.word	0xffffefff

080057f4 <__seofread>:
 80057f4:	2000      	movs	r0, #0
 80057f6:	4770      	bx	lr

080057f8 <__swrite>:
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	001f      	movs	r7, r3
 80057fc:	898b      	ldrh	r3, [r1, #12]
 80057fe:	0005      	movs	r5, r0
 8005800:	000c      	movs	r4, r1
 8005802:	0016      	movs	r6, r2
 8005804:	05db      	lsls	r3, r3, #23
 8005806:	d505      	bpl.n	8005814 <__swrite+0x1c>
 8005808:	230e      	movs	r3, #14
 800580a:	5ec9      	ldrsh	r1, [r1, r3]
 800580c:	2200      	movs	r2, #0
 800580e:	2302      	movs	r3, #2
 8005810:	f000 f844 	bl	800589c <_lseek_r>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	4a05      	ldr	r2, [pc, #20]	@ (800582c <__swrite+0x34>)
 8005818:	0028      	movs	r0, r5
 800581a:	4013      	ands	r3, r2
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	0032      	movs	r2, r6
 8005820:	230e      	movs	r3, #14
 8005822:	5ee1      	ldrsh	r1, [r4, r3]
 8005824:	003b      	movs	r3, r7
 8005826:	f000 f873 	bl	8005910 <_write_r>
 800582a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800582c:	ffffefff 	.word	0xffffefff

08005830 <__sseek>:
 8005830:	b570      	push	{r4, r5, r6, lr}
 8005832:	000c      	movs	r4, r1
 8005834:	250e      	movs	r5, #14
 8005836:	5f49      	ldrsh	r1, [r1, r5]
 8005838:	f000 f830 	bl	800589c <_lseek_r>
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	1c42      	adds	r2, r0, #1
 8005840:	d103      	bne.n	800584a <__sseek+0x1a>
 8005842:	4a05      	ldr	r2, [pc, #20]	@ (8005858 <__sseek+0x28>)
 8005844:	4013      	ands	r3, r2
 8005846:	81a3      	strh	r3, [r4, #12]
 8005848:	bd70      	pop	{r4, r5, r6, pc}
 800584a:	2280      	movs	r2, #128	@ 0x80
 800584c:	0152      	lsls	r2, r2, #5
 800584e:	4313      	orrs	r3, r2
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	6560      	str	r0, [r4, #84]	@ 0x54
 8005854:	e7f8      	b.n	8005848 <__sseek+0x18>
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	ffffefff 	.word	0xffffefff

0800585c <__sclose>:
 800585c:	b510      	push	{r4, lr}
 800585e:	230e      	movs	r3, #14
 8005860:	5ec9      	ldrsh	r1, [r1, r3]
 8005862:	f000 f809 	bl	8005878 <_close_r>
 8005866:	bd10      	pop	{r4, pc}

08005868 <memset>:
 8005868:	0003      	movs	r3, r0
 800586a:	1882      	adds	r2, r0, r2
 800586c:	4293      	cmp	r3, r2
 800586e:	d100      	bne.n	8005872 <memset+0xa>
 8005870:	4770      	bx	lr
 8005872:	7019      	strb	r1, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	e7f9      	b.n	800586c <memset+0x4>

08005878 <_close_r>:
 8005878:	2300      	movs	r3, #0
 800587a:	b570      	push	{r4, r5, r6, lr}
 800587c:	4d06      	ldr	r5, [pc, #24]	@ (8005898 <_close_r+0x20>)
 800587e:	0004      	movs	r4, r0
 8005880:	0008      	movs	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fc f922 	bl	8001acc <_close>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d103      	bne.n	8005894 <_close_r+0x1c>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d000      	beq.n	8005894 <_close_r+0x1c>
 8005892:	6023      	str	r3, [r4, #0]
 8005894:	bd70      	pop	{r4, r5, r6, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	200006e0 	.word	0x200006e0

0800589c <_lseek_r>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	0004      	movs	r4, r0
 80058a0:	0008      	movs	r0, r1
 80058a2:	0011      	movs	r1, r2
 80058a4:	001a      	movs	r2, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	4d05      	ldr	r5, [pc, #20]	@ (80058c0 <_lseek_r+0x24>)
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fc f918 	bl	8001ae0 <_lseek>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d103      	bne.n	80058bc <_lseek_r+0x20>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d000      	beq.n	80058bc <_lseek_r+0x20>
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	200006e0 	.word	0x200006e0

080058c4 <_read_r>:
 80058c4:	b570      	push	{r4, r5, r6, lr}
 80058c6:	0004      	movs	r4, r0
 80058c8:	0008      	movs	r0, r1
 80058ca:	0011      	movs	r1, r2
 80058cc:	001a      	movs	r2, r3
 80058ce:	2300      	movs	r3, #0
 80058d0:	4d05      	ldr	r5, [pc, #20]	@ (80058e8 <_read_r+0x24>)
 80058d2:	602b      	str	r3, [r5, #0]
 80058d4:	f7fc f8ec 	bl	8001ab0 <_read>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d103      	bne.n	80058e4 <_read_r+0x20>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d000      	beq.n	80058e4 <_read_r+0x20>
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	200006e0 	.word	0x200006e0

080058ec <_sbrk_r>:
 80058ec:	2300      	movs	r3, #0
 80058ee:	b570      	push	{r4, r5, r6, lr}
 80058f0:	4d06      	ldr	r5, [pc, #24]	@ (800590c <_sbrk_r+0x20>)
 80058f2:	0004      	movs	r4, r0
 80058f4:	0008      	movs	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fc f8f4 	bl	8001ae4 <_sbrk>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d103      	bne.n	8005908 <_sbrk_r+0x1c>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d000      	beq.n	8005908 <_sbrk_r+0x1c>
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	bd70      	pop	{r4, r5, r6, pc}
 800590a:	46c0      	nop			@ (mov r8, r8)
 800590c:	200006e0 	.word	0x200006e0

08005910 <_write_r>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	0004      	movs	r4, r0
 8005914:	0008      	movs	r0, r1
 8005916:	0011      	movs	r1, r2
 8005918:	001a      	movs	r2, r3
 800591a:	2300      	movs	r3, #0
 800591c:	4d05      	ldr	r5, [pc, #20]	@ (8005934 <_write_r+0x24>)
 800591e:	602b      	str	r3, [r5, #0]
 8005920:	f7fc fcd6 	bl	80022d0 <_write>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d103      	bne.n	8005930 <_write_r+0x20>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d000      	beq.n	8005930 <_write_r+0x20>
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	bd70      	pop	{r4, r5, r6, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	200006e0 	.word	0x200006e0

08005938 <__errno>:
 8005938:	4b01      	ldr	r3, [pc, #4]	@ (8005940 <__errno+0x8>)
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	4770      	bx	lr
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	20000014 	.word	0x20000014

08005944 <__libc_init_array>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	2600      	movs	r6, #0
 8005948:	4c0c      	ldr	r4, [pc, #48]	@ (800597c <__libc_init_array+0x38>)
 800594a:	4d0d      	ldr	r5, [pc, #52]	@ (8005980 <__libc_init_array+0x3c>)
 800594c:	1b64      	subs	r4, r4, r5
 800594e:	10a4      	asrs	r4, r4, #2
 8005950:	42a6      	cmp	r6, r4
 8005952:	d109      	bne.n	8005968 <__libc_init_array+0x24>
 8005954:	2600      	movs	r6, #0
 8005956:	f001 fbf7 	bl	8007148 <_init>
 800595a:	4c0a      	ldr	r4, [pc, #40]	@ (8005984 <__libc_init_array+0x40>)
 800595c:	4d0a      	ldr	r5, [pc, #40]	@ (8005988 <__libc_init_array+0x44>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	42a6      	cmp	r6, r4
 8005964:	d105      	bne.n	8005972 <__libc_init_array+0x2e>
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	00b3      	lsls	r3, r6, #2
 800596a:	58eb      	ldr	r3, [r5, r3]
 800596c:	4798      	blx	r3
 800596e:	3601      	adds	r6, #1
 8005970:	e7ee      	b.n	8005950 <__libc_init_array+0xc>
 8005972:	00b3      	lsls	r3, r6, #2
 8005974:	58eb      	ldr	r3, [r5, r3]
 8005976:	4798      	blx	r3
 8005978:	3601      	adds	r6, #1
 800597a:	e7f2      	b.n	8005962 <__libc_init_array+0x1e>
 800597c:	08007a64 	.word	0x08007a64
 8005980:	08007a64 	.word	0x08007a64
 8005984:	08007a68 	.word	0x08007a68
 8005988:	08007a64 	.word	0x08007a64

0800598c <__retarget_lock_init_recursive>:
 800598c:	4770      	bx	lr

0800598e <__retarget_lock_acquire_recursive>:
 800598e:	4770      	bx	lr

08005990 <__retarget_lock_release_recursive>:
 8005990:	4770      	bx	lr

08005992 <strcpy>:
 8005992:	0003      	movs	r3, r0
 8005994:	780a      	ldrb	r2, [r1, #0]
 8005996:	3101      	adds	r1, #1
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	2a00      	cmp	r2, #0
 800599e:	d1f9      	bne.n	8005994 <strcpy+0x2>
 80059a0:	4770      	bx	lr

080059a2 <memcpy>:
 80059a2:	2300      	movs	r3, #0
 80059a4:	b510      	push	{r4, lr}
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d100      	bne.n	80059ac <memcpy+0xa>
 80059aa:	bd10      	pop	{r4, pc}
 80059ac:	5ccc      	ldrb	r4, [r1, r3]
 80059ae:	54c4      	strb	r4, [r0, r3]
 80059b0:	3301      	adds	r3, #1
 80059b2:	e7f8      	b.n	80059a6 <memcpy+0x4>

080059b4 <__assert_func>:
 80059b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80059b6:	0014      	movs	r4, r2
 80059b8:	001a      	movs	r2, r3
 80059ba:	4b09      	ldr	r3, [pc, #36]	@ (80059e0 <__assert_func+0x2c>)
 80059bc:	0005      	movs	r5, r0
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	000e      	movs	r6, r1
 80059c2:	68d8      	ldr	r0, [r3, #12]
 80059c4:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <__assert_func+0x30>)
 80059c6:	2c00      	cmp	r4, #0
 80059c8:	d101      	bne.n	80059ce <__assert_func+0x1a>
 80059ca:	4b07      	ldr	r3, [pc, #28]	@ (80059e8 <__assert_func+0x34>)
 80059cc:	001c      	movs	r4, r3
 80059ce:	4907      	ldr	r1, [pc, #28]	@ (80059ec <__assert_func+0x38>)
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	9402      	str	r4, [sp, #8]
 80059d4:	002b      	movs	r3, r5
 80059d6:	9600      	str	r6, [sp, #0]
 80059d8:	f000 ff00 	bl	80067dc <fiprintf>
 80059dc:	f000 ffa3 	bl	8006926 <abort>
 80059e0:	20000014 	.word	0x20000014
 80059e4:	0800786d 	.word	0x0800786d
 80059e8:	080078a8 	.word	0x080078a8
 80059ec:	0800787a 	.word	0x0800787a

080059f0 <_free_r>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	0005      	movs	r5, r0
 80059f4:	1e0c      	subs	r4, r1, #0
 80059f6:	d010      	beq.n	8005a1a <_free_r+0x2a>
 80059f8:	3c04      	subs	r4, #4
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	da00      	bge.n	8005a02 <_free_r+0x12>
 8005a00:	18e4      	adds	r4, r4, r3
 8005a02:	0028      	movs	r0, r5
 8005a04:	f7ff fd84 	bl	8005510 <__malloc_lock>
 8005a08:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <_free_r+0x90>)
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d105      	bne.n	8005a1c <_free_r+0x2c>
 8005a10:	6063      	str	r3, [r4, #4]
 8005a12:	6014      	str	r4, [r2, #0]
 8005a14:	0028      	movs	r0, r5
 8005a16:	f7ff fd83 	bl	8005520 <__malloc_unlock>
 8005a1a:	bd70      	pop	{r4, r5, r6, pc}
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d908      	bls.n	8005a32 <_free_r+0x42>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	1821      	adds	r1, r4, r0
 8005a24:	428b      	cmp	r3, r1
 8005a26:	d1f3      	bne.n	8005a10 <_free_r+0x20>
 8005a28:	6819      	ldr	r1, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	1809      	adds	r1, r1, r0
 8005a2e:	6021      	str	r1, [r4, #0]
 8005a30:	e7ee      	b.n	8005a10 <_free_r+0x20>
 8005a32:	001a      	movs	r2, r3
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <_free_r+0x4e>
 8005a3a:	42a3      	cmp	r3, r4
 8005a3c:	d9f9      	bls.n	8005a32 <_free_r+0x42>
 8005a3e:	6811      	ldr	r1, [r2, #0]
 8005a40:	1850      	adds	r0, r2, r1
 8005a42:	42a0      	cmp	r0, r4
 8005a44:	d10b      	bne.n	8005a5e <_free_r+0x6e>
 8005a46:	6820      	ldr	r0, [r4, #0]
 8005a48:	1809      	adds	r1, r1, r0
 8005a4a:	1850      	adds	r0, r2, r1
 8005a4c:	6011      	str	r1, [r2, #0]
 8005a4e:	4283      	cmp	r3, r0
 8005a50:	d1e0      	bne.n	8005a14 <_free_r+0x24>
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	1841      	adds	r1, r0, r1
 8005a58:	6011      	str	r1, [r2, #0]
 8005a5a:	6053      	str	r3, [r2, #4]
 8005a5c:	e7da      	b.n	8005a14 <_free_r+0x24>
 8005a5e:	42a0      	cmp	r0, r4
 8005a60:	d902      	bls.n	8005a68 <_free_r+0x78>
 8005a62:	230c      	movs	r3, #12
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	e7d5      	b.n	8005a14 <_free_r+0x24>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	1821      	adds	r1, r4, r0
 8005a6c:	428b      	cmp	r3, r1
 8005a6e:	d103      	bne.n	8005a78 <_free_r+0x88>
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	1809      	adds	r1, r1, r0
 8005a76:	6021      	str	r1, [r4, #0]
 8005a78:	6063      	str	r3, [r4, #4]
 8005a7a:	6054      	str	r4, [r2, #4]
 8005a7c:	e7ca      	b.n	8005a14 <_free_r+0x24>
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	200005a0 	.word	0x200005a0

08005a84 <__ssputs_r>:
 8005a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a86:	688e      	ldr	r6, [r1, #8]
 8005a88:	b085      	sub	sp, #20
 8005a8a:	001f      	movs	r7, r3
 8005a8c:	000c      	movs	r4, r1
 8005a8e:	680b      	ldr	r3, [r1, #0]
 8005a90:	9002      	str	r0, [sp, #8]
 8005a92:	9203      	str	r2, [sp, #12]
 8005a94:	42be      	cmp	r6, r7
 8005a96:	d830      	bhi.n	8005afa <__ssputs_r+0x76>
 8005a98:	210c      	movs	r1, #12
 8005a9a:	5e62      	ldrsh	r2, [r4, r1]
 8005a9c:	2190      	movs	r1, #144	@ 0x90
 8005a9e:	00c9      	lsls	r1, r1, #3
 8005aa0:	420a      	tst	r2, r1
 8005aa2:	d028      	beq.n	8005af6 <__ssputs_r+0x72>
 8005aa4:	2003      	movs	r0, #3
 8005aa6:	6921      	ldr	r1, [r4, #16]
 8005aa8:	1a5b      	subs	r3, r3, r1
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	6963      	ldr	r3, [r4, #20]
 8005aae:	4343      	muls	r3, r0
 8005ab0:	9801      	ldr	r0, [sp, #4]
 8005ab2:	0fdd      	lsrs	r5, r3, #31
 8005ab4:	18ed      	adds	r5, r5, r3
 8005ab6:	1c7b      	adds	r3, r7, #1
 8005ab8:	181b      	adds	r3, r3, r0
 8005aba:	106d      	asrs	r5, r5, #1
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	d900      	bls.n	8005ac2 <__ssputs_r+0x3e>
 8005ac0:	001d      	movs	r5, r3
 8005ac2:	0552      	lsls	r2, r2, #21
 8005ac4:	d528      	bpl.n	8005b18 <__ssputs_r+0x94>
 8005ac6:	0029      	movs	r1, r5
 8005ac8:	9802      	ldr	r0, [sp, #8]
 8005aca:	f7ff fca1 	bl	8005410 <_malloc_r>
 8005ace:	1e06      	subs	r6, r0, #0
 8005ad0:	d02c      	beq.n	8005b2c <__ssputs_r+0xa8>
 8005ad2:	9a01      	ldr	r2, [sp, #4]
 8005ad4:	6921      	ldr	r1, [r4, #16]
 8005ad6:	f7ff ff64 	bl	80059a2 <memcpy>
 8005ada:	89a2      	ldrh	r2, [r4, #12]
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <__ssputs_r+0xbc>)
 8005ade:	401a      	ands	r2, r3
 8005ae0:	2380      	movs	r3, #128	@ 0x80
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	6126      	str	r6, [r4, #16]
 8005aea:	18f6      	adds	r6, r6, r3
 8005aec:	6026      	str	r6, [r4, #0]
 8005aee:	003e      	movs	r6, r7
 8005af0:	6165      	str	r5, [r4, #20]
 8005af2:	1aed      	subs	r5, r5, r3
 8005af4:	60a5      	str	r5, [r4, #8]
 8005af6:	42be      	cmp	r6, r7
 8005af8:	d900      	bls.n	8005afc <__ssputs_r+0x78>
 8005afa:	003e      	movs	r6, r7
 8005afc:	0032      	movs	r2, r6
 8005afe:	9903      	ldr	r1, [sp, #12]
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	f000 fef3 	bl	80068ec <memmove>
 8005b06:	2000      	movs	r0, #0
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	1b9b      	subs	r3, r3, r6
 8005b0c:	60a3      	str	r3, [r4, #8]
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	199b      	adds	r3, r3, r6
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	b005      	add	sp, #20
 8005b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b18:	002a      	movs	r2, r5
 8005b1a:	9802      	ldr	r0, [sp, #8]
 8005b1c:	f000 ff0a 	bl	8006934 <_realloc_r>
 8005b20:	1e06      	subs	r6, r0, #0
 8005b22:	d1e0      	bne.n	8005ae6 <__ssputs_r+0x62>
 8005b24:	6921      	ldr	r1, [r4, #16]
 8005b26:	9802      	ldr	r0, [sp, #8]
 8005b28:	f7ff ff62 	bl	80059f0 <_free_r>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	2001      	movs	r0, #1
 8005b30:	9a02      	ldr	r2, [sp, #8]
 8005b32:	4240      	negs	r0, r0
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	89a2      	ldrh	r2, [r4, #12]
 8005b38:	3334      	adds	r3, #52	@ 0x34
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	e7e9      	b.n	8005b14 <__ssputs_r+0x90>
 8005b40:	fffffb7f 	.word	0xfffffb7f

08005b44 <_svfiprintf_r>:
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	b0a1      	sub	sp, #132	@ 0x84
 8005b48:	9003      	str	r0, [sp, #12]
 8005b4a:	001d      	movs	r5, r3
 8005b4c:	898b      	ldrh	r3, [r1, #12]
 8005b4e:	000f      	movs	r7, r1
 8005b50:	0016      	movs	r6, r2
 8005b52:	061b      	lsls	r3, r3, #24
 8005b54:	d511      	bpl.n	8005b7a <_svfiprintf_r+0x36>
 8005b56:	690b      	ldr	r3, [r1, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10e      	bne.n	8005b7a <_svfiprintf_r+0x36>
 8005b5c:	2140      	movs	r1, #64	@ 0x40
 8005b5e:	f7ff fc57 	bl	8005410 <_malloc_r>
 8005b62:	6038      	str	r0, [r7, #0]
 8005b64:	6138      	str	r0, [r7, #16]
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d105      	bne.n	8005b76 <_svfiprintf_r+0x32>
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	9a03      	ldr	r2, [sp, #12]
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	2001      	movs	r0, #1
 8005b72:	4240      	negs	r0, r0
 8005b74:	e0cf      	b.n	8005d16 <_svfiprintf_r+0x1d2>
 8005b76:	2340      	movs	r3, #64	@ 0x40
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	ac08      	add	r4, sp, #32
 8005b7e:	6163      	str	r3, [r4, #20]
 8005b80:	3320      	adds	r3, #32
 8005b82:	7663      	strb	r3, [r4, #25]
 8005b84:	3310      	adds	r3, #16
 8005b86:	76a3      	strb	r3, [r4, #26]
 8005b88:	9507      	str	r5, [sp, #28]
 8005b8a:	0035      	movs	r5, r6
 8005b8c:	782b      	ldrb	r3, [r5, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <_svfiprintf_r+0x52>
 8005b92:	2b25      	cmp	r3, #37	@ 0x25
 8005b94:	d148      	bne.n	8005c28 <_svfiprintf_r+0xe4>
 8005b96:	1bab      	subs	r3, r5, r6
 8005b98:	9305      	str	r3, [sp, #20]
 8005b9a:	42b5      	cmp	r5, r6
 8005b9c:	d00b      	beq.n	8005bb6 <_svfiprintf_r+0x72>
 8005b9e:	0032      	movs	r2, r6
 8005ba0:	0039      	movs	r1, r7
 8005ba2:	9803      	ldr	r0, [sp, #12]
 8005ba4:	f7ff ff6e 	bl	8005a84 <__ssputs_r>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d100      	bne.n	8005bae <_svfiprintf_r+0x6a>
 8005bac:	e0ae      	b.n	8005d0c <_svfiprintf_r+0x1c8>
 8005bae:	6963      	ldr	r3, [r4, #20]
 8005bb0:	9a05      	ldr	r2, [sp, #20]
 8005bb2:	189b      	adds	r3, r3, r2
 8005bb4:	6163      	str	r3, [r4, #20]
 8005bb6:	782b      	ldrb	r3, [r5, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d100      	bne.n	8005bbe <_svfiprintf_r+0x7a>
 8005bbc:	e0a6      	b.n	8005d0c <_svfiprintf_r+0x1c8>
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	4252      	negs	r2, r2
 8005bc4:	6062      	str	r2, [r4, #4]
 8005bc6:	a904      	add	r1, sp, #16
 8005bc8:	3254      	adds	r2, #84	@ 0x54
 8005bca:	1852      	adds	r2, r2, r1
 8005bcc:	1c6e      	adds	r6, r5, #1
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	60e3      	str	r3, [r4, #12]
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	7013      	strb	r3, [r2, #0]
 8005bd6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005bd8:	4b54      	ldr	r3, [pc, #336]	@ (8005d2c <_svfiprintf_r+0x1e8>)
 8005bda:	2205      	movs	r2, #5
 8005bdc:	0018      	movs	r0, r3
 8005bde:	7831      	ldrb	r1, [r6, #0]
 8005be0:	9305      	str	r3, [sp, #20]
 8005be2:	f000 fe95 	bl	8006910 <memchr>
 8005be6:	1c75      	adds	r5, r6, #1
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d11f      	bne.n	8005c2c <_svfiprintf_r+0xe8>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	06d3      	lsls	r3, r2, #27
 8005bf0:	d504      	bpl.n	8005bfc <_svfiprintf_r+0xb8>
 8005bf2:	2353      	movs	r3, #83	@ 0x53
 8005bf4:	a904      	add	r1, sp, #16
 8005bf6:	185b      	adds	r3, r3, r1
 8005bf8:	2120      	movs	r1, #32
 8005bfa:	7019      	strb	r1, [r3, #0]
 8005bfc:	0713      	lsls	r3, r2, #28
 8005bfe:	d504      	bpl.n	8005c0a <_svfiprintf_r+0xc6>
 8005c00:	2353      	movs	r3, #83	@ 0x53
 8005c02:	a904      	add	r1, sp, #16
 8005c04:	185b      	adds	r3, r3, r1
 8005c06:	212b      	movs	r1, #43	@ 0x2b
 8005c08:	7019      	strb	r1, [r3, #0]
 8005c0a:	7833      	ldrb	r3, [r6, #0]
 8005c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c0e:	d016      	beq.n	8005c3e <_svfiprintf_r+0xfa>
 8005c10:	0035      	movs	r5, r6
 8005c12:	2100      	movs	r1, #0
 8005c14:	200a      	movs	r0, #10
 8005c16:	68e3      	ldr	r3, [r4, #12]
 8005c18:	782a      	ldrb	r2, [r5, #0]
 8005c1a:	1c6e      	adds	r6, r5, #1
 8005c1c:	3a30      	subs	r2, #48	@ 0x30
 8005c1e:	2a09      	cmp	r2, #9
 8005c20:	d950      	bls.n	8005cc4 <_svfiprintf_r+0x180>
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d111      	bne.n	8005c4a <_svfiprintf_r+0x106>
 8005c26:	e017      	b.n	8005c58 <_svfiprintf_r+0x114>
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7af      	b.n	8005b8c <_svfiprintf_r+0x48>
 8005c2c:	9b05      	ldr	r3, [sp, #20]
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	1ac0      	subs	r0, r0, r3
 8005c32:	2301      	movs	r3, #1
 8005c34:	4083      	lsls	r3, r0
 8005c36:	4313      	orrs	r3, r2
 8005c38:	002e      	movs	r6, r5
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	e7cc      	b.n	8005bd8 <_svfiprintf_r+0x94>
 8005c3e:	9b07      	ldr	r3, [sp, #28]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	9107      	str	r1, [sp, #28]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	db01      	blt.n	8005c4e <_svfiprintf_r+0x10a>
 8005c4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c4c:	e004      	b.n	8005c58 <_svfiprintf_r+0x114>
 8005c4e:	425b      	negs	r3, r3
 8005c50:	60e3      	str	r3, [r4, #12]
 8005c52:	2302      	movs	r3, #2
 8005c54:	4313      	orrs	r3, r2
 8005c56:	6023      	str	r3, [r4, #0]
 8005c58:	782b      	ldrb	r3, [r5, #0]
 8005c5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c5c:	d10c      	bne.n	8005c78 <_svfiprintf_r+0x134>
 8005c5e:	786b      	ldrb	r3, [r5, #1]
 8005c60:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c62:	d134      	bne.n	8005cce <_svfiprintf_r+0x18a>
 8005c64:	9b07      	ldr	r3, [sp, #28]
 8005c66:	3502      	adds	r5, #2
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	9207      	str	r2, [sp, #28]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da01      	bge.n	8005c76 <_svfiprintf_r+0x132>
 8005c72:	2301      	movs	r3, #1
 8005c74:	425b      	negs	r3, r3
 8005c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c78:	4e2d      	ldr	r6, [pc, #180]	@ (8005d30 <_svfiprintf_r+0x1ec>)
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	0030      	movs	r0, r6
 8005c7e:	7829      	ldrb	r1, [r5, #0]
 8005c80:	f000 fe46 	bl	8006910 <memchr>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d006      	beq.n	8005c96 <_svfiprintf_r+0x152>
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	1b80      	subs	r0, r0, r6
 8005c8c:	4083      	lsls	r3, r0
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	3501      	adds	r5, #1
 8005c92:	4313      	orrs	r3, r2
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	7829      	ldrb	r1, [r5, #0]
 8005c98:	2206      	movs	r2, #6
 8005c9a:	4826      	ldr	r0, [pc, #152]	@ (8005d34 <_svfiprintf_r+0x1f0>)
 8005c9c:	1c6e      	adds	r6, r5, #1
 8005c9e:	7621      	strb	r1, [r4, #24]
 8005ca0:	f000 fe36 	bl	8006910 <memchr>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d038      	beq.n	8005d1a <_svfiprintf_r+0x1d6>
 8005ca8:	4b23      	ldr	r3, [pc, #140]	@ (8005d38 <_svfiprintf_r+0x1f4>)
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d122      	bne.n	8005cf4 <_svfiprintf_r+0x1b0>
 8005cae:	2207      	movs	r2, #7
 8005cb0:	9b07      	ldr	r3, [sp, #28]
 8005cb2:	3307      	adds	r3, #7
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	9307      	str	r3, [sp, #28]
 8005cba:	6963      	ldr	r3, [r4, #20]
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	189b      	adds	r3, r3, r2
 8005cc0:	6163      	str	r3, [r4, #20]
 8005cc2:	e762      	b.n	8005b8a <_svfiprintf_r+0x46>
 8005cc4:	4343      	muls	r3, r0
 8005cc6:	0035      	movs	r5, r6
 8005cc8:	2101      	movs	r1, #1
 8005cca:	189b      	adds	r3, r3, r2
 8005ccc:	e7a4      	b.n	8005c18 <_svfiprintf_r+0xd4>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	200a      	movs	r0, #10
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	782a      	ldrb	r2, [r5, #0]
 8005cda:	1c6e      	adds	r6, r5, #1
 8005cdc:	3a30      	subs	r2, #48	@ 0x30
 8005cde:	2a09      	cmp	r2, #9
 8005ce0:	d903      	bls.n	8005cea <_svfiprintf_r+0x1a6>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0c8      	beq.n	8005c78 <_svfiprintf_r+0x134>
 8005ce6:	9109      	str	r1, [sp, #36]	@ 0x24
 8005ce8:	e7c6      	b.n	8005c78 <_svfiprintf_r+0x134>
 8005cea:	4341      	muls	r1, r0
 8005cec:	0035      	movs	r5, r6
 8005cee:	2301      	movs	r3, #1
 8005cf0:	1889      	adds	r1, r1, r2
 8005cf2:	e7f1      	b.n	8005cd8 <_svfiprintf_r+0x194>
 8005cf4:	aa07      	add	r2, sp, #28
 8005cf6:	9200      	str	r2, [sp, #0]
 8005cf8:	0021      	movs	r1, r4
 8005cfa:	003a      	movs	r2, r7
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8005d3c <_svfiprintf_r+0x1f8>)
 8005cfe:	9803      	ldr	r0, [sp, #12]
 8005d00:	e000      	b.n	8005d04 <_svfiprintf_r+0x1c0>
 8005d02:	bf00      	nop
 8005d04:	9004      	str	r0, [sp, #16]
 8005d06:	9b04      	ldr	r3, [sp, #16]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	d1d6      	bne.n	8005cba <_svfiprintf_r+0x176>
 8005d0c:	89bb      	ldrh	r3, [r7, #12]
 8005d0e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005d10:	065b      	lsls	r3, r3, #25
 8005d12:	d500      	bpl.n	8005d16 <_svfiprintf_r+0x1d2>
 8005d14:	e72c      	b.n	8005b70 <_svfiprintf_r+0x2c>
 8005d16:	b021      	add	sp, #132	@ 0x84
 8005d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1a:	aa07      	add	r2, sp, #28
 8005d1c:	9200      	str	r2, [sp, #0]
 8005d1e:	0021      	movs	r1, r4
 8005d20:	003a      	movs	r2, r7
 8005d22:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <_svfiprintf_r+0x1f8>)
 8005d24:	9803      	ldr	r0, [sp, #12]
 8005d26:	f000 fa3b 	bl	80061a0 <_printf_i>
 8005d2a:	e7eb      	b.n	8005d04 <_svfiprintf_r+0x1c0>
 8005d2c:	080078a9 	.word	0x080078a9
 8005d30:	080078af 	.word	0x080078af
 8005d34:	080078b3 	.word	0x080078b3
 8005d38:	00000000 	.word	0x00000000
 8005d3c:	08005a85 	.word	0x08005a85

08005d40 <_sungetc_r>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	0014      	movs	r4, r2
 8005d44:	1c4b      	adds	r3, r1, #1
 8005d46:	d103      	bne.n	8005d50 <_sungetc_r+0x10>
 8005d48:	2501      	movs	r5, #1
 8005d4a:	426d      	negs	r5, r5
 8005d4c:	0028      	movs	r0, r5
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	8993      	ldrh	r3, [r2, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	4393      	bics	r3, r2
 8005d56:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	b2ce      	uxtb	r6, r1
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	b2cd      	uxtb	r5, r1
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	d010      	beq.n	8005d86 <_sungetc_r+0x46>
 8005d64:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005d66:	429a      	cmp	r2, r3
 8005d68:	dd07      	ble.n	8005d7a <_sungetc_r+0x3a>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	701e      	strb	r6, [r3, #0]
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	3301      	adds	r3, #1
 8005d76:	6063      	str	r3, [r4, #4]
 8005d78:	e7e8      	b.n	8005d4c <_sungetc_r+0xc>
 8005d7a:	0021      	movs	r1, r4
 8005d7c:	f000 fd78 	bl	8006870 <__submore>
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0f2      	beq.n	8005d6a <_sungetc_r+0x2a>
 8005d84:	e7e0      	b.n	8005d48 <_sungetc_r+0x8>
 8005d86:	6921      	ldr	r1, [r4, #16]
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	2900      	cmp	r1, #0
 8005d8c:	d007      	beq.n	8005d9e <_sungetc_r+0x5e>
 8005d8e:	4291      	cmp	r1, r2
 8005d90:	d205      	bcs.n	8005d9e <_sungetc_r+0x5e>
 8005d92:	1e51      	subs	r1, r2, #1
 8005d94:	7808      	ldrb	r0, [r1, #0]
 8005d96:	42a8      	cmp	r0, r5
 8005d98:	d101      	bne.n	8005d9e <_sungetc_r+0x5e>
 8005d9a:	6021      	str	r1, [r4, #0]
 8005d9c:	e7ea      	b.n	8005d74 <_sungetc_r+0x34>
 8005d9e:	6423      	str	r3, [r4, #64]	@ 0x40
 8005da0:	0023      	movs	r3, r4
 8005da2:	3344      	adds	r3, #68	@ 0x44
 8005da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005da6:	2303      	movs	r3, #3
 8005da8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005daa:	0023      	movs	r3, r4
 8005dac:	3346      	adds	r3, #70	@ 0x46
 8005dae:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8005db0:	701e      	strb	r6, [r3, #0]
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	2301      	movs	r3, #1
 8005db6:	e7de      	b.n	8005d76 <_sungetc_r+0x36>

08005db8 <__ssrefill_r>:
 8005db8:	b510      	push	{r4, lr}
 8005dba:	000c      	movs	r4, r1
 8005dbc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	d00e      	beq.n	8005de0 <__ssrefill_r+0x28>
 8005dc2:	0023      	movs	r3, r4
 8005dc4:	3344      	adds	r3, #68	@ 0x44
 8005dc6:	4299      	cmp	r1, r3
 8005dc8:	d001      	beq.n	8005dce <__ssrefill_r+0x16>
 8005dca:	f7ff fe11 	bl	80059f0 <_free_r>
 8005dce:	2000      	movs	r0, #0
 8005dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dd2:	6360      	str	r0, [r4, #52]	@ 0x34
 8005dd4:	6063      	str	r3, [r4, #4]
 8005dd6:	4283      	cmp	r3, r0
 8005dd8:	d002      	beq.n	8005de0 <__ssrefill_r+0x28>
 8005dda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd10      	pop	{r4, pc}
 8005de0:	6923      	ldr	r3, [r4, #16]
 8005de2:	2001      	movs	r0, #1
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	2300      	movs	r3, #0
 8005de8:	89a2      	ldrh	r2, [r4, #12]
 8005dea:	6063      	str	r3, [r4, #4]
 8005dec:	3320      	adds	r3, #32
 8005dee:	4313      	orrs	r3, r2
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	4240      	negs	r0, r0
 8005df4:	e7f3      	b.n	8005dde <__ssrefill_r+0x26>
	...

08005df8 <__ssvfiscanf_r>:
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	4cab      	ldr	r4, [pc, #684]	@ (80060a8 <__ssvfiscanf_r+0x2b0>)
 8005dfc:	44a5      	add	sp, r4
 8005dfe:	000c      	movs	r4, r1
 8005e00:	2100      	movs	r1, #0
 8005e02:	9000      	str	r0, [sp, #0]
 8005e04:	20be      	movs	r0, #190	@ 0xbe
 8005e06:	9146      	str	r1, [sp, #280]	@ 0x118
 8005e08:	9147      	str	r1, [sp, #284]	@ 0x11c
 8005e0a:	a903      	add	r1, sp, #12
 8005e0c:	9148      	str	r1, [sp, #288]	@ 0x120
 8005e0e:	49a7      	ldr	r1, [pc, #668]	@ (80060ac <__ssvfiscanf_r+0x2b4>)
 8005e10:	0040      	lsls	r0, r0, #1
 8005e12:	ad43      	add	r5, sp, #268	@ 0x10c
 8005e14:	5029      	str	r1, [r5, r0]
 8005e16:	49a6      	ldr	r1, [pc, #664]	@ (80060b0 <__ssvfiscanf_r+0x2b8>)
 8005e18:	3004      	adds	r0, #4
 8005e1a:	ad43      	add	r5, sp, #268	@ 0x10c
 8005e1c:	5029      	str	r1, [r5, r0]
 8005e1e:	9302      	str	r3, [sp, #8]
 8005e20:	7816      	ldrb	r6, [r2, #0]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d100      	bne.n	8005e28 <__ssvfiscanf_r+0x30>
 8005e26:	e13c      	b.n	80060a2 <__ssvfiscanf_r+0x2aa>
 8005e28:	2308      	movs	r3, #8
 8005e2a:	2008      	movs	r0, #8
 8005e2c:	4da1      	ldr	r5, [pc, #644]	@ (80060b4 <__ssvfiscanf_r+0x2bc>)
 8005e2e:	1c57      	adds	r7, r2, #1
 8005e30:	5da9      	ldrb	r1, [r5, r6]
 8005e32:	400b      	ands	r3, r1
 8005e34:	4201      	tst	r1, r0
 8005e36:	d01d      	beq.n	8005e74 <__ssvfiscanf_r+0x7c>
 8005e38:	0006      	movs	r6, r0
 8005e3a:	6863      	ldr	r3, [r4, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dd0f      	ble.n	8005e60 <__ssvfiscanf_r+0x68>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	781a      	ldrb	r2, [r3, #0]
 8005e44:	5caa      	ldrb	r2, [r5, r2]
 8005e46:	4232      	tst	r2, r6
 8005e48:	d101      	bne.n	8005e4e <__ssvfiscanf_r+0x56>
 8005e4a:	003a      	movs	r2, r7
 8005e4c:	e7e8      	b.n	8005e20 <__ssvfiscanf_r+0x28>
 8005e4e:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005e50:	3301      	adds	r3, #1
 8005e52:	3201      	adds	r2, #1
 8005e54:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005e56:	6862      	ldr	r2, [r4, #4]
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	3a01      	subs	r2, #1
 8005e5c:	6062      	str	r2, [r4, #4]
 8005e5e:	e7ec      	b.n	8005e3a <__ssvfiscanf_r+0x42>
 8005e60:	22c0      	movs	r2, #192	@ 0xc0
 8005e62:	ab43      	add	r3, sp, #268	@ 0x10c
 8005e64:	0052      	lsls	r2, r2, #1
 8005e66:	0021      	movs	r1, r4
 8005e68:	589b      	ldr	r3, [r3, r2]
 8005e6a:	9800      	ldr	r0, [sp, #0]
 8005e6c:	4798      	blx	r3
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d0e6      	beq.n	8005e40 <__ssvfiscanf_r+0x48>
 8005e72:	e7ea      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 8005e74:	2e25      	cmp	r6, #37	@ 0x25
 8005e76:	d162      	bne.n	8005f3e <__ssvfiscanf_r+0x146>
 8005e78:	9345      	str	r3, [sp, #276]	@ 0x114
 8005e7a:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005e7c:	7853      	ldrb	r3, [r2, #1]
 8005e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e80:	d102      	bne.n	8005e88 <__ssvfiscanf_r+0x90>
 8005e82:	3b1a      	subs	r3, #26
 8005e84:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005e86:	1c97      	adds	r7, r2, #2
 8005e88:	003d      	movs	r5, r7
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	7829      	ldrb	r1, [r5, #0]
 8005e8e:	1c6f      	adds	r7, r5, #1
 8005e90:	000b      	movs	r3, r1
 8005e92:	3b30      	subs	r3, #48	@ 0x30
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d91f      	bls.n	8005ed8 <__ssvfiscanf_r+0xe0>
 8005e98:	4b87      	ldr	r3, [pc, #540]	@ (80060b8 <__ssvfiscanf_r+0x2c0>)
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	9301      	str	r3, [sp, #4]
 8005ea0:	f000 fd36 	bl	8006910 <memchr>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d007      	beq.n	8005eb8 <__ssvfiscanf_r+0xc0>
 8005ea8:	9b01      	ldr	r3, [sp, #4]
 8005eaa:	003d      	movs	r5, r7
 8005eac:	1ac0      	subs	r0, r0, r3
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4083      	lsls	r3, r0
 8005eb2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005eb8:	782b      	ldrb	r3, [r5, #0]
 8005eba:	1c6f      	adds	r7, r5, #1
 8005ebc:	2b78      	cmp	r3, #120	@ 0x78
 8005ebe:	d806      	bhi.n	8005ece <__ssvfiscanf_r+0xd6>
 8005ec0:	2b57      	cmp	r3, #87	@ 0x57
 8005ec2:	d810      	bhi.n	8005ee6 <__ssvfiscanf_r+0xee>
 8005ec4:	2b25      	cmp	r3, #37	@ 0x25
 8005ec6:	d03a      	beq.n	8005f3e <__ssvfiscanf_r+0x146>
 8005ec8:	d834      	bhi.n	8005f34 <__ssvfiscanf_r+0x13c>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d055      	beq.n	8005f7a <__ssvfiscanf_r+0x182>
 8005ece:	2303      	movs	r3, #3
 8005ed0:	9349      	str	r3, [sp, #292]	@ 0x124
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	9344      	str	r3, [sp, #272]	@ 0x110
 8005ed6:	e069      	b.n	8005fac <__ssvfiscanf_r+0x1b4>
 8005ed8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8005eda:	003d      	movs	r5, r7
 8005edc:	4353      	muls	r3, r2
 8005ede:	3b30      	subs	r3, #48	@ 0x30
 8005ee0:	185b      	adds	r3, r3, r1
 8005ee2:	9345      	str	r3, [sp, #276]	@ 0x114
 8005ee4:	e7d2      	b.n	8005e8c <__ssvfiscanf_r+0x94>
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	3858      	subs	r0, #88	@ 0x58
 8005eea:	2820      	cmp	r0, #32
 8005eec:	d8ef      	bhi.n	8005ece <__ssvfiscanf_r+0xd6>
 8005eee:	f7fa f91d 	bl	800012c <__gnu_thumb1_case_shi>
 8005ef2:	004b      	.short	0x004b
 8005ef4:	ffeeffee 	.word	0xffeeffee
 8005ef8:	ffee007d 	.word	0xffee007d
 8005efc:	ffeeffee 	.word	0xffeeffee
 8005f00:	ffeeffee 	.word	0xffeeffee
 8005f04:	ffeeffee 	.word	0xffeeffee
 8005f08:	007b0088 	.word	0x007b0088
 8005f0c:	00240024 	.word	0x00240024
 8005f10:	ffee0024 	.word	0xffee0024
 8005f14:	ffee0055 	.word	0xffee0055
 8005f18:	ffeeffee 	.word	0xffeeffee
 8005f1c:	0090ffee 	.word	0x0090ffee
 8005f20:	00470059 	.word	0x00470059
 8005f24:	ffeeffee 	.word	0xffeeffee
 8005f28:	ffee008e 	.word	0xffee008e
 8005f2c:	ffee007b 	.word	0xffee007b
 8005f30:	004bffee 	.word	0x004bffee
 8005f34:	3b45      	subs	r3, #69	@ 0x45
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d8c9      	bhi.n	8005ece <__ssvfiscanf_r+0xd6>
 8005f3a:	2305      	movs	r3, #5
 8005f3c:	e035      	b.n	8005faa <__ssvfiscanf_r+0x1b2>
 8005f3e:	6863      	ldr	r3, [r4, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	dd0d      	ble.n	8005f60 <__ssvfiscanf_r+0x168>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	781a      	ldrb	r2, [r3, #0]
 8005f48:	42b2      	cmp	r2, r6
 8005f4a:	d000      	beq.n	8005f4e <__ssvfiscanf_r+0x156>
 8005f4c:	e0a9      	b.n	80060a2 <__ssvfiscanf_r+0x2aa>
 8005f4e:	3301      	adds	r3, #1
 8005f50:	6862      	ldr	r2, [r4, #4]
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005f56:	3a01      	subs	r2, #1
 8005f58:	3301      	adds	r3, #1
 8005f5a:	6062      	str	r2, [r4, #4]
 8005f5c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005f5e:	e774      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 8005f60:	23c0      	movs	r3, #192	@ 0xc0
 8005f62:	aa43      	add	r2, sp, #268	@ 0x10c
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	0021      	movs	r1, r4
 8005f68:	58d3      	ldr	r3, [r2, r3]
 8005f6a:	9800      	ldr	r0, [sp, #0]
 8005f6c:	4798      	blx	r3
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d0e8      	beq.n	8005f44 <__ssvfiscanf_r+0x14c>
 8005f72:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d000      	beq.n	8005f7a <__ssvfiscanf_r+0x182>
 8005f78:	e08b      	b.n	8006092 <__ssvfiscanf_r+0x29a>
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	4240      	negs	r0, r0
 8005f7e:	e08c      	b.n	800609a <__ssvfiscanf_r+0x2a2>
 8005f80:	2220      	movs	r2, #32
 8005f82:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005f84:	430a      	orrs	r2, r1
 8005f86:	9243      	str	r2, [sp, #268]	@ 0x10c
 8005f88:	2280      	movs	r2, #128	@ 0x80
 8005f8a:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8005f8c:	0092      	lsls	r2, r2, #2
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	9243      	str	r2, [sp, #268]	@ 0x10c
 8005f92:	2210      	movs	r2, #16
 8005f94:	9244      	str	r2, [sp, #272]	@ 0x110
 8005f96:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f98:	d902      	bls.n	8005fa0 <__ssvfiscanf_r+0x1a8>
 8005f9a:	e005      	b.n	8005fa8 <__ssvfiscanf_r+0x1b0>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9344      	str	r3, [sp, #272]	@ 0x110
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e002      	b.n	8005faa <__ssvfiscanf_r+0x1b2>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	9344      	str	r3, [sp, #272]	@ 0x110
 8005fa8:	2304      	movs	r3, #4
 8005faa:	9349      	str	r3, [sp, #292]	@ 0x124
 8005fac:	6863      	ldr	r3, [r4, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dd3e      	ble.n	8006030 <__ssvfiscanf_r+0x238>
 8005fb2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005fb4:	065b      	lsls	r3, r3, #25
 8005fb6:	d408      	bmi.n	8005fca <__ssvfiscanf_r+0x1d2>
 8005fb8:	26c0      	movs	r6, #192	@ 0xc0
 8005fba:	2508      	movs	r5, #8
 8005fbc:	0076      	lsls	r6, r6, #1
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	493c      	ldr	r1, [pc, #240]	@ (80060b4 <__ssvfiscanf_r+0x2bc>)
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	5c8a      	ldrb	r2, [r1, r2]
 8005fc6:	422a      	tst	r2, r5
 8005fc8:	d13c      	bne.n	8006044 <__ssvfiscanf_r+0x24c>
 8005fca:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	dc4c      	bgt.n	800606a <__ssvfiscanf_r+0x272>
 8005fd0:	0022      	movs	r2, r4
 8005fd2:	9800      	ldr	r0, [sp, #0]
 8005fd4:	ab02      	add	r3, sp, #8
 8005fd6:	a943      	add	r1, sp, #268	@ 0x10c
 8005fd8:	f000 f9ee 	bl	80063b8 <_scanf_chars>
 8005fdc:	2801      	cmp	r0, #1
 8005fde:	d060      	beq.n	80060a2 <__ssvfiscanf_r+0x2aa>
 8005fe0:	2802      	cmp	r0, #2
 8005fe2:	d000      	beq.n	8005fe6 <__ssvfiscanf_r+0x1ee>
 8005fe4:	e731      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 8005fe6:	e7c4      	b.n	8005f72 <__ssvfiscanf_r+0x17a>
 8005fe8:	220a      	movs	r2, #10
 8005fea:	e7d3      	b.n	8005f94 <__ssvfiscanf_r+0x19c>
 8005fec:	0039      	movs	r1, r7
 8005fee:	a803      	add	r0, sp, #12
 8005ff0:	f000 fc04 	bl	80067fc <__sccl>
 8005ff4:	2340      	movs	r3, #64	@ 0x40
 8005ff6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005ff8:	0007      	movs	r7, r0
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005ffe:	2301      	movs	r3, #1
 8006000:	e7d3      	b.n	8005faa <__ssvfiscanf_r+0x1b2>
 8006002:	2340      	movs	r3, #64	@ 0x40
 8006004:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8006006:	4313      	orrs	r3, r2
 8006008:	9343      	str	r3, [sp, #268]	@ 0x10c
 800600a:	2300      	movs	r3, #0
 800600c:	e7cd      	b.n	8005faa <__ssvfiscanf_r+0x1b2>
 800600e:	2302      	movs	r3, #2
 8006010:	e7cb      	b.n	8005faa <__ssvfiscanf_r+0x1b2>
 8006012:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8006014:	06d3      	lsls	r3, r2, #27
 8006016:	d500      	bpl.n	800601a <__ssvfiscanf_r+0x222>
 8006018:	e717      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 800601a:	9b02      	ldr	r3, [sp, #8]
 800601c:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800601e:	1d18      	adds	r0, r3, #4
 8006020:	9002      	str	r0, [sp, #8]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	07d5      	lsls	r5, r2, #31
 8006026:	d501      	bpl.n	800602c <__ssvfiscanf_r+0x234>
 8006028:	8019      	strh	r1, [r3, #0]
 800602a:	e70e      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 800602c:	6019      	str	r1, [r3, #0]
 800602e:	e70c      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 8006030:	23c0      	movs	r3, #192	@ 0xc0
 8006032:	aa43      	add	r2, sp, #268	@ 0x10c
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	0021      	movs	r1, r4
 8006038:	58d3      	ldr	r3, [r2, r3]
 800603a:	9800      	ldr	r0, [sp, #0]
 800603c:	4798      	blx	r3
 800603e:	2800      	cmp	r0, #0
 8006040:	d0b7      	beq.n	8005fb2 <__ssvfiscanf_r+0x1ba>
 8006042:	e796      	b.n	8005f72 <__ssvfiscanf_r+0x17a>
 8006044:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8006046:	3201      	adds	r2, #1
 8006048:	9247      	str	r2, [sp, #284]	@ 0x11c
 800604a:	6862      	ldr	r2, [r4, #4]
 800604c:	3a01      	subs	r2, #1
 800604e:	6062      	str	r2, [r4, #4]
 8006050:	2a00      	cmp	r2, #0
 8006052:	dd02      	ble.n	800605a <__ssvfiscanf_r+0x262>
 8006054:	3301      	adds	r3, #1
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	e7b1      	b.n	8005fbe <__ssvfiscanf_r+0x1c6>
 800605a:	ab43      	add	r3, sp, #268	@ 0x10c
 800605c:	0021      	movs	r1, r4
 800605e:	599b      	ldr	r3, [r3, r6]
 8006060:	9800      	ldr	r0, [sp, #0]
 8006062:	4798      	blx	r3
 8006064:	2800      	cmp	r0, #0
 8006066:	d0aa      	beq.n	8005fbe <__ssvfiscanf_r+0x1c6>
 8006068:	e783      	b.n	8005f72 <__ssvfiscanf_r+0x17a>
 800606a:	2b04      	cmp	r3, #4
 800606c:	dc06      	bgt.n	800607c <__ssvfiscanf_r+0x284>
 800606e:	0022      	movs	r2, r4
 8006070:	9800      	ldr	r0, [sp, #0]
 8006072:	ab02      	add	r3, sp, #8
 8006074:	a943      	add	r1, sp, #268	@ 0x10c
 8006076:	f000 f9ff 	bl	8006478 <_scanf_i>
 800607a:	e7af      	b.n	8005fdc <__ssvfiscanf_r+0x1e4>
 800607c:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <__ssvfiscanf_r+0x2c4>)
 800607e:	2b00      	cmp	r3, #0
 8006080:	d100      	bne.n	8006084 <__ssvfiscanf_r+0x28c>
 8006082:	e6e2      	b.n	8005e4a <__ssvfiscanf_r+0x52>
 8006084:	0022      	movs	r2, r4
 8006086:	9800      	ldr	r0, [sp, #0]
 8006088:	ab02      	add	r3, sp, #8
 800608a:	a943      	add	r1, sp, #268	@ 0x10c
 800608c:	e000      	b.n	8006090 <__ssvfiscanf_r+0x298>
 800608e:	bf00      	nop
 8006090:	e7a4      	b.n	8005fdc <__ssvfiscanf_r+0x1e4>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	065b      	lsls	r3, r3, #25
 8006096:	d500      	bpl.n	800609a <__ssvfiscanf_r+0x2a2>
 8006098:	e76f      	b.n	8005f7a <__ssvfiscanf_r+0x182>
 800609a:	23a5      	movs	r3, #165	@ 0xa5
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	449d      	add	sp, r3
 80060a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a2:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80060a4:	e7f9      	b.n	800609a <__ssvfiscanf_r+0x2a2>
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	fffffd6c 	.word	0xfffffd6c
 80060ac:	08005d41 	.word	0x08005d41
 80060b0:	08005db9 	.word	0x08005db9
 80060b4:	080078f8 	.word	0x080078f8
 80060b8:	080078af 	.word	0x080078af
 80060bc:	00000000 	.word	0x00000000

080060c0 <_printf_common>:
 80060c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060c2:	0016      	movs	r6, r2
 80060c4:	9301      	str	r3, [sp, #4]
 80060c6:	688a      	ldr	r2, [r1, #8]
 80060c8:	690b      	ldr	r3, [r1, #16]
 80060ca:	000c      	movs	r4, r1
 80060cc:	9000      	str	r0, [sp, #0]
 80060ce:	4293      	cmp	r3, r2
 80060d0:	da00      	bge.n	80060d4 <_printf_common+0x14>
 80060d2:	0013      	movs	r3, r2
 80060d4:	0022      	movs	r2, r4
 80060d6:	6033      	str	r3, [r6, #0]
 80060d8:	3243      	adds	r2, #67	@ 0x43
 80060da:	7812      	ldrb	r2, [r2, #0]
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d001      	beq.n	80060e4 <_printf_common+0x24>
 80060e0:	3301      	adds	r3, #1
 80060e2:	6033      	str	r3, [r6, #0]
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	069b      	lsls	r3, r3, #26
 80060e8:	d502      	bpl.n	80060f0 <_printf_common+0x30>
 80060ea:	6833      	ldr	r3, [r6, #0]
 80060ec:	3302      	adds	r3, #2
 80060ee:	6033      	str	r3, [r6, #0]
 80060f0:	6822      	ldr	r2, [r4, #0]
 80060f2:	2306      	movs	r3, #6
 80060f4:	0015      	movs	r5, r2
 80060f6:	401d      	ands	r5, r3
 80060f8:	421a      	tst	r2, r3
 80060fa:	d027      	beq.n	800614c <_printf_common+0x8c>
 80060fc:	0023      	movs	r3, r4
 80060fe:	3343      	adds	r3, #67	@ 0x43
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	1e5a      	subs	r2, r3, #1
 8006104:	4193      	sbcs	r3, r2
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	0692      	lsls	r2, r2, #26
 800610a:	d430      	bmi.n	800616e <_printf_common+0xae>
 800610c:	0022      	movs	r2, r4
 800610e:	9901      	ldr	r1, [sp, #4]
 8006110:	9800      	ldr	r0, [sp, #0]
 8006112:	9d08      	ldr	r5, [sp, #32]
 8006114:	3243      	adds	r2, #67	@ 0x43
 8006116:	47a8      	blx	r5
 8006118:	3001      	adds	r0, #1
 800611a:	d025      	beq.n	8006168 <_printf_common+0xa8>
 800611c:	2206      	movs	r2, #6
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	2500      	movs	r5, #0
 8006122:	4013      	ands	r3, r2
 8006124:	2b04      	cmp	r3, #4
 8006126:	d105      	bne.n	8006134 <_printf_common+0x74>
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	68e5      	ldr	r5, [r4, #12]
 800612c:	1aed      	subs	r5, r5, r3
 800612e:	43eb      	mvns	r3, r5
 8006130:	17db      	asrs	r3, r3, #31
 8006132:	401d      	ands	r5, r3
 8006134:	68a3      	ldr	r3, [r4, #8]
 8006136:	6922      	ldr	r2, [r4, #16]
 8006138:	4293      	cmp	r3, r2
 800613a:	dd01      	ble.n	8006140 <_printf_common+0x80>
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	18ed      	adds	r5, r5, r3
 8006140:	2600      	movs	r6, #0
 8006142:	42b5      	cmp	r5, r6
 8006144:	d120      	bne.n	8006188 <_printf_common+0xc8>
 8006146:	2000      	movs	r0, #0
 8006148:	e010      	b.n	800616c <_printf_common+0xac>
 800614a:	3501      	adds	r5, #1
 800614c:	68e3      	ldr	r3, [r4, #12]
 800614e:	6832      	ldr	r2, [r6, #0]
 8006150:	1a9b      	subs	r3, r3, r2
 8006152:	42ab      	cmp	r3, r5
 8006154:	ddd2      	ble.n	80060fc <_printf_common+0x3c>
 8006156:	0022      	movs	r2, r4
 8006158:	2301      	movs	r3, #1
 800615a:	9901      	ldr	r1, [sp, #4]
 800615c:	9800      	ldr	r0, [sp, #0]
 800615e:	9f08      	ldr	r7, [sp, #32]
 8006160:	3219      	adds	r2, #25
 8006162:	47b8      	blx	r7
 8006164:	3001      	adds	r0, #1
 8006166:	d1f0      	bne.n	800614a <_printf_common+0x8a>
 8006168:	2001      	movs	r0, #1
 800616a:	4240      	negs	r0, r0
 800616c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800616e:	2030      	movs	r0, #48	@ 0x30
 8006170:	18e1      	adds	r1, r4, r3
 8006172:	3143      	adds	r1, #67	@ 0x43
 8006174:	7008      	strb	r0, [r1, #0]
 8006176:	0021      	movs	r1, r4
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	3145      	adds	r1, #69	@ 0x45
 800617c:	7809      	ldrb	r1, [r1, #0]
 800617e:	18a2      	adds	r2, r4, r2
 8006180:	3243      	adds	r2, #67	@ 0x43
 8006182:	3302      	adds	r3, #2
 8006184:	7011      	strb	r1, [r2, #0]
 8006186:	e7c1      	b.n	800610c <_printf_common+0x4c>
 8006188:	0022      	movs	r2, r4
 800618a:	2301      	movs	r3, #1
 800618c:	9901      	ldr	r1, [sp, #4]
 800618e:	9800      	ldr	r0, [sp, #0]
 8006190:	9f08      	ldr	r7, [sp, #32]
 8006192:	321a      	adds	r2, #26
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	d0e6      	beq.n	8006168 <_printf_common+0xa8>
 800619a:	3601      	adds	r6, #1
 800619c:	e7d1      	b.n	8006142 <_printf_common+0x82>
	...

080061a0 <_printf_i>:
 80061a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061a2:	b08b      	sub	sp, #44	@ 0x2c
 80061a4:	9206      	str	r2, [sp, #24]
 80061a6:	000a      	movs	r2, r1
 80061a8:	3243      	adds	r2, #67	@ 0x43
 80061aa:	9307      	str	r3, [sp, #28]
 80061ac:	9005      	str	r0, [sp, #20]
 80061ae:	9203      	str	r2, [sp, #12]
 80061b0:	7e0a      	ldrb	r2, [r1, #24]
 80061b2:	000c      	movs	r4, r1
 80061b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80061b6:	2a78      	cmp	r2, #120	@ 0x78
 80061b8:	d809      	bhi.n	80061ce <_printf_i+0x2e>
 80061ba:	2a62      	cmp	r2, #98	@ 0x62
 80061bc:	d80b      	bhi.n	80061d6 <_printf_i+0x36>
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d100      	bne.n	80061c4 <_printf_i+0x24>
 80061c2:	e0ba      	b.n	800633a <_printf_i+0x19a>
 80061c4:	497a      	ldr	r1, [pc, #488]	@ (80063b0 <_printf_i+0x210>)
 80061c6:	9104      	str	r1, [sp, #16]
 80061c8:	2a58      	cmp	r2, #88	@ 0x58
 80061ca:	d100      	bne.n	80061ce <_printf_i+0x2e>
 80061cc:	e08e      	b.n	80062ec <_printf_i+0x14c>
 80061ce:	0025      	movs	r5, r4
 80061d0:	3542      	adds	r5, #66	@ 0x42
 80061d2:	702a      	strb	r2, [r5, #0]
 80061d4:	e022      	b.n	800621c <_printf_i+0x7c>
 80061d6:	0010      	movs	r0, r2
 80061d8:	3863      	subs	r0, #99	@ 0x63
 80061da:	2815      	cmp	r0, #21
 80061dc:	d8f7      	bhi.n	80061ce <_printf_i+0x2e>
 80061de:	f7f9 ffa5 	bl	800012c <__gnu_thumb1_case_shi>
 80061e2:	0016      	.short	0x0016
 80061e4:	fff6001f 	.word	0xfff6001f
 80061e8:	fff6fff6 	.word	0xfff6fff6
 80061ec:	001ffff6 	.word	0x001ffff6
 80061f0:	fff6fff6 	.word	0xfff6fff6
 80061f4:	fff6fff6 	.word	0xfff6fff6
 80061f8:	0036009f 	.word	0x0036009f
 80061fc:	fff6007e 	.word	0xfff6007e
 8006200:	00b0fff6 	.word	0x00b0fff6
 8006204:	0036fff6 	.word	0x0036fff6
 8006208:	fff6fff6 	.word	0xfff6fff6
 800620c:	0082      	.short	0x0082
 800620e:	0025      	movs	r5, r4
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	3542      	adds	r5, #66	@ 0x42
 8006214:	1d11      	adds	r1, r2, #4
 8006216:	6019      	str	r1, [r3, #0]
 8006218:	6813      	ldr	r3, [r2, #0]
 800621a:	702b      	strb	r3, [r5, #0]
 800621c:	2301      	movs	r3, #1
 800621e:	e09e      	b.n	800635e <_printf_i+0x1be>
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	6809      	ldr	r1, [r1, #0]
 8006224:	1d02      	adds	r2, r0, #4
 8006226:	060d      	lsls	r5, r1, #24
 8006228:	d50b      	bpl.n	8006242 <_printf_i+0xa2>
 800622a:	6806      	ldr	r6, [r0, #0]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	2e00      	cmp	r6, #0
 8006230:	da03      	bge.n	800623a <_printf_i+0x9a>
 8006232:	232d      	movs	r3, #45	@ 0x2d
 8006234:	9a03      	ldr	r2, [sp, #12]
 8006236:	4276      	negs	r6, r6
 8006238:	7013      	strb	r3, [r2, #0]
 800623a:	4b5d      	ldr	r3, [pc, #372]	@ (80063b0 <_printf_i+0x210>)
 800623c:	270a      	movs	r7, #10
 800623e:	9304      	str	r3, [sp, #16]
 8006240:	e018      	b.n	8006274 <_printf_i+0xd4>
 8006242:	6806      	ldr	r6, [r0, #0]
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	0649      	lsls	r1, r1, #25
 8006248:	d5f1      	bpl.n	800622e <_printf_i+0x8e>
 800624a:	b236      	sxth	r6, r6
 800624c:	e7ef      	b.n	800622e <_printf_i+0x8e>
 800624e:	6808      	ldr	r0, [r1, #0]
 8006250:	6819      	ldr	r1, [r3, #0]
 8006252:	c940      	ldmia	r1!, {r6}
 8006254:	0605      	lsls	r5, r0, #24
 8006256:	d402      	bmi.n	800625e <_printf_i+0xbe>
 8006258:	0640      	lsls	r0, r0, #25
 800625a:	d500      	bpl.n	800625e <_printf_i+0xbe>
 800625c:	b2b6      	uxth	r6, r6
 800625e:	6019      	str	r1, [r3, #0]
 8006260:	4b53      	ldr	r3, [pc, #332]	@ (80063b0 <_printf_i+0x210>)
 8006262:	270a      	movs	r7, #10
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	2a6f      	cmp	r2, #111	@ 0x6f
 8006268:	d100      	bne.n	800626c <_printf_i+0xcc>
 800626a:	3f02      	subs	r7, #2
 800626c:	0023      	movs	r3, r4
 800626e:	2200      	movs	r2, #0
 8006270:	3343      	adds	r3, #67	@ 0x43
 8006272:	701a      	strb	r2, [r3, #0]
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	60a3      	str	r3, [r4, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	db06      	blt.n	800628a <_printf_i+0xea>
 800627c:	2104      	movs	r1, #4
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	9d03      	ldr	r5, [sp, #12]
 8006282:	438a      	bics	r2, r1
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	4333      	orrs	r3, r6
 8006288:	d00c      	beq.n	80062a4 <_printf_i+0x104>
 800628a:	9d03      	ldr	r5, [sp, #12]
 800628c:	0030      	movs	r0, r6
 800628e:	0039      	movs	r1, r7
 8006290:	f7f9 ffdc 	bl	800024c <__aeabi_uidivmod>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	3d01      	subs	r5, #1
 8006298:	5c5b      	ldrb	r3, [r3, r1]
 800629a:	702b      	strb	r3, [r5, #0]
 800629c:	0033      	movs	r3, r6
 800629e:	0006      	movs	r6, r0
 80062a0:	429f      	cmp	r7, r3
 80062a2:	d9f3      	bls.n	800628c <_printf_i+0xec>
 80062a4:	2f08      	cmp	r7, #8
 80062a6:	d109      	bne.n	80062bc <_printf_i+0x11c>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	07db      	lsls	r3, r3, #31
 80062ac:	d506      	bpl.n	80062bc <_printf_i+0x11c>
 80062ae:	6862      	ldr	r2, [r4, #4]
 80062b0:	6923      	ldr	r3, [r4, #16]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	dc02      	bgt.n	80062bc <_printf_i+0x11c>
 80062b6:	2330      	movs	r3, #48	@ 0x30
 80062b8:	3d01      	subs	r5, #1
 80062ba:	702b      	strb	r3, [r5, #0]
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	1b5b      	subs	r3, r3, r5
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	9b07      	ldr	r3, [sp, #28]
 80062c4:	0021      	movs	r1, r4
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	9805      	ldr	r0, [sp, #20]
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	aa09      	add	r2, sp, #36	@ 0x24
 80062ce:	f7ff fef7 	bl	80060c0 <_printf_common>
 80062d2:	3001      	adds	r0, #1
 80062d4:	d148      	bne.n	8006368 <_printf_i+0x1c8>
 80062d6:	2001      	movs	r0, #1
 80062d8:	4240      	negs	r0, r0
 80062da:	b00b      	add	sp, #44	@ 0x2c
 80062dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062de:	2220      	movs	r2, #32
 80062e0:	6809      	ldr	r1, [r1, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	2278      	movs	r2, #120	@ 0x78
 80062e8:	4932      	ldr	r1, [pc, #200]	@ (80063b4 <_printf_i+0x214>)
 80062ea:	9104      	str	r1, [sp, #16]
 80062ec:	0021      	movs	r1, r4
 80062ee:	3145      	adds	r1, #69	@ 0x45
 80062f0:	700a      	strb	r2, [r1, #0]
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	c940      	ldmia	r1!, {r6}
 80062f8:	0610      	lsls	r0, r2, #24
 80062fa:	d402      	bmi.n	8006302 <_printf_i+0x162>
 80062fc:	0650      	lsls	r0, r2, #25
 80062fe:	d500      	bpl.n	8006302 <_printf_i+0x162>
 8006300:	b2b6      	uxth	r6, r6
 8006302:	6019      	str	r1, [r3, #0]
 8006304:	07d3      	lsls	r3, r2, #31
 8006306:	d502      	bpl.n	800630e <_printf_i+0x16e>
 8006308:	2320      	movs	r3, #32
 800630a:	4313      	orrs	r3, r2
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	2e00      	cmp	r6, #0
 8006310:	d001      	beq.n	8006316 <_printf_i+0x176>
 8006312:	2710      	movs	r7, #16
 8006314:	e7aa      	b.n	800626c <_printf_i+0xcc>
 8006316:	2220      	movs	r2, #32
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	4393      	bics	r3, r2
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	e7f8      	b.n	8006312 <_printf_i+0x172>
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	680d      	ldr	r5, [r1, #0]
 8006324:	1d10      	adds	r0, r2, #4
 8006326:	6949      	ldr	r1, [r1, #20]
 8006328:	6018      	str	r0, [r3, #0]
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	062e      	lsls	r6, r5, #24
 800632e:	d501      	bpl.n	8006334 <_printf_i+0x194>
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0x19a>
 8006334:	066d      	lsls	r5, r5, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0x190>
 8006338:	8019      	strh	r1, [r3, #0]
 800633a:	2300      	movs	r3, #0
 800633c:	9d03      	ldr	r5, [sp, #12]
 800633e:	6123      	str	r3, [r4, #16]
 8006340:	e7bf      	b.n	80062c2 <_printf_i+0x122>
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	1d11      	adds	r1, r2, #4
 8006346:	6019      	str	r1, [r3, #0]
 8006348:	6815      	ldr	r5, [r2, #0]
 800634a:	2100      	movs	r1, #0
 800634c:	0028      	movs	r0, r5
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	f000 fade 	bl	8006910 <memchr>
 8006354:	2800      	cmp	r0, #0
 8006356:	d001      	beq.n	800635c <_printf_i+0x1bc>
 8006358:	1b40      	subs	r0, r0, r5
 800635a:	6060      	str	r0, [r4, #4]
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	2300      	movs	r3, #0
 8006362:	9a03      	ldr	r2, [sp, #12]
 8006364:	7013      	strb	r3, [r2, #0]
 8006366:	e7ac      	b.n	80062c2 <_printf_i+0x122>
 8006368:	002a      	movs	r2, r5
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	9906      	ldr	r1, [sp, #24]
 800636e:	9805      	ldr	r0, [sp, #20]
 8006370:	9d07      	ldr	r5, [sp, #28]
 8006372:	47a8      	blx	r5
 8006374:	3001      	adds	r0, #1
 8006376:	d0ae      	beq.n	80062d6 <_printf_i+0x136>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d415      	bmi.n	80063aa <_printf_i+0x20a>
 800637e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006380:	68e0      	ldr	r0, [r4, #12]
 8006382:	4298      	cmp	r0, r3
 8006384:	daa9      	bge.n	80062da <_printf_i+0x13a>
 8006386:	0018      	movs	r0, r3
 8006388:	e7a7      	b.n	80062da <_printf_i+0x13a>
 800638a:	0022      	movs	r2, r4
 800638c:	2301      	movs	r3, #1
 800638e:	9906      	ldr	r1, [sp, #24]
 8006390:	9805      	ldr	r0, [sp, #20]
 8006392:	9e07      	ldr	r6, [sp, #28]
 8006394:	3219      	adds	r2, #25
 8006396:	47b0      	blx	r6
 8006398:	3001      	adds	r0, #1
 800639a:	d09c      	beq.n	80062d6 <_printf_i+0x136>
 800639c:	3501      	adds	r5, #1
 800639e:	68e3      	ldr	r3, [r4, #12]
 80063a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	42ab      	cmp	r3, r5
 80063a6:	dcf0      	bgt.n	800638a <_printf_i+0x1ea>
 80063a8:	e7e9      	b.n	800637e <_printf_i+0x1de>
 80063aa:	2500      	movs	r5, #0
 80063ac:	e7f7      	b.n	800639e <_printf_i+0x1fe>
 80063ae:	46c0      	nop			@ (mov r8, r8)
 80063b0:	080078ba 	.word	0x080078ba
 80063b4:	080078cb 	.word	0x080078cb

080063b8 <_scanf_chars>:
 80063b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ba:	0015      	movs	r5, r2
 80063bc:	688a      	ldr	r2, [r1, #8]
 80063be:	000c      	movs	r4, r1
 80063c0:	9001      	str	r0, [sp, #4]
 80063c2:	2a00      	cmp	r2, #0
 80063c4:	d104      	bne.n	80063d0 <_scanf_chars+0x18>
 80063c6:	698a      	ldr	r2, [r1, #24]
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	d117      	bne.n	80063fc <_scanf_chars+0x44>
 80063cc:	3201      	adds	r2, #1
 80063ce:	60a2      	str	r2, [r4, #8]
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	06d2      	lsls	r2, r2, #27
 80063d4:	d403      	bmi.n	80063de <_scanf_chars+0x26>
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	1d11      	adds	r1, r2, #4
 80063da:	6019      	str	r1, [r3, #0]
 80063dc:	6817      	ldr	r7, [r2, #0]
 80063de:	2600      	movs	r6, #0
 80063e0:	69a0      	ldr	r0, [r4, #24]
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d016      	beq.n	8006414 <_scanf_chars+0x5c>
 80063e6:	2801      	cmp	r0, #1
 80063e8:	d10b      	bne.n	8006402 <_scanf_chars+0x4a>
 80063ea:	682b      	ldr	r3, [r5, #0]
 80063ec:	6962      	ldr	r2, [r4, #20]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	5cd3      	ldrb	r3, [r2, r3]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10e      	bne.n	8006414 <_scanf_chars+0x5c>
 80063f6:	2e00      	cmp	r6, #0
 80063f8:	d03b      	beq.n	8006472 <_scanf_chars+0xba>
 80063fa:	e029      	b.n	8006450 <_scanf_chars+0x98>
 80063fc:	2201      	movs	r2, #1
 80063fe:	4252      	negs	r2, r2
 8006400:	e7e5      	b.n	80063ce <_scanf_chars+0x16>
 8006402:	2802      	cmp	r0, #2
 8006404:	d124      	bne.n	8006450 <_scanf_chars+0x98>
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	4a1a      	ldr	r2, [pc, #104]	@ (8006474 <_scanf_chars+0xbc>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	5cd3      	ldrb	r3, [r2, r3]
 800640e:	2208      	movs	r2, #8
 8006410:	4213      	tst	r3, r2
 8006412:	d11d      	bne.n	8006450 <_scanf_chars+0x98>
 8006414:	2210      	movs	r2, #16
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	3601      	adds	r6, #1
 800641a:	4213      	tst	r3, r2
 800641c:	d103      	bne.n	8006426 <_scanf_chars+0x6e>
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	703b      	strb	r3, [r7, #0]
 8006424:	3701      	adds	r7, #1
 8006426:	682a      	ldr	r2, [r5, #0]
 8006428:	686b      	ldr	r3, [r5, #4]
 800642a:	3201      	adds	r2, #1
 800642c:	602a      	str	r2, [r5, #0]
 800642e:	68a2      	ldr	r2, [r4, #8]
 8006430:	3b01      	subs	r3, #1
 8006432:	3a01      	subs	r2, #1
 8006434:	606b      	str	r3, [r5, #4]
 8006436:	60a2      	str	r2, [r4, #8]
 8006438:	2a00      	cmp	r2, #0
 800643a:	d009      	beq.n	8006450 <_scanf_chars+0x98>
 800643c:	2b00      	cmp	r3, #0
 800643e:	dccf      	bgt.n	80063e0 <_scanf_chars+0x28>
 8006440:	23c0      	movs	r3, #192	@ 0xc0
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	0029      	movs	r1, r5
 8006446:	58e3      	ldr	r3, [r4, r3]
 8006448:	9801      	ldr	r0, [sp, #4]
 800644a:	4798      	blx	r3
 800644c:	2800      	cmp	r0, #0
 800644e:	d0c7      	beq.n	80063e0 <_scanf_chars+0x28>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	2310      	movs	r3, #16
 8006454:	0011      	movs	r1, r2
 8006456:	4019      	ands	r1, r3
 8006458:	421a      	tst	r2, r3
 800645a:	d106      	bne.n	800646a <_scanf_chars+0xb2>
 800645c:	68e3      	ldr	r3, [r4, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	60e3      	str	r3, [r4, #12]
 8006462:	69a3      	ldr	r3, [r4, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d000      	beq.n	800646a <_scanf_chars+0xb2>
 8006468:	7039      	strb	r1, [r7, #0]
 800646a:	2000      	movs	r0, #0
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	199b      	adds	r3, r3, r6
 8006470:	6123      	str	r3, [r4, #16]
 8006472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006474:	080078f8 	.word	0x080078f8

08006478 <_scanf_i>:
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	b08b      	sub	sp, #44	@ 0x2c
 800647c:	9301      	str	r3, [sp, #4]
 800647e:	4b78      	ldr	r3, [pc, #480]	@ (8006660 <_scanf_i+0x1e8>)
 8006480:	0016      	movs	r6, r2
 8006482:	9004      	str	r0, [sp, #16]
 8006484:	aa07      	add	r2, sp, #28
 8006486:	cba1      	ldmia	r3!, {r0, r5, r7}
 8006488:	c2a1      	stmia	r2!, {r0, r5, r7}
 800648a:	4a76      	ldr	r2, [pc, #472]	@ (8006664 <_scanf_i+0x1ec>)
 800648c:	698b      	ldr	r3, [r1, #24]
 800648e:	000c      	movs	r4, r1
 8006490:	9205      	str	r2, [sp, #20]
 8006492:	2b03      	cmp	r3, #3
 8006494:	d101      	bne.n	800649a <_scanf_i+0x22>
 8006496:	4b74      	ldr	r3, [pc, #464]	@ (8006668 <_scanf_i+0x1f0>)
 8006498:	9305      	str	r3, [sp, #20]
 800649a:	22ae      	movs	r2, #174	@ 0xae
 800649c:	2000      	movs	r0, #0
 800649e:	68a3      	ldr	r3, [r4, #8]
 80064a0:	0052      	lsls	r2, r2, #1
 80064a2:	1e59      	subs	r1, r3, #1
 80064a4:	9003      	str	r0, [sp, #12]
 80064a6:	4291      	cmp	r1, r2
 80064a8:	d905      	bls.n	80064b6 <_scanf_i+0x3e>
 80064aa:	3b5e      	subs	r3, #94	@ 0x5e
 80064ac:	3bff      	subs	r3, #255	@ 0xff
 80064ae:	9303      	str	r3, [sp, #12]
 80064b0:	235e      	movs	r3, #94	@ 0x5e
 80064b2:	33ff      	adds	r3, #255	@ 0xff
 80064b4:	60a3      	str	r3, [r4, #8]
 80064b6:	0023      	movs	r3, r4
 80064b8:	331c      	adds	r3, #28
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	23d0      	movs	r3, #208	@ 0xd0
 80064be:	2700      	movs	r7, #0
 80064c0:	6822      	ldr	r2, [r4, #0]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	4313      	orrs	r3, r2
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	9b00      	ldr	r3, [sp, #0]
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	6833      	ldr	r3, [r6, #0]
 80064ce:	a807      	add	r0, sp, #28
 80064d0:	7819      	ldrb	r1, [r3, #0]
 80064d2:	00bb      	lsls	r3, r7, #2
 80064d4:	2202      	movs	r2, #2
 80064d6:	5818      	ldr	r0, [r3, r0]
 80064d8:	f000 fa1a 	bl	8006910 <memchr>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d029      	beq.n	8006534 <_scanf_i+0xbc>
 80064e0:	2f01      	cmp	r7, #1
 80064e2:	d15e      	bne.n	80065a2 <_scanf_i+0x12a>
 80064e4:	6863      	ldr	r3, [r4, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <_scanf_i+0x80>
 80064ea:	3308      	adds	r3, #8
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	33f9      	adds	r3, #249	@ 0xf9
 80064f2:	33ff      	adds	r3, #255	@ 0xff
 80064f4:	4313      	orrs	r3, r2
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	4a5c      	ldr	r2, [pc, #368]	@ (800666c <_scanf_i+0x1f4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	1e5a      	subs	r2, r3, #1
 8006504:	60a2      	str	r2, [r4, #8]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d014      	beq.n	8006534 <_scanf_i+0xbc>
 800650a:	6833      	ldr	r3, [r6, #0]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	6032      	str	r2, [r6, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	9a02      	ldr	r2, [sp, #8]
 8006514:	7013      	strb	r3, [r2, #0]
 8006516:	6873      	ldr	r3, [r6, #4]
 8006518:	1c55      	adds	r5, r2, #1
 800651a:	3b01      	subs	r3, #1
 800651c:	6073      	str	r3, [r6, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	dc07      	bgt.n	8006532 <_scanf_i+0xba>
 8006522:	23c0      	movs	r3, #192	@ 0xc0
 8006524:	005b      	lsls	r3, r3, #1
 8006526:	0031      	movs	r1, r6
 8006528:	58e3      	ldr	r3, [r4, r3]
 800652a:	9804      	ldr	r0, [sp, #16]
 800652c:	4798      	blx	r3
 800652e:	2800      	cmp	r0, #0
 8006530:	d17e      	bne.n	8006630 <_scanf_i+0x1b8>
 8006532:	9502      	str	r5, [sp, #8]
 8006534:	3701      	adds	r7, #1
 8006536:	2f03      	cmp	r7, #3
 8006538:	d1c8      	bne.n	80064cc <_scanf_i+0x54>
 800653a:	6863      	ldr	r3, [r4, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <_scanf_i+0xcc>
 8006540:	330a      	adds	r3, #10
 8006542:	6063      	str	r3, [r4, #4]
 8006544:	2700      	movs	r7, #0
 8006546:	6863      	ldr	r3, [r4, #4]
 8006548:	4949      	ldr	r1, [pc, #292]	@ (8006670 <_scanf_i+0x1f8>)
 800654a:	6960      	ldr	r0, [r4, #20]
 800654c:	1ac9      	subs	r1, r1, r3
 800654e:	f000 f955 	bl	80067fc <__sccl>
 8006552:	9d02      	ldr	r5, [sp, #8]
 8006554:	68a3      	ldr	r3, [r4, #8]
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	9302      	str	r3, [sp, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d03f      	beq.n	80065de <_scanf_i+0x166>
 800655e:	6831      	ldr	r1, [r6, #0]
 8006560:	6963      	ldr	r3, [r4, #20]
 8006562:	780a      	ldrb	r2, [r1, #0]
 8006564:	5c9b      	ldrb	r3, [r3, r2]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d039      	beq.n	80065de <_scanf_i+0x166>
 800656a:	2a30      	cmp	r2, #48	@ 0x30
 800656c:	d128      	bne.n	80065c0 <_scanf_i+0x148>
 800656e:	2380      	movs	r3, #128	@ 0x80
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	4218      	tst	r0, r3
 8006574:	d024      	beq.n	80065c0 <_scanf_i+0x148>
 8006576:	9b03      	ldr	r3, [sp, #12]
 8006578:	3701      	adds	r7, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <_scanf_i+0x112>
 800657e:	001a      	movs	r2, r3
 8006580:	9b02      	ldr	r3, [sp, #8]
 8006582:	3a01      	subs	r2, #1
 8006584:	3301      	adds	r3, #1
 8006586:	9203      	str	r2, [sp, #12]
 8006588:	60a3      	str	r3, [r4, #8]
 800658a:	6873      	ldr	r3, [r6, #4]
 800658c:	3b01      	subs	r3, #1
 800658e:	6073      	str	r3, [r6, #4]
 8006590:	2b00      	cmp	r3, #0
 8006592:	dd1c      	ble.n	80065ce <_scanf_i+0x156>
 8006594:	6833      	ldr	r3, [r6, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	6033      	str	r3, [r6, #0]
 800659a:	68a3      	ldr	r3, [r4, #8]
 800659c:	3b01      	subs	r3, #1
 800659e:	60a3      	str	r3, [r4, #8]
 80065a0:	e7d8      	b.n	8006554 <_scanf_i+0xdc>
 80065a2:	2f02      	cmp	r7, #2
 80065a4:	d1ac      	bne.n	8006500 <_scanf_i+0x88>
 80065a6:	23c0      	movs	r3, #192	@ 0xc0
 80065a8:	2180      	movs	r1, #128	@ 0x80
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	00db      	lsls	r3, r3, #3
 80065ae:	4013      	ands	r3, r2
 80065b0:	0089      	lsls	r1, r1, #2
 80065b2:	428b      	cmp	r3, r1
 80065b4:	d1c1      	bne.n	800653a <_scanf_i+0xc2>
 80065b6:	2310      	movs	r3, #16
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	33f0      	adds	r3, #240	@ 0xf0
 80065bc:	4313      	orrs	r3, r2
 80065be:	e79e      	b.n	80064fe <_scanf_i+0x86>
 80065c0:	4b2c      	ldr	r3, [pc, #176]	@ (8006674 <_scanf_i+0x1fc>)
 80065c2:	4003      	ands	r3, r0
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	780b      	ldrb	r3, [r1, #0]
 80065c8:	702b      	strb	r3, [r5, #0]
 80065ca:	3501      	adds	r5, #1
 80065cc:	e7dd      	b.n	800658a <_scanf_i+0x112>
 80065ce:	23c0      	movs	r3, #192	@ 0xc0
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	0031      	movs	r1, r6
 80065d4:	58e3      	ldr	r3, [r4, r3]
 80065d6:	9804      	ldr	r0, [sp, #16]
 80065d8:	4798      	blx	r3
 80065da:	2800      	cmp	r0, #0
 80065dc:	d0dd      	beq.n	800659a <_scanf_i+0x122>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	05db      	lsls	r3, r3, #23
 80065e2:	d50e      	bpl.n	8006602 <_scanf_i+0x18a>
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	429d      	cmp	r5, r3
 80065e8:	d907      	bls.n	80065fa <_scanf_i+0x182>
 80065ea:	23be      	movs	r3, #190	@ 0xbe
 80065ec:	3d01      	subs	r5, #1
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	0032      	movs	r2, r6
 80065f2:	7829      	ldrb	r1, [r5, #0]
 80065f4:	58e3      	ldr	r3, [r4, r3]
 80065f6:	9804      	ldr	r0, [sp, #16]
 80065f8:	4798      	blx	r3
 80065fa:	9b00      	ldr	r3, [sp, #0]
 80065fc:	2001      	movs	r0, #1
 80065fe:	429d      	cmp	r5, r3
 8006600:	d029      	beq.n	8006656 <_scanf_i+0x1de>
 8006602:	6821      	ldr	r1, [r4, #0]
 8006604:	2310      	movs	r3, #16
 8006606:	000a      	movs	r2, r1
 8006608:	401a      	ands	r2, r3
 800660a:	4219      	tst	r1, r3
 800660c:	d11c      	bne.n	8006648 <_scanf_i+0x1d0>
 800660e:	702a      	strb	r2, [r5, #0]
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	9900      	ldr	r1, [sp, #0]
 8006614:	9804      	ldr	r0, [sp, #16]
 8006616:	9e05      	ldr	r6, [sp, #20]
 8006618:	47b0      	blx	r6
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	0691      	lsls	r1, r2, #26
 8006622:	d507      	bpl.n	8006634 <_scanf_i+0x1bc>
 8006624:	9901      	ldr	r1, [sp, #4]
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	600a      	str	r2, [r1, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6018      	str	r0, [r3, #0]
 800662e:	e008      	b.n	8006642 <_scanf_i+0x1ca>
 8006630:	2700      	movs	r7, #0
 8006632:	e7d4      	b.n	80065de <_scanf_i+0x166>
 8006634:	1d19      	adds	r1, r3, #4
 8006636:	07d6      	lsls	r6, r2, #31
 8006638:	d50f      	bpl.n	800665a <_scanf_i+0x1e2>
 800663a:	9a01      	ldr	r2, [sp, #4]
 800663c:	6011      	str	r1, [r2, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	8018      	strh	r0, [r3, #0]
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60e3      	str	r3, [r4, #12]
 8006648:	2000      	movs	r0, #0
 800664a:	9b00      	ldr	r3, [sp, #0]
 800664c:	1aed      	subs	r5, r5, r3
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	19ed      	adds	r5, r5, r7
 8006652:	195b      	adds	r3, r3, r5
 8006654:	6123      	str	r3, [r4, #16]
 8006656:	b00b      	add	sp, #44	@ 0x2c
 8006658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	e7e4      	b.n	800662a <_scanf_i+0x1b2>
 8006660:	08007168 	.word	0x08007168
 8006664:	08006bb5 	.word	0x08006bb5
 8006668:	08006aa9 	.word	0x08006aa9
 800666c:	fffffaff 	.word	0xfffffaff
 8006670:	080078ec 	.word	0x080078ec
 8006674:	fffff6ff 	.word	0xfffff6ff

08006678 <__sflush_r>:
 8006678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800667a:	220c      	movs	r2, #12
 800667c:	5e8b      	ldrsh	r3, [r1, r2]
 800667e:	0005      	movs	r5, r0
 8006680:	000c      	movs	r4, r1
 8006682:	071a      	lsls	r2, r3, #28
 8006684:	d456      	bmi.n	8006734 <__sflush_r+0xbc>
 8006686:	684a      	ldr	r2, [r1, #4]
 8006688:	2a00      	cmp	r2, #0
 800668a:	dc02      	bgt.n	8006692 <__sflush_r+0x1a>
 800668c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800668e:	2a00      	cmp	r2, #0
 8006690:	dd4e      	ble.n	8006730 <__sflush_r+0xb8>
 8006692:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006694:	2f00      	cmp	r7, #0
 8006696:	d04b      	beq.n	8006730 <__sflush_r+0xb8>
 8006698:	2200      	movs	r2, #0
 800669a:	2080      	movs	r0, #128	@ 0x80
 800669c:	682e      	ldr	r6, [r5, #0]
 800669e:	602a      	str	r2, [r5, #0]
 80066a0:	001a      	movs	r2, r3
 80066a2:	0140      	lsls	r0, r0, #5
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	4002      	ands	r2, r0
 80066a8:	4203      	tst	r3, r0
 80066aa:	d033      	beq.n	8006714 <__sflush_r+0x9c>
 80066ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	075b      	lsls	r3, r3, #29
 80066b2:	d506      	bpl.n	80066c2 <__sflush_r+0x4a>
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <__sflush_r+0x4a>
 80066be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	2300      	movs	r3, #0
 80066c4:	0028      	movs	r0, r5
 80066c6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80066c8:	6a21      	ldr	r1, [r4, #32]
 80066ca:	47b8      	blx	r7
 80066cc:	89a2      	ldrh	r2, [r4, #12]
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	d106      	bne.n	80066e0 <__sflush_r+0x68>
 80066d2:	6829      	ldr	r1, [r5, #0]
 80066d4:	291d      	cmp	r1, #29
 80066d6:	d846      	bhi.n	8006766 <__sflush_r+0xee>
 80066d8:	4b29      	ldr	r3, [pc, #164]	@ (8006780 <__sflush_r+0x108>)
 80066da:	40cb      	lsrs	r3, r1
 80066dc:	07db      	lsls	r3, r3, #31
 80066de:	d542      	bpl.n	8006766 <__sflush_r+0xee>
 80066e0:	2300      	movs	r3, #0
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	04d2      	lsls	r2, r2, #19
 80066ea:	d505      	bpl.n	80066f8 <__sflush_r+0x80>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d102      	bne.n	80066f6 <__sflush_r+0x7e>
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d100      	bne.n	80066f8 <__sflush_r+0x80>
 80066f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80066f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066fa:	602e      	str	r6, [r5, #0]
 80066fc:	2900      	cmp	r1, #0
 80066fe:	d017      	beq.n	8006730 <__sflush_r+0xb8>
 8006700:	0023      	movs	r3, r4
 8006702:	3344      	adds	r3, #68	@ 0x44
 8006704:	4299      	cmp	r1, r3
 8006706:	d002      	beq.n	800670e <__sflush_r+0x96>
 8006708:	0028      	movs	r0, r5
 800670a:	f7ff f971 	bl	80059f0 <_free_r>
 800670e:	2300      	movs	r3, #0
 8006710:	6363      	str	r3, [r4, #52]	@ 0x34
 8006712:	e00d      	b.n	8006730 <__sflush_r+0xb8>
 8006714:	2301      	movs	r3, #1
 8006716:	0028      	movs	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	0002      	movs	r2, r0
 800671c:	1c43      	adds	r3, r0, #1
 800671e:	d1c6      	bne.n	80066ae <__sflush_r+0x36>
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0c3      	beq.n	80066ae <__sflush_r+0x36>
 8006726:	2b1d      	cmp	r3, #29
 8006728:	d001      	beq.n	800672e <__sflush_r+0xb6>
 800672a:	2b16      	cmp	r3, #22
 800672c:	d11a      	bne.n	8006764 <__sflush_r+0xec>
 800672e:	602e      	str	r6, [r5, #0]
 8006730:	2000      	movs	r0, #0
 8006732:	e01e      	b.n	8006772 <__sflush_r+0xfa>
 8006734:	690e      	ldr	r6, [r1, #16]
 8006736:	2e00      	cmp	r6, #0
 8006738:	d0fa      	beq.n	8006730 <__sflush_r+0xb8>
 800673a:	680f      	ldr	r7, [r1, #0]
 800673c:	600e      	str	r6, [r1, #0]
 800673e:	1bba      	subs	r2, r7, r6
 8006740:	9201      	str	r2, [sp, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	079b      	lsls	r3, r3, #30
 8006746:	d100      	bne.n	800674a <__sflush_r+0xd2>
 8006748:	694a      	ldr	r2, [r1, #20]
 800674a:	60a2      	str	r2, [r4, #8]
 800674c:	9b01      	ldr	r3, [sp, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	ddee      	ble.n	8006730 <__sflush_r+0xb8>
 8006752:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006754:	0032      	movs	r2, r6
 8006756:	001f      	movs	r7, r3
 8006758:	0028      	movs	r0, r5
 800675a:	9b01      	ldr	r3, [sp, #4]
 800675c:	6a21      	ldr	r1, [r4, #32]
 800675e:	47b8      	blx	r7
 8006760:	2800      	cmp	r0, #0
 8006762:	dc07      	bgt.n	8006774 <__sflush_r+0xfc>
 8006764:	89a2      	ldrh	r2, [r4, #12]
 8006766:	2340      	movs	r3, #64	@ 0x40
 8006768:	2001      	movs	r0, #1
 800676a:	4313      	orrs	r3, r2
 800676c:	b21b      	sxth	r3, r3
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	4240      	negs	r0, r0
 8006772:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	1836      	adds	r6, r6, r0
 8006778:	1a1b      	subs	r3, r3, r0
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	e7e6      	b.n	800674c <__sflush_r+0xd4>
 800677e:	46c0      	nop			@ (mov r8, r8)
 8006780:	20400001 	.word	0x20400001

08006784 <_fflush_r>:
 8006784:	690b      	ldr	r3, [r1, #16]
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	0005      	movs	r5, r0
 800678a:	000c      	movs	r4, r1
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <_fflush_r+0x12>
 8006790:	2500      	movs	r5, #0
 8006792:	0028      	movs	r0, r5
 8006794:	bd70      	pop	{r4, r5, r6, pc}
 8006796:	2800      	cmp	r0, #0
 8006798:	d004      	beq.n	80067a4 <_fflush_r+0x20>
 800679a:	6a03      	ldr	r3, [r0, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <_fflush_r+0x20>
 80067a0:	f7fe ff94 	bl	80056cc <__sinit>
 80067a4:	220c      	movs	r2, #12
 80067a6:	5ea3      	ldrsh	r3, [r4, r2]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f1      	beq.n	8006790 <_fflush_r+0xc>
 80067ac:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067ae:	07d2      	lsls	r2, r2, #31
 80067b0:	d404      	bmi.n	80067bc <_fflush_r+0x38>
 80067b2:	059b      	lsls	r3, r3, #22
 80067b4:	d402      	bmi.n	80067bc <_fflush_r+0x38>
 80067b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067b8:	f7ff f8e9 	bl	800598e <__retarget_lock_acquire_recursive>
 80067bc:	0028      	movs	r0, r5
 80067be:	0021      	movs	r1, r4
 80067c0:	f7ff ff5a 	bl	8006678 <__sflush_r>
 80067c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067c6:	0005      	movs	r5, r0
 80067c8:	07db      	lsls	r3, r3, #31
 80067ca:	d4e2      	bmi.n	8006792 <_fflush_r+0xe>
 80067cc:	89a3      	ldrh	r3, [r4, #12]
 80067ce:	059b      	lsls	r3, r3, #22
 80067d0:	d4df      	bmi.n	8006792 <_fflush_r+0xe>
 80067d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067d4:	f7ff f8dc 	bl	8005990 <__retarget_lock_release_recursive>
 80067d8:	e7db      	b.n	8006792 <_fflush_r+0xe>
	...

080067dc <fiprintf>:
 80067dc:	b40e      	push	{r1, r2, r3}
 80067de:	b517      	push	{r0, r1, r2, r4, lr}
 80067e0:	4c05      	ldr	r4, [pc, #20]	@ (80067f8 <fiprintf+0x1c>)
 80067e2:	ab05      	add	r3, sp, #20
 80067e4:	cb04      	ldmia	r3!, {r2}
 80067e6:	0001      	movs	r1, r0
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	9301      	str	r3, [sp, #4]
 80067ec:	f000 fa0e 	bl	8006c0c <_vfiprintf_r>
 80067f0:	bc1e      	pop	{r1, r2, r3, r4}
 80067f2:	bc08      	pop	{r3}
 80067f4:	b003      	add	sp, #12
 80067f6:	4718      	bx	r3
 80067f8:	20000014 	.word	0x20000014

080067fc <__sccl>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	780b      	ldrb	r3, [r1, #0]
 8006800:	0004      	movs	r4, r0
 8006802:	2b5e      	cmp	r3, #94	@ 0x5e
 8006804:	d019      	beq.n	800683a <__sccl+0x3e>
 8006806:	1c4d      	adds	r5, r1, #1
 8006808:	2100      	movs	r1, #0
 800680a:	0022      	movs	r2, r4
 800680c:	1c60      	adds	r0, r4, #1
 800680e:	30ff      	adds	r0, #255	@ 0xff
 8006810:	7011      	strb	r1, [r2, #0]
 8006812:	3201      	adds	r2, #1
 8006814:	4282      	cmp	r2, r0
 8006816:	d1fb      	bne.n	8006810 <__sccl+0x14>
 8006818:	1e68      	subs	r0, r5, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d026      	beq.n	800686c <__sccl+0x70>
 800681e:	2601      	movs	r6, #1
 8006820:	404e      	eors	r6, r1
 8006822:	0028      	movs	r0, r5
 8006824:	54e6      	strb	r6, [r4, r3]
 8006826:	7801      	ldrb	r1, [r0, #0]
 8006828:	1c45      	adds	r5, r0, #1
 800682a:	292d      	cmp	r1, #45	@ 0x2d
 800682c:	d009      	beq.n	8006842 <__sccl+0x46>
 800682e:	295d      	cmp	r1, #93	@ 0x5d
 8006830:	d01b      	beq.n	800686a <__sccl+0x6e>
 8006832:	2900      	cmp	r1, #0
 8006834:	d01a      	beq.n	800686c <__sccl+0x70>
 8006836:	000b      	movs	r3, r1
 8006838:	e7f3      	b.n	8006822 <__sccl+0x26>
 800683a:	784b      	ldrb	r3, [r1, #1]
 800683c:	1c8d      	adds	r5, r1, #2
 800683e:	2101      	movs	r1, #1
 8006840:	e7e3      	b.n	800680a <__sccl+0xe>
 8006842:	7842      	ldrb	r2, [r0, #1]
 8006844:	2a5d      	cmp	r2, #93	@ 0x5d
 8006846:	d0f6      	beq.n	8006836 <__sccl+0x3a>
 8006848:	4293      	cmp	r3, r2
 800684a:	dcf4      	bgt.n	8006836 <__sccl+0x3a>
 800684c:	0019      	movs	r1, r3
 800684e:	3002      	adds	r0, #2
 8006850:	3101      	adds	r1, #1
 8006852:	5466      	strb	r6, [r4, r1]
 8006854:	428a      	cmp	r2, r1
 8006856:	dcfb      	bgt.n	8006850 <__sccl+0x54>
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	4293      	cmp	r3, r2
 800685c:	db02      	blt.n	8006864 <__sccl+0x68>
 800685e:	2200      	movs	r2, #0
 8006860:	188b      	adds	r3, r1, r2
 8006862:	e7e0      	b.n	8006826 <__sccl+0x2a>
 8006864:	1ad2      	subs	r2, r2, r3
 8006866:	3a01      	subs	r2, #1
 8006868:	e7fa      	b.n	8006860 <__sccl+0x64>
 800686a:	0028      	movs	r0, r5
 800686c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006870 <__submore>:
 8006870:	000b      	movs	r3, r1
 8006872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006874:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8006876:	3344      	adds	r3, #68	@ 0x44
 8006878:	000c      	movs	r4, r1
 800687a:	429d      	cmp	r5, r3
 800687c:	d11c      	bne.n	80068b8 <__submore+0x48>
 800687e:	2680      	movs	r6, #128	@ 0x80
 8006880:	00f6      	lsls	r6, r6, #3
 8006882:	0031      	movs	r1, r6
 8006884:	f7fe fdc4 	bl	8005410 <_malloc_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d102      	bne.n	8006892 <__submore+0x22>
 800688c:	2001      	movs	r0, #1
 800688e:	4240      	negs	r0, r0
 8006890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006892:	0023      	movs	r3, r4
 8006894:	6360      	str	r0, [r4, #52]	@ 0x34
 8006896:	63a6      	str	r6, [r4, #56]	@ 0x38
 8006898:	3346      	adds	r3, #70	@ 0x46
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <__submore+0x70>)
 800689e:	54c2      	strb	r2, [r0, r3]
 80068a0:	0023      	movs	r3, r4
 80068a2:	3345      	adds	r3, #69	@ 0x45
 80068a4:	781a      	ldrb	r2, [r3, #0]
 80068a6:	4b0f      	ldr	r3, [pc, #60]	@ (80068e4 <__submore+0x74>)
 80068a8:	54c2      	strb	r2, [r0, r3]
 80068aa:	782a      	ldrb	r2, [r5, #0]
 80068ac:	4b0e      	ldr	r3, [pc, #56]	@ (80068e8 <__submore+0x78>)
 80068ae:	54c2      	strb	r2, [r0, r3]
 80068b0:	18c0      	adds	r0, r0, r3
 80068b2:	6020      	str	r0, [r4, #0]
 80068b4:	2000      	movs	r0, #0
 80068b6:	e7eb      	b.n	8006890 <__submore+0x20>
 80068b8:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 80068ba:	0029      	movs	r1, r5
 80068bc:	0073      	lsls	r3, r6, #1
 80068be:	001a      	movs	r2, r3
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	f000 f837 	bl	8006934 <_realloc_r>
 80068c6:	1e05      	subs	r5, r0, #0
 80068c8:	d0e0      	beq.n	800688c <__submore+0x1c>
 80068ca:	1987      	adds	r7, r0, r6
 80068cc:	0001      	movs	r1, r0
 80068ce:	0032      	movs	r2, r6
 80068d0:	0038      	movs	r0, r7
 80068d2:	f7ff f866 	bl	80059a2 <memcpy>
 80068d6:	9b01      	ldr	r3, [sp, #4]
 80068d8:	6027      	str	r7, [r4, #0]
 80068da:	6365      	str	r5, [r4, #52]	@ 0x34
 80068dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80068de:	e7e9      	b.n	80068b4 <__submore+0x44>
 80068e0:	000003ff 	.word	0x000003ff
 80068e4:	000003fe 	.word	0x000003fe
 80068e8:	000003fd 	.word	0x000003fd

080068ec <memmove>:
 80068ec:	b510      	push	{r4, lr}
 80068ee:	4288      	cmp	r0, r1
 80068f0:	d902      	bls.n	80068f8 <memmove+0xc>
 80068f2:	188b      	adds	r3, r1, r2
 80068f4:	4298      	cmp	r0, r3
 80068f6:	d308      	bcc.n	800690a <memmove+0x1e>
 80068f8:	2300      	movs	r3, #0
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d007      	beq.n	800690e <memmove+0x22>
 80068fe:	5ccc      	ldrb	r4, [r1, r3]
 8006900:	54c4      	strb	r4, [r0, r3]
 8006902:	3301      	adds	r3, #1
 8006904:	e7f9      	b.n	80068fa <memmove+0xe>
 8006906:	5c8b      	ldrb	r3, [r1, r2]
 8006908:	5483      	strb	r3, [r0, r2]
 800690a:	3a01      	subs	r2, #1
 800690c:	d2fb      	bcs.n	8006906 <memmove+0x1a>
 800690e:	bd10      	pop	{r4, pc}

08006910 <memchr>:
 8006910:	b2c9      	uxtb	r1, r1
 8006912:	1882      	adds	r2, r0, r2
 8006914:	4290      	cmp	r0, r2
 8006916:	d101      	bne.n	800691c <memchr+0xc>
 8006918:	2000      	movs	r0, #0
 800691a:	4770      	bx	lr
 800691c:	7803      	ldrb	r3, [r0, #0]
 800691e:	428b      	cmp	r3, r1
 8006920:	d0fb      	beq.n	800691a <memchr+0xa>
 8006922:	3001      	adds	r0, #1
 8006924:	e7f6      	b.n	8006914 <memchr+0x4>

08006926 <abort>:
 8006926:	2006      	movs	r0, #6
 8006928:	b510      	push	{r4, lr}
 800692a:	f000 fb55 	bl	8006fd8 <raise>
 800692e:	2001      	movs	r0, #1
 8006930:	f7fb f8b8 	bl	8001aa4 <_exit>

08006934 <_realloc_r>:
 8006934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006936:	0006      	movs	r6, r0
 8006938:	000c      	movs	r4, r1
 800693a:	0015      	movs	r5, r2
 800693c:	2900      	cmp	r1, #0
 800693e:	d105      	bne.n	800694c <_realloc_r+0x18>
 8006940:	0011      	movs	r1, r2
 8006942:	f7fe fd65 	bl	8005410 <_malloc_r>
 8006946:	0004      	movs	r4, r0
 8006948:	0020      	movs	r0, r4
 800694a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800694c:	2a00      	cmp	r2, #0
 800694e:	d103      	bne.n	8006958 <_realloc_r+0x24>
 8006950:	f7ff f84e 	bl	80059f0 <_free_r>
 8006954:	002c      	movs	r4, r5
 8006956:	e7f7      	b.n	8006948 <_realloc_r+0x14>
 8006958:	f000 fb5e 	bl	8007018 <_malloc_usable_size_r>
 800695c:	0007      	movs	r7, r0
 800695e:	4285      	cmp	r5, r0
 8006960:	d802      	bhi.n	8006968 <_realloc_r+0x34>
 8006962:	0843      	lsrs	r3, r0, #1
 8006964:	42ab      	cmp	r3, r5
 8006966:	d3ef      	bcc.n	8006948 <_realloc_r+0x14>
 8006968:	0029      	movs	r1, r5
 800696a:	0030      	movs	r0, r6
 800696c:	f7fe fd50 	bl	8005410 <_malloc_r>
 8006970:	9001      	str	r0, [sp, #4]
 8006972:	2800      	cmp	r0, #0
 8006974:	d101      	bne.n	800697a <_realloc_r+0x46>
 8006976:	9c01      	ldr	r4, [sp, #4]
 8006978:	e7e6      	b.n	8006948 <_realloc_r+0x14>
 800697a:	002a      	movs	r2, r5
 800697c:	42bd      	cmp	r5, r7
 800697e:	d900      	bls.n	8006982 <_realloc_r+0x4e>
 8006980:	003a      	movs	r2, r7
 8006982:	0021      	movs	r1, r4
 8006984:	9801      	ldr	r0, [sp, #4]
 8006986:	f7ff f80c 	bl	80059a2 <memcpy>
 800698a:	0021      	movs	r1, r4
 800698c:	0030      	movs	r0, r6
 800698e:	f7ff f82f 	bl	80059f0 <_free_r>
 8006992:	e7f0      	b.n	8006976 <_realloc_r+0x42>

08006994 <_strtol_l.isra.0>:
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	b085      	sub	sp, #20
 8006998:	0017      	movs	r7, r2
 800699a:	001e      	movs	r6, r3
 800699c:	9003      	str	r0, [sp, #12]
 800699e:	9101      	str	r1, [sp, #4]
 80069a0:	2b24      	cmp	r3, #36	@ 0x24
 80069a2:	d823      	bhi.n	80069ec <_strtol_l.isra.0+0x58>
 80069a4:	000c      	movs	r4, r1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d020      	beq.n	80069ec <_strtol_l.isra.0+0x58>
 80069aa:	4b3d      	ldr	r3, [pc, #244]	@ (8006aa0 <_strtol_l.isra.0+0x10c>)
 80069ac:	2208      	movs	r2, #8
 80069ae:	469c      	mov	ip, r3
 80069b0:	0023      	movs	r3, r4
 80069b2:	4661      	mov	r1, ip
 80069b4:	781d      	ldrb	r5, [r3, #0]
 80069b6:	3401      	adds	r4, #1
 80069b8:	5d48      	ldrb	r0, [r1, r5]
 80069ba:	0001      	movs	r1, r0
 80069bc:	4011      	ands	r1, r2
 80069be:	4210      	tst	r0, r2
 80069c0:	d1f6      	bne.n	80069b0 <_strtol_l.isra.0+0x1c>
 80069c2:	2d2d      	cmp	r5, #45	@ 0x2d
 80069c4:	d119      	bne.n	80069fa <_strtol_l.isra.0+0x66>
 80069c6:	7825      	ldrb	r5, [r4, #0]
 80069c8:	1c9c      	adds	r4, r3, #2
 80069ca:	2301      	movs	r3, #1
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2210      	movs	r2, #16
 80069d0:	0033      	movs	r3, r6
 80069d2:	4393      	bics	r3, r2
 80069d4:	d11d      	bne.n	8006a12 <_strtol_l.isra.0+0x7e>
 80069d6:	2d30      	cmp	r5, #48	@ 0x30
 80069d8:	d115      	bne.n	8006a06 <_strtol_l.isra.0+0x72>
 80069da:	2120      	movs	r1, #32
 80069dc:	7823      	ldrb	r3, [r4, #0]
 80069de:	438b      	bics	r3, r1
 80069e0:	2b58      	cmp	r3, #88	@ 0x58
 80069e2:	d110      	bne.n	8006a06 <_strtol_l.isra.0+0x72>
 80069e4:	7865      	ldrb	r5, [r4, #1]
 80069e6:	3402      	adds	r4, #2
 80069e8:	2610      	movs	r6, #16
 80069ea:	e012      	b.n	8006a12 <_strtol_l.isra.0+0x7e>
 80069ec:	f7fe ffa4 	bl	8005938 <__errno>
 80069f0:	2316      	movs	r3, #22
 80069f2:	6003      	str	r3, [r0, #0]
 80069f4:	2000      	movs	r0, #0
 80069f6:	b005      	add	sp, #20
 80069f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fa:	9100      	str	r1, [sp, #0]
 80069fc:	2d2b      	cmp	r5, #43	@ 0x2b
 80069fe:	d1e6      	bne.n	80069ce <_strtol_l.isra.0+0x3a>
 8006a00:	7825      	ldrb	r5, [r4, #0]
 8006a02:	1c9c      	adds	r4, r3, #2
 8006a04:	e7e3      	b.n	80069ce <_strtol_l.isra.0+0x3a>
 8006a06:	2e00      	cmp	r6, #0
 8006a08:	d1ee      	bne.n	80069e8 <_strtol_l.isra.0+0x54>
 8006a0a:	360a      	adds	r6, #10
 8006a0c:	2d30      	cmp	r5, #48	@ 0x30
 8006a0e:	d100      	bne.n	8006a12 <_strtol_l.isra.0+0x7e>
 8006a10:	3e02      	subs	r6, #2
 8006a12:	4a24      	ldr	r2, [pc, #144]	@ (8006aa4 <_strtol_l.isra.0+0x110>)
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	4694      	mov	ip, r2
 8006a18:	4463      	add	r3, ip
 8006a1a:	0031      	movs	r1, r6
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	9302      	str	r3, [sp, #8]
 8006a20:	f7f9 fc14 	bl	800024c <__aeabi_uidivmod>
 8006a24:	2200      	movs	r2, #0
 8006a26:	4684      	mov	ip, r0
 8006a28:	0010      	movs	r0, r2
 8006a2a:	002b      	movs	r3, r5
 8006a2c:	3b30      	subs	r3, #48	@ 0x30
 8006a2e:	2b09      	cmp	r3, #9
 8006a30:	d811      	bhi.n	8006a56 <_strtol_l.isra.0+0xc2>
 8006a32:	001d      	movs	r5, r3
 8006a34:	42ae      	cmp	r6, r5
 8006a36:	dd1d      	ble.n	8006a74 <_strtol_l.isra.0+0xe0>
 8006a38:	1c53      	adds	r3, r2, #1
 8006a3a:	d009      	beq.n	8006a50 <_strtol_l.isra.0+0xbc>
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4252      	negs	r2, r2
 8006a40:	4584      	cmp	ip, r0
 8006a42:	d305      	bcc.n	8006a50 <_strtol_l.isra.0+0xbc>
 8006a44:	d101      	bne.n	8006a4a <_strtol_l.isra.0+0xb6>
 8006a46:	42a9      	cmp	r1, r5
 8006a48:	db11      	blt.n	8006a6e <_strtol_l.isra.0+0xda>
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	4370      	muls	r0, r6
 8006a4e:	1828      	adds	r0, r5, r0
 8006a50:	7825      	ldrb	r5, [r4, #0]
 8006a52:	3401      	adds	r4, #1
 8006a54:	e7e9      	b.n	8006a2a <_strtol_l.isra.0+0x96>
 8006a56:	002b      	movs	r3, r5
 8006a58:	3b41      	subs	r3, #65	@ 0x41
 8006a5a:	2b19      	cmp	r3, #25
 8006a5c:	d801      	bhi.n	8006a62 <_strtol_l.isra.0+0xce>
 8006a5e:	3d37      	subs	r5, #55	@ 0x37
 8006a60:	e7e8      	b.n	8006a34 <_strtol_l.isra.0+0xa0>
 8006a62:	002b      	movs	r3, r5
 8006a64:	3b61      	subs	r3, #97	@ 0x61
 8006a66:	2b19      	cmp	r3, #25
 8006a68:	d804      	bhi.n	8006a74 <_strtol_l.isra.0+0xe0>
 8006a6a:	3d57      	subs	r5, #87	@ 0x57
 8006a6c:	e7e2      	b.n	8006a34 <_strtol_l.isra.0+0xa0>
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4252      	negs	r2, r2
 8006a72:	e7ed      	b.n	8006a50 <_strtol_l.isra.0+0xbc>
 8006a74:	1c53      	adds	r3, r2, #1
 8006a76:	d108      	bne.n	8006a8a <_strtol_l.isra.0+0xf6>
 8006a78:	2322      	movs	r3, #34	@ 0x22
 8006a7a:	9a03      	ldr	r2, [sp, #12]
 8006a7c:	9802      	ldr	r0, [sp, #8]
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	2f00      	cmp	r7, #0
 8006a82:	d0b8      	beq.n	80069f6 <_strtol_l.isra.0+0x62>
 8006a84:	1e63      	subs	r3, r4, #1
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	e007      	b.n	8006a9a <_strtol_l.isra.0+0x106>
 8006a8a:	9b00      	ldr	r3, [sp, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d000      	beq.n	8006a92 <_strtol_l.isra.0+0xfe>
 8006a90:	4240      	negs	r0, r0
 8006a92:	2f00      	cmp	r7, #0
 8006a94:	d0af      	beq.n	80069f6 <_strtol_l.isra.0+0x62>
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	d1f4      	bne.n	8006a84 <_strtol_l.isra.0+0xf0>
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	e7aa      	b.n	80069f6 <_strtol_l.isra.0+0x62>
 8006aa0:	080078f8 	.word	0x080078f8
 8006aa4:	7fffffff 	.word	0x7fffffff

08006aa8 <_strtol_r>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	f7ff ff73 	bl	8006994 <_strtol_l.isra.0>
 8006aae:	bd10      	pop	{r4, pc}

08006ab0 <_strtoul_l.isra.0>:
 8006ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ab2:	001e      	movs	r6, r3
 8006ab4:	4b3e      	ldr	r3, [pc, #248]	@ (8006bb0 <_strtoul_l.isra.0+0x100>)
 8006ab6:	0017      	movs	r7, r2
 8006ab8:	000c      	movs	r4, r1
 8006aba:	469c      	mov	ip, r3
 8006abc:	2208      	movs	r2, #8
 8006abe:	b085      	sub	sp, #20
 8006ac0:	9003      	str	r0, [sp, #12]
 8006ac2:	9100      	str	r1, [sp, #0]
 8006ac4:	0023      	movs	r3, r4
 8006ac6:	4661      	mov	r1, ip
 8006ac8:	781d      	ldrb	r5, [r3, #0]
 8006aca:	3401      	adds	r4, #1
 8006acc:	5d48      	ldrb	r0, [r1, r5]
 8006ace:	0001      	movs	r1, r0
 8006ad0:	4011      	ands	r1, r2
 8006ad2:	4210      	tst	r0, r2
 8006ad4:	d1f6      	bne.n	8006ac4 <_strtoul_l.isra.0+0x14>
 8006ad6:	2d2d      	cmp	r5, #45	@ 0x2d
 8006ad8:	d112      	bne.n	8006b00 <_strtoul_l.isra.0+0x50>
 8006ada:	7825      	ldrb	r5, [r4, #0]
 8006adc:	1c9c      	adds	r4, r3, #2
 8006ade:	2301      	movs	r3, #1
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	0033      	movs	r3, r6
 8006ae6:	4393      	bics	r3, r2
 8006ae8:	d116      	bne.n	8006b18 <_strtoul_l.isra.0+0x68>
 8006aea:	2d30      	cmp	r5, #48	@ 0x30
 8006aec:	d10e      	bne.n	8006b0c <_strtoul_l.isra.0+0x5c>
 8006aee:	2120      	movs	r1, #32
 8006af0:	7823      	ldrb	r3, [r4, #0]
 8006af2:	438b      	bics	r3, r1
 8006af4:	2b58      	cmp	r3, #88	@ 0x58
 8006af6:	d109      	bne.n	8006b0c <_strtoul_l.isra.0+0x5c>
 8006af8:	7865      	ldrb	r5, [r4, #1]
 8006afa:	3402      	adds	r4, #2
 8006afc:	2610      	movs	r6, #16
 8006afe:	e00b      	b.n	8006b18 <_strtoul_l.isra.0+0x68>
 8006b00:	9102      	str	r1, [sp, #8]
 8006b02:	2d2b      	cmp	r5, #43	@ 0x2b
 8006b04:	d1ed      	bne.n	8006ae2 <_strtoul_l.isra.0+0x32>
 8006b06:	7825      	ldrb	r5, [r4, #0]
 8006b08:	1c9c      	adds	r4, r3, #2
 8006b0a:	e7ea      	b.n	8006ae2 <_strtoul_l.isra.0+0x32>
 8006b0c:	2e00      	cmp	r6, #0
 8006b0e:	d1f5      	bne.n	8006afc <_strtoul_l.isra.0+0x4c>
 8006b10:	360a      	adds	r6, #10
 8006b12:	2d30      	cmp	r5, #48	@ 0x30
 8006b14:	d100      	bne.n	8006b18 <_strtoul_l.isra.0+0x68>
 8006b16:	3e02      	subs	r6, #2
 8006b18:	2001      	movs	r0, #1
 8006b1a:	0031      	movs	r1, r6
 8006b1c:	4240      	negs	r0, r0
 8006b1e:	f7f9 fb0f 	bl	8000140 <__udivsi3>
 8006b22:	9001      	str	r0, [sp, #4]
 8006b24:	2001      	movs	r0, #1
 8006b26:	0031      	movs	r1, r6
 8006b28:	4240      	negs	r0, r0
 8006b2a:	f7f9 fb8f 	bl	800024c <__aeabi_uidivmod>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2201      	movs	r2, #1
 8006b32:	0018      	movs	r0, r3
 8006b34:	4694      	mov	ip, r2
 8006b36:	002a      	movs	r2, r5
 8006b38:	3a30      	subs	r2, #48	@ 0x30
 8006b3a:	2a09      	cmp	r2, #9
 8006b3c:	d812      	bhi.n	8006b64 <_strtoul_l.isra.0+0xb4>
 8006b3e:	0015      	movs	r5, r2
 8006b40:	42ae      	cmp	r6, r5
 8006b42:	dd1e      	ble.n	8006b82 <_strtoul_l.isra.0+0xd2>
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	d00a      	beq.n	8006b5e <_strtoul_l.isra.0+0xae>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	9a01      	ldr	r2, [sp, #4]
 8006b4c:	425b      	negs	r3, r3
 8006b4e:	4282      	cmp	r2, r0
 8006b50:	d305      	bcc.n	8006b5e <_strtoul_l.isra.0+0xae>
 8006b52:	d101      	bne.n	8006b58 <_strtoul_l.isra.0+0xa8>
 8006b54:	42a9      	cmp	r1, r5
 8006b56:	db11      	blt.n	8006b7c <_strtoul_l.isra.0+0xcc>
 8006b58:	4663      	mov	r3, ip
 8006b5a:	4370      	muls	r0, r6
 8006b5c:	1828      	adds	r0, r5, r0
 8006b5e:	7825      	ldrb	r5, [r4, #0]
 8006b60:	3401      	adds	r4, #1
 8006b62:	e7e8      	b.n	8006b36 <_strtoul_l.isra.0+0x86>
 8006b64:	002a      	movs	r2, r5
 8006b66:	3a41      	subs	r2, #65	@ 0x41
 8006b68:	2a19      	cmp	r2, #25
 8006b6a:	d801      	bhi.n	8006b70 <_strtoul_l.isra.0+0xc0>
 8006b6c:	3d37      	subs	r5, #55	@ 0x37
 8006b6e:	e7e7      	b.n	8006b40 <_strtoul_l.isra.0+0x90>
 8006b70:	002a      	movs	r2, r5
 8006b72:	3a61      	subs	r2, #97	@ 0x61
 8006b74:	2a19      	cmp	r2, #25
 8006b76:	d804      	bhi.n	8006b82 <_strtoul_l.isra.0+0xd2>
 8006b78:	3d57      	subs	r5, #87	@ 0x57
 8006b7a:	e7e1      	b.n	8006b40 <_strtoul_l.isra.0+0x90>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	425b      	negs	r3, r3
 8006b80:	e7ed      	b.n	8006b5e <_strtoul_l.isra.0+0xae>
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	d107      	bne.n	8006b96 <_strtoul_l.isra.0+0xe6>
 8006b86:	2222      	movs	r2, #34	@ 0x22
 8006b88:	9903      	ldr	r1, [sp, #12]
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	600a      	str	r2, [r1, #0]
 8006b8e:	2f00      	cmp	r7, #0
 8006b90:	d109      	bne.n	8006ba6 <_strtoul_l.isra.0+0xf6>
 8006b92:	b005      	add	sp, #20
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	9a02      	ldr	r2, [sp, #8]
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d000      	beq.n	8006b9e <_strtoul_l.isra.0+0xee>
 8006b9c:	4240      	negs	r0, r0
 8006b9e:	2f00      	cmp	r7, #0
 8006ba0:	d0f7      	beq.n	8006b92 <_strtoul_l.isra.0+0xe2>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <_strtoul_l.isra.0+0xfa>
 8006ba6:	1e63      	subs	r3, r4, #1
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	9b00      	ldr	r3, [sp, #0]
 8006bac:	603b      	str	r3, [r7, #0]
 8006bae:	e7f0      	b.n	8006b92 <_strtoul_l.isra.0+0xe2>
 8006bb0:	080078f8 	.word	0x080078f8

08006bb4 <_strtoul_r>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	f7ff ff7b 	bl	8006ab0 <_strtoul_l.isra.0>
 8006bba:	bd10      	pop	{r4, pc}

08006bbc <__sfputc_r>:
 8006bbc:	6893      	ldr	r3, [r2, #8]
 8006bbe:	b510      	push	{r4, lr}
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	6093      	str	r3, [r2, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da04      	bge.n	8006bd2 <__sfputc_r+0x16>
 8006bc8:	6994      	ldr	r4, [r2, #24]
 8006bca:	42a3      	cmp	r3, r4
 8006bcc:	db07      	blt.n	8006bde <__sfputc_r+0x22>
 8006bce:	290a      	cmp	r1, #10
 8006bd0:	d005      	beq.n	8006bde <__sfputc_r+0x22>
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	1c58      	adds	r0, r3, #1
 8006bd6:	6010      	str	r0, [r2, #0]
 8006bd8:	7019      	strb	r1, [r3, #0]
 8006bda:	0008      	movs	r0, r1
 8006bdc:	bd10      	pop	{r4, pc}
 8006bde:	f000 f931 	bl	8006e44 <__swbuf_r>
 8006be2:	0001      	movs	r1, r0
 8006be4:	e7f9      	b.n	8006bda <__sfputc_r+0x1e>

08006be6 <__sfputs_r>:
 8006be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be8:	0006      	movs	r6, r0
 8006bea:	000f      	movs	r7, r1
 8006bec:	0014      	movs	r4, r2
 8006bee:	18d5      	adds	r5, r2, r3
 8006bf0:	42ac      	cmp	r4, r5
 8006bf2:	d101      	bne.n	8006bf8 <__sfputs_r+0x12>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e007      	b.n	8006c08 <__sfputs_r+0x22>
 8006bf8:	7821      	ldrb	r1, [r4, #0]
 8006bfa:	003a      	movs	r2, r7
 8006bfc:	0030      	movs	r0, r6
 8006bfe:	f7ff ffdd 	bl	8006bbc <__sfputc_r>
 8006c02:	3401      	adds	r4, #1
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d1f3      	bne.n	8006bf0 <__sfputs_r+0xa>
 8006c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c0c <_vfiprintf_r>:
 8006c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0e:	b0a1      	sub	sp, #132	@ 0x84
 8006c10:	000f      	movs	r7, r1
 8006c12:	0015      	movs	r5, r2
 8006c14:	001e      	movs	r6, r3
 8006c16:	9003      	str	r0, [sp, #12]
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d004      	beq.n	8006c26 <_vfiprintf_r+0x1a>
 8006c1c:	6a03      	ldr	r3, [r0, #32]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <_vfiprintf_r+0x1a>
 8006c22:	f7fe fd53 	bl	80056cc <__sinit>
 8006c26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c28:	07db      	lsls	r3, r3, #31
 8006c2a:	d405      	bmi.n	8006c38 <_vfiprintf_r+0x2c>
 8006c2c:	89bb      	ldrh	r3, [r7, #12]
 8006c2e:	059b      	lsls	r3, r3, #22
 8006c30:	d402      	bmi.n	8006c38 <_vfiprintf_r+0x2c>
 8006c32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006c34:	f7fe feab 	bl	800598e <__retarget_lock_acquire_recursive>
 8006c38:	89bb      	ldrh	r3, [r7, #12]
 8006c3a:	071b      	lsls	r3, r3, #28
 8006c3c:	d502      	bpl.n	8006c44 <_vfiprintf_r+0x38>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d113      	bne.n	8006c6c <_vfiprintf_r+0x60>
 8006c44:	0039      	movs	r1, r7
 8006c46:	9803      	ldr	r0, [sp, #12]
 8006c48:	f000 f93e 	bl	8006ec8 <__swsetup_r>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d00d      	beq.n	8006c6c <_vfiprintf_r+0x60>
 8006c50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c52:	07db      	lsls	r3, r3, #31
 8006c54:	d503      	bpl.n	8006c5e <_vfiprintf_r+0x52>
 8006c56:	2001      	movs	r0, #1
 8006c58:	4240      	negs	r0, r0
 8006c5a:	b021      	add	sp, #132	@ 0x84
 8006c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c5e:	89bb      	ldrh	r3, [r7, #12]
 8006c60:	059b      	lsls	r3, r3, #22
 8006c62:	d4f8      	bmi.n	8006c56 <_vfiprintf_r+0x4a>
 8006c64:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006c66:	f7fe fe93 	bl	8005990 <__retarget_lock_release_recursive>
 8006c6a:	e7f4      	b.n	8006c56 <_vfiprintf_r+0x4a>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	ac08      	add	r4, sp, #32
 8006c70:	6163      	str	r3, [r4, #20]
 8006c72:	3320      	adds	r3, #32
 8006c74:	7663      	strb	r3, [r4, #25]
 8006c76:	3310      	adds	r3, #16
 8006c78:	76a3      	strb	r3, [r4, #26]
 8006c7a:	9607      	str	r6, [sp, #28]
 8006c7c:	002e      	movs	r6, r5
 8006c7e:	7833      	ldrb	r3, [r6, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <_vfiprintf_r+0x7c>
 8006c84:	2b25      	cmp	r3, #37	@ 0x25
 8006c86:	d148      	bne.n	8006d1a <_vfiprintf_r+0x10e>
 8006c88:	1b73      	subs	r3, r6, r5
 8006c8a:	9305      	str	r3, [sp, #20]
 8006c8c:	42ae      	cmp	r6, r5
 8006c8e:	d00b      	beq.n	8006ca8 <_vfiprintf_r+0x9c>
 8006c90:	002a      	movs	r2, r5
 8006c92:	0039      	movs	r1, r7
 8006c94:	9803      	ldr	r0, [sp, #12]
 8006c96:	f7ff ffa6 	bl	8006be6 <__sfputs_r>
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	d100      	bne.n	8006ca0 <_vfiprintf_r+0x94>
 8006c9e:	e0ae      	b.n	8006dfe <_vfiprintf_r+0x1f2>
 8006ca0:	6963      	ldr	r3, [r4, #20]
 8006ca2:	9a05      	ldr	r2, [sp, #20]
 8006ca4:	189b      	adds	r3, r3, r2
 8006ca6:	6163      	str	r3, [r4, #20]
 8006ca8:	7833      	ldrb	r3, [r6, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d100      	bne.n	8006cb0 <_vfiprintf_r+0xa4>
 8006cae:	e0a6      	b.n	8006dfe <_vfiprintf_r+0x1f2>
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4252      	negs	r2, r2
 8006cb6:	6062      	str	r2, [r4, #4]
 8006cb8:	a904      	add	r1, sp, #16
 8006cba:	3254      	adds	r2, #84	@ 0x54
 8006cbc:	1852      	adds	r2, r2, r1
 8006cbe:	1c75      	adds	r5, r6, #1
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	60e3      	str	r3, [r4, #12]
 8006cc4:	60a3      	str	r3, [r4, #8]
 8006cc6:	7013      	strb	r3, [r2, #0]
 8006cc8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006cca:	4b59      	ldr	r3, [pc, #356]	@ (8006e30 <_vfiprintf_r+0x224>)
 8006ccc:	2205      	movs	r2, #5
 8006cce:	0018      	movs	r0, r3
 8006cd0:	7829      	ldrb	r1, [r5, #0]
 8006cd2:	9305      	str	r3, [sp, #20]
 8006cd4:	f7ff fe1c 	bl	8006910 <memchr>
 8006cd8:	1c6e      	adds	r6, r5, #1
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d11f      	bne.n	8006d1e <_vfiprintf_r+0x112>
 8006cde:	6822      	ldr	r2, [r4, #0]
 8006ce0:	06d3      	lsls	r3, r2, #27
 8006ce2:	d504      	bpl.n	8006cee <_vfiprintf_r+0xe2>
 8006ce4:	2353      	movs	r3, #83	@ 0x53
 8006ce6:	a904      	add	r1, sp, #16
 8006ce8:	185b      	adds	r3, r3, r1
 8006cea:	2120      	movs	r1, #32
 8006cec:	7019      	strb	r1, [r3, #0]
 8006cee:	0713      	lsls	r3, r2, #28
 8006cf0:	d504      	bpl.n	8006cfc <_vfiprintf_r+0xf0>
 8006cf2:	2353      	movs	r3, #83	@ 0x53
 8006cf4:	a904      	add	r1, sp, #16
 8006cf6:	185b      	adds	r3, r3, r1
 8006cf8:	212b      	movs	r1, #43	@ 0x2b
 8006cfa:	7019      	strb	r1, [r3, #0]
 8006cfc:	782b      	ldrb	r3, [r5, #0]
 8006cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d00:	d016      	beq.n	8006d30 <_vfiprintf_r+0x124>
 8006d02:	002e      	movs	r6, r5
 8006d04:	2100      	movs	r1, #0
 8006d06:	200a      	movs	r0, #10
 8006d08:	68e3      	ldr	r3, [r4, #12]
 8006d0a:	7832      	ldrb	r2, [r6, #0]
 8006d0c:	1c75      	adds	r5, r6, #1
 8006d0e:	3a30      	subs	r2, #48	@ 0x30
 8006d10:	2a09      	cmp	r2, #9
 8006d12:	d950      	bls.n	8006db6 <_vfiprintf_r+0x1aa>
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d111      	bne.n	8006d3c <_vfiprintf_r+0x130>
 8006d18:	e017      	b.n	8006d4a <_vfiprintf_r+0x13e>
 8006d1a:	3601      	adds	r6, #1
 8006d1c:	e7af      	b.n	8006c7e <_vfiprintf_r+0x72>
 8006d1e:	9b05      	ldr	r3, [sp, #20]
 8006d20:	6822      	ldr	r2, [r4, #0]
 8006d22:	1ac0      	subs	r0, r0, r3
 8006d24:	2301      	movs	r3, #1
 8006d26:	4083      	lsls	r3, r0
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	0035      	movs	r5, r6
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	e7cc      	b.n	8006cca <_vfiprintf_r+0xbe>
 8006d30:	9b07      	ldr	r3, [sp, #28]
 8006d32:	1d19      	adds	r1, r3, #4
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	9107      	str	r1, [sp, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db01      	blt.n	8006d40 <_vfiprintf_r+0x134>
 8006d3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d3e:	e004      	b.n	8006d4a <_vfiprintf_r+0x13e>
 8006d40:	425b      	negs	r3, r3
 8006d42:	60e3      	str	r3, [r4, #12]
 8006d44:	2302      	movs	r3, #2
 8006d46:	4313      	orrs	r3, r2
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	7833      	ldrb	r3, [r6, #0]
 8006d4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d4e:	d10c      	bne.n	8006d6a <_vfiprintf_r+0x15e>
 8006d50:	7873      	ldrb	r3, [r6, #1]
 8006d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d54:	d134      	bne.n	8006dc0 <_vfiprintf_r+0x1b4>
 8006d56:	9b07      	ldr	r3, [sp, #28]
 8006d58:	3602      	adds	r6, #2
 8006d5a:	1d1a      	adds	r2, r3, #4
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	9207      	str	r2, [sp, #28]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da01      	bge.n	8006d68 <_vfiprintf_r+0x15c>
 8006d64:	2301      	movs	r3, #1
 8006d66:	425b      	negs	r3, r3
 8006d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d6a:	4d32      	ldr	r5, [pc, #200]	@ (8006e34 <_vfiprintf_r+0x228>)
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	0028      	movs	r0, r5
 8006d70:	7831      	ldrb	r1, [r6, #0]
 8006d72:	f7ff fdcd 	bl	8006910 <memchr>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d006      	beq.n	8006d88 <_vfiprintf_r+0x17c>
 8006d7a:	2340      	movs	r3, #64	@ 0x40
 8006d7c:	1b40      	subs	r0, r0, r5
 8006d7e:	4083      	lsls	r3, r0
 8006d80:	6822      	ldr	r2, [r4, #0]
 8006d82:	3601      	adds	r6, #1
 8006d84:	4313      	orrs	r3, r2
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	7831      	ldrb	r1, [r6, #0]
 8006d8a:	2206      	movs	r2, #6
 8006d8c:	482a      	ldr	r0, [pc, #168]	@ (8006e38 <_vfiprintf_r+0x22c>)
 8006d8e:	1c75      	adds	r5, r6, #1
 8006d90:	7621      	strb	r1, [r4, #24]
 8006d92:	f7ff fdbd 	bl	8006910 <memchr>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d040      	beq.n	8006e1c <_vfiprintf_r+0x210>
 8006d9a:	4b28      	ldr	r3, [pc, #160]	@ (8006e3c <_vfiprintf_r+0x230>)
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d122      	bne.n	8006de6 <_vfiprintf_r+0x1da>
 8006da0:	2207      	movs	r2, #7
 8006da2:	9b07      	ldr	r3, [sp, #28]
 8006da4:	3307      	adds	r3, #7
 8006da6:	4393      	bics	r3, r2
 8006da8:	3308      	adds	r3, #8
 8006daa:	9307      	str	r3, [sp, #28]
 8006dac:	6963      	ldr	r3, [r4, #20]
 8006dae:	9a04      	ldr	r2, [sp, #16]
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	6163      	str	r3, [r4, #20]
 8006db4:	e762      	b.n	8006c7c <_vfiprintf_r+0x70>
 8006db6:	4343      	muls	r3, r0
 8006db8:	002e      	movs	r6, r5
 8006dba:	2101      	movs	r1, #1
 8006dbc:	189b      	adds	r3, r3, r2
 8006dbe:	e7a4      	b.n	8006d0a <_vfiprintf_r+0xfe>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	200a      	movs	r0, #10
 8006dc4:	0019      	movs	r1, r3
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	7832      	ldrb	r2, [r6, #0]
 8006dcc:	1c75      	adds	r5, r6, #1
 8006dce:	3a30      	subs	r2, #48	@ 0x30
 8006dd0:	2a09      	cmp	r2, #9
 8006dd2:	d903      	bls.n	8006ddc <_vfiprintf_r+0x1d0>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0c8      	beq.n	8006d6a <_vfiprintf_r+0x15e>
 8006dd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dda:	e7c6      	b.n	8006d6a <_vfiprintf_r+0x15e>
 8006ddc:	4341      	muls	r1, r0
 8006dde:	002e      	movs	r6, r5
 8006de0:	2301      	movs	r3, #1
 8006de2:	1889      	adds	r1, r1, r2
 8006de4:	e7f1      	b.n	8006dca <_vfiprintf_r+0x1be>
 8006de6:	aa07      	add	r2, sp, #28
 8006de8:	9200      	str	r2, [sp, #0]
 8006dea:	0021      	movs	r1, r4
 8006dec:	003a      	movs	r2, r7
 8006dee:	4b14      	ldr	r3, [pc, #80]	@ (8006e40 <_vfiprintf_r+0x234>)
 8006df0:	9803      	ldr	r0, [sp, #12]
 8006df2:	e000      	b.n	8006df6 <_vfiprintf_r+0x1ea>
 8006df4:	bf00      	nop
 8006df6:	9004      	str	r0, [sp, #16]
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	d1d6      	bne.n	8006dac <_vfiprintf_r+0x1a0>
 8006dfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e00:	07db      	lsls	r3, r3, #31
 8006e02:	d405      	bmi.n	8006e10 <_vfiprintf_r+0x204>
 8006e04:	89bb      	ldrh	r3, [r7, #12]
 8006e06:	059b      	lsls	r3, r3, #22
 8006e08:	d402      	bmi.n	8006e10 <_vfiprintf_r+0x204>
 8006e0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006e0c:	f7fe fdc0 	bl	8005990 <__retarget_lock_release_recursive>
 8006e10:	89bb      	ldrh	r3, [r7, #12]
 8006e12:	065b      	lsls	r3, r3, #25
 8006e14:	d500      	bpl.n	8006e18 <_vfiprintf_r+0x20c>
 8006e16:	e71e      	b.n	8006c56 <_vfiprintf_r+0x4a>
 8006e18:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006e1a:	e71e      	b.n	8006c5a <_vfiprintf_r+0x4e>
 8006e1c:	aa07      	add	r2, sp, #28
 8006e1e:	9200      	str	r2, [sp, #0]
 8006e20:	0021      	movs	r1, r4
 8006e22:	003a      	movs	r2, r7
 8006e24:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <_vfiprintf_r+0x234>)
 8006e26:	9803      	ldr	r0, [sp, #12]
 8006e28:	f7ff f9ba 	bl	80061a0 <_printf_i>
 8006e2c:	e7e3      	b.n	8006df6 <_vfiprintf_r+0x1ea>
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	080078a9 	.word	0x080078a9
 8006e34:	080078af 	.word	0x080078af
 8006e38:	080078b3 	.word	0x080078b3
 8006e3c:	00000000 	.word	0x00000000
 8006e40:	08006be7 	.word	0x08006be7

08006e44 <__swbuf_r>:
 8006e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e46:	0006      	movs	r6, r0
 8006e48:	000d      	movs	r5, r1
 8006e4a:	0014      	movs	r4, r2
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d004      	beq.n	8006e5a <__swbuf_r+0x16>
 8006e50:	6a03      	ldr	r3, [r0, #32]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <__swbuf_r+0x16>
 8006e56:	f7fe fc39 	bl	80056cc <__sinit>
 8006e5a:	69a3      	ldr	r3, [r4, #24]
 8006e5c:	60a3      	str	r3, [r4, #8]
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	071b      	lsls	r3, r3, #28
 8006e62:	d502      	bpl.n	8006e6a <__swbuf_r+0x26>
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <__swbuf_r+0x3a>
 8006e6a:	0021      	movs	r1, r4
 8006e6c:	0030      	movs	r0, r6
 8006e6e:	f000 f82b 	bl	8006ec8 <__swsetup_r>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d003      	beq.n	8006e7e <__swbuf_r+0x3a>
 8006e76:	2501      	movs	r5, #1
 8006e78:	426d      	negs	r5, r5
 8006e7a:	0028      	movs	r0, r5
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	b2ef      	uxtb	r7, r5
 8006e84:	1ac0      	subs	r0, r0, r3
 8006e86:	6963      	ldr	r3, [r4, #20]
 8006e88:	b2ed      	uxtb	r5, r5
 8006e8a:	4283      	cmp	r3, r0
 8006e8c:	dc05      	bgt.n	8006e9a <__swbuf_r+0x56>
 8006e8e:	0021      	movs	r1, r4
 8006e90:	0030      	movs	r0, r6
 8006e92:	f7ff fc77 	bl	8006784 <_fflush_r>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d1ed      	bne.n	8006e76 <__swbuf_r+0x32>
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60a3      	str	r3, [r4, #8]
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	6022      	str	r2, [r4, #0]
 8006ea8:	701f      	strb	r7, [r3, #0]
 8006eaa:	6963      	ldr	r3, [r4, #20]
 8006eac:	4283      	cmp	r3, r0
 8006eae:	d004      	beq.n	8006eba <__swbuf_r+0x76>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d5e1      	bpl.n	8006e7a <__swbuf_r+0x36>
 8006eb6:	2d0a      	cmp	r5, #10
 8006eb8:	d1df      	bne.n	8006e7a <__swbuf_r+0x36>
 8006eba:	0021      	movs	r1, r4
 8006ebc:	0030      	movs	r0, r6
 8006ebe:	f7ff fc61 	bl	8006784 <_fflush_r>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d0d9      	beq.n	8006e7a <__swbuf_r+0x36>
 8006ec6:	e7d6      	b.n	8006e76 <__swbuf_r+0x32>

08006ec8 <__swsetup_r>:
 8006ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8006f80 <__swsetup_r+0xb8>)
 8006eca:	b570      	push	{r4, r5, r6, lr}
 8006ecc:	0005      	movs	r5, r0
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	000c      	movs	r4, r1
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d004      	beq.n	8006ee0 <__swsetup_r+0x18>
 8006ed6:	6a03      	ldr	r3, [r0, #32]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <__swsetup_r+0x18>
 8006edc:	f7fe fbf6 	bl	80056cc <__sinit>
 8006ee0:	220c      	movs	r2, #12
 8006ee2:	5ea3      	ldrsh	r3, [r4, r2]
 8006ee4:	071a      	lsls	r2, r3, #28
 8006ee6:	d423      	bmi.n	8006f30 <__swsetup_r+0x68>
 8006ee8:	06da      	lsls	r2, r3, #27
 8006eea:	d407      	bmi.n	8006efc <__swsetup_r+0x34>
 8006eec:	2209      	movs	r2, #9
 8006eee:	602a      	str	r2, [r5, #0]
 8006ef0:	2240      	movs	r2, #64	@ 0x40
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	4240      	negs	r0, r0
 8006efa:	e03a      	b.n	8006f72 <__swsetup_r+0xaa>
 8006efc:	075b      	lsls	r3, r3, #29
 8006efe:	d513      	bpl.n	8006f28 <__swsetup_r+0x60>
 8006f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f02:	2900      	cmp	r1, #0
 8006f04:	d008      	beq.n	8006f18 <__swsetup_r+0x50>
 8006f06:	0023      	movs	r3, r4
 8006f08:	3344      	adds	r3, #68	@ 0x44
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	d002      	beq.n	8006f14 <__swsetup_r+0x4c>
 8006f0e:	0028      	movs	r0, r5
 8006f10:	f7fe fd6e 	bl	80059f0 <_free_r>
 8006f14:	2300      	movs	r3, #0
 8006f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f18:	2224      	movs	r2, #36	@ 0x24
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	4393      	bics	r3, r2
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	2300      	movs	r3, #0
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	6923      	ldr	r3, [r4, #16]
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	2308      	movs	r3, #8
 8006f2a:	89a2      	ldrh	r2, [r4, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	6923      	ldr	r3, [r4, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10b      	bne.n	8006f4e <__swsetup_r+0x86>
 8006f36:	21a0      	movs	r1, #160	@ 0xa0
 8006f38:	2280      	movs	r2, #128	@ 0x80
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	0089      	lsls	r1, r1, #2
 8006f3e:	0092      	lsls	r2, r2, #2
 8006f40:	400b      	ands	r3, r1
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <__swsetup_r+0x86>
 8006f46:	0021      	movs	r1, r4
 8006f48:	0028      	movs	r0, r5
 8006f4a:	f000 f897 	bl	800707c <__smakebuf_r>
 8006f4e:	220c      	movs	r2, #12
 8006f50:	5ea3      	ldrsh	r3, [r4, r2]
 8006f52:	2101      	movs	r1, #1
 8006f54:	001a      	movs	r2, r3
 8006f56:	400a      	ands	r2, r1
 8006f58:	420b      	tst	r3, r1
 8006f5a:	d00b      	beq.n	8006f74 <__swsetup_r+0xac>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	60a2      	str	r2, [r4, #8]
 8006f60:	6962      	ldr	r2, [r4, #20]
 8006f62:	4252      	negs	r2, r2
 8006f64:	61a2      	str	r2, [r4, #24]
 8006f66:	2000      	movs	r0, #0
 8006f68:	6922      	ldr	r2, [r4, #16]
 8006f6a:	4282      	cmp	r2, r0
 8006f6c:	d101      	bne.n	8006f72 <__swsetup_r+0xaa>
 8006f6e:	061a      	lsls	r2, r3, #24
 8006f70:	d4be      	bmi.n	8006ef0 <__swsetup_r+0x28>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	0799      	lsls	r1, r3, #30
 8006f76:	d400      	bmi.n	8006f7a <__swsetup_r+0xb2>
 8006f78:	6962      	ldr	r2, [r4, #20]
 8006f7a:	60a2      	str	r2, [r4, #8]
 8006f7c:	e7f3      	b.n	8006f66 <__swsetup_r+0x9e>
 8006f7e:	46c0      	nop			@ (mov r8, r8)
 8006f80:	20000014 	.word	0x20000014

08006f84 <_raise_r>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	0004      	movs	r4, r0
 8006f88:	000d      	movs	r5, r1
 8006f8a:	291f      	cmp	r1, #31
 8006f8c:	d904      	bls.n	8006f98 <_raise_r+0x14>
 8006f8e:	2316      	movs	r3, #22
 8006f90:	6003      	str	r3, [r0, #0]
 8006f92:	2001      	movs	r0, #1
 8006f94:	4240      	negs	r0, r0
 8006f96:	bd70      	pop	{r4, r5, r6, pc}
 8006f98:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d004      	beq.n	8006fa8 <_raise_r+0x24>
 8006f9e:	008a      	lsls	r2, r1, #2
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	2a00      	cmp	r2, #0
 8006fa6:	d108      	bne.n	8006fba <_raise_r+0x36>
 8006fa8:	0020      	movs	r0, r4
 8006faa:	f000 f831 	bl	8007010 <_getpid_r>
 8006fae:	002a      	movs	r2, r5
 8006fb0:	0001      	movs	r1, r0
 8006fb2:	0020      	movs	r0, r4
 8006fb4:	f000 f81a 	bl	8006fec <_kill_r>
 8006fb8:	e7ed      	b.n	8006f96 <_raise_r+0x12>
 8006fba:	2a01      	cmp	r2, #1
 8006fbc:	d009      	beq.n	8006fd2 <_raise_r+0x4e>
 8006fbe:	1c51      	adds	r1, r2, #1
 8006fc0:	d103      	bne.n	8006fca <_raise_r+0x46>
 8006fc2:	2316      	movs	r3, #22
 8006fc4:	6003      	str	r3, [r0, #0]
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	e7e5      	b.n	8006f96 <_raise_r+0x12>
 8006fca:	2100      	movs	r1, #0
 8006fcc:	0028      	movs	r0, r5
 8006fce:	6019      	str	r1, [r3, #0]
 8006fd0:	4790      	blx	r2
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e7df      	b.n	8006f96 <_raise_r+0x12>
	...

08006fd8 <raise>:
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	4b03      	ldr	r3, [pc, #12]	@ (8006fe8 <raise+0x10>)
 8006fdc:	0001      	movs	r1, r0
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	f7ff ffd0 	bl	8006f84 <_raise_r>
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	20000014 	.word	0x20000014

08006fec <_kill_r>:
 8006fec:	2300      	movs	r3, #0
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	4d06      	ldr	r5, [pc, #24]	@ (800700c <_kill_r+0x20>)
 8006ff2:	0004      	movs	r4, r0
 8006ff4:	0008      	movs	r0, r1
 8006ff6:	0011      	movs	r1, r2
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f7fa fd4b 	bl	8001a94 <_kill>
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d103      	bne.n	800700a <_kill_r+0x1e>
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d000      	beq.n	800700a <_kill_r+0x1e>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	200006e0 	.word	0x200006e0

08007010 <_getpid_r>:
 8007010:	b510      	push	{r4, lr}
 8007012:	f7fa fd3d 	bl	8001a90 <_getpid>
 8007016:	bd10      	pop	{r4, pc}

08007018 <_malloc_usable_size_r>:
 8007018:	1f0b      	subs	r3, r1, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	1f18      	subs	r0, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	da01      	bge.n	8007026 <_malloc_usable_size_r+0xe>
 8007022:	580b      	ldr	r3, [r1, r0]
 8007024:	18c0      	adds	r0, r0, r3
 8007026:	4770      	bx	lr

08007028 <__swhatbuf_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	000e      	movs	r6, r1
 800702c:	001d      	movs	r5, r3
 800702e:	230e      	movs	r3, #14
 8007030:	5ec9      	ldrsh	r1, [r1, r3]
 8007032:	0014      	movs	r4, r2
 8007034:	b096      	sub	sp, #88	@ 0x58
 8007036:	2900      	cmp	r1, #0
 8007038:	da0c      	bge.n	8007054 <__swhatbuf_r+0x2c>
 800703a:	89b2      	ldrh	r2, [r6, #12]
 800703c:	2380      	movs	r3, #128	@ 0x80
 800703e:	0011      	movs	r1, r2
 8007040:	4019      	ands	r1, r3
 8007042:	421a      	tst	r2, r3
 8007044:	d114      	bne.n	8007070 <__swhatbuf_r+0x48>
 8007046:	2380      	movs	r3, #128	@ 0x80
 8007048:	00db      	lsls	r3, r3, #3
 800704a:	2000      	movs	r0, #0
 800704c:	6029      	str	r1, [r5, #0]
 800704e:	6023      	str	r3, [r4, #0]
 8007050:	b016      	add	sp, #88	@ 0x58
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	466a      	mov	r2, sp
 8007056:	f000 f853 	bl	8007100 <_fstat_r>
 800705a:	2800      	cmp	r0, #0
 800705c:	dbed      	blt.n	800703a <__swhatbuf_r+0x12>
 800705e:	23f0      	movs	r3, #240	@ 0xf0
 8007060:	9901      	ldr	r1, [sp, #4]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	4019      	ands	r1, r3
 8007066:	4b04      	ldr	r3, [pc, #16]	@ (8007078 <__swhatbuf_r+0x50>)
 8007068:	18c9      	adds	r1, r1, r3
 800706a:	424b      	negs	r3, r1
 800706c:	4159      	adcs	r1, r3
 800706e:	e7ea      	b.n	8007046 <__swhatbuf_r+0x1e>
 8007070:	2100      	movs	r1, #0
 8007072:	2340      	movs	r3, #64	@ 0x40
 8007074:	e7e9      	b.n	800704a <__swhatbuf_r+0x22>
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	ffffe000 	.word	0xffffe000

0800707c <__smakebuf_r>:
 800707c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800707e:	2602      	movs	r6, #2
 8007080:	898b      	ldrh	r3, [r1, #12]
 8007082:	0005      	movs	r5, r0
 8007084:	000c      	movs	r4, r1
 8007086:	b085      	sub	sp, #20
 8007088:	4233      	tst	r3, r6
 800708a:	d007      	beq.n	800709c <__smakebuf_r+0x20>
 800708c:	0023      	movs	r3, r4
 800708e:	3347      	adds	r3, #71	@ 0x47
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	6123      	str	r3, [r4, #16]
 8007094:	2301      	movs	r3, #1
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	b005      	add	sp, #20
 800709a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709c:	ab03      	add	r3, sp, #12
 800709e:	aa02      	add	r2, sp, #8
 80070a0:	f7ff ffc2 	bl	8007028 <__swhatbuf_r>
 80070a4:	9f02      	ldr	r7, [sp, #8]
 80070a6:	9001      	str	r0, [sp, #4]
 80070a8:	0039      	movs	r1, r7
 80070aa:	0028      	movs	r0, r5
 80070ac:	f7fe f9b0 	bl	8005410 <_malloc_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d108      	bne.n	80070c6 <__smakebuf_r+0x4a>
 80070b4:	220c      	movs	r2, #12
 80070b6:	5ea3      	ldrsh	r3, [r4, r2]
 80070b8:	059a      	lsls	r2, r3, #22
 80070ba:	d4ed      	bmi.n	8007098 <__smakebuf_r+0x1c>
 80070bc:	2203      	movs	r2, #3
 80070be:	4393      	bics	r3, r2
 80070c0:	431e      	orrs	r6, r3
 80070c2:	81a6      	strh	r6, [r4, #12]
 80070c4:	e7e2      	b.n	800708c <__smakebuf_r+0x10>
 80070c6:	2380      	movs	r3, #128	@ 0x80
 80070c8:	89a2      	ldrh	r2, [r4, #12]
 80070ca:	6020      	str	r0, [r4, #0]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	81a3      	strh	r3, [r4, #12]
 80070d0:	9b03      	ldr	r3, [sp, #12]
 80070d2:	6120      	str	r0, [r4, #16]
 80070d4:	6167      	str	r7, [r4, #20]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00c      	beq.n	80070f4 <__smakebuf_r+0x78>
 80070da:	0028      	movs	r0, r5
 80070dc:	230e      	movs	r3, #14
 80070de:	5ee1      	ldrsh	r1, [r4, r3]
 80070e0:	f000 f820 	bl	8007124 <_isatty_r>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d005      	beq.n	80070f4 <__smakebuf_r+0x78>
 80070e8:	2303      	movs	r3, #3
 80070ea:	89a2      	ldrh	r2, [r4, #12]
 80070ec:	439a      	bics	r2, r3
 80070ee:	3b02      	subs	r3, #2
 80070f0:	4313      	orrs	r3, r2
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	89a3      	ldrh	r3, [r4, #12]
 80070f6:	9a01      	ldr	r2, [sp, #4]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	81a3      	strh	r3, [r4, #12]
 80070fc:	e7cc      	b.n	8007098 <__smakebuf_r+0x1c>
	...

08007100 <_fstat_r>:
 8007100:	2300      	movs	r3, #0
 8007102:	b570      	push	{r4, r5, r6, lr}
 8007104:	4d06      	ldr	r5, [pc, #24]	@ (8007120 <_fstat_r+0x20>)
 8007106:	0004      	movs	r4, r0
 8007108:	0008      	movs	r0, r1
 800710a:	0011      	movs	r1, r2
 800710c:	602b      	str	r3, [r5, #0]
 800710e:	f7fa fce0 	bl	8001ad2 <_fstat>
 8007112:	1c43      	adds	r3, r0, #1
 8007114:	d103      	bne.n	800711e <_fstat_r+0x1e>
 8007116:	682b      	ldr	r3, [r5, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d000      	beq.n	800711e <_fstat_r+0x1e>
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	bd70      	pop	{r4, r5, r6, pc}
 8007120:	200006e0 	.word	0x200006e0

08007124 <_isatty_r>:
 8007124:	2300      	movs	r3, #0
 8007126:	b570      	push	{r4, r5, r6, lr}
 8007128:	4d06      	ldr	r5, [pc, #24]	@ (8007144 <_isatty_r+0x20>)
 800712a:	0004      	movs	r4, r0
 800712c:	0008      	movs	r0, r1
 800712e:	602b      	str	r3, [r5, #0]
 8007130:	f7fa fcd4 	bl	8001adc <_isatty>
 8007134:	1c43      	adds	r3, r0, #1
 8007136:	d103      	bne.n	8007140 <_isatty_r+0x1c>
 8007138:	682b      	ldr	r3, [r5, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d000      	beq.n	8007140 <_isatty_r+0x1c>
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	46c0      	nop			@ (mov r8, r8)
 8007144:	200006e0 	.word	0x200006e0

08007148 <_init>:
 8007148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714a:	46c0      	nop			@ (mov r8, r8)
 800714c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714e:	bc08      	pop	{r3}
 8007150:	469e      	mov	lr, r3
 8007152:	4770      	bx	lr

08007154 <_fini>:
 8007154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007156:	46c0      	nop			@ (mov r8, r8)
 8007158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715a:	bc08      	pop	{r3}
 800715c:	469e      	mov	lr, r3
 800715e:	4770      	bx	lr
