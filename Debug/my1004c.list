
my1004c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .default_config 00000063  08005600  08005600  00006600  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000001  08005663  08005663  00006663  2**0
                  ALLOC, READONLY
  5 .ARM          00000000  08005664  08005664  00007200  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  08005664  08005664  00007200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005664  08005664  00006664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000064  20000000  0800566c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fConfig      00000100  20000100  080056d0  00007100  2**8
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000004dc  20000200  080057d0  00007200  2**8
                  ALLOC
 12 ._user_heap_stack 00000604  200006dc  080057d0  000076dc  2**0
                  ALLOC
 13 .ARM.attributes 00000028  00000000  00000000  00007200  2**0
                  CONTENTS, READONLY
 14 .debug_info   000179ee  00000000  00000000  00007228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dd7  00000000  00000000  0001ec16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000082c4  00000000  00000000  000229ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000ca8  00000000  00000000  0002acb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000b0a  00000000  00000000  0002b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00014a58  00000000  00000000  0002c46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00014370  00000000  00000000  00040ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00051aa7  00000000  00000000  00055232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  000a6cd9  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00002908  00000000  00000000  000a6d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000005f  00000000  00000000  000a9624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d8c 	.word	0x08004d8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	08004d8c 	.word	0x08004d8c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000258:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800025a:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <MX_CRC_Init+0x40>)
 800025c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800025e:	2180      	movs	r1, #128	@ 0x80
 8000260:	0149      	lsls	r1, r1, #5
 8000262:	430a      	orrs	r2, r1
 8000264:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000268:	400b      	ands	r3, r1
 800026a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800026c:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 800026e:	4b0b      	ldr	r3, [pc, #44]	@ (800029c <MX_CRC_Init+0x44>)
 8000270:	689a      	ldr	r2, [r3, #8]
 8000272:	2160      	movs	r1, #96	@ 0x60
 8000274:	438a      	bics	r2, r1
 8000276:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 8000278:	689a      	ldr	r2, [r3, #8]
 800027a:	3120      	adds	r1, #32
 800027c:	438a      	bics	r2, r1
 800027e:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 8000280:	4a07      	ldr	r2, [pc, #28]	@ (80002a0 <MX_CRC_Init+0x48>)
 8000282:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8000284:	689a      	ldr	r2, [r3, #8]
 8000286:	3968      	subs	r1, #104	@ 0x68
 8000288:	438a      	bics	r2, r1
 800028a:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 800028c:	2201      	movs	r2, #1
 800028e:	4252      	negs	r2, r2
 8000290:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000292:	b002      	add	sp, #8
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	40021000 	.word	0x40021000
 800029c:	40023000 	.word	0x40023000
 80002a0:	04c11db7 	.word	0x04c11db7

080002a4 <MX_IWDG_Init>:
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <MX_IWDG_Init+0x30>)
 80002a6:	4a0c      	ldr	r2, [pc, #48]	@ (80002d8 <MX_IWDG_Init+0x34>)
 80002a8:	601a      	str	r2, [r3, #0]
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 80002aa:	4a0c      	ldr	r2, [pc, #48]	@ (80002dc <MX_IWDG_Init+0x38>)
 80002ac:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_IWDG_PRESCALER_256
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 80002b2:	4a0b      	ldr	r2, [pc, #44]	@ (80002e0 <MX_IWDG_Init+0x3c>)
 80002b4:	609a      	str	r2, [r3, #8]
}
 80002b6:	e002      	b.n	80002be <MX_IWDG_Init+0x1a>
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(IWDG_TypeDef *IWDGx)
{
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 80002b8:	2300      	movs	r3, #0
  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
  LL_IWDG_SetReloadCounter(IWDG, 4095);
  while (LL_IWDG_IsReady(IWDG) != 1)
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d005      	beq.n	80002ca <MX_IWDG_Init+0x26>
 80002be:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <MX_IWDG_Init+0x30>)
 80002c0:	68db      	ldr	r3, [r3, #12]
 80002c2:	075b      	lsls	r3, r3, #29
 80002c4:	d1f8      	bne.n	80002b8 <MX_IWDG_Init+0x14>
 80002c6:	2301      	movs	r3, #1
 80002c8:	e7f7      	b.n	80002ba <MX_IWDG_Init+0x16>
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 80002ca:	4b02      	ldr	r3, [pc, #8]	@ (80002d4 <MX_IWDG_Init+0x30>)
 80002cc:	4a05      	ldr	r2, [pc, #20]	@ (80002e4 <MX_IWDG_Init+0x40>)
 80002ce:	601a      	str	r2, [r3, #0]
  LL_IWDG_ReloadCounter(IWDG);
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	40003000 	.word	0x40003000
 80002d8:	0000cccc 	.word	0x0000cccc
 80002dc:	00005555 	.word	0x00005555
 80002e0:	00000fff 	.word	0x00000fff
 80002e4:	0000aaaa 	.word	0x0000aaaa

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	46de      	mov	lr, fp
 80002ec:	4657      	mov	r7, sl
 80002ee:	464e      	mov	r6, r9
 80002f0:	4645      	mov	r5, r8
 80002f2:	b5e0      	push	{r5, r6, r7, lr}
 80002f4:	b08b      	sub	sp, #44	@ 0x2c
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80002f6:	af08      	add	r7, sp, #32
 80002f8:	2208      	movs	r2, #8
 80002fa:	2100      	movs	r1, #0
 80002fc:	0038      	movs	r0, r7
 80002fe:	f003 fcc7 	bl	8003c90 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000302:	2218      	movs	r2, #24
 8000304:	2100      	movs	r1, #0
 8000306:	a802      	add	r0, sp, #8
 8000308:	f003 fcc2 	bl	8003c90 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800030c:	4b77      	ldr	r3, [pc, #476]	@ (80004ec <MX_GPIO_Init+0x204>)
 800030e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000310:	2501      	movs	r5, #1
 8000312:	432a      	orrs	r2, r5
 8000314:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000318:	402a      	ands	r2, r5
 800031a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800031c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800031e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000320:	2102      	movs	r1, #2
 8000322:	4689      	mov	r9, r1
 8000324:	430a      	orrs	r2, r1
 8000326:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800032a:	400b      	ands	r3, r1
 800032c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800032e:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000330:	26a0      	movs	r6, #160	@ 0xa0
 8000332:	05f6      	lsls	r6, r6, #23
 8000334:	000b      	movs	r3, r1
 8000336:	61b1      	str	r1, [r6, #24]
 8000338:	330e      	adds	r3, #14
 800033a:	469b      	mov	fp, r3
 800033c:	61b3      	str	r3, [r6, #24]
 800033e:	4b6c      	ldr	r3, [pc, #432]	@ (80004f0 <MX_GPIO_Init+0x208>)
 8000340:	4698      	mov	r8, r3
 8000342:	619d      	str	r5, [r3, #24]
 8000344:	6199      	str	r1, [r3, #24]
 8000346:	2380      	movs	r3, #128	@ 0x80
 8000348:	005b      	lsls	r3, r3, #1
 800034a:	61b3      	str	r3, [r6, #24]
 800034c:	2180      	movs	r1, #128	@ 0x80
 800034e:	0209      	lsls	r1, r1, #8
 8000350:	61b1      	str	r1, [r6, #24]
 8000352:	4640      	mov	r0, r8
 8000354:	3bf8      	subs	r3, #248	@ 0xf8
 8000356:	6183      	str	r3, [r0, #24]
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], SYSCFG_EXTICR1_EXTI0 << (Line >> 16U), Port << (Line >> 16U));
 8000358:	4b66      	ldr	r3, [pc, #408]	@ (80004f4 <MX_GPIO_Init+0x20c>)
 800035a:	689a      	ldr	r2, [r3, #8]
 800035c:	210f      	movs	r1, #15
 800035e:	438a      	bics	r2, r1
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	689a      	ldr	r2, [r3, #8]
 8000364:	4964      	ldr	r1, [pc, #400]	@ (80004f8 <MX_GPIO_Init+0x210>)
 8000366:	400a      	ands	r2, r1
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	689a      	ldr	r2, [r3, #8]
 800036c:	4963      	ldr	r1, [pc, #396]	@ (80004fc <MX_GPIO_Init+0x214>)
 800036e:	400a      	ands	r2, r1
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	68da      	ldr	r2, [r3, #12]
 8000374:	21f0      	movs	r1, #240	@ 0xf0
 8000376:	438a      	bics	r2, r1
 8000378:	4658      	mov	r0, fp
 800037a:	4302      	orrs	r2, r0
 800037c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800037e:	68f3      	ldr	r3, [r6, #12]
 8000380:	380d      	subs	r0, #13
 8000382:	4682      	mov	sl, r0
 8000384:	4383      	bics	r3, r0
 8000386:	60f3      	str	r3, [r6, #12]
 8000388:	68f3      	ldr	r3, [r6, #12]
 800038a:	302d      	adds	r0, #45	@ 0x2d
 800038c:	4383      	bics	r3, r0
 800038e:	60f3      	str	r3, [r6, #12]
 8000390:	68f3      	ldr	r3, [r6, #12]
 8000392:	3930      	subs	r1, #48	@ 0x30
 8000394:	438b      	bics	r3, r1
 8000396:	60f3      	str	r3, [r6, #12]
 8000398:	4644      	mov	r4, r8
 800039a:	68e4      	ldr	r4, [r4, #12]
 800039c:	4a58      	ldr	r2, [pc, #352]	@ (8000500 <MX_GPIO_Init+0x218>)
 800039e:	4014      	ands	r4, r2
 80003a0:	2380      	movs	r3, #128	@ 0x80
 80003a2:	00db      	lsls	r3, r3, #3
 80003a4:	4323      	orrs	r3, r4
 80003a6:	4644      	mov	r4, r8
 80003a8:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80003aa:	6833      	ldr	r3, [r6, #0]
 80003ac:	4654      	mov	r4, sl
 80003ae:	43a3      	bics	r3, r4
 80003b0:	6033      	str	r3, [r6, #0]
 80003b2:	6833      	ldr	r3, [r6, #0]
 80003b4:	4383      	bics	r3, r0
 80003b6:	6033      	str	r3, [r6, #0]
 80003b8:	6833      	ldr	r3, [r6, #0]
 80003ba:	438b      	bics	r3, r1
 80003bc:	6033      	str	r3, [r6, #0]
 80003be:	4640      	mov	r0, r8
 80003c0:	6803      	ldr	r3, [r0, #0]
 80003c2:	4013      	ands	r3, r2
 80003c4:	6003      	str	r3, [r0, #0]

  /**/
  LL_GPIO_SetPinMode(Button_GPIO_Port, Button_Pin, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80003c6:	9508      	str	r5, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003c8:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003ca:	2400      	movs	r4, #0
 80003cc:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80003ce:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80003d0:	0038      	movs	r0, r7
 80003d2:	f000 fc4b 	bl	8000c6c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80003d6:	2304      	movs	r3, #4
 80003d8:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003da:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003dc:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80003de:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80003e0:	0038      	movs	r0, r7
 80003e2:	f000 fc43 	bl	8000c6c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80003e6:	2308      	movs	r3, #8
 80003e8:	9308      	str	r3, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003ea:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003ec:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80003ee:	71bd      	strb	r5, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80003f0:	0038      	movs	r0, r7
 80003f2:	f000 fc3b 	bl	8000c6c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80003f6:	2020      	movs	r0, #32
 80003f8:	9008      	str	r0, [sp, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003fa:	713d      	strb	r5, [r7, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003fc:	717c      	strb	r4, [r7, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80003fe:	464a      	mov	r2, r9
 8000400:	71ba      	strb	r2, [r7, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000402:	0038      	movs	r0, r7
 8000404:	f000 fc32 	bl	8000c6c <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000408:	464f      	mov	r7, r9
 800040a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800040c:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800040e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000410:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000412:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000414:	af02      	add	r7, sp, #8
 8000416:	0039      	movs	r1, r7
 8000418:	0030      	movs	r0, r6
 800041a:	f000 fc8b 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_PWR_Pin;
 800041e:	465f      	mov	r7, fp
 8000420:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000422:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000424:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000426:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000428:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_PWR_GPIO_Port, &GPIO_InitStruct);
 800042a:	af02      	add	r7, sp, #8
 800042c:	0039      	movs	r1, r7
 800042e:	0030      	movs	r0, r6
 8000430:	f000 fc80 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_CS_Pin;
 8000434:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000436:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000438:	4657      	mov	r7, sl
 800043a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800043c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800043e:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_CS_GPIO_Port, &GPIO_InitStruct);
 8000440:	af02      	add	r7, sp, #8
 8000442:	0039      	movs	r1, r7
 8000444:	4640      	mov	r0, r8
 8000446:	f000 fc75 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DW_RST_Pin;
 800044a:	464f      	mov	r7, r9
 800044c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800044e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000450:	4657      	mov	r7, sl
 8000452:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000454:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000456:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 8000458:	af02      	add	r7, sp, #8
 800045a:	0039      	movs	r1, r7
 800045c:	4640      	mov	r0, r8
 800045e:	f000 fc69 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Red_Pin;
 8000462:	2280      	movs	r2, #128	@ 0x80
 8000464:	0052      	lsls	r2, r2, #1
 8000466:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000468:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800046a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800046c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800046e:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Red_GPIO_Port, &GPIO_InitStruct);
 8000470:	0039      	movs	r1, r7
 8000472:	0030      	movs	r0, r6
 8000474:	f000 fc5e 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LIS3DH_CS_Pin;
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	0209      	lsls	r1, r1, #8
 800047c:	9102      	str	r1, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800047e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000480:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000482:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000484:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LIS3DH_CS_GPIO_Port, &GPIO_InitStruct);
 8000486:	0039      	movs	r1, r7
 8000488:	0030      	movs	r0, r6
 800048a:	f000 fc53 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Green_Pin;
 800048e:	2308      	movs	r3, #8
 8000490:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000492:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000494:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000496:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000498:	9406      	str	r4, [sp, #24]
  LL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 800049a:	0039      	movs	r1, r7
 800049c:	4640      	mov	r0, r8
 800049e:	f000 fc49 	bl	8000d34 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = M_PIN17_Pin;
 80004a2:	465b      	mov	r3, fp
 80004a4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004a6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80004a8:	9506      	str	r5, [sp, #24]
  LL_GPIO_Init(M_PIN17_GPIO_Port, &GPIO_InitStruct);
 80004aa:	0039      	movs	r1, r7
 80004ac:	4640      	mov	r0, r8
 80004ae:	f000 fc41 	bl	8000d34 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_GPIO_Init+0x21c>)
 80004b4:	22c1      	movs	r2, #193	@ 0xc1
 80004b6:	0092      	lsls	r2, r2, #2
 80004b8:	5899      	ldr	r1, [r3, r2]
 80004ba:	4813      	ldr	r0, [pc, #76]	@ (8000508 <MX_GPIO_Init+0x220>)
 80004bc:	4001      	ands	r1, r0
 80004be:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004c0:	2020      	movs	r0, #32
 80004c2:	6018      	str	r0, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c4:	5899      	ldr	r1, [r3, r2]
 80004c6:	4811      	ldr	r0, [pc, #68]	@ (800050c <MX_GPIO_Init+0x224>)
 80004c8:	4001      	ands	r1, r0
 80004ca:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004cc:	2140      	movs	r1, #64	@ 0x40
 80004ce:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	5899      	ldr	r1, [r3, r2]
 80004d2:	0209      	lsls	r1, r1, #8
 80004d4:	0a09      	lsrs	r1, r1, #8
 80004d6:	5099      	str	r1, [r3, r2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d8:	2280      	movs	r2, #128	@ 0x80
 80004da:	601a      	str	r2, [r3, #0]
  NVIC_EnableIRQ(EXTI4_15_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004dc:	b00b      	add	sp, #44	@ 0x2c
 80004de:	bcf0      	pop	{r4, r5, r6, r7}
 80004e0:	46bb      	mov	fp, r7
 80004e2:	46b2      	mov	sl, r6
 80004e4:	46a9      	mov	r9, r5
 80004e6:	46a0      	mov	r8, r4
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	40021000 	.word	0x40021000
 80004f0:	50000400 	.word	0x50000400
 80004f4:	40010000 	.word	0x40010000
 80004f8:	fffff0ff 	.word	0xfffff0ff
 80004fc:	ffff0fff 	.word	0xffff0fff
 8000500:	fffff3ff 	.word	0xfffff3ff
 8000504:	e000e100 	.word	0xe000e100
 8000508:	ffff00ff 	.word	0xffff00ff
 800050c:	ff00ffff 	.word	0xff00ffff

08000510 <MX_RTC_Init>:
{
 8000510:	b510      	push	{r4, lr}
 8000512:	b084      	sub	sp, #16
  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8000514:	220c      	movs	r2, #12
 8000516:	2100      	movs	r1, #0
 8000518:	a801      	add	r0, sp, #4
 800051a:	f003 fbb9 	bl	8003c90 <memset>
  * @rmtoll CSR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 800051e:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <MX_RTC_Init+0x50>)
 8000520:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000522:	2380      	movs	r3, #128	@ 0x80
 8000524:	02db      	lsls	r3, r3, #11
 8000526:	430b      	orrs	r3, r1
 8000528:	6513      	str	r3, [r2, #80]	@ 0x50
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <MX_RTC_Init+0x54>)
 800052c:	21c0      	movs	r1, #192	@ 0xc0
 800052e:	0089      	lsls	r1, r1, #2
 8000530:	585a      	ldr	r2, [r3, r1]
 8000532:	480d      	ldr	r0, [pc, #52]	@ (8000568 <MX_RTC_Init+0x58>)
 8000534:	4002      	ands	r2, r0
 8000536:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000538:	2204      	movs	r2, #4
 800053a:	601a      	str	r2, [r3, #0]
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 800053c:	2300      	movs	r3, #0
 800053e:	9301      	str	r3, [sp, #4]
  RTC_InitStruct.AsynchPrescaler = 127;
 8000540:	337f      	adds	r3, #127	@ 0x7f
 8000542:	9302      	str	r3, [sp, #8]
  RTC_InitStruct.SynchPrescaler = 255;
 8000544:	3380      	adds	r3, #128	@ 0x80
 8000546:	9303      	str	r3, [sp, #12]
  LL_RTC_Init(RTC, &RTC_InitStruct);
 8000548:	4c08      	ldr	r4, [pc, #32]	@ (800056c <MX_RTC_Init+0x5c>)
 800054a:	a901      	add	r1, sp, #4
 800054c:	0020      	movs	r0, r4
 800054e:	f000 fd7b 	bl	8001048 <LL_RTC_Init>
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000552:	68a3      	ldr	r3, [r4, #8]
 8000554:	2207      	movs	r2, #7
 8000556:	4393      	bics	r3, r2
 8000558:	60a3      	str	r3, [r4, #8]
}
 800055a:	b004      	add	sp, #16
 800055c:	bd10      	pop	{r4, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	40021000 	.word	0x40021000
 8000564:	e000e100 	.word	0xe000e100
 8000568:	ff00ffff 	.word	0xff00ffff
 800056c:	40002800 	.word	0x40002800

08000570 <MX_SPI1_Init>:
{
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46c6      	mov	lr, r8
 8000574:	b500      	push	{lr}
 8000576:	b092      	sub	sp, #72	@ 0x48
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000578:	2228      	movs	r2, #40	@ 0x28
 800057a:	2100      	movs	r1, #0
 800057c:	a808      	add	r0, sp, #32
 800057e:	f003 fb87 	bl	8003c90 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	2218      	movs	r2, #24
 8000584:	2100      	movs	r1, #0
 8000586:	a802      	add	r0, sp, #8
 8000588:	f003 fb82 	bl	8003c90 <memset>
  SET_BIT(RCC->APB2ENR, Periphs);
 800058c:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <MX_SPI1_Init+0xcc>)
 800058e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000590:	2180      	movs	r1, #128	@ 0x80
 8000592:	0149      	lsls	r1, r1, #5
 8000594:	430a      	orrs	r2, r1
 8000596:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059a:	400a      	ands	r2, r1
 800059c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800059e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80005a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80005a2:	2201      	movs	r2, #1
 80005a4:	4311      	orrs	r1, r2
 80005a6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80005a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005aa:	401a      	ands	r2, r3
 80005ac:	9200      	str	r2, [sp, #0]
  (void)tmpreg;
 80005ae:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80005b0:	2320      	movs	r3, #32
 80005b2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80005b4:	3b1e      	subs	r3, #30
 80005b6:	4698      	mov	r8, r3
 80005b8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2603      	movs	r6, #3
 80005bc:	9604      	str	r6, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	25a0      	movs	r5, #160	@ 0xa0
 80005c0:	05ed      	lsls	r5, r5, #23
 80005c2:	a902      	add	r1, sp, #8
 80005c4:	0028      	movs	r0, r5
 80005c6:	f000 fbb5 	bl	8000d34 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80005ca:	2740      	movs	r7, #64	@ 0x40
 80005cc:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80005ce:	4643      	mov	r3, r8
 80005d0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005d2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005d4:	2400      	movs	r4, #0
 80005d6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005d8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80005da:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	a902      	add	r1, sp, #8
 80005de:	0028      	movs	r0, r5
 80005e0:	f000 fba8 	bl	8000d34 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80005e4:	2380      	movs	r3, #128	@ 0x80
 80005e6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80005e8:	4643      	mov	r3, r8
 80005ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80005ec:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005ee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005f0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80005f2:	9407      	str	r4, [sp, #28]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	a902      	add	r1, sp, #8
 80005f6:	0028      	movs	r0, r5
 80005f8:	f000 fb9c 	bl	8000d34 <LL_GPIO_Init>
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80005fc:	9408      	str	r4, [sp, #32]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80005fe:	2382      	movs	r3, #130	@ 0x82
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	9309      	str	r3, [sp, #36]	@ 0x24
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000604:	940a      	str	r4, [sp, #40]	@ 0x28
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000606:	940b      	str	r4, [sp, #44]	@ 0x2c
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000608:	940c      	str	r4, [sp, #48]	@ 0x30
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800060a:	33fc      	adds	r3, #252	@ 0xfc
 800060c:	930d      	str	r3, [sp, #52]	@ 0x34
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800060e:	3be9      	subs	r3, #233	@ 0xe9
 8000610:	3bff      	subs	r3, #255	@ 0xff
 8000612:	930e      	str	r3, [sp, #56]	@ 0x38
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000614:	940f      	str	r4, [sp, #60]	@ 0x3c
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000616:	9410      	str	r4, [sp, #64]	@ 0x40
  SPI_InitStruct.CRCPoly = 7;
 8000618:	3b11      	subs	r3, #17
 800061a:	9311      	str	r3, [sp, #68]	@ 0x44
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800061c:	4c08      	ldr	r4, [pc, #32]	@ (8000640 <MX_SPI1_Init+0xd0>)
 800061e:	a908      	add	r1, sp, #32
 8000620:	0020      	movs	r0, r4
 8000622:	f000 fd39 	bl	8001098 <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000626:	6863      	ldr	r3, [r4, #4]
 8000628:	2210      	movs	r2, #16
 800062a:	4393      	bics	r3, r2
 800062c:	6063      	str	r3, [r4, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	433b      	orrs	r3, r7
 8000632:	6023      	str	r3, [r4, #0]
}
 8000634:	b012      	add	sp, #72	@ 0x48
 8000636:	bc80      	pop	{r7}
 8000638:	46b8      	mov	r8, r7
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	40013000 	.word	0x40013000

08000644 <MX_USART2_UART_Init>:
{
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	b090      	sub	sp, #64	@ 0x40
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000648:	221c      	movs	r2, #28
 800064a:	2100      	movs	r1, #0
 800064c:	a809      	add	r0, sp, #36	@ 0x24
 800064e:	f003 fb1f 	bl	8003c90 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	2218      	movs	r2, #24
 8000654:	2100      	movs	r1, #0
 8000656:	a803      	add	r0, sp, #12
 8000658:	f003 fb1a 	bl	8003c90 <memset>
  SET_BIT(RCC->APB1ENR, Periphs);
 800065c:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <MX_USART2_UART_Init+0xf4>)
 800065e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	0289      	lsls	r1, r1, #10
 8000664:	430a      	orrs	r2, r1
 8000666:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800066a:	400a      	ands	r2, r1
 800066c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800066e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8000670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000672:	2402      	movs	r4, #2
 8000674:	4322      	orrs	r2, r4
 8000676:	62da      	str	r2, [r3, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067a:	4023      	ands	r3, r4
 800067c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800067e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000680:	2340      	movs	r3, #64	@ 0x40
 8000682:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000684:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000686:	2603      	movs	r6, #3
 8000688:	9605      	str	r6, [sp, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	4d2c      	ldr	r5, [pc, #176]	@ (800073c <MX_USART2_UART_Init+0xf8>)
 800068c:	a903      	add	r1, sp, #12
 800068e:	0028      	movs	r0, r5
 8000690:	f000 fb50 	bl	8000d34 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000698:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800069a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800069c:	2400      	movs	r4, #0
 800069e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006a0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80006a2:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	a903      	add	r1, sp, #12
 80006a6:	0028      	movs	r0, r5
 80006a8:	f000 fb44 	bl	8000d34 <LL_GPIO_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_USART2_UART_Init+0xfc>)
 80006ae:	21c7      	movs	r1, #199	@ 0xc7
 80006b0:	0089      	lsls	r1, r1, #2
 80006b2:	585a      	ldr	r2, [r3, r1]
 80006b4:	20ff      	movs	r0, #255	@ 0xff
 80006b6:	4382      	bics	r2, r0
 80006b8:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	0552      	lsls	r2, r2, #21
 80006be:	601a      	str	r2, [r3, #0]
  USART_InitStruct.BaudRate = 115200;
 80006c0:	23e1      	movs	r3, #225	@ 0xe1
 80006c2:	025b      	lsls	r3, r3, #9
 80006c4:	9309      	str	r3, [sp, #36]	@ 0x24
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80006c6:	940a      	str	r4, [sp, #40]	@ 0x28
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80006c8:	940b      	str	r4, [sp, #44]	@ 0x2c
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80006ca:	940c      	str	r4, [sp, #48]	@ 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80006cc:	230c      	movs	r3, #12
 80006ce:	930d      	str	r3, [sp, #52]	@ 0x34
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80006d0:	940e      	str	r4, [sp, #56]	@ 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80006d2:	940f      	str	r4, [sp, #60]	@ 0x3c
  LL_USART_Init(USART2, &USART_InitStruct);
 80006d4:	4c1b      	ldr	r4, [pc, #108]	@ (8000744 <MX_USART2_UART_Init+0x100>)
 80006d6:	a909      	add	r1, sp, #36	@ 0x24
 80006d8:	0020      	movs	r0, r4
 80006da:	f000 fd2f 	bl	800113c <LL_USART_Init>
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80006de:	6863      	ldr	r3, [r4, #4]
 80006e0:	4a19      	ldr	r2, [pc, #100]	@ (8000748 <MX_USART2_UART_Init+0x104>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80006e6:	68a3      	ldr	r3, [r4, #8]
 80006e8:	222a      	movs	r2, #42	@ 0x2a
 80006ea:	4393      	bics	r3, r2
 80006ec:	60a3      	str	r3, [r4, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006ee:	6822      	ldr	r2, [r4, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	431a      	orrs	r2, r3
 80006f4:	6022      	str	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80006f6:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80006fa:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
 80006fe:	6820      	ldr	r0, [r4, #0]
 8000700:	2280      	movs	r2, #128	@ 0x80
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	4302      	orrs	r2, r0
 8000706:	6022      	str	r2, [r4, #0]
 8000708:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800070c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000710:	f383 8810 	msr	PRIMASK, r3
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8000714:	68a2      	ldr	r2, [r4, #8]
 8000716:	431a      	orrs	r2, r3
 8000718:	60a2      	str	r2, [r4, #8]
 800071a:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800071e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000722:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	2120      	movs	r1, #32
 800072a:	430b      	orrs	r3, r1
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	f382 8810 	msr	PRIMASK, r2
}
 8000732:	b010      	add	sp, #64	@ 0x40
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40021000 	.word	0x40021000
 800073c:	50000400 	.word	0x50000400
 8000740:	e000e100 	.word	0xe000e100
 8000744:	40004400 	.word	0x40004400
 8000748:	ffffb7ff 	.word	0xffffb7ff

0800074c <MX_I2C1_Init>:
{
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	46c6      	mov	lr, r8
 8000750:	b500      	push	{lr}
 8000752:	b090      	sub	sp, #64	@ 0x40
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000754:	221c      	movs	r2, #28
 8000756:	2100      	movs	r1, #0
 8000758:	a809      	add	r0, sp, #36	@ 0x24
 800075a:	f003 fa99 	bl	8003c90 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	2218      	movs	r2, #24
 8000760:	2100      	movs	r1, #0
 8000762:	a803      	add	r0, sp, #12
 8000764:	f003 fa94 	bl	8003c90 <memset>
  SET_BIT(RCC->IOPENR, Periphs);
 8000768:	4c2b      	ldr	r4, [pc, #172]	@ (8000818 <MX_I2C1_Init+0xcc>)
 800076a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800076c:	2601      	movs	r6, #1
 800076e:	4333      	orrs	r3, r6
 8000770:	62e3      	str	r3, [r4, #44]	@ 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000772:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8000774:	4033      	ands	r3, r6
 8000776:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000778:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000780:	3bff      	subs	r3, #255	@ 0xff
 8000782:	3bff      	subs	r3, #255	@ 0xff
 8000784:	4698      	mov	r8, r3
 8000786:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2503      	movs	r5, #3
 800078a:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800078c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800078e:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	27a0      	movs	r7, #160	@ 0xa0
 8000792:	05ff      	lsls	r7, r7, #23
 8000794:	a903      	add	r1, sp, #12
 8000796:	0038      	movs	r0, r7
 8000798:	f000 facc 	bl	8000d34 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80007a2:	4643      	mov	r3, r8
 80007a4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80007a8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2500      	movs	r5, #0
 80007ac:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007ae:	9608      	str	r6, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	a903      	add	r1, sp, #12
 80007b2:	0038      	movs	r0, r7
 80007b4:	f000 fabe 	bl	8000d34 <LL_GPIO_Init>
  SET_BIT(RCC->APB1ENR, Periphs);
 80007b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	0392      	lsls	r2, r2, #14
 80007be:	4313      	orrs	r3, r2
 80007c0:	63a3      	str	r3, [r4, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007c2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80007c4:	4013      	ands	r3, r2
 80007c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80007c8:	9b01      	ldr	r3, [sp, #4]
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80007ca:	4c14      	ldr	r4, [pc, #80]	@ (800081c <MX_I2C1_Init+0xd0>)
 80007cc:	6862      	ldr	r2, [r4, #4]
 80007ce:	2380      	movs	r3, #128	@ 0x80
 80007d0:	049b      	lsls	r3, r3, #18
 80007d2:	4313      	orrs	r3, r2
 80007d4:	6063      	str	r3, [r4, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80007d6:	68e3      	ldr	r3, [r4, #12]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <MX_I2C1_Init+0xd4>)
 80007da:	4013      	ands	r3, r2
 80007dc:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80007de:	6823      	ldr	r3, [r4, #0]
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <MX_I2C1_Init+0xd8>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000828 <MX_I2C1_Init+0xdc>)
 80007ea:	4013      	ands	r3, r2
 80007ec:	6023      	str	r3, [r4, #0]
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80007ee:	9509      	str	r5, [sp, #36]	@ 0x24
  I2C_InitStruct.Timing = 0x00503D58;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_I2C1_Init+0xe0>)
 80007f2:	930a      	str	r3, [sp, #40]	@ 0x28
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80007f4:	950b      	str	r5, [sp, #44]	@ 0x2c
  I2C_InitStruct.DigitalFilter = 0;
 80007f6:	950c      	str	r5, [sp, #48]	@ 0x30
  I2C_InitStruct.OwnAddress1 = 0;
 80007f8:	950d      	str	r5, [sp, #52]	@ 0x34
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80007fa:	950e      	str	r5, [sp, #56]	@ 0x38
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80007fc:	950f      	str	r5, [sp, #60]	@ 0x3c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80007fe:	a909      	add	r1, sp, #36	@ 0x24
 8000800:	0020      	movs	r0, r4
 8000802:	f000 faf3 	bl	8000dec <LL_I2C_Init>
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000806:	68e3      	ldr	r3, [r4, #12]
 8000808:	4a09      	ldr	r2, [pc, #36]	@ (8000830 <MX_I2C1_Init+0xe4>)
 800080a:	4013      	ands	r3, r2
 800080c:	60e3      	str	r3, [r4, #12]
}
 800080e:	b010      	add	sp, #64	@ 0x40
 8000810:	bc80      	pop	{r7}
 8000812:	46b8      	mov	r8, r7
 8000814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40021000 	.word	0x40021000
 800081c:	40005400 	.word	0x40005400
 8000820:	ffff7fff 	.word	0xffff7fff
 8000824:	fff7ffff 	.word	0xfff7ffff
 8000828:	fffdffff 	.word	0xfffdffff
 800082c:	00503d58 	.word	0x00503d58
 8000830:	fffff801 	.word	0xfffff801

08000834 <SystemClock_Config>:
{
 8000834:	b510      	push	{r4, lr}
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000836:	4a46      	ldr	r2, [pc, #280]	@ (8000950 <SystemClock_Config+0x11c>)
 8000838:	6813      	ldr	r3, [r2, #0]
 800083a:	2101      	movs	r1, #1
 800083c:	438b      	bics	r3, r1
 800083e:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000840:	4b43      	ldr	r3, [pc, #268]	@ (8000950 <SystemClock_Config+0x11c>)
 8000842:	681b      	ldr	r3, [r3, #0]
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000844:	07db      	lsls	r3, r3, #31
 8000846:	d4fb      	bmi.n	8000840 <SystemClock_Config+0xc>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000848:	4942      	ldr	r1, [pc, #264]	@ (8000954 <SystemClock_Config+0x120>)
 800084a:	680a      	ldr	r2, [r1, #0]
 800084c:	4b42      	ldr	r3, [pc, #264]	@ (8000958 <SystemClock_Config+0x124>)
 800084e:	401a      	ands	r2, r3
 8000850:	2380      	movs	r3, #128	@ 0x80
 8000852:	011b      	lsls	r3, r3, #4
 8000854:	4313      	orrs	r3, r2
 8000856:	600b      	str	r3, [r1, #0]
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000858:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <SystemClock_Config+0x120>)
 800085a:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800085c:	06db      	lsls	r3, r3, #27
 800085e:	d4fb      	bmi.n	8000858 <SystemClock_Config+0x24>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000860:	4a3e      	ldr	r2, [pc, #248]	@ (800095c <SystemClock_Config+0x128>)
 8000862:	6813      	ldr	r3, [r2, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	430b      	orrs	r3, r1
 8000868:	6013      	str	r3, [r2, #0]
}
 800086a:	e001      	b.n	8000870 <SystemClock_Config+0x3c>
  while(LL_RCC_HSI_IsReady() != 1)
 800086c:	2b01      	cmp	r3, #1
 800086e:	d008      	beq.n	8000882 <SystemClock_Config+0x4e>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000870:	4b3a      	ldr	r3, [pc, #232]	@ (800095c <SystemClock_Config+0x128>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	2104      	movs	r1, #4
 8000876:	000b      	movs	r3, r1
 8000878:	4013      	ands	r3, r2
 800087a:	4211      	tst	r1, r2
 800087c:	d0f6      	beq.n	800086c <SystemClock_Config+0x38>
 800087e:	2301      	movs	r3, #1
 8000880:	e7f4      	b.n	800086c <SystemClock_Config+0x38>
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000882:	4a36      	ldr	r2, [pc, #216]	@ (800095c <SystemClock_Config+0x128>)
 8000884:	6850      	ldr	r0, [r2, #4]
 8000886:	4936      	ldr	r1, [pc, #216]	@ (8000960 <SystemClock_Config+0x12c>)
 8000888:	4008      	ands	r0, r1
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	0149      	lsls	r1, r1, #5
 800088e:	4301      	orrs	r1, r0
 8000890:	6051      	str	r1, [r2, #4]
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000892:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000894:	2001      	movs	r0, #1
 8000896:	4301      	orrs	r1, r0
 8000898:	6511      	str	r1, [r2, #80]	@ 0x50
}
 800089a:	e001      	b.n	80008a0 <SystemClock_Config+0x6c>
  while(LL_RCC_LSI_IsReady() != 1)
 800089c:	2801      	cmp	r0, #1
 800089e:	d008      	beq.n	80008b2 <SystemClock_Config+0x7e>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80008a0:	4a2e      	ldr	r2, [pc, #184]	@ (800095c <SystemClock_Config+0x128>)
 80008a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80008a4:	2102      	movs	r1, #2
 80008a6:	0008      	movs	r0, r1
 80008a8:	4010      	ands	r0, r2
 80008aa:	4211      	tst	r1, r2
 80008ac:	d0f6      	beq.n	800089c <SystemClock_Config+0x68>
 80008ae:	0018      	movs	r0, r3
 80008b0:	e7f4      	b.n	800089c <SystemClock_Config+0x68>
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80008b2:	4a28      	ldr	r2, [pc, #160]	@ (8000954 <SystemClock_Config+0x120>)
 80008b4:	6811      	ldr	r1, [r2, #0]
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	430b      	orrs	r3, r1
 80008bc:	6013      	str	r3, [r2, #0]
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_RTCSEL));
 80008be:	4b27      	ldr	r3, [pc, #156]	@ (800095c <SystemClock_Config+0x128>)
 80008c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008c2:	22c0      	movs	r2, #192	@ 0xc0
 80008c4:	0292      	lsls	r2, r2, #10
 80008c6:	4013      	ands	r3, r2
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSI)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	0292      	lsls	r2, r2, #10
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d010      	beq.n	80008f2 <SystemClock_Config+0xbe>
  * @rmtoll CSR         RTCRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_RTCRST);
 80008d0:	4b22      	ldr	r3, [pc, #136]	@ (800095c <SystemClock_Config+0x128>)
 80008d2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	0312      	lsls	r2, r2, #12
 80008d8:	430a      	orrs	r2, r1
 80008da:	651a      	str	r2, [r3, #80]	@ 0x50
  * @rmtoll CSR         RTCRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST);
 80008dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80008de:	4921      	ldr	r1, [pc, #132]	@ (8000964 <SystemClock_Config+0x130>)
 80008e0:	400a      	ands	r2, r1
 80008e2:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CSR, RCC_CSR_RTCSEL, Source);
 80008e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80008e6:	4a20      	ldr	r2, [pc, #128]	@ (8000968 <SystemClock_Config+0x134>)
 80008e8:	4011      	ands	r1, r2
 80008ea:	2280      	movs	r2, #128	@ 0x80
 80008ec:	0292      	lsls	r2, r2, #10
 80008ee:	430a      	orrs	r2, r1
 80008f0:	651a      	str	r2, [r3, #80]	@ 0x50
  SET_BIT(RCC->CSR, RCC_CSR_RTCEN);
 80008f2:	4b1a      	ldr	r3, [pc, #104]	@ (800095c <SystemClock_Config+0x128>)
 80008f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80008f6:	2280      	movs	r2, #128	@ 0x80
 80008f8:	02d2      	lsls	r2, r2, #11
 80008fa:	430a      	orrs	r2, r1
 80008fc:	651a      	str	r2, [r3, #80]	@ 0x50
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80008fe:	68da      	ldr	r2, [r3, #12]
 8000900:	21f0      	movs	r1, #240	@ 0xf0
 8000902:	438a      	bics	r2, r1
 8000904:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	4918      	ldr	r1, [pc, #96]	@ (800096c <SystemClock_Config+0x138>)
 800090a:	400a      	ands	r2, r1
 800090c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	4917      	ldr	r1, [pc, #92]	@ (8000970 <SystemClock_Config+0x13c>)
 8000912:	400a      	ands	r2, r1
 8000914:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000916:	68da      	ldr	r2, [r3, #12]
 8000918:	2103      	movs	r1, #3
 800091a:	438a      	bics	r2, r1
 800091c:	3902      	subs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	60da      	str	r2, [r3, #12]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000922:	4b0e      	ldr	r3, [pc, #56]	@ (800095c <SystemClock_Config+0x128>)
 8000924:	68da      	ldr	r2, [r3, #12]
 8000926:	230c      	movs	r3, #12
 8000928:	4013      	ands	r3, r2
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800092a:	2b04      	cmp	r3, #4
 800092c:	d1f9      	bne.n	8000922 <SystemClock_Config+0xee>
  LL_Init1msTick(16000000);
 800092e:	4c11      	ldr	r4, [pc, #68]	@ (8000974 <SystemClock_Config+0x140>)
 8000930:	0020      	movs	r0, r4
 8000932:	f000 fc43 	bl	80011bc <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000936:	0020      	movs	r0, r4
 8000938:	f000 fc64 	bl	8001204 <LL_SetSystemCoreClock>
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <SystemClock_Config+0x128>)
 800093e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000940:	210c      	movs	r1, #12
 8000942:	438a      	bics	r2, r1
 8000944:	64da      	str	r2, [r3, #76]	@ 0x4c
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4U) & 0x000FF000U), ((I2CxSource << 4U) & 0x000FF000U));
 8000946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000948:	490b      	ldr	r1, [pc, #44]	@ (8000978 <SystemClock_Config+0x144>)
 800094a:	400a      	ands	r2, r1
 800094c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800094e:	bd10      	pop	{r4, pc}
 8000950:	40022000 	.word	0x40022000
 8000954:	40007000 	.word	0x40007000
 8000958:	ffffe7ff 	.word	0xffffe7ff
 800095c:	40021000 	.word	0x40021000
 8000960:	ffffe0ff 	.word	0xffffe0ff
 8000964:	fff7ffff 	.word	0xfff7ffff
 8000968:	fffcffff 	.word	0xfffcffff
 800096c:	fffff8ff 	.word	0xfffff8ff
 8000970:	ffffc7ff 	.word	0xffffc7ff
 8000974:	00f42400 	.word	0x00f42400
 8000978:	ffffcfff 	.word	0xffffcfff

0800097c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097e:	e7fe      	b.n	800097e <Error_Handler+0x2>

08000980 <inittestapplication>:
{
 8000980:	b570      	push	{r4, r5, r6, lr}
   a = decamutexon();
 8000982:	f000 fe05 	bl	8001590 <decamutexon>
 8000986:	0005      	movs	r5, r0
   port_set_dw1000_slowrate();
 8000988:	f000 fdbc 	bl	8001504 <port_set_dw1000_slowrate>
   devID = dwt_readdevid();
 800098c:	f001 fcae 	bl	80022ec <dwt_readdevid>
   if(DWT_DEVICE_ID != devID)
 8000990:	4b19      	ldr	r3, [pc, #100]	@ (80009f8 <inittestapplication+0x78>)
 8000992:	4298      	cmp	r0, r3
 8000994:	d006      	beq.n	80009a4 <inittestapplication+0x24>
       port_wakeup_dw1000();
 8000996:	f000 fe21 	bl	80015dc <port_wakeup_dw1000>
       devID = dwt_readdevid();
 800099a:	f001 fca7 	bl	80022ec <dwt_readdevid>
       if (DWT_DEVICE_ID != devID){
 800099e:	4b16      	ldr	r3, [pc, #88]	@ (80009f8 <inittestapplication+0x78>)
 80009a0:	4298      	cmp	r0, r3
 80009a2:	d123      	bne.n	80009ec <inittestapplication+0x6c>
   result = instance_init( 1 );
 80009a4:	2001      	movs	r0, #1
 80009a6:	f002 f9e9 	bl	8002d7c <instance_init>
 80009aa:	1e04      	subs	r4, r0, #0
   if (0 > result) {
 80009ac:	db20      	blt.n	80009f0 <inittestapplication+0x70>
   port_set_dw1000_fastrate();
 80009ae:	f000 fdcd 	bl	800154c <port_set_dw1000_fastrate>
   devID = dwt_readdevid();
 80009b2:	f001 fc9b 	bl	80022ec <dwt_readdevid>
   if (DWT_DEVICE_ID != devID)   // Means it is NOT MP device
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <inittestapplication+0x78>)
 80009b8:	4298      	cmp	r0, r3
 80009ba:	d11b      	bne.n	80009f4 <inittestapplication+0x74>
   instance_config(app.pConfig) ;  // Set operating channel etc
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <inittestapplication+0x7c>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	f002 fa3a 	bl	8002e38 <instance_config>
   dwt_write32bitreg(EXT_SYNC_ID, EC_CTRL_OSTSM);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2100      	movs	r1, #0
 80009c8:	2024      	movs	r0, #36	@ 0x24
 80009ca:	f001 fccc 	bl	8002366 <dwt_write32bitoffsetreg>
   dwt_writetxdata(FRAME_LEN, tx_frame, 0);
 80009ce:	490c      	ldr	r1, [pc, #48]	@ (8000a00 <inittestapplication+0x80>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	200c      	movs	r0, #12
 80009d4:	f001 fc45 	bl	8002262 <dwt_writetxdata>
   dwt_writetxfctrl(FRAME_LEN, 0, 1);  // ranging enabled=1
 80009d8:	2201      	movs	r2, #1
 80009da:	2100      	movs	r1, #0
 80009dc:	200c      	movs	r0, #12
 80009de:	f001 fce1 	bl	80023a4 <dwt_writetxfctrl>
   decamutexoff(a); //enable ScenSor (EXT_IRQ) before starting
 80009e2:	0028      	movs	r0, r5
 80009e4:	f000 fdd6 	bl	8001594 <decamutexoff>
}
 80009e8:	0020      	movs	r0, r4
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
    	   Error_Handler();
 80009ec:	f7ff ffc6 	bl	800097c <Error_Handler>
	   Error_Handler();
 80009f0:	f7ff ffc4 	bl	800097c <Error_Handler>
	   Error_Handler();
 80009f4:	f7ff ffc2 	bl	800097c <Error_Handler>
 80009f8:	deca0130 	.word	0xdeca0130
 80009fc:	2000021c 	.word	0x2000021c
 8000a00:	20000000 	.word	0x20000000

08000a04 <main>:
{
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	b082      	sub	sp, #8
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY );
 8000a08:	4a3c      	ldr	r2, [pc, #240]	@ (8000afc <main+0xf8>)
 8000a0a:	6853      	ldr	r3, [r2, #4]
 8000a0c:	2607      	movs	r6, #7
 8000a0e:	4333      	orrs	r3, r6
 8000a10:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a12:	4c3b      	ldr	r4, [pc, #236]	@ (8000b00 <main+0xfc>)
 8000a14:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000a16:	2301      	movs	r3, #1
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	6362      	str	r2, [r4, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a1c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000a1e:	4013      	ands	r3, r2
 8000a20:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000a22:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a24:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000a26:	2280      	movs	r2, #128	@ 0x80
 8000a28:	0552      	lsls	r2, r2, #21
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	63a3      	str	r3, [r4, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a2e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000a30:	4013      	ands	r3, r2
 8000a32:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000a34:	9b00      	ldr	r3, [sp, #0]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a36:	4933      	ldr	r1, [pc, #204]	@ (8000b04 <main+0x100>)
 8000a38:	6a0b      	ldr	r3, [r1, #32]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	22c0      	movs	r2, #192	@ 0xc0
 8000a40:	0612      	lsls	r2, r2, #24
 8000a42:	4313      	orrs	r3, r2
 8000a44:	620b      	str	r3, [r1, #32]
  SystemClock_Config();
 8000a46:	f7ff fef5 	bl	8000834 <SystemClock_Config>
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4d2f      	ldr	r5, [pc, #188]	@ (8000b08 <main+0x104>)
 8000a4c:	602e      	str	r6, [r5, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000a4e:	68e2      	ldr	r2, [r4, #12]
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <main+0x108>)
 8000a52:	401a      	ands	r2, r3
 8000a54:	2380      	movs	r3, #128	@ 0x80
 8000a56:	021b      	lsls	r3, r3, #8
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60e3      	str	r3, [r4, #12]
  MX_GPIO_Init();
 8000a5c:	f7ff fc44 	bl	80002e8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000a60:	f7ff fbfa 	bl	8000258 <MX_CRC_Init>
  MX_RTC_Init();
 8000a64:	f7ff fd54 	bl	8000510 <MX_RTC_Init>
  MX_SPI1_Init();
 8000a68:	f7ff fd82 	bl	8000570 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a6c:	f7ff fdea 	bl	8000644 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000a70:	f7ff fc18 	bl	80002a4 <MX_IWDG_Init>
  MX_I2C1_Init();
 8000a74:	f7ff fe6a 	bl	800074c <MX_I2C1_Init>
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	602b      	str	r3, [r5, #0]
  memset(&app,0,sizeof(app));
 8000a80:	4823      	ldr	r0, [pc, #140]	@ (8000b10 <main+0x10c>)
 8000a82:	320c      	adds	r2, #12
 8000a84:	2100      	movs	r1, #0
 8000a86:	f003 f903 	bl	8003c90 <memset>
    reset_DW1000();
 8000a8a:	f000 fd85 	bl	8001598 <reset_DW1000>
    load_bssConfig();                 /**< load the RAM Configuration parameters from NVM block */
 8000a8e:	f001 fb95 	bl	80021bc <load_bssConfig>
    int result = inittestapplication();
 8000a92:	f7ff ff75 	bl	8000980 <inittestapplication>
    if ( result < 0 ){
 8000a96:	2800      	cmp	r0, #0
 8000a98:	db20      	blt.n	8000adc <main+0xd8>
    app.blinkenable = 1;
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <main+0x10c>)
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	6053      	str	r3, [r2, #4]
    app.pcurrent_blink_interval_ms = &(app.pConfig->blink.interval_in_ms);
 8000aa0:	6813      	ldr	r3, [r2, #0]
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	310c      	adds	r1, #12
 8000aa6:	6091      	str	r1, [r2, #8]
    if ( app.pConfig->blink.interval_in_ms == app.pConfig->blink.interval_slow_in_ms ) {
 8000aa8:	7b19      	ldrb	r1, [r3, #12]
 8000aaa:	7b5a      	ldrb	r2, [r3, #13]
 8000aac:	0212      	lsls	r2, r2, #8
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	7b99      	ldrb	r1, [r3, #14]
 8000ab2:	0409      	lsls	r1, r1, #16
 8000ab4:	4311      	orrs	r1, r2
 8000ab6:	7bda      	ldrb	r2, [r3, #15]
 8000ab8:	0612      	lsls	r2, r2, #24
 8000aba:	430a      	orrs	r2, r1
 8000abc:	7c19      	ldrb	r1, [r3, #16]
 8000abe:	7c58      	ldrb	r0, [r3, #17]
 8000ac0:	0200      	lsls	r0, r0, #8
 8000ac2:	4308      	orrs	r0, r1
 8000ac4:	7c99      	ldrb	r1, [r3, #18]
 8000ac6:	0409      	lsls	r1, r1, #16
 8000ac8:	4301      	orrs	r1, r0
 8000aca:	7cdb      	ldrb	r3, [r3, #19]
 8000acc:	061b      	lsls	r3, r3, #24
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d005      	beq.n	8000ae0 <main+0xdc>
  	  lis3dh_configure_int();
 8000ad4:	f000 fe1c 	bl	8001710 <lis3dh_configure_int>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ad8:	b662      	cpsie	i
}
 8000ada:	e009      	b.n	8000af0 <main+0xec>
  	  Error_Handler();   // Failed to intialze SPI.
 8000adc:	f7ff ff4e 	bl	800097c <Error_Handler>
  	  lis3dh_powerdown();
 8000ae0:	f002 fe70 	bl	80037c4 <lis3dh_powerdown>
 8000ae4:	e7f8      	b.n	8000ad8 <main+0xd4>
		  process_uartmsg();
 8000ae6:	f001 fad3 	bl	8002090 <process_uartmsg>
		  LEDS_OFF(LED_BLUE_MASK);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 fdb0 	bl	8001650 <LEDS_OFF>
	  if( deca_uart_rx_data_ready() )
 8000af0:	f000 fc70 	bl	80013d4 <deca_uart_rx_data_ready>
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d0fb      	beq.n	8000af0 <main+0xec>
 8000af8:	e7f5      	b.n	8000ae6 <main+0xe2>
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	40015800 	.word	0x40015800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	e000e010 	.word	0xe000e010
 8000b0c:	ffff7fff 	.word	0xffff7fff
 8000b10:	2000021c 	.word	0x2000021c

08000b14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler>

08000b16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler>

08000b18 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	IncSysTick();
 8000b1e:	f000 fce3 	bl	80014e8 <IncSysTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b22:	bd10      	pop	{r4, pc}

08000b24 <RTC_IRQHandler>:
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b24:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <RTC_IRQHandler+0x28>)
 8000b26:	68d8      	ldr	r0, [r3, #12]
 8000b28:	22ff      	movs	r2, #255	@ 0xff
 8000b2a:	4010      	ands	r0, r2
 8000b2c:	4908      	ldr	r1, [pc, #32]	@ (8000b50 <RTC_IRQHandler+0x2c>)
 8000b2e:	4301      	orrs	r1, r0
 8000b30:	60d9      	str	r1, [r3, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_ALRA(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_ALRAF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8000b32:	68d9      	ldr	r1, [r3, #12]
 8000b34:	400a      	ands	r2, r1
 8000b36:	4907      	ldr	r1, [pc, #28]	@ (8000b54 <RTC_IRQHandler+0x30>)
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	60da      	str	r2, [r3, #12]
  /* USER CODE END RTC_IRQn 0 */
  /* USER CODE BEGIN RTC_IRQn 1 */
	LL_RTC_ClearFlag_WUT(RTC);
	LL_RTC_ClearFlag_ALRA(RTC);

    EXTI->PR = EXTI_IMR_IM17;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <RTC_IRQHandler+0x34>)
 8000b3e:	2280      	movs	r2, #128	@ 0x80
 8000b40:	0292      	lsls	r2, r2, #10
 8000b42:	615a      	str	r2, [r3, #20]
	EXTI->PR = EXTI_IMR_IM20;
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	0352      	lsls	r2, r2, #13
 8000b48:	615a      	str	r2, [r3, #20]
  /* USER CODE END RTC_IRQn 1 */
}
 8000b4a:	4770      	bx	lr
 8000b4c:	40002800 	.word	0x40002800
 8000b50:	fffffb7f 	.word	0xfffffb7f
 8000b54:	fffffe7f 	.word	0xfffffe7f
 8000b58:	40010400 	.word	0x40010400

08000b5c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000b5c:	b510      	push	{r4, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <EXTI0_1_IRQHandler+0x18>)
 8000b60:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8000b62:	07db      	lsls	r3, r3, #31
 8000b64:	d400      	bmi.n	8000b68 <EXTI0_1_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000b66:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <EXTI0_1_IRQHandler+0x18>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	615a      	str	r2, [r3, #20]
    GPIO_EXTI0_Callback();
 8000b6e:	f000 fe15 	bl	800179c <GPIO_EXTI0_Callback>
}
 8000b72:	e7f8      	b.n	8000b66 <EXTI0_1_IRQHandler+0xa>
 8000b74:	40010400 	.word	0x40010400

08000b78 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000b78:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <EXTI2_3_IRQHandler+0x2c>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8000b7e:	075b      	lsls	r3, r3, #29
 8000b80:	d404      	bmi.n	8000b8c <EXTI2_3_IRQHandler+0x14>
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <EXTI2_3_IRQHandler+0x2c>)
 8000b84:	695b      	ldr	r3, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
    GPIO_EXTI3_Callback();
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8000b86:	071b      	lsls	r3, r3, #28
 8000b88:	d406      	bmi.n	8000b98 <EXTI2_3_IRQHandler+0x20>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000b8a:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <EXTI2_3_IRQHandler+0x2c>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	615a      	str	r2, [r3, #20]
    GPIO_EXTI3_Callback();
 8000b92:	f000 fdfd 	bl	8001790 <GPIO_EXTI3_Callback>
 8000b96:	e7f4      	b.n	8000b82 <EXTI2_3_IRQHandler+0xa>
 8000b98:	4b02      	ldr	r3, [pc, #8]	@ (8000ba4 <EXTI2_3_IRQHandler+0x2c>)
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	615a      	str	r2, [r3, #20]
    dwt_isr();
 8000b9e:	f001 ff2d 	bl	80029fc <dwt_isr>
}
 8000ba2:	e7f2      	b.n	8000b8a <EXTI2_3_IRQHandler+0x12>
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ba8:	b510      	push	{r4, lr}
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <EXTI4_15_IRQHandler+0x18>)
 8000bac:	695b      	ldr	r3, [r3, #20]
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8000bae:	069b      	lsls	r3, r3, #26
 8000bb0:	d400      	bmi.n	8000bb4 <EXTI4_15_IRQHandler+0xc>
    /* USER CODE END LL_EXTI_LINE_5 */
  }
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000bb2:	bd10      	pop	{r4, pc}
  WRITE_REG(EXTI->PR, ExtiLine);
 8000bb4:	4b02      	ldr	r3, [pc, #8]	@ (8000bc0 <EXTI4_15_IRQHandler+0x18>)
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	615a      	str	r2, [r3, #20]
    GPIO_EXTI4_15_Callback();
 8000bba:	f000 feca 	bl	8001952 <GPIO_EXTI4_15_Callback>
}
 8000bbe:	e7f8      	b.n	8000bb2 <EXTI4_15_IRQHandler+0xa>
 8000bc0:	40010400 	.word	0x40010400

08000bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
	UART2_IRQHandler();
 8000bc6:	f000 fe1b 	bl	8001800 <UART2_IRQHandler>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bca:	bd10      	pop	{r4, pc}

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000c04 <_sbrk+0x38>)
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <_sbrk+0x3c>)
 8000bd4:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <_sbrk+0x40>)
 8000bd8:	6809      	ldr	r1, [r1, #0]
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d007      	beq.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bde:	490b      	ldr	r1, [pc, #44]	@ (8000c0c <_sbrk+0x40>)
 8000be0:	6808      	ldr	r0, [r1, #0]
 8000be2:	18c3      	adds	r3, r0, r3
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d806      	bhi.n	8000bf6 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000be8:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <_sbrk+0x40>)
 8000bea:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000bec:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000bee:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <_sbrk+0x40>)
 8000bf0:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <_sbrk+0x44>)
 8000bf2:	6008      	str	r0, [r1, #0]
 8000bf4:	e7f3      	b.n	8000bde <_sbrk+0x12>
    errno = ENOMEM;
 8000bf6:	f003 f865 	bl	8003cc4 <__errno>
 8000bfa:	230c      	movs	r3, #12
 8000bfc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000bfe:	2001      	movs	r0, #1
 8000c00:	4240      	negs	r0, r0
 8000c02:	e7f3      	b.n	8000bec <_sbrk+0x20>
 8000c04:	20002000 	.word	0x20002000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	2000022c 	.word	0x2000022c
 8000c10:	200006e0 	.word	0x200006e0

08000c14 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	4770      	bx	lr
	...

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fffa 	bl	8000c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f003 f843 	bl	8003cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fedb 	bl	8000a04 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
   ldr   r0, =_estack
 8000c50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c5c:	0800566c 	.word	0x0800566c
  ldr r2, =_sbss
 8000c60:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000c64:	200006dc 	.word	0x200006dc

08000c68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_COMP_IRQHandler>
	...

08000c6c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000c6c:	b510      	push	{r4, lr}
 8000c6e:	0003      	movs	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000c70:	7900      	ldrb	r0, [r0, #4]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d04e      	beq.n	8000d14 <LL_EXTI_Init+0xa8>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d055      	beq.n	8000d28 <LL_EXTI_Init+0xbc>
    {
      switch (EXTI_InitStruct->Mode)
 8000c7c:	7958      	ldrb	r0, [r3, #5]
 8000c7e:	2801      	cmp	r0, #1
 8000c80:	d01e      	beq.n	8000cc0 <LL_EXTI_Init+0x54>
 8000c82:	2802      	cmp	r0, #2
 8000c84:	d026      	beq.n	8000cd4 <LL_EXTI_Init+0x68>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d12e      	bne.n	8000ce8 <LL_EXTI_Init+0x7c>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000c8a:	4929      	ldr	r1, [pc, #164]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000c8c:	684c      	ldr	r4, [r1, #4]
 8000c8e:	4394      	bics	r4, r2
 8000c90:	604c      	str	r4, [r1, #4]
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000c92:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c94:	680c      	ldr	r4, [r1, #0]
 8000c96:	4322      	orrs	r2, r4
 8000c98:	600a      	str	r2, [r1, #0]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000c9a:	799a      	ldrb	r2, [r3, #6]
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	d042      	beq.n	8000d26 <LL_EXTI_Init+0xba>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ca0:	2a02      	cmp	r2, #2
 8000ca2:	d023      	beq.n	8000cec <LL_EXTI_Init+0x80>
 8000ca4:	2a03      	cmp	r2, #3
 8000ca6:	d02b      	beq.n	8000d00 <LL_EXTI_Init+0x94>
 8000ca8:	2a01      	cmp	r2, #1
 8000caa:	d13f      	bne.n	8000d2c <LL_EXTI_Init+0xc0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cac:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000cae:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000cb0:	68d1      	ldr	r1, [r2, #12]
 8000cb2:	43a1      	bics	r1, r4
 8000cb4:	60d1      	str	r1, [r2, #12]
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cb6:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000cb8:	6891      	ldr	r1, [r2, #8]
 8000cba:	430b      	orrs	r3, r1
 8000cbc:	6093      	str	r3, [r2, #8]
}
 8000cbe:	e032      	b.n	8000d26 <LL_EXTI_Init+0xba>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000cc0:	491b      	ldr	r1, [pc, #108]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000cc2:	6808      	ldr	r0, [r1, #0]
 8000cc4:	4390      	bics	r0, r2
 8000cc6:	6008      	str	r0, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000cc8:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000cca:	6848      	ldr	r0, [r1, #4]
 8000ccc:	4302      	orrs	r2, r0
 8000cce:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000cd0:	2000      	movs	r0, #0
}
 8000cd2:	e7e2      	b.n	8000c9a <LL_EXTI_Init+0x2e>
  SET_BIT(EXTI->IMR, ExtiLine);
 8000cd4:	4916      	ldr	r1, [pc, #88]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000cd6:	6808      	ldr	r0, [r1, #0]
 8000cd8:	4302      	orrs	r2, r0
 8000cda:	600a      	str	r2, [r1, #0]
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000cdc:	681a      	ldr	r2, [r3, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000cde:	6848      	ldr	r0, [r1, #4]
 8000ce0:	4302      	orrs	r2, r0
 8000ce2:	604a      	str	r2, [r1, #4]
  ErrorStatus status = SUCCESS;
 8000ce4:	2000      	movs	r0, #0
}
 8000ce6:	e7d8      	b.n	8000c9a <LL_EXTI_Init+0x2e>
      switch (EXTI_InitStruct->Mode)
 8000ce8:	2001      	movs	r0, #1
 8000cea:	e7d6      	b.n	8000c9a <LL_EXTI_Init+0x2e>
            break;
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cec:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000cee:	4a10      	ldr	r2, [pc, #64]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000cf0:	6891      	ldr	r1, [r2, #8]
 8000cf2:	43a1      	bics	r1, r4
 8000cf4:	6091      	str	r1, [r2, #8]
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000cf6:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000cf8:	68d1      	ldr	r1, [r2, #12]
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	60d3      	str	r3, [r2, #12]
}
 8000cfe:	e012      	b.n	8000d26 <LL_EXTI_Init+0xba>
            break;
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d00:	6819      	ldr	r1, [r3, #0]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d02:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000d04:	6894      	ldr	r4, [r2, #8]
 8000d06:	4321      	orrs	r1, r4
 8000d08:	6091      	str	r1, [r2, #8]
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000d0a:	681b      	ldr	r3, [r3, #0]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000d0c:	68d1      	ldr	r1, [r2, #12]
 8000d0e:	430b      	orrs	r3, r1
 8000d10:	60d3      	str	r3, [r2, #12]
}
 8000d12:	e008      	b.n	8000d26 <LL_EXTI_Init+0xba>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000d14:	681c      	ldr	r4, [r3, #0]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000d16:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <LL_EXTI_Init+0xc4>)
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	43a1      	bics	r1, r4
 8000d1c:	6011      	str	r1, [r2, #0]
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000d1e:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d20:	6853      	ldr	r3, [r2, #4]
 8000d22:	438b      	bics	r3, r1
 8000d24:	6053      	str	r3, [r2, #4]
  }
  return status;
}
 8000d26:	bd10      	pop	{r4, pc}
  ErrorStatus status = SUCCESS;
 8000d28:	2000      	movs	r0, #0
 8000d2a:	e7fc      	b.n	8000d26 <LL_EXTI_Init+0xba>
        switch (EXTI_InitStruct->Trigger)
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	e7fa      	b.n	8000d26 <LL_EXTI_Init+0xba>
 8000d30:	40010400 	.word	0x40010400

08000d34 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8000d36:	2200      	movs	r2, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d38:	e016      	b.n	8000d68 <LL_GPIO_Init+0x34>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000d3a:	690b      	ldr	r3, [r1, #16]
 8000d3c:	469c      	mov	ip, r3
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000d3e:	68c4      	ldr	r4, [r0, #12]
 8000d40:	002b      	movs	r3, r5
 8000d42:	436b      	muls	r3, r5
 8000d44:	005e      	lsls	r6, r3, #1
 8000d46:	18f6      	adds	r6, r6, r3
 8000d48:	43f7      	mvns	r7, r6
 8000d4a:	43b4      	bics	r4, r6
 8000d4c:	4666      	mov	r6, ip
 8000d4e:	435e      	muls	r6, r3
 8000d50:	4334      	orrs	r4, r6
 8000d52:	60c4      	str	r4, [r0, #12]

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000d54:	684c      	ldr	r4, [r1, #4]
 8000d56:	2c02      	cmp	r4, #2
 8000d58:	d026      	beq.n	8000da8 <LL_GPIO_Init+0x74>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000d5a:	684d      	ldr	r5, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8000d5c:	6804      	ldr	r4, [r0, #0]
 8000d5e:	403c      	ands	r4, r7
 8000d60:	436b      	muls	r3, r5
 8000d62:	4323      	orrs	r3, r4
 8000d64:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8000d66:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000d68:	680c      	ldr	r4, [r1, #0]
 8000d6a:	0023      	movs	r3, r4
 8000d6c:	40d3      	lsrs	r3, r2
 8000d6e:	d03b      	beq.n	8000de8 <LL_GPIO_Init+0xb4>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000d70:	2301      	movs	r3, #1
 8000d72:	4093      	lsls	r3, r2
 8000d74:	0025      	movs	r5, r4
 8000d76:	401d      	ands	r5, r3
    if (currentpin)
 8000d78:	421c      	tst	r4, r3
 8000d7a:	d0f4      	beq.n	8000d66 <LL_GPIO_Init+0x32>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000d7c:	684b      	ldr	r3, [r1, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d8da      	bhi.n	8000d3a <LL_GPIO_Init+0x6>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000d84:	688f      	ldr	r7, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8000d86:	6883      	ldr	r3, [r0, #8]
 8000d88:	002c      	movs	r4, r5
 8000d8a:	436c      	muls	r4, r5
 8000d8c:	0066      	lsls	r6, r4, #1
 8000d8e:	1936      	adds	r6, r6, r4
 8000d90:	43b3      	bics	r3, r6
 8000d92:	437c      	muls	r4, r7
 8000d94:	4323      	orrs	r3, r4
 8000d96:	6083      	str	r3, [r0, #8]
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000d98:	680e      	ldr	r6, [r1, #0]
 8000d9a:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d9c:	6843      	ldr	r3, [r0, #4]
 8000d9e:	43b3      	bics	r3, r6
 8000da0:	4374      	muls	r4, r6
 8000da2:	4323      	orrs	r3, r4
 8000da4:	6043      	str	r3, [r0, #4]
}
 8000da6:	e7c8      	b.n	8000d3a <LL_GPIO_Init+0x6>
        if (currentpin < LL_GPIO_PIN_8)
 8000da8:	2dff      	cmp	r5, #255	@ 0xff
 8000daa:	d80d      	bhi.n	8000dc8 <LL_GPIO_Init+0x94>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dac:	694c      	ldr	r4, [r1, #20]
 8000dae:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8000db0:	6a06      	ldr	r6, [r0, #32]
 8000db2:	001c      	movs	r4, r3
 8000db4:	436c      	muls	r4, r5
 8000db6:	436c      	muls	r4, r5
 8000db8:	0125      	lsls	r5, r4, #4
 8000dba:	1b2d      	subs	r5, r5, r4
 8000dbc:	43ae      	bics	r6, r5
 8000dbe:	4665      	mov	r5, ip
 8000dc0:	436c      	muls	r4, r5
 8000dc2:	4334      	orrs	r4, r6
 8000dc4:	6204      	str	r4, [r0, #32]
}
 8000dc6:	e7c8      	b.n	8000d5a <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000dc8:	694c      	ldr	r4, [r1, #20]
 8000dca:	46a4      	mov	ip, r4
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8000dcc:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8000dce:	0a2d      	lsrs	r5, r5, #8
 8000dd0:	002c      	movs	r4, r5
 8000dd2:	436c      	muls	r4, r5
 8000dd4:	436c      	muls	r4, r5
 8000dd6:	436c      	muls	r4, r5
 8000dd8:	0125      	lsls	r5, r4, #4
 8000dda:	1b2d      	subs	r5, r5, r4
 8000ddc:	43ae      	bics	r6, r5
 8000dde:	4665      	mov	r5, ip
 8000de0:	436c      	muls	r4, r5
 8000de2:	4334      	orrs	r4, r6
 8000de4:	6244      	str	r4, [r0, #36]	@ 0x24
}
 8000de6:	e7b8      	b.n	8000d5a <LL_GPIO_Init+0x26>
  }


  return (SUCCESS);
}
 8000de8:	2000      	movs	r0, #0
 8000dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dec <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000dec:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000dee:	6803      	ldr	r3, [r0, #0]
 8000df0:	2501      	movs	r5, #1
 8000df2:	43ab      	bics	r3, r5
 8000df4:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000df6:	688a      	ldr	r2, [r1, #8]
 8000df8:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000dfa:	6803      	ldr	r3, [r0, #0]
 8000dfc:	4e16      	ldr	r6, [pc, #88]	@ (8000e58 <LL_I2C_Init+0x6c>)
 8000dfe:	4033      	ands	r3, r6
 8000e00:	0224      	lsls	r4, r4, #8
 8000e02:	4322      	orrs	r2, r4
 8000e04:	4313      	orrs	r3, r2
 8000e06:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000e08:	684b      	ldr	r3, [r1, #4]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000e0a:	6103      	str	r3, [r0, #16]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e0c:	6803      	ldr	r3, [r0, #0]
 8000e0e:	432b      	orrs	r3, r5
 8000e10:	6003      	str	r3, [r0, #0]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e12:	6883      	ldr	r3, [r0, #8]
 8000e14:	4a11      	ldr	r2, [pc, #68]	@ (8000e5c <LL_I2C_Init+0x70>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	6083      	str	r3, [r0, #8]
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8000e1a:	690a      	ldr	r2, [r1, #16]
 8000e1c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000e1e:	6883      	ldr	r3, [r0, #8]
 8000e20:	0adb      	lsrs	r3, r3, #11
 8000e22:	02db      	lsls	r3, r3, #11
 8000e24:	4322      	orrs	r2, r4
 8000e26:	4313      	orrs	r3, r2
 8000e28:	6083      	str	r3, [r0, #8]

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8000e2a:	690b      	ldr	r3, [r1, #16]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d004      	beq.n	8000e3a <LL_I2C_Init+0x4e>
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000e30:	6882      	ldr	r2, [r0, #8]
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	4313      	orrs	r3, r2
 8000e38:	6083      	str	r3, [r0, #8]

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8000e3a:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000e3c:	6802      	ldr	r2, [r0, #0]
 8000e3e:	4c08      	ldr	r4, [pc, #32]	@ (8000e60 <LL_I2C_Init+0x74>)
 8000e40:	4022      	ands	r2, r4
 8000e42:	4313      	orrs	r3, r2
 8000e44:	6003      	str	r3, [r0, #0]
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8000e46:	694b      	ldr	r3, [r1, #20]
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000e48:	6842      	ldr	r2, [r0, #4]
 8000e4a:	4904      	ldr	r1, [pc, #16]	@ (8000e5c <LL_I2C_Init+0x70>)
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	6043      	str	r3, [r0, #4]

  return SUCCESS;
}
 8000e52:	2000      	movs	r0, #0
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	ffffe0ff 	.word	0xffffe0ff
 8000e5c:	ffff7fff 	.word	0xffff7fff
 8000e60:	ffcfffff 	.word	0xffcfffff

08000e64 <RCC_GetHCLKClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000e64:	4b04      	ldr	r3, [pc, #16]	@ (8000e78 <RCC_GetHCLKClockFreq+0x14>)
 8000e66:	68da      	ldr	r2, [r3, #12]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000e68:	0912      	lsrs	r2, r2, #4
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	4a03      	ldr	r2, [pc, #12]	@ (8000e7c <RCC_GetHCLKClockFreq+0x18>)
 8000e70:	5cd3      	ldrb	r3, [r2, r3]
 8000e72:	40d8      	lsrs	r0, r3
}
 8000e74:	4770      	bx	lr
 8000e76:	46c0      	nop			@ (mov r8, r8)
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	08004dc4 	.word	0x08004dc4

08000e80 <RCC_GetPCLK1ClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <RCC_GetPCLK1ClockFreq+0x14>)
 8000e82:	68da      	ldr	r2, [r3, #12]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000e84:	0a12      	lsrs	r2, r2, #8
 8000e86:	2307      	movs	r3, #7
 8000e88:	4013      	ands	r3, r2
 8000e8a:	4a03      	ldr	r2, [pc, #12]	@ (8000e98 <RCC_GetPCLK1ClockFreq+0x18>)
 8000e8c:	5cd3      	ldrb	r3, [r2, r3]
 8000e8e:	40d8      	lsrs	r0, r3
}
 8000e90:	4770      	bx	lr
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	40021000 	.word	0x40021000
 8000e98:	08004dbc 	.word	0x08004dbc

08000e9c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000e9c:	b510      	push	{r4, lr}
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8000ea2:	03db      	lsls	r3, r3, #15
 8000ea4:	d405      	bmi.n	8000eb2 <RCC_PLL_GetFreqDomain_SYS+0x16>
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	06db      	lsls	r3, r3, #27
 8000eac:	d512      	bpl.n	8000ed4 <RCC_PLL_GetFreqDomain_SYS+0x38>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8000eae:	480b      	ldr	r0, [pc, #44]	@ (8000edc <RCC_PLL_GetFreqDomain_SYS+0x40>)
 8000eb0:	e000      	b.n	8000eb4 <RCC_PLL_GetFreqDomain_SYS+0x18>
        pllinputfreq = HSI_VALUE;
      }
      break;

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <RCC_PLL_GetFreqDomain_SYS+0x44>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000eb4:	4908      	ldr	r1, [pc, #32]	@ (8000ed8 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8000eb6:	68ca      	ldr	r2, [r1, #12]
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8000eb8:	0c92      	lsrs	r2, r2, #18
 8000eba:	230f      	movs	r3, #15
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	4a09      	ldr	r2, [pc, #36]	@ (8000ee4 <RCC_PLL_GetFreqDomain_SYS+0x48>)
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	4358      	muls	r0, r3
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8000ec4:	68cb      	ldr	r3, [r1, #12]
 8000ec6:	0d9b      	lsrs	r3, r3, #22
 8000ec8:	2103      	movs	r1, #3
 8000eca:	4019      	ands	r1, r3
 8000ecc:	3101      	adds	r1, #1
 8000ece:	f7ff f937 	bl	8000140 <__udivsi3>
}
 8000ed2:	bd10      	pop	{r4, pc}
        pllinputfreq = HSI_VALUE;
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <RCC_PLL_GetFreqDomain_SYS+0x4c>)
 8000ed6:	e7ed      	b.n	8000eb4 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	003d0900 	.word	0x003d0900
 8000ee0:	007a1200 	.word	0x007a1200
 8000ee4:	08004db0 	.word	0x08004db0
 8000ee8:	00f42400 	.word	0x00f42400

08000eec <RCC_GetSystemClockFreq>:
{
 8000eec:	b510      	push	{r4, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <RCC_GetSystemClockFreq+0x60>)
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	230c      	movs	r3, #12
 8000ef4:	4013      	ands	r3, r2
  switch (LL_RCC_GetSysClkSource())
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d023      	beq.n	8000f42 <RCC_GetSystemClockFreq+0x56>
 8000efa:	d809      	bhi.n	8000f10 <RCC_GetSystemClockFreq+0x24>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00c      	beq.n	8000f1a <RCC_GetSystemClockFreq+0x2e>
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d114      	bne.n	8000f2e <RCC_GetSystemClockFreq+0x42>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <RCC_GetSystemClockFreq+0x60>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	06db      	lsls	r3, r3, #27
 8000f0a:	d51c      	bpl.n	8000f46 <RCC_GetSystemClockFreq+0x5a>
        frequency = (HSI_VALUE >> 2U);
 8000f0c:	4810      	ldr	r0, [pc, #64]	@ (8000f50 <RCC_GetSystemClockFreq+0x64>)
 8000f0e:	e00d      	b.n	8000f2c <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8000f10:	2b0c      	cmp	r3, #12
 8000f12:	d10c      	bne.n	8000f2e <RCC_GetSystemClockFreq+0x42>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000f14:	f7ff ffc2 	bl	8000e9c <RCC_PLL_GetFreqDomain_SYS>
      break;
 8000f18:	e008      	b.n	8000f2c <RCC_GetSystemClockFreq+0x40>
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <RCC_GetSystemClockFreq+0x60>)
 8000f1c:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000f1e:	0b52      	lsrs	r2, r2, #13
 8000f20:	2307      	movs	r3, #7
 8000f22:	4013      	ands	r3, r2
 8000f24:	3301      	adds	r3, #1
 8000f26:	2080      	movs	r0, #128	@ 0x80
 8000f28:	0200      	lsls	r0, r0, #8
 8000f2a:	4098      	lsls	r0, r3
}
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <RCC_GetSystemClockFreq+0x60>)
 8000f30:	685a      	ldr	r2, [r3, #4]
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8000f32:	0b52      	lsrs	r2, r2, #13
 8000f34:	2307      	movs	r3, #7
 8000f36:	4013      	ands	r3, r2
 8000f38:	3301      	adds	r3, #1
 8000f3a:	2080      	movs	r0, #128	@ 0x80
 8000f3c:	0200      	lsls	r0, r0, #8
 8000f3e:	4098      	lsls	r0, r3
      break;
 8000f40:	e7f4      	b.n	8000f2c <RCC_GetSystemClockFreq+0x40>
  switch (LL_RCC_GetSysClkSource())
 8000f42:	4804      	ldr	r0, [pc, #16]	@ (8000f54 <RCC_GetSystemClockFreq+0x68>)
 8000f44:	e7f2      	b.n	8000f2c <RCC_GetSystemClockFreq+0x40>
        frequency = HSI_VALUE;
 8000f46:	4804      	ldr	r0, [pc, #16]	@ (8000f58 <RCC_GetSystemClockFreq+0x6c>)
  return frequency;
 8000f48:	e7f0      	b.n	8000f2c <RCC_GetSystemClockFreq+0x40>
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	003d0900 	.word	0x003d0900
 8000f54:	007a1200 	.word	0x007a1200
 8000f58:	00f42400 	.word	0x00f42400

08000f5c <LL_RCC_GetUSARTClockFreq>:
{
 8000f5c:	b510      	push	{r4, lr}
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8000f5e:	280c      	cmp	r0, #12
 8000f60:	d001      	beq.n	8000f66 <LL_RCC_GetUSARTClockFreq+0xa>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8000f62:	2000      	movs	r0, #0
}
 8000f64:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <LL_RCC_GetUSARTClockFreq+0x70>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4003      	ands	r3, r0
 8000f6c:	0400      	lsls	r0, r0, #16
 8000f6e:	4303      	orrs	r3, r0
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8000f70:	4a17      	ldr	r2, [pc, #92]	@ (8000fd0 <LL_RCC_GetUSARTClockFreq+0x74>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d008      	beq.n	8000f88 <LL_RCC_GetUSARTClockFreq+0x2c>
 8000f76:	4a17      	ldr	r2, [pc, #92]	@ (8000fd4 <LL_RCC_GetUSARTClockFreq+0x78>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d012      	beq.n	8000fa2 <LL_RCC_GetUSARTClockFreq+0x46>
 8000f7c:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11a      	bne.n	8000fb8 <LL_RCC_GetUSARTClockFreq+0x5c>
        usart_frequency = RCC_GetSystemClockFreq();
 8000f82:	f7ff ffb3 	bl	8000eec <RCC_GetSystemClockFreq>
        break;
 8000f86:	e7ed      	b.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000f88:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <LL_RCC_GetUSARTClockFreq+0x70>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	0010      	movs	r0, r2
 8000f90:	4018      	ands	r0, r3
 8000f92:	421a      	tst	r2, r3
 8000f94:	d0e6      	beq.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <LL_RCC_GetUSARTClockFreq+0x70>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	06db      	lsls	r3, r3, #27
 8000f9c:	d413      	bmi.n	8000fc6 <LL_RCC_GetUSARTClockFreq+0x6a>
            usart_frequency = HSI_VALUE;
 8000f9e:	480f      	ldr	r0, [pc, #60]	@ (8000fdc <LL_RCC_GetUSARTClockFreq+0x80>)
 8000fa0:	e7e0      	b.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <LL_RCC_GetUSARTClockFreq+0x70>)
 8000fa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	0010      	movs	r0, r2
 8000fac:	4018      	ands	r0, r3
 8000fae:	421a      	tst	r2, r3
 8000fb0:	d0d8      	beq.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
          usart_frequency = LSE_VALUE;
 8000fb2:	2080      	movs	r0, #128	@ 0x80
 8000fb4:	0200      	lsls	r0, r0, #8
  return usart_frequency;
 8000fb6:	e7d5      	b.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8000fb8:	f7ff ff98 	bl	8000eec <RCC_GetSystemClockFreq>
 8000fbc:	f7ff ff52 	bl	8000e64 <RCC_GetHCLKClockFreq>
 8000fc0:	f7ff ff5e 	bl	8000e80 <RCC_GetPCLK1ClockFreq>
        break;
 8000fc4:	e7ce      	b.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
            usart_frequency = (HSI_VALUE >> 2U);
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <LL_RCC_GetUSARTClockFreq+0x84>)
 8000fc8:	e7cc      	b.n	8000f64 <LL_RCC_GetUSARTClockFreq+0x8>
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	000c0008 	.word	0x000c0008
 8000fd4:	000c000c 	.word	0x000c000c
 8000fd8:	000c0004 	.word	0x000c0004
 8000fdc:	00f42400 	.word	0x00f42400
 8000fe0:	003d0900 	.word	0x003d0900

08000fe4 <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 8000fe4:	b510      	push	{r4, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	0004      	movs	r4, r0
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8000fea:	23fa      	movs	r3, #250	@ 0xfa
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	9301      	str	r3, [sp, #4]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8000ff0:	68c3      	ldr	r3, [r0, #12]
 8000ff2:	065b      	lsls	r3, r3, #25
 8000ff4:	d423      	bmi.n	800103e <LL_RTC_EnterInitMode+0x5a>
  WRITE_REG(RTCx->ISR, RTC_INIT_MASK);
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	60c3      	str	r3, [r0, #12]
  return ((READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF)) ? 1UL : 0UL);
 8000ffc:	68c3      	ldr	r3, [r0, #12]
 8000ffe:	2240      	movs	r2, #64	@ 0x40
 8001000:	0011      	movs	r1, r2
 8001002:	4019      	ands	r1, r3
 8001004:	421a      	tst	r2, r3
 8001006:	d118      	bne.n	800103a <LL_RTC_EnterInitMode+0x56>
        timeout --;
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
      if (timeout == 0U)
      {
        status = ERROR;
 8001008:	2000      	movs	r0, #0
    while ((timeout != 0U) && (tmp != 1U))
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d017      	beq.n	8001040 <LL_RTC_EnterInitMode+0x5c>
 8001010:	2901      	cmp	r1, #1
 8001012:	d015      	beq.n	8001040 <LL_RTC_EnterInitMode+0x5c>
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001014:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <LL_RTC_EnterInitMode+0x60>)
 8001016:	681b      	ldr	r3, [r3, #0]
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8001018:	03db      	lsls	r3, r3, #15
 800101a:	d502      	bpl.n	8001022 <LL_RTC_EnterInitMode+0x3e>
        timeout --;
 800101c:	9b01      	ldr	r3, [sp, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	68e3      	ldr	r3, [r4, #12]
 8001024:	2240      	movs	r2, #64	@ 0x40
 8001026:	0011      	movs	r1, r2
 8001028:	4019      	ands	r1, r3
 800102a:	421a      	tst	r2, r3
 800102c:	d000      	beq.n	8001030 <LL_RTC_EnterInitMode+0x4c>
 800102e:	2101      	movs	r1, #1
      if (timeout == 0U)
 8001030:	9b01      	ldr	r3, [sp, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1e9      	bne.n	800100a <LL_RTC_EnterInitMode+0x26>
        status = ERROR;
 8001036:	2001      	movs	r0, #1
 8001038:	e7e7      	b.n	800100a <LL_RTC_EnterInitMode+0x26>
 800103a:	2101      	movs	r1, #1
 800103c:	e7e4      	b.n	8001008 <LL_RTC_EnterInitMode+0x24>
  ErrorStatus status = SUCCESS;
 800103e:	2000      	movs	r0, #0
      }
    }
  }
  return status;
}
 8001040:	b002      	add	sp, #8
 8001042:	bd10      	pop	{r4, pc}
 8001044:	e000e010 	.word	0xe000e010

08001048 <LL_RTC_Init>:
{
 8001048:	b570      	push	{r4, r5, r6, lr}
 800104a:	0004      	movs	r4, r0
 800104c:	000d      	movs	r5, r1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800104e:	23ca      	movs	r3, #202	@ 0xca
 8001050:	6243      	str	r3, [r0, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001052:	3b77      	subs	r3, #119	@ 0x77
 8001054:	6243      	str	r3, [r0, #36]	@ 0x24
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 8001056:	f7ff ffc5 	bl	8000fe4 <LL_RTC_EnterInitMode>
 800105a:	2801      	cmp	r0, #1
 800105c:	d016      	beq.n	800108c <LL_RTC_Init+0x44>
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 800105e:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 8001060:	68a2      	ldr	r2, [r4, #8]
 8001062:	2140      	movs	r1, #64	@ 0x40
 8001064:	438a      	bics	r2, r1
 8001066:	4313      	orrs	r3, r2
 8001068:	60a3      	str	r3, [r4, #8]
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 800106a:	68aa      	ldr	r2, [r5, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800106c:	6923      	ldr	r3, [r4, #16]
 800106e:	0bdb      	lsrs	r3, r3, #15
 8001070:	03db      	lsls	r3, r3, #15
 8001072:	4313      	orrs	r3, r2
 8001074:	6123      	str	r3, [r4, #16]
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 8001076:	686a      	ldr	r2, [r5, #4]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	4906      	ldr	r1, [pc, #24]	@ (8001094 <LL_RTC_Init+0x4c>)
 800107c:	400b      	ands	r3, r1
 800107e:	0412      	lsls	r2, r2, #16
 8001080:	4313      	orrs	r3, r2
 8001082:	6123      	str	r3, [r4, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8001084:	2381      	movs	r3, #129	@ 0x81
 8001086:	425b      	negs	r3, r3
 8001088:	60e3      	str	r3, [r4, #12]
    status = SUCCESS;
 800108a:	2000      	movs	r0, #0
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800108c:	23ff      	movs	r3, #255	@ 0xff
 800108e:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8001090:	bd70      	pop	{r4, r5, r6, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	ff80ffff 	.word	0xff80ffff

08001098 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001098:	b510      	push	{r4, lr}
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800109a:	6803      	ldr	r3, [r0, #0]
 800109c:	065b      	lsls	r3, r3, #25
 800109e:	d428      	bmi.n	80010f2 <LL_SPI_Init+0x5a>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80010a0:	6803      	ldr	r3, [r0, #0]
 80010a2:	4a15      	ldr	r2, [pc, #84]	@ (80010f8 <LL_SPI_Init+0x60>)
 80010a4:	401a      	ands	r2, r3
 80010a6:	680b      	ldr	r3, [r1, #0]
 80010a8:	684c      	ldr	r4, [r1, #4]
 80010aa:	4323      	orrs	r3, r4
 80010ac:	688c      	ldr	r4, [r1, #8]
 80010ae:	4323      	orrs	r3, r4
 80010b0:	68cc      	ldr	r4, [r1, #12]
 80010b2:	4323      	orrs	r3, r4
 80010b4:	690c      	ldr	r4, [r1, #16]
 80010b6:	4323      	orrs	r3, r4
 80010b8:	694c      	ldr	r4, [r1, #20]
 80010ba:	4323      	orrs	r3, r4
 80010bc:	698c      	ldr	r4, [r1, #24]
 80010be:	4323      	orrs	r3, r4
 80010c0:	69cc      	ldr	r4, [r1, #28]
 80010c2:	4323      	orrs	r3, r4
 80010c4:	6a0c      	ldr	r4, [r1, #32]
 80010c6:	4323      	orrs	r3, r4
 80010c8:	4313      	orrs	r3, r2
 80010ca:	6003      	str	r3, [r0, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 80010cc:	6843      	ldr	r3, [r0, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	4393      	bics	r3, r2
 80010d2:	8aca      	ldrh	r2, [r1, #22]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	6043      	str	r3, [r0, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80010d8:	6a0a      	ldr	r2, [r1, #32]
 80010da:	2380      	movs	r3, #128	@ 0x80
 80010dc:	019b      	lsls	r3, r3, #6
 80010de:	429a      	cmp	r2, r3
 80010e0:	d001      	beq.n	80010e6 <LL_SPI_Init+0x4e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
    }
    status = SUCCESS;
 80010e2:	2000      	movs	r0, #0
 80010e4:	e006      	b.n	80010f4 <LL_SPI_Init+0x5c>
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80010e6:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80010e8:	041b      	lsls	r3, r3, #16
 80010ea:	0c1b      	lsrs	r3, r3, #16
 80010ec:	6103      	str	r3, [r0, #16]
    status = SUCCESS;
 80010ee:	2000      	movs	r0, #0
}
 80010f0:	e000      	b.n	80010f4 <LL_SPI_Init+0x5c>
  ErrorStatus status = ERROR;
 80010f2:	2001      	movs	r0, #1
#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 80010f4:	bd10      	pop	{r4, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	ffff0040 	.word	0xffff0040

080010fc <LL_USART_SetBaudRate>:
{
 80010fc:	b570      	push	{r4, r5, r6, lr}
 80010fe:	0005      	movs	r5, r0
 8001100:	000c      	movs	r4, r1
 8001102:	0019      	movs	r1, r3
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001104:	2380      	movs	r3, #128	@ 0x80
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	429a      	cmp	r2, r3
 800110a:	d007      	beq.n	800111c <LL_USART_SetBaudRate+0x20>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800110c:	0848      	lsrs	r0, r1, #1
 800110e:	1900      	adds	r0, r0, r4
 8001110:	f7ff f816 	bl	8000140 <__udivsi3>
 8001114:	0400      	lsls	r0, r0, #16
 8001116:	0c00      	lsrs	r0, r0, #16
 8001118:	60e8      	str	r0, [r5, #12]
}
 800111a:	bd70      	pop	{r4, r5, r6, pc}
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800111c:	0064      	lsls	r4, r4, #1
 800111e:	0848      	lsrs	r0, r1, #1
 8001120:	1820      	adds	r0, r4, r0
 8001122:	f7ff f80d 	bl	8000140 <__udivsi3>
    brrtemp = usartdiv & 0xFFF0U;
 8001126:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <LL_USART_SetBaudRate+0x3c>)
 8001128:	4002      	ands	r2, r0
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800112a:	0400      	lsls	r0, r0, #16
 800112c:	0c40      	lsrs	r0, r0, #17
 800112e:	2307      	movs	r3, #7
 8001130:	4003      	ands	r3, r0
 8001132:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 8001134:	60eb      	str	r3, [r5, #12]
 8001136:	e7f0      	b.n	800111a <LL_USART_SetBaudRate+0x1e>
 8001138:	0000fff0 	.word	0x0000fff0

0800113c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	0004      	movs	r4, r0
 8001140:	000d      	movs	r5, r1
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001142:	6803      	ldr	r3, [r0, #0]
 8001144:	07db      	lsls	r3, r3, #31
 8001146:	d42d      	bmi.n	80011a4 <LL_USART_Init+0x68>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001148:	6803      	ldr	r3, [r0, #0]
 800114a:	4a18      	ldr	r2, [pc, #96]	@ (80011ac <LL_USART_Init+0x70>)
 800114c:	401a      	ands	r2, r3
 800114e:	684b      	ldr	r3, [r1, #4]
 8001150:	68c9      	ldr	r1, [r1, #12]
 8001152:	430b      	orrs	r3, r1
 8001154:	6929      	ldr	r1, [r5, #16]
 8001156:	430b      	orrs	r3, r1
 8001158:	69a9      	ldr	r1, [r5, #24]
 800115a:	430b      	orrs	r3, r1
 800115c:	4313      	orrs	r3, r2
 800115e:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001160:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001162:	6842      	ldr	r2, [r0, #4]
 8001164:	4912      	ldr	r1, [pc, #72]	@ (80011b0 <LL_USART_Init+0x74>)
 8001166:	400a      	ands	r2, r1
 8001168:	4313      	orrs	r3, r2
 800116a:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800116c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800116e:	6882      	ldr	r2, [r0, #8]
 8001170:	4910      	ldr	r1, [pc, #64]	@ (80011b4 <LL_USART_Init+0x78>)
 8001172:	400a      	ands	r2, r1
 8001174:	4313      	orrs	r3, r2
 8001176:	6083      	str	r3, [r0, #8]
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <LL_USART_Init+0x7c>)
 800117a:	4298      	cmp	r0, r3
 800117c:	d001      	beq.n	8001182 <LL_USART_Init+0x46>
  ErrorStatus status = ERROR;
 800117e:	2001      	movs	r0, #1
 8001180:	e011      	b.n	80011a6 <LL_USART_Init+0x6a>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001182:	200c      	movs	r0, #12
 8001184:	f7ff feea 	bl	8000f5c <LL_RCC_GetUSARTClockFreq>

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001188:	2800      	cmp	r0, #0
 800118a:	d00d      	beq.n	80011a8 <LL_USART_Init+0x6c>
        && (USART_InitStruct->BaudRate != 0U))
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <LL_USART_Init+0x5a>
  ErrorStatus status = ERROR;
 8001192:	2001      	movs	r0, #1
 8001194:	e007      	b.n	80011a6 <LL_USART_Init+0x6a>
    {
      status = SUCCESS;
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001196:	69aa      	ldr	r2, [r5, #24]
      LL_USART_SetBaudRate(USARTx,
 8001198:	0001      	movs	r1, r0
 800119a:	0020      	movs	r0, r4
 800119c:	f7ff ffae 	bl	80010fc <LL_USART_SetBaudRate>
      status = SUCCESS;
 80011a0:	2000      	movs	r0, #0
 80011a2:	e000      	b.n	80011a6 <LL_USART_Init+0x6a>
  ErrorStatus status = ERROR;
 80011a4:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 80011a8:	2001      	movs	r0, #1
 80011aa:	e7fc      	b.n	80011a6 <LL_USART_Init+0x6a>
 80011ac:	efff69f3 	.word	0xefff69f3
 80011b0:	ffffcfff 	.word	0xffffcfff
 80011b4:	fffffcff 	.word	0xfffffcff
 80011b8:	40004400 	.word	0x40004400

080011bc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80011bc:	b510      	push	{r4, lr}
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011be:	21fa      	movs	r1, #250	@ 0xfa
 80011c0:	0089      	lsls	r1, r1, #2
 80011c2:	f7fe ffbd 	bl	8000140 <__udivsi3>
 80011c6:	3801      	subs	r0, #1
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <LL_Init1msTick+0x1c>)
 80011ca:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d0:	3205      	adds	r2, #5
 80011d2:	601a      	str	r2, [r3, #0]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	e000e010 	.word	0xe000e010

080011dc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80011dc:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <LL_mDelay+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80011e4:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80011e6:	1c43      	adds	r3, r0, #1
 80011e8:	d000      	beq.n	80011ec <LL_mDelay+0x10>
  {
    Delay++;
 80011ea:	3001      	adds	r0, #1
  }

  while (Delay)
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d005      	beq.n	80011fc <LL_mDelay+0x20>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <LL_mDelay+0x24>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	03db      	lsls	r3, r3, #15
 80011f6:	d5f9      	bpl.n	80011ec <LL_mDelay+0x10>
    {
      Delay--;
 80011f8:	3801      	subs	r0, #1
 80011fa:	e7f7      	b.n	80011ec <LL_mDelay+0x10>
    }
  }
}
 80011fc:	b002      	add	sp, #8
 80011fe:	4770      	bx	lr
 8001200:	e000e010 	.word	0xe000e010

08001204 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001204:	4b01      	ldr	r3, [pc, #4]	@ (800120c <LL_SetSystemCoreClock+0x8>)
 8001206:	6018      	str	r0, [r3, #0]
}
 8001208:	4770      	bx	lr
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	2000000c 	.word	0x2000000c

08001210 <deca_sleep>:

#include <deca_device_api.h>
#include "port_platform.h"

void deca_sleep(unsigned int time_ms)
{
 8001210:	b510      	push	{r4, lr}
 8001212:	0004      	movs	r4, r0
    /* This assumes that the tick has a period of exactly one millisecond. See CLOCKS_PER_SEC define. */
    unsigned long end = portGetTickCount() + time_ms;
 8001214:	f000 f970 	bl	80014f8 <portGetTickCount>
 8001218:	1904      	adds	r4, r0, r4
    while ((signed long)(portGetTickCount() - end) <= 0)
 800121a:	f000 f96d 	bl	80014f8 <portGetTickCount>
 800121e:	1b00      	subs	r0, r0, r4
 8001220:	2800      	cmp	r0, #0
 8001222:	ddfa      	ble.n	800121a <deca_sleep+0xa>
        ;
}
 8001224:	bd10      	pop	{r4, pc}
	...

08001228 <writetospi>:
 */
int writetospi(uint16       headerLength,
               const uint8  *headerBuffer,
               uint32       bodyLength,
               const uint8  *bodyBuffer)
{
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	0007      	movs	r7, r0
 800122c:	000e      	movs	r6, r1
 800122e:	0015      	movs	r5, r2
 8001230:	001c      	movs	r4, r3

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8001232:	f000 f9ad 	bl	8001590 <decamutexon>
 8001236:	4684      	mov	ip, r0
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001238:	4b1f      	ldr	r3, [pc, #124]	@ (80012b8 <writetospi+0x90>)
 800123a:	2201      	movs	r2, #1
 800123c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800123e:	e00f      	b.n	8001260 <writetospi+0x38>

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line low */

    while(headerLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8001240:	2900      	cmp	r1, #0
 8001242:	d108      	bne.n	8001256 <writetospi+0x2e>
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <writetospi+0x94>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2202      	movs	r2, #2
 800124a:	0011      	movs	r1, r2
 800124c:	4019      	ands	r1, r3
 800124e:	421a      	tst	r2, r3
 8001250:	d0f6      	beq.n	8001240 <writetospi+0x18>
 8001252:	2101      	movs	r1, #1
 8001254:	e7f4      	b.n	8001240 <writetospi+0x18>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 8001256:	7832      	ldrb	r2, [r6, #0]
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8001258:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <writetospi+0x94>)
 800125a:	731a      	strb	r2, [r3, #12]
 800125c:	3601      	adds	r6, #1
    while(headerLength--){
 800125e:	0007      	movs	r7, r0
 8001260:	1e78      	subs	r0, r7, #1
 8001262:	b280      	uxth	r0, r0
 8001264:	2f00      	cmp	r7, #0
 8001266:	d1ed      	bne.n	8001244 <writetospi+0x1c>
 8001268:	e00f      	b.n	800128a <writetospi+0x62>
    }

    while(bodyLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 800126a:	2b00      	cmp	r3, #0
 800126c:	d108      	bne.n	8001280 <writetospi+0x58>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800126e:	4a13      	ldr	r2, [pc, #76]	@ (80012bc <writetospi+0x94>)
 8001270:	6892      	ldr	r2, [r2, #8]
 8001272:	2102      	movs	r1, #2
 8001274:	000b      	movs	r3, r1
 8001276:	4013      	ands	r3, r2
 8001278:	4211      	tst	r1, r2
 800127a:	d0f6      	beq.n	800126a <writetospi+0x42>
 800127c:	2301      	movs	r3, #1
 800127e:	e7f4      	b.n	800126a <writetospi+0x42>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *bodyBuffer++);
 8001280:	7822      	ldrb	r2, [r4, #0]
  *spidr = TxData;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <writetospi+0x94>)
 8001284:	731a      	strb	r2, [r3, #12]
 8001286:	3401      	adds	r4, #1
    while(bodyLength--){
 8001288:	0035      	movs	r5, r6
 800128a:	1e6e      	subs	r6, r5, #1
 800128c:	2d00      	cmp	r5, #0
 800128e:	d1ee      	bne.n	800126e <writetospi+0x46>
 8001290:	e001      	b.n	8001296 <writetospi+0x6e>
    }

    // wait last transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 8001292:	2900      	cmp	r1, #0
 8001294:	d008      	beq.n	80012a8 <writetospi+0x80>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <writetospi+0x94>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	0011      	movs	r1, r2
 800129e:	4019      	ands	r1, r3
 80012a0:	421a      	tst	r2, r3
 80012a2:	d0f6      	beq.n	8001292 <writetospi+0x6a>
 80012a4:	2101      	movs	r1, #1
 80012a6:	e7f4      	b.n	8001292 <writetospi+0x6a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <writetospi+0x90>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	619a      	str	r2, [r3, #24]
	{
	}

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line high */

    decamutexoff(stat);
 80012ae:	4660      	mov	r0, ip
 80012b0:	f000 f970 	bl	8001594 <decamutexoff>
    return 0;
} // end writetospi()
 80012b4:	2000      	movs	r0, #0
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b8:	50000400 	.word	0x50000400
 80012bc:	40013000 	.word	0x40013000

080012c0 <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16      headerLength,
                const uint8 *headerBuffer,
                uint32      readlength,
                uint8       *readBuffer)
{
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	0005      	movs	r5, r0
 80012c4:	000f      	movs	r7, r1
 80012c6:	0016      	movs	r6, r2
 80012c8:	001c      	movs	r4, r3
    /* Blocking: Check whether previous transfer has been finished */

	// wait last transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 80012ca:	e001      	b.n	80012d0 <readfromspi+0x10>
 80012cc:	2900      	cmp	r1, #0
 80012ce:	d008      	beq.n	80012e2 <readfromspi+0x22>
 80012d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <readfromspi+0xc8>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	2280      	movs	r2, #128	@ 0x80
 80012d6:	0011      	movs	r1, r2
 80012d8:	4019      	ands	r1, r3
 80012da:	421a      	tst	r2, r3
 80012dc:	d0f6      	beq.n	80012cc <readfromspi+0xc>
 80012de:	2101      	movs	r1, #1
 80012e0:	e7f4      	b.n	80012cc <readfromspi+0xc>
	{
	}

	/* Process Locked */
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80012e2:	f000 f955 	bl	8001590 <decamutexon>
  WRITE_REG(GPIOx->BRR, PinMask);
 80012e6:	4b29      	ldr	r3, [pc, #164]	@ (800138c <readfromspi+0xcc>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012ec:	e00f      	b.n	800130e <readfromspi+0x4e>

    LL_GPIO_ResetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin); /**< Put chip select line low */

    /* Send header */
    while(headerLength--){
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d108      	bne.n	8001304 <readfromspi+0x44>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012f2:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <readfromspi+0xc8>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2202      	movs	r2, #2
 80012f8:	0015      	movs	r5, r2
 80012fa:	401d      	ands	r5, r3
 80012fc:	421a      	tst	r2, r3
 80012fe:	d0f6      	beq.n	80012ee <readfromspi+0x2e>
 8001300:	2501      	movs	r5, #1
 8001302:	e7f4      	b.n	80012ee <readfromspi+0x2e>
    	{
    	}
    	LL_SPI_TransmitData8(SPI1, *headerBuffer++);
 8001304:	783a      	ldrb	r2, [r7, #0]
  *spidr = TxData;
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <readfromspi+0xc8>)
 8001308:	731a      	strb	r2, [r3, #12]
 800130a:	3701      	adds	r7, #1
    while(headerLength--){
 800130c:	000d      	movs	r5, r1
 800130e:	1e69      	subs	r1, r5, #1
 8001310:	b289      	uxth	r1, r1
 8001312:	2d00      	cmp	r5, #0
 8001314:	d1ed      	bne.n	80012f2 <readfromspi+0x32>
 8001316:	e001      	b.n	800131c <readfromspi+0x5c>
    }
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 8001318:	2900      	cmp	r1, #0
 800131a:	d008      	beq.n	800132e <readfromspi+0x6e>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <readfromspi+0xc8>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	0011      	movs	r1, r2
 8001324:	4019      	ands	r1, r3
 8001326:	421a      	tst	r2, r3
 8001328:	d0f6      	beq.n	8001318 <readfromspi+0x58>
 800132a:	2101      	movs	r1, #1
 800132c:	e7f4      	b.n	8001318 <readfromspi+0x58>
  return (*((__IO uint8_t *)&SPIx->DR));
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <readfromspi+0xc8>)
 8001330:	7b1b      	ldrb	r3, [r3, #12]
 8001332:	e01e      	b.n	8001372 <readfromspi+0xb2>
    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
    {
        /* Wait until TXE flag is set to send data */
    	while ( LL_SPI_IsActiveFlag_TXE(SPI1) == 0 )
 8001334:	2a00      	cmp	r2, #0
 8001336:	d108      	bne.n	800134a <readfromspi+0x8a>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <readfromspi+0xc8>)
 800133a:	6899      	ldr	r1, [r3, #8]
 800133c:	2302      	movs	r3, #2
 800133e:	001a      	movs	r2, r3
 8001340:	400a      	ands	r2, r1
 8001342:	420b      	tst	r3, r1
 8001344:	d0f6      	beq.n	8001334 <readfromspi+0x74>
 8001346:	2201      	movs	r2, #1
 8001348:	e7f4      	b.n	8001334 <readfromspi+0x74>
  *spidr = TxData;
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <readfromspi+0xc8>)
 800134c:	2100      	movs	r1, #0
 800134e:	7319      	strb	r1, [r3, #12]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001350:	e001      	b.n	8001356 <readfromspi+0x96>
    	LL_SPI_TransmitData8(SPI1, 0);   /* set output to 0 (MOSI), this is necessary for
        									e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
    	 	 	 	 	 	 	 	 	 */

        /* Wait until RXNE flag is set to read data */
    	while ( LL_SPI_IsActiveFlag_RXNE(SPI1) == 0 )
 8001352:	2d00      	cmp	r5, #0
 8001354:	d108      	bne.n	8001368 <readfromspi+0xa8>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001356:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <readfromspi+0xc8>)
 8001358:	6899      	ldr	r1, [r3, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	001d      	movs	r5, r3
 800135e:	400d      	ands	r5, r1
 8001360:	420b      	tst	r3, r1
 8001362:	d0f6      	beq.n	8001352 <readfromspi+0x92>
 8001364:	0015      	movs	r5, r2
 8001366:	e7f4      	b.n	8001352 <readfromspi+0x92>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <readfromspi+0xc8>)
 800136a:	7b1b      	ldrb	r3, [r3, #12]
    	{
    	}

    	(*readBuffer++) = LL_SPI_ReceiveData8(SPI1);
 800136c:	7023      	strb	r3, [r4, #0]
 800136e:	3401      	adds	r4, #1
    while(readlength-- > 0)
 8001370:	003e      	movs	r6, r7
 8001372:	1e77      	subs	r7, r6, #1
 8001374:	2e00      	cmp	r6, #0
 8001376:	d1df      	bne.n	8001338 <readfromspi+0x78>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <readfromspi+0xcc>)
 800137a:	2201      	movs	r2, #1
 800137c:	619a      	str	r2, [r3, #24]
    }

    LL_GPIO_SetOutputPin(DW_NSS_GPIO_Port, DW_NSS_Pin ); /**< Put chip select line high */

    /* Process Unlocked */
    decamutexoff(stat);
 800137e:	f000 f909 	bl	8001594 <decamutexoff>
    return 0;
} // end readfromspi()
 8001382:	2000      	movs	r0, #0
 8001384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40013000 	.word	0x40013000
 800138c:	50000400 	.word	0x50000400

08001390 <__io_putchar>:
 *                              Uart Configuration
 *
 ******************************************************************************/

int __io_putchar (int ch)
{
 8001390:	e001      	b.n	8001396 <__io_putchar+0x6>
	// TODO need to implement timeout
	// or may be not...
	while ( !LL_USART_IsActiveFlag_TXE( USART2 ) );
 8001392:	2900      	cmp	r1, #0
 8001394:	d108      	bne.n	80013a8 <__io_putchar+0x18>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001396:	4b07      	ldr	r3, [pc, #28]	@ (80013b4 <__io_putchar+0x24>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	0011      	movs	r1, r2
 800139e:	4019      	ands	r1, r3
 80013a0:	421a      	tst	r2, r3
 80013a2:	d0f6      	beq.n	8001392 <__io_putchar+0x2>
 80013a4:	2101      	movs	r1, #1
 80013a6:	e7f4      	b.n	8001392 <__io_putchar+0x2>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 80013a8:	23ff      	movs	r3, #255	@ 0xff
 80013aa:	4003      	ands	r3, r0
 80013ac:	4a01      	ldr	r2, [pc, #4]	@ (80013b4 <__io_putchar+0x24>)
 80013ae:	6293      	str	r3, [r2, #40]	@ 0x28
	LL_USART_TransmitData8(USART2, (uint8_t)ch);
	return ch;
}
 80013b0:	4770      	bx	lr
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	40004400 	.word	0x40004400

080013b8 <_write>:

int _write(int file, char *ptr, int len)
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	0016      	movs	r6, r2
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2400      	movs	r4, #0
 80013be:	e005      	b.n	80013cc <_write+0x14>
	{
		__io_putchar(*ptr++);
 80013c0:	1c4d      	adds	r5, r1, #1
 80013c2:	7808      	ldrb	r0, [r1, #0]
 80013c4:	f7ff ffe4 	bl	8001390 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80013ca:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	42b4      	cmp	r4, r6
 80013ce:	dbf7      	blt.n	80013c0 <_write+0x8>
	}
	return len;
}
 80013d0:	0030      	movs	r0, r6
 80013d2:	bd70      	pop	{r4, r5, r6, pc}

080013d4 <deca_uart_rx_data_ready>:

bool deca_uart_rx_data_ready(void)
{
    return uart_rx_data_ready;
 80013d4:	4b01      	ldr	r3, [pc, #4]	@ (80013dc <deca_uart_rx_data_ready+0x8>)
 80013d6:	7818      	ldrb	r0, [r3, #0]
}
 80013d8:	4770      	bx	lr
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	20000230 	.word	0x20000230

080013e0 <UART_RxCpltCallback>:

extern bool SerialData;

void UART_RxCpltCallback( uint8_t data )
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	0005      	movs	r5, r0

    /* Local echo*/
	__io_putchar((int)data);
 80013e4:	f7ff ffd4 	bl	8001390 <__io_putchar>
	// wait for transmission complete
	while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 80013e8:	e001      	b.n	80013ee <UART_RxCpltCallback+0xe>
 80013ea:	2c00      	cmp	r4, #0
 80013ec:	d108      	bne.n	8001400 <UART_RxCpltCallback+0x20>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <UART_RxCpltCallback+0xa0>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2240      	movs	r2, #64	@ 0x40
 80013f4:	0014      	movs	r4, r2
 80013f6:	401c      	ands	r4, r3
 80013f8:	421a      	tst	r2, r3
 80013fa:	d0f6      	beq.n	80013ea <UART_RxCpltCallback+0xa>
 80013fc:	2401      	movs	r4, #1
 80013fe:	e7f4      	b.n	80013ea <UART_RxCpltCallback+0xa>

	SerialData = true;
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <UART_RxCpltCallback+0xa4>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]

    if ( !uart_rx_data_ready  )
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <UART_RxCpltCallback+0xa8>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <UART_RxCpltCallback+0x56>
    {
    	/* to allow backspace in shell - thanks Yves, very useful feature */
    	if( data == '\b')
 800140e:	2d08      	cmp	r5, #8
 8001410:	d00d      	beq.n	800142e <UART_RxCpltCallback+0x4e>
    			while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
    			rx_buf_index--;// = rx_buf_index - 1;
    			rx_buf[rx_buf_index] = 0;
    		}
    	}
    	else if ( data == '\r' )
 8001412:	2d0d      	cmp	r5, #13
 8001414:	d02a      	beq.n	800146c <UART_RxCpltCallback+0x8c>
            uart_rx_data_ready = true;
            rx_buf[rx_buf_index] = 0;
        }
        else
        {
        	rx_buf[rx_buf_index++] = data;
 8001416:	491d      	ldr	r1, [pc, #116]	@ (800148c <UART_RxCpltCallback+0xac>)
 8001418:	680a      	ldr	r2, [r1, #0]
 800141a:	1c53      	adds	r3, r2, #1
 800141c:	600b      	str	r3, [r1, #0]
 800141e:	491c      	ldr	r1, [pc, #112]	@ (8001490 <UART_RxCpltCallback+0xb0>)
 8001420:	548d      	strb	r5, [r1, r2]
        	//rx_buf_index = rx_buf_index + 1;

            if ( rx_buf_index >= RX_BUF_SIZE )
 8001422:	2bff      	cmp	r3, #255	@ 0xff
 8001424:	d907      	bls.n	8001436 <UART_RxCpltCallback+0x56>
            {
                uart_rx_data_ready = true;	         // buffer is full, signal to proceed it
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <UART_RxCpltCallback+0xa8>)
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    //printf("Callback: data=%c (0x%02X), index=%lu, ready=%d\n", data, data, rx_buf_index, uart_rx_data_ready);

}
 800142c:	e003      	b.n	8001436 <UART_RxCpltCallback+0x56>
    		if(rx_buf_index !=0)
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <UART_RxCpltCallback+0xac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d100      	bne.n	8001438 <UART_RxCpltCallback+0x58>
}
 8001436:	bd70      	pop	{r4, r5, r6, pc}
    			__io_putchar((int)' ');
 8001438:	2020      	movs	r0, #32
 800143a:	f7ff ffa9 	bl	8001390 <__io_putchar>
    			__io_putchar((int)'\b');
 800143e:	2008      	movs	r0, #8
 8001440:	f7ff ffa6 	bl	8001390 <__io_putchar>
    			while ( !LL_USART_IsActiveFlag_TC( USART2 ) );
 8001444:	e001      	b.n	800144a <UART_RxCpltCallback+0x6a>
 8001446:	2900      	cmp	r1, #0
 8001448:	d108      	bne.n	800145c <UART_RxCpltCallback+0x7c>
 800144a:	4b0d      	ldr	r3, [pc, #52]	@ (8001480 <UART_RxCpltCallback+0xa0>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2240      	movs	r2, #64	@ 0x40
 8001450:	0011      	movs	r1, r2
 8001452:	4019      	ands	r1, r3
 8001454:	421a      	tst	r2, r3
 8001456:	d0f6      	beq.n	8001446 <UART_RxCpltCallback+0x66>
 8001458:	0021      	movs	r1, r4
 800145a:	e7f4      	b.n	8001446 <UART_RxCpltCallback+0x66>
    			rx_buf_index--;// = rx_buf_index - 1;
 800145c:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <UART_RxCpltCallback+0xac>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	6013      	str	r3, [r2, #0]
    			rx_buf[rx_buf_index] = 0;
 8001464:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <UART_RxCpltCallback+0xb0>)
 8001466:	2100      	movs	r1, #0
 8001468:	54d1      	strb	r1, [r2, r3]
 800146a:	e7e4      	b.n	8001436 <UART_RxCpltCallback+0x56>
            uart_rx_data_ready = true;
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <UART_RxCpltCallback+0xa8>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
            rx_buf[rx_buf_index] = 0;
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <UART_RxCpltCallback+0xac>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <UART_RxCpltCallback+0xb0>)
 8001478:	2100      	movs	r1, #0
 800147a:	5499      	strb	r1, [r3, r2]
 800147c:	e7db      	b.n	8001436 <UART_RxCpltCallback+0x56>
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	40004400 	.word	0x40004400
 8001484:	2000033c 	.word	0x2000033c
 8001488:	20000230 	.word	0x20000230
 800148c:	20000234 	.word	0x20000234
 8001490:	20000238 	.word	0x20000238

08001494 <port_tx_msg>:

void port_tx_msg(char *ptr, int len)
{
 8001494:	b510      	push	{r4, lr}
 8001496:	000a      	movs	r2, r1
	_write(0, (char *)ptr,len);
 8001498:	0001      	movs	r1, r0
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff ff8c 	bl	80013b8 <_write>
}
 80014a0:	bd10      	pop	{r4, pc}
	...

080014a4 <deca_uart_receive>:
 *
 * @param[in] address to buffer, max buffer size
 * @param[out] actual number of bytes in buffer
 * */
uint32_t deca_uart_receive( uint8_t * buffer, size_t size)
{
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	0005      	movs	r5, r0
 80014a8:	000c      	movs	r4, r1
  __ASM volatile ("cpsid i" : : : "memory");
 80014aa:	b672      	cpsid	i
	//printf("deca_uart_receive: rx_buf_index=%lu\r\n", rx_buf_index);
	__disable_irq();

    uint32_t count = rx_buf_index;
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <deca_uart_receive+0x38>)
 80014ae:	681e      	ldr	r6, [r3, #0]
    memcpy(buffer, rx_buf, MIN(rx_buf_index, size));
 80014b0:	0032      	movs	r2, r6
 80014b2:	428e      	cmp	r6, r1
 80014b4:	d900      	bls.n	80014b8 <deca_uart_receive+0x14>
 80014b6:	000a      	movs	r2, r1
 80014b8:	4909      	ldr	r1, [pc, #36]	@ (80014e0 <deca_uart_receive+0x3c>)
 80014ba:	0028      	movs	r0, r5
 80014bc:	f002 fc36 	bl	8003d2c <memcpy>
    rx_buf_index = 0;
 80014c0:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <deca_uart_receive+0x38>)
 80014c2:	2700      	movs	r7, #0
 80014c4:	601f      	str	r7, [r3, #0]
    buffer[size-1] = 0;
 80014c6:	3c01      	subs	r4, #1
 80014c8:	192d      	adds	r5, r5, r4
 80014ca:	702f      	strb	r7, [r5, #0]
    uint8_t data = '\n';

    __io_putchar(data);
 80014cc:	200a      	movs	r0, #10
 80014ce:	f7ff ff5f 	bl	8001390 <__io_putchar>
    uart_rx_data_ready = false;
 80014d2:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <deca_uart_receive+0x40>)
 80014d4:	701f      	strb	r7, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014d6:	b662      	cpsie	i

	__enable_irq();

    return count;
}
 80014d8:	0030      	movs	r0, r6
 80014da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014dc:	20000234 	.word	0x20000234
 80014e0:	20000238 	.word	0x20000238
 80014e4:	20000230 	.word	0x20000230

080014e8 <IncSysTick>:
 *
 ******************************************************************************/

void IncSysTick()
{
	SysTickCount++;
 80014e8:	4a02      	ldr	r2, [pc, #8]	@ (80014f4 <IncSysTick+0xc>)
 80014ea:	6813      	ldr	r3, [r2, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
}
 80014f0:	4770      	bx	lr
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	20000338 	.word	0x20000338

080014f8 <portGetTickCount>:
 *        The resolution of time32_incr is usually 1/1000 sec.
 * */
__INLINE uint32_t
portGetTickCount(void)
{
	return SysTickCount;
 80014f8:	4b01      	ldr	r3, [pc, #4]	@ (8001500 <portGetTickCount+0x8>)
 80014fa:	6818      	ldr	r0, [r3, #0]
}
 80014fc:	4770      	bx	lr
 80014fe:	46c0      	nop			@ (mov r8, r8)
 8001500:	20000338 	.word	0x20000338

08001504 <port_set_dw1000_slowrate>:
/* @fn      port_set_dw1000_slowrate
 * @brief   Function is used for re-initialize the SPI freq as 2MHz which does
 *          init state check
 * */
void port_set_dw1000_slowrate(void)
{
 8001504:	e001      	b.n	800150a <port_set_dw1000_slowrate+0x6>
	// wait for current transaction to complete
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 8001506:	2900      	cmp	r1, #0
 8001508:	d008      	beq.n	800151c <port_set_dw1000_slowrate+0x18>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <port_set_dw1000_slowrate+0x44>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2280      	movs	r2, #128	@ 0x80
 8001510:	0011      	movs	r1, r2
 8001512:	4019      	ands	r1, r3
 8001514:	421a      	tst	r2, r3
 8001516:	d0f6      	beq.n	8001506 <port_set_dw1000_slowrate+0x2>
 8001518:	2101      	movs	r1, #1
 800151a:	e7f4      	b.n	8001506 <port_set_dw1000_slowrate+0x2>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800151c:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <port_set_dw1000_slowrate+0x44>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	07db      	lsls	r3, r3, #31
 8001522:	d501      	bpl.n	8001528 <port_set_dw1000_slowrate+0x24>
  return (*((__IO uint8_t *)&SPIx->DR));
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <port_set_dw1000_slowrate+0x44>)
 8001526:	7b1b      	ldrb	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001528:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <port_set_dw1000_slowrate+0x44>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2140      	movs	r1, #64	@ 0x40
 800152e:	438a      	bics	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2038      	movs	r0, #56	@ 0x38
 8001536:	4382      	bics	r2, r0
 8001538:	3820      	subs	r0, #32
 800153a:	4302      	orrs	r2, r0
 800153c:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	430a      	orrs	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
	}

	LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV16 );
	LL_SPI_Enable(SPI1);
}
 8001544:	4770      	bx	lr
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	40013000 	.word	0x40013000

0800154c <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 16MHz
 *
 * */
void port_set_dw1000_fastrate(void)
{
 800154c:	e001      	b.n	8001552 <port_set_dw1000_fastrate+0x6>
	while ( LL_SPI_IsActiveFlag_BSY(SPI1) != 0 )
 800154e:	2900      	cmp	r1, #0
 8001550:	d008      	beq.n	8001564 <port_set_dw1000_fastrate+0x18>
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <port_set_dw1000_fastrate+0x40>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2280      	movs	r2, #128	@ 0x80
 8001558:	0011      	movs	r1, r2
 800155a:	4019      	ands	r1, r3
 800155c:	421a      	tst	r2, r3
 800155e:	d0f6      	beq.n	800154e <port_set_dw1000_fastrate+0x2>
 8001560:	2101      	movs	r1, #1
 8001562:	e7f4      	b.n	800154e <port_set_dw1000_fastrate+0x2>
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <port_set_dw1000_fastrate+0x40>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	07db      	lsls	r3, r3, #31
 800156a:	d501      	bpl.n	8001570 <port_set_dw1000_fastrate+0x24>
  return (*((__IO uint8_t *)&SPIx->DR));
 800156c:	4b07      	ldr	r3, [pc, #28]	@ (800158c <port_set_dw1000_fastrate+0x40>)
 800156e:	7b1b      	ldrb	r3, [r3, #12]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <port_set_dw1000_fastrate+0x40>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	2140      	movs	r1, #64	@ 0x40
 8001576:	438a      	bics	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_BR, BaudRate);
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2038      	movs	r0, #56	@ 0x38
 800157e:	4382      	bics	r2, r0
 8001580:	601a      	str	r2, [r3, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
	}

	LL_SPI_Disable(SPI1);
    LL_SPI_SetBaudRatePrescaler(SPI1, LL_SPI_BAUDRATEPRESCALER_DIV2 );
	LL_SPI_Enable(SPI1);
}
 8001588:	4770      	bx	lr
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	40013000 	.word	0x40013000

08001590 <decamutexon>:

decaIrqStatus_t decamutexon(void)
{
	// not yet implemented
	return 0;
}
 8001590:	2000      	movs	r0, #0
 8001592:	4770      	bx	lr

08001594 <decamutexoff>:
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t j)
{
	// not yet implemented
}
 8001594:	4770      	bx	lr
	...

08001598 <reset_DW1000>:
 *             In general it is output, but it also can be used to reset the digital
 *             part of DW1000 by driving this pin low.
 *             Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8001598:	b570      	push	{r4, r5, r6, lr}
 800159a:	b086      	sub	sp, #24
	LL_GPIO_InitTypeDef     GPIO_InitStruct;

    GPIO_InitStruct.Pin = DW_RST_Pin;
 800159c:	2502      	movs	r5, #2
 800159e:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015a0:	2301      	movs	r3, #1
 80015a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015a4:	2400      	movs	r4, #0
 80015a6:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80015aa:	9504      	str	r5, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015ac:	4e0a      	ldr	r6, [pc, #40]	@ (80015d8 <reset_DW1000+0x40>)
 80015ae:	4669      	mov	r1, sp
 80015b0:	0030      	movs	r0, r6
 80015b2:	f7ff fbbf 	bl	8000d34 <LL_GPIO_Init>
  WRITE_REG(GPIOx->BRR, PinMask);
 80015b6:	62b5      	str	r5, [r6, #40]	@ 0x28

    LL_GPIO_ResetOutputPin( DW_RST_GPIO_Port, DW_RST_Pin );

    LL_mDelay(1);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff fe0f 	bl	80011dc <LL_mDelay>

    GPIO_InitStruct.Pin = DW_RST_Pin;
 80015be:	9500      	str	r5, [sp, #0]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80015c0:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015c2:	9404      	str	r4, [sp, #16]
    LL_GPIO_Init(DW_RST_GPIO_Port, &GPIO_InitStruct);
 80015c4:	4669      	mov	r1, sp
 80015c6:	0030      	movs	r0, r6
 80015c8:	f7ff fbb4 	bl	8000d34 <LL_GPIO_Init>

    LL_mDelay(5);
 80015cc:	2005      	movs	r0, #5
 80015ce:	f7ff fe05 	bl	80011dc <LL_mDelay>
}
 80015d2:	b006      	add	sp, #24
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	50000400 	.word	0x50000400

080015dc <port_wakeup_dw1000>:

/* @fn        port_wakeup_dw1000
 * @brief    "slow" waking up of DW1000 using DW_CS only
 * */
void port_wakeup_dw1000(void)
{
 80015dc:	b570      	push	{r4, r5, r6, lr}
 80015de:	4c05      	ldr	r4, [pc, #20]	@ (80015f4 <port_wakeup_dw1000+0x18>)
 80015e0:	2501      	movs	r5, #1
 80015e2:	62a5      	str	r5, [r4, #40]	@ 0x28
    LL_GPIO_ResetOutputPin( DW_CS_GPIO_Port, DW_CS_Pin );
    LL_mDelay(1);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fdf9 	bl	80011dc <LL_mDelay>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80015ea:	61a5      	str	r5, [r4, #24]
    LL_GPIO_SetOutputPin( DW_CS_GPIO_Port, DW_CS_Pin );
    LL_mDelay(7);
 80015ec:	2007      	movs	r0, #7
 80015ee:	f7ff fdf5 	bl	80011dc <LL_mDelay>
}
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
 80015f4:	50000400 	.word	0x50000400

080015f8 <LEDS_INVERT>:
// DWB1001/4 board has LEDs connected to the ground
// for DWB1001/4 board comment the next line
#define DWM1001_DEV

void LEDS_INVERT(uint32_t LEDS_MASK)
{
 80015f8:	b510      	push	{r4, lr}
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 80015fa:	07c3      	lsls	r3, r0, #31
 80015fc:	d509      	bpl.n	8001612 <LEDS_INVERT+0x1a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80015fe:	4913      	ldr	r1, [pc, #76]	@ (800164c <LEDS_INVERT+0x54>)
 8001600:	694c      	ldr	r4, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001602:	0423      	lsls	r3, r4, #16
 8001604:	2280      	movs	r2, #128	@ 0x80
 8001606:	0312      	lsls	r2, r2, #12
 8001608:	4013      	ands	r3, r2
 800160a:	2208      	movs	r2, #8
 800160c:	43a2      	bics	r2, r4
 800160e:	4313      	orrs	r3, r2
 8001610:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 8001612:	0783      	lsls	r3, r0, #30
 8001614:	d50a      	bpl.n	800162c <LEDS_INVERT+0x34>
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001616:	21a0      	movs	r1, #160	@ 0xa0
 8001618:	05c9      	lsls	r1, r1, #23
 800161a:	694c      	ldr	r4, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800161c:	0423      	lsls	r3, r4, #16
 800161e:	2280      	movs	r2, #128	@ 0x80
 8001620:	0292      	lsls	r2, r2, #10
 8001622:	4013      	ands	r3, r2
 8001624:	2202      	movs	r2, #2
 8001626:	43a2      	bics	r2, r4
 8001628:	4313      	orrs	r3, r2
 800162a:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 800162c:	0740      	lsls	r0, r0, #29
 800162e:	d50b      	bpl.n	8001648 <LEDS_INVERT+0x50>
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001630:	21a0      	movs	r1, #160	@ 0xa0
 8001632:	05c9      	lsls	r1, r1, #23
 8001634:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001636:	0403      	lsls	r3, r0, #16
 8001638:	2280      	movs	r2, #128	@ 0x80
 800163a:	0452      	lsls	r2, r2, #17
 800163c:	4013      	ands	r3, r2
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	0052      	lsls	r2, r2, #1
 8001642:	4382      	bics	r2, r0
 8001644:	4313      	orrs	r3, r2
 8001646:	618b      	str	r3, [r1, #24]
		LL_GPIO_TogglePin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 8001648:	bd10      	pop	{r4, pc}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	50000400 	.word	0x50000400

08001650 <LEDS_OFF>:
void LEDS_OFF(uint32_t LEDS_MASK)
#else
void LEDS_ON(uint32_t LEDS_MASK)
#endif // DWM1001_DEV
{
	if ( LEDS_MASK & LED_GREEN_MASK ) {
 8001650:	07c3      	lsls	r3, r0, #31
 8001652:	d502      	bpl.n	800165a <LEDS_OFF+0xa>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001654:	4b08      	ldr	r3, [pc, #32]	@ (8001678 <LEDS_OFF+0x28>)
 8001656:	2208      	movs	r2, #8
 8001658:	619a      	str	r2, [r3, #24]
	    LL_GPIO_SetOutputPin( LED_Green_GPIO_Port, LED_Green_Pin );
	}
	if ( LEDS_MASK & LED_BLUE_MASK ) {
 800165a:	0783      	lsls	r3, r0, #30
 800165c:	d503      	bpl.n	8001666 <LEDS_OFF+0x16>
 800165e:	23a0      	movs	r3, #160	@ 0xa0
 8001660:	05db      	lsls	r3, r3, #23
 8001662:	2202      	movs	r2, #2
 8001664:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetOutputPin( LED_Blue_GPIO_Port, LED_Blue_Pin );
	}
	if ( LEDS_MASK & LED_RED_MASK ) {
 8001666:	0740      	lsls	r0, r0, #29
 8001668:	d504      	bpl.n	8001674 <LEDS_OFF+0x24>
 800166a:	23a0      	movs	r3, #160	@ 0xa0
 800166c:	05db      	lsls	r3, r3, #23
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	0052      	lsls	r2, r2, #1
 8001672:	619a      	str	r2, [r3, #24]
		LL_GPIO_SetOutputPin( LED_Red_GPIO_Port, LED_Red_Pin );
	}
}
 8001674:	4770      	bx	lr
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	50000400 	.word	0x50000400

0800167c <spi_device_init>:
 *
 */
bool spi_device_init(uint8_t bus, uint8_t cs)
{
	return false;
}
 800167c:	2000      	movs	r0, #0
 800167e:	4770      	bx	lr

08001680 <spi_transfer_pf>:
 *
 */
bool spi_transfer_pf(uint8_t bus, uint8_t cs, uint8_t * mosi, uint8_t * miso, uint16_t len)
{
	return false;
}
 8001680:	2000      	movs	r0, #0
 8001682:	4770      	bx	lr

08001684 <i2c_slave_read>:
/* @brief I2C tranfer for LIS3DH
 *
 */
bool i2c_slave_read(uint8_t bus, uint8_t addr, uint8_t reg,  uint8_t *data, uint16_t len)
{	// bus is not used in I2C transfer
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	a805      	add	r0, sp, #20
 8001688:	8805      	ldrh	r5, [r0, #0]
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800168a:	481d      	ldr	r0, [pc, #116]	@ (8001700 <i2c_slave_read+0x7c>)
 800168c:	4308      	orrs	r0, r1
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800168e:	4c1d      	ldr	r4, [pc, #116]	@ (8001704 <i2c_slave_read+0x80>)
 8001690:	6866      	ldr	r6, [r4, #4]
 8001692:	4f1d      	ldr	r7, [pc, #116]	@ (8001708 <i2c_slave_read+0x84>)
 8001694:	403e      	ands	r6, r7
 8001696:	4330      	orrs	r0, r6
 8001698:	6060      	str	r0, [r4, #4]
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
  WRITE_REG(I2Cx->TXDR, Data);
 800169a:	62a2      	str	r2, [r4, #40]	@ 0x28
}
 800169c:	e001      	b.n	80016a2 <i2c_slave_read+0x1e>
	LL_I2C_HandleTransfer(I2C1, addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
	LL_I2C_TransmitData8(I2C1, reg);


	while( !LL_I2C_IsActiveFlag_STOP(I2C1))
 800169e:	2c00      	cmp	r4, #0
 80016a0:	d108      	bne.n	80016b4 <i2c_slave_read+0x30>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016a2:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <i2c_slave_read+0x80>)
 80016a4:	6992      	ldr	r2, [r2, #24]
 80016a6:	2020      	movs	r0, #32
 80016a8:	0004      	movs	r4, r0
 80016aa:	4014      	ands	r4, r2
 80016ac:	4210      	tst	r0, r2
 80016ae:	d0f6      	beq.n	800169e <i2c_slave_read+0x1a>
 80016b0:	2401      	movs	r4, #1
 80016b2:	e7f4      	b.n	800169e <i2c_slave_read+0x1a>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016b4:	4813      	ldr	r0, [pc, #76]	@ (8001704 <i2c_slave_read+0x80>)
 80016b6:	69c2      	ldr	r2, [r0, #28]
 80016b8:	2420      	movs	r4, #32
 80016ba:	4322      	orrs	r2, r4
 80016bc:	61c2      	str	r2, [r0, #28]
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80016be:	042a      	lsls	r2, r5, #16
 80016c0:	24ff      	movs	r4, #255	@ 0xff
 80016c2:	0424      	lsls	r4, r4, #16
 80016c4:	4022      	ands	r2, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80016c6:	430a      	orrs	r2, r1
 80016c8:	4910      	ldr	r1, [pc, #64]	@ (800170c <i2c_slave_read+0x88>)
 80016ca:	4311      	orrs	r1, r2
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80016cc:	6842      	ldr	r2, [r0, #4]
 80016ce:	4c0e      	ldr	r4, [pc, #56]	@ (8001708 <i2c_slave_read+0x84>)
 80016d0:	4022      	ands	r2, r4
 80016d2:	4311      	orrs	r1, r2
 80016d4:	6041      	str	r1, [r0, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <i2c_slave_read+0x80>)
 80016d8:	6992      	ldr	r2, [r2, #24]
 80016da:	0692      	lsls	r2, r2, #26
 80016dc:	d408      	bmi.n	80016f0 <i2c_slave_read+0x6c>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80016de:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <i2c_slave_read+0x80>)
 80016e0:	6992      	ldr	r2, [r2, #24]
 80016e2:	0752      	lsls	r2, r2, #29
 80016e4:	d5f7      	bpl.n	80016d6 <i2c_slave_read+0x52>
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80016e6:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <i2c_slave_read+0x80>)
 80016e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24

 	while( !LL_I2C_IsActiveFlag_STOP(I2C1))
 	{
		if ( LL_I2C_IsActiveFlag_RXNE(I2C1) )
		{
			*data++ = LL_I2C_ReceiveData8(I2C1);
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	e7f2      	b.n	80016d6 <i2c_slave_read+0x52>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <i2c_slave_read+0x80>)
 80016f2:	69d3      	ldr	r3, [r2, #28]
 80016f4:	2120      	movs	r1, #32
 80016f6:	430b      	orrs	r3, r1
 80016f8:	61d3      	str	r3, [r2, #28]
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);

	return false;
}
 80016fa:	2000      	movs	r0, #0
 80016fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fe:	46c0      	nop			@ (mov r8, r8)
 8001700:	02012000 	.word	0x02012000
 8001704:	40005400 	.word	0x40005400
 8001708:	fc008000 	.word	0xfc008000
 800170c:	02002400 	.word	0x02002400

08001710 <lis3dh_configure_int>:

/* @brief Init and configure LIS3DH to wake up MCU on movement event
 *
 */
void lis3dh_configure_int()
{
 8001710:	b530      	push	{r4, r5, lr}
 8001712:	b089      	sub	sp, #36	@ 0x24
	lis3dh_sensor_t* sensor = lis3dh_get_device();
 8001714:	f002 f872 	bl	80037fc <lis3dh_get_device>
 8001718:	1e04      	subs	r4, r0, #0
		  if (sensor == NULL ) {
 800171a:	d031      	beq.n	8001780 <lis3dh_configure_int+0x70>
		  }

		  // enable data interrupts on INT1
		  lis3dh_int_event_config_t event_config;

		  event_config.mode = lis3dh_wake_up;
 800171c:	a905      	add	r1, sp, #20
 800171e:	2300      	movs	r3, #0
 8001720:	700b      	strb	r3, [r1, #0]
		  // event_config.mode = lis3dh_free_fall;
		  // event_config.mode = lis3dh_6d_movement;
		  // event_config.mode = lis3dh_6d_position;
		  // event_config.mode = lis3dh_4d_movement;
		  // event_config.mode = lis3dh_4d_position;
		  event_config.threshold = 10;
 8001722:	220a      	movs	r2, #10
 8001724:	704a      	strb	r2, [r1, #1]
		  event_config.x_low_enabled  = false;
 8001726:	708b      	strb	r3, [r1, #2]
		  event_config.x_high_enabled = true;
 8001728:	2501      	movs	r5, #1
 800172a:	70cd      	strb	r5, [r1, #3]
		  event_config.y_low_enabled  = false;
 800172c:	710b      	strb	r3, [r1, #4]
		  event_config.y_high_enabled = true;
 800172e:	714d      	strb	r5, [r1, #5]
		  event_config.z_low_enabled  = false;
 8001730:	718b      	strb	r3, [r1, #6]
		  event_config.z_high_enabled = true;
 8001732:	71cd      	strb	r5, [r1, #7]
		  event_config.duration = 0;
 8001734:	724b      	strb	r3, [r1, #9]
		  event_config.latch = false;
 8001736:	720b      	strb	r3, [r1, #8]

		  lis3dh_set_int_event_config (sensor, &event_config, lis3dh_int_event1_gen);
 8001738:	2200      	movs	r2, #0
 800173a:	0020      	movs	r0, r4
 800173c:	f001 fec4 	bl	80034c8 <lis3dh_set_int_event_config>
		  lis3dh_enable_int (sensor, lis3dh_int_event1, lis3dh_int1_signal, true);
 8001740:	2301      	movs	r3, #1
 8001742:	2200      	movs	r2, #0
 8001744:	2103      	movs	r1, #3
 8001746:	0020      	movs	r0, r4
 8001748:	f001 fe10 	bl	800336c <lis3dh_enable_int>


		  // configure HPF and reset the reference by dummy read
		  lis3dh_config_hpf (sensor, lis3dh_hpf_normal, 0, true, true, true, true);
 800174c:	9502      	str	r5, [sp, #8]
 800174e:	9501      	str	r5, [sp, #4]
 8001750:	9500      	str	r5, [sp, #0]
 8001752:	2301      	movs	r3, #1
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	0020      	movs	r0, r4
 800175a:	f001 ffdd 	bl	8003718 <lis3dh_config_hpf>
		  lis3dh_get_hpf_ref (sensor);
 800175e:	0020      	movs	r0, r4
 8001760:	f001 fc85 	bl	800306e <lis3dh_get_hpf_ref>

		  // LAST STEP: Finally set scale and mode to start measurements
		  lis3dh_set_scale(sensor, lis3dh_scale_2_g);
 8001764:	2100      	movs	r1, #0
 8001766:	0020      	movs	r0, r4
 8001768:	f001 fdd7 	bl	800331a <lis3dh_set_scale>
		  lis3dh_set_mode (sensor, lis3dh_odr_10, lis3dh_high_res, true, true, true);
 800176c:	9501      	str	r5, [sp, #4]
 800176e:	9500      	str	r5, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	2202      	movs	r2, #2
 8001774:	2102      	movs	r1, #2
 8001776:	0020      	movs	r0, r4
 8001778:	f001 fd5a 	bl	8003230 <lis3dh_set_mode>
}
 800177c:	b009      	add	sp, #36	@ 0x24
 800177e:	bd30      	pop	{r4, r5, pc}
			  sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2132      	movs	r1, #50	@ 0x32
 8001784:	2000      	movs	r0, #0
 8001786:	f001 fcdf 	bl	8003148 <lis3dh_init_sensor>
 800178a:	0004      	movs	r4, r0
 800178c:	e7c6      	b.n	800171c <lis3dh_configure_int+0xc>
	...

08001790 <GPIO_EXTI3_Callback>:
 *
 ******************************************************************************/

void GPIO_EXTI3_Callback()
{
	gMotionDetInt = true;
 8001790:	4b01      	ldr	r3, [pc, #4]	@ (8001798 <GPIO_EXTI3_Callback+0x8>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
}
 8001796:	4770      	bx	lr
 8001798:	2000033d 	.word	0x2000033d

0800179c <GPIO_EXTI0_Callback>:

// Button SW2 interrupt handler
void GPIO_EXTI0_Callback()
{
 800179c:	b510      	push	{r4, lr}
	LEDS_INVERT(LED_RED_MASK);
 800179e:	2004      	movs	r0, #4
 80017a0:	f7ff ff2a 	bl	80015f8 <LEDS_INVERT>
}
 80017a4:	bd10      	pop	{r4, pc}
	...

080017a8 <i2c_slave_write>:
*                              Power management section
 *
 ******************************************************************************/

bool i2c_slave_write(uint8_t bus, uint8_t addr, uint8_t  reg,  uint8_t *data, uint16_t len)
{
 80017a8:	b530      	push	{r4, r5, lr}
 80017aa:	a803      	add	r0, sp, #12
 80017ac:	8800      	ldrh	r0, [r0, #0]
	// bus is not used in I2C transfer

	LL_I2C_HandleTransfer(I2C1, addr, LL_I2C_ADDRSLAVE_7BIT, len + 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE );
 80017ae:	3001      	adds	r0, #1
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017b0:	0400      	lsls	r0, r0, #16
 80017b2:	24ff      	movs	r4, #255	@ 0xff
 80017b4:	0424      	lsls	r4, r4, #16
 80017b6:	4020      	ands	r0, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80017b8:	4308      	orrs	r0, r1
 80017ba:	490e      	ldr	r1, [pc, #56]	@ (80017f4 <i2c_slave_write+0x4c>)
 80017bc:	4301      	orrs	r1, r0
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80017be:	480e      	ldr	r0, [pc, #56]	@ (80017f8 <i2c_slave_write+0x50>)
 80017c0:	6844      	ldr	r4, [r0, #4]
 80017c2:	4d0e      	ldr	r5, [pc, #56]	@ (80017fc <i2c_slave_write+0x54>)
 80017c4:	402c      	ands	r4, r5
 80017c6:	4321      	orrs	r1, r4
 80017c8:	6041      	str	r1, [r0, #4]
  WRITE_REG(I2Cx->TXDR, Data);
 80017ca:	6282      	str	r2, [r0, #40]	@ 0x28
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <i2c_slave_write+0x50>)
 80017ce:	6992      	ldr	r2, [r2, #24]
 80017d0:	0692      	lsls	r2, r2, #26
 80017d2:	d408      	bmi.n	80017e6 <i2c_slave_write+0x3e>
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80017d4:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <i2c_slave_write+0x50>)
 80017d6:	6992      	ldr	r2, [r2, #24]
 80017d8:	0792      	lsls	r2, r2, #30
 80017da:	d5f7      	bpl.n	80017cc <i2c_slave_write+0x24>

	LL_I2C_TransmitData8(I2C1, reg);

	while( !LL_I2C_IsActiveFlag_STOP(I2C1)) {
		if ( LL_I2C_IsActiveFlag_TXIS(I2C1) ) {
			LL_I2C_TransmitData8(I2C1, *data++);
 80017dc:	7819      	ldrb	r1, [r3, #0]
  WRITE_REG(I2Cx->TXDR, Data);
 80017de:	4a06      	ldr	r2, [pc, #24]	@ (80017f8 <i2c_slave_write+0x50>)
 80017e0:	6291      	str	r1, [r2, #40]	@ 0x28
 80017e2:	3301      	adds	r3, #1
}
 80017e4:	e7f2      	b.n	80017cc <i2c_slave_write+0x24>
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80017e6:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <i2c_slave_write+0x50>)
 80017e8:	69d3      	ldr	r3, [r2, #28]
 80017ea:	2120      	movs	r1, #32
 80017ec:	430b      	orrs	r3, r1
 80017ee:	61d3      	str	r3, [r2, #28]
	}

	LL_I2C_ClearFlag_STOP(I2C1);

	return false;
}
 80017f0:	2000      	movs	r0, #0
 80017f2:	bd30      	pop	{r4, r5, pc}
 80017f4:	02002000 	.word	0x02002000
 80017f8:	40005400 	.word	0x40005400
 80017fc:	fc008000 	.word	0xfc008000

08001800 <UART2_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */

void UART2_IRQHandler()
{
 8001800:	b570      	push	{r4, r5, r6, lr}
	  uint32_t isrflags   = READ_REG(USART2->ISR);
 8001802:	4a3f      	ldr	r2, [pc, #252]	@ (8001900 <UART2_IRQHandler+0x100>)
 8001804:	69d3      	ldr	r3, [r2, #28]
	  uint32_t cr1its     = READ_REG(USART2->CR1);
 8001806:	6811      	ldr	r1, [r2, #0]
	  uint32_t cr3its     = READ_REG(USART2->CR3);
 8001808:	6892      	ldr	r2, [r2, #8]
	  uint32_t errorflags;
	  uint32_t errorcode = HAL_UART_ERROR_NONE;

	  /* If no error occurs */
	  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
	  if (errorflags == 0U)
 800180a:	0718      	lsls	r0, r3, #28
 800180c:	d109      	bne.n	8001822 <UART2_IRQHandler+0x22>
	  {
	    /* UART in mode Receiver ---------------------------------------------------*/
	    if (((isrflags & USART_ISR_RXNE) != 0U)
 800180e:	0698      	lsls	r0, r3, #26
 8001810:	d510      	bpl.n	8001834 <UART2_IRQHandler+0x34>
	        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001812:	0688      	lsls	r0, r1, #26
 8001814:	d50e      	bpl.n	8001834 <UART2_IRQHandler+0x34>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001816:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <UART2_IRQHandler+0x100>)
 8001818:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800181a:	b2c0      	uxtb	r0, r0
	    {
	    	UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 800181c:	f7ff fde0 	bl	80013e0 <UART_RxCpltCallback>
	    	return;
 8001820:	e014      	b.n	800184c <UART2_IRQHandler+0x4c>
	    }
	  }

	  /* If some errors occur */
	  if ((errorflags != 0U)
	      && (((cr3its & USART_CR3_EIE) != 0U)
 8001822:	2001      	movs	r0, #1
 8001824:	0005      	movs	r5, r0
 8001826:	4015      	ands	r5, r2
 8001828:	4210      	tst	r0, r2
 800182a:	d110      	bne.n	800184e <UART2_IRQHandler+0x4e>
	          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800182c:	3020      	adds	r0, #32
 800182e:	30ff      	adds	r0, #255	@ 0xff
 8001830:	4201      	tst	r1, r0
 8001832:	d10c      	bne.n	800184e <UART2_IRQHandler+0x4e>
	    }
	    return;
	  } /* End if some error occurs */

	  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
	  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001834:	02d8      	lsls	r0, r3, #11
 8001836:	d501      	bpl.n	800183c <UART2_IRQHandler+0x3c>
 8001838:	0252      	lsls	r2, r2, #9
 800183a:	d44f      	bmi.n	80018dc <UART2_IRQHandler+0xdc>
		  LL_USART_ClearFlag_WKUP( USART2 );
  	      return;
	  }

	  /* UART in mode Transmitter ------------------------------------------------*/
	  if (((isrflags & USART_ISR_TXE) != 0U)
 800183c:	061a      	lsls	r2, r3, #24
 800183e:	d501      	bpl.n	8001844 <UART2_IRQHandler+0x44>
	      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001840:	060a      	lsls	r2, r1, #24
 8001842:	d403      	bmi.n	800184c <UART2_IRQHandler+0x4c>
	    // Transmit callback placeholder
	    return;
	  }

	  /* UART in mode Transmitter (transmission end) -----------------------------*/
	  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001844:	065b      	lsls	r3, r3, #25
 8001846:	d501      	bpl.n	800184c <UART2_IRQHandler+0x4c>
 8001848:	0649      	lsls	r1, r1, #25
 800184a:	d44c      	bmi.n	80018e6 <UART2_IRQHandler+0xe6>
		  LL_USART_DisableIT_TC( USART2 );

	    return;
	  }

}
 800184c:	bd70      	pop	{r4, r5, r6, pc}
	    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800184e:	2201      	movs	r2, #1
 8001850:	0014      	movs	r4, r2
 8001852:	401c      	ands	r4, r3
 8001854:	421a      	tst	r2, r3
 8001856:	d008      	beq.n	800186a <UART2_IRQHandler+0x6a>
 8001858:	32ff      	adds	r2, #255	@ 0xff
 800185a:	000c      	movs	r4, r1
 800185c:	4014      	ands	r4, r2
 800185e:	4211      	tst	r1, r2
 8001860:	d003      	beq.n	800186a <UART2_IRQHandler+0x6a>
  WRITE_REG(USARTx->ICR, USART_ICR_PECF);
 8001862:	4a27      	ldr	r2, [pc, #156]	@ (8001900 <UART2_IRQHandler+0x100>)
 8001864:	2001      	movs	r0, #1
 8001866:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_PE;
 8001868:	2401      	movs	r4, #1
	    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800186a:	079a      	lsls	r2, r3, #30
 800186c:	d506      	bpl.n	800187c <UART2_IRQHandler+0x7c>
 800186e:	2d00      	cmp	r5, #0
 8001870:	d004      	beq.n	800187c <UART2_IRQHandler+0x7c>
  WRITE_REG(USARTx->ICR, USART_ICR_FECF);
 8001872:	4a23      	ldr	r2, [pc, #140]	@ (8001900 <UART2_IRQHandler+0x100>)
 8001874:	2002      	movs	r0, #2
 8001876:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_FE;
 8001878:	2204      	movs	r2, #4
 800187a:	4314      	orrs	r4, r2
	    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800187c:	075a      	lsls	r2, r3, #29
 800187e:	d506      	bpl.n	800188e <UART2_IRQHandler+0x8e>
 8001880:	2d00      	cmp	r5, #0
 8001882:	d004      	beq.n	800188e <UART2_IRQHandler+0x8e>
  WRITE_REG(USARTx->ICR, USART_ICR_NCF);
 8001884:	4a1e      	ldr	r2, [pc, #120]	@ (8001900 <UART2_IRQHandler+0x100>)
 8001886:	2004      	movs	r0, #4
 8001888:	6210      	str	r0, [r2, #32]
	    	errorcode |= HAL_UART_ERROR_NE;
 800188a:	2202      	movs	r2, #2
 800188c:	4314      	orrs	r4, r2
	    if (((isrflags & USART_ISR_ORE) != 0U)
 800188e:	071a      	lsls	r2, r3, #28
 8001890:	d51b      	bpl.n	80018ca <UART2_IRQHandler+0xca>
	        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001892:	068a      	lsls	r2, r1, #26
 8001894:	d401      	bmi.n	800189a <UART2_IRQHandler+0x9a>
 8001896:	2d00      	cmp	r5, #0
 8001898:	d017      	beq.n	80018ca <UART2_IRQHandler+0xca>
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800189a:	2208      	movs	r2, #8
 800189c:	4818      	ldr	r0, [pc, #96]	@ (8001900 <UART2_IRQHandler+0x100>)
 800189e:	6202      	str	r2, [r0, #32]
	    	errorcode |= HAL_UART_ERROR_ORE;
 80018a0:	4314      	orrs	r4, r2
	      if (((isrflags & USART_ISR_RXNE) != 0U)
 80018a2:	069b      	lsls	r3, r3, #26
 80018a4:	d501      	bpl.n	80018aa <UART2_IRQHandler+0xaa>
	          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80018a6:	0689      	lsls	r1, r1, #26
 80018a8:	d412      	bmi.n	80018d0 <UART2_IRQHandler+0xd0>
	      if ((READ_BIT(USART2->CR3, USART_CR3_DMAR)) ||
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <UART2_IRQHandler+0x100>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	065b      	lsls	r3, r3, #25
 80018b0:	d401      	bmi.n	80018b6 <UART2_IRQHandler+0xb6>
 80018b2:	0724      	lsls	r4, r4, #28
 80018b4:	d5ca      	bpl.n	800184c <UART2_IRQHandler+0x4c>
	        if (READ_BIT(USART2->CR3, USART_CR3_DMAR))
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <UART2_IRQHandler+0x100>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	065b      	lsls	r3, r3, #25
 80018bc:	d5c6      	bpl.n	800184c <UART2_IRQHandler+0x4c>
	          CLEAR_BIT(USART2->CR3, USART_CR3_DMAR);
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <UART2_IRQHandler+0x100>)
 80018c0:	6893      	ldr	r3, [r2, #8]
 80018c2:	2140      	movs	r1, #64	@ 0x40
 80018c4:	438b      	bics	r3, r1
 80018c6:	6093      	str	r3, [r2, #8]
	    return;
 80018c8:	e7c0      	b.n	800184c <UART2_IRQHandler+0x4c>
	    if ( errorcode != HAL_UART_ERROR_NONE)
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d0be      	beq.n	800184c <UART2_IRQHandler+0x4c>
 80018ce:	e7e8      	b.n	80018a2 <UART2_IRQHandler+0xa2>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <UART2_IRQHandler+0x100>)
 80018d2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80018d4:	b2c0      	uxtb	r0, r0
		    	UART_RxCpltCallback( LL_USART_ReceiveData8( USART2 ) );
 80018d6:	f7ff fd83 	bl	80013e0 <UART_RxCpltCallback>
 80018da:	e7e6      	b.n	80018aa <UART2_IRQHandler+0xaa>
  WRITE_REG(USARTx->ICR, USART_ICR_WUCF);
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <UART2_IRQHandler+0x100>)
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	0352      	lsls	r2, r2, #13
 80018e2:	621a      	str	r2, [r3, #32]
  	      return;
 80018e4:	e7b2      	b.n	800184c <UART2_IRQHandler+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ea:	2301      	movs	r3, #1
 80018ec:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80018f0:	4a03      	ldr	r2, [pc, #12]	@ (8001900 <UART2_IRQHandler+0x100>)
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	2040      	movs	r0, #64	@ 0x40
 80018f6:	4383      	bics	r3, r0
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	f381 8810 	msr	PRIMASK, r1
	    return;
 80018fe:	e7a5      	b.n	800184c <UART2_IRQHandler+0x4c>
 8001900:	40004400 	.word	0x40004400

08001904 <Restart>:
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <Restart+0x34>)
 8001906:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <Restart+0x38>)
 8001908:	601a      	str	r2, [r3, #0]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 800190a:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <Restart+0x3c>)
 800190c:	601a      	str	r2, [r3, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8001912:	320a      	adds	r2, #10
 8001914:	609a      	str	r2, [r3, #8]
}
 8001916:	e002      	b.n	800191e <Restart+0x1a>
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU) == 0U) ? 1UL : 0UL);
 8001918:	2300      	movs	r3, #0
{
  LL_IWDG_Enable(IWDG);
  LL_IWDG_EnableWriteAccess(IWDG);
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_4);
  LL_IWDG_SetReloadCounter(IWDG, 10);
  while (LL_IWDG_IsReady(IWDG) != 1)
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <Restart+0x26>
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <Restart+0x34>)
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	075b      	lsls	r3, r3, #29
 8001924:	d1f8      	bne.n	8001918 <Restart+0x14>
 8001926:	2301      	movs	r3, #1
 8001928:	e7f7      	b.n	800191a <Restart+0x16>
  WRITE_REG(IWDGx->WINR, IWDG_WINR_WIN & Window);
 800192a:	4b03      	ldr	r3, [pc, #12]	@ (8001938 <Restart+0x34>)
 800192c:	220a      	movs	r2, #10
 800192e:	611a      	str	r2, [r3, #16]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8001930:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <Restart+0x40>)
 8001932:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i

  LL_IWDG_SetWindow(IWDG, 10);
  LL_IWDG_ReloadCounter(IWDG);

  __disable_irq();
  while (1)
 8001936:	e7fe      	b.n	8001936 <Restart+0x32>
 8001938:	40003000 	.word	0x40003000
 800193c:	0000cccc 	.word	0x0000cccc
 8001940:	00005555 	.word	0x00005555
 8001944:	0000aaaa 	.word	0x0000aaaa

08001948 <SendButton>:
  }

}

void SendButton(void)
{
 8001948:	b510      	push	{r4, lr}
	dwt_starttx(DWT_START_TX_IMMEDIATE);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 ffdc 	bl	8002908 <dwt_starttx>
}
 8001950:	bd10      	pop	{r4, pc}

08001952 <GPIO_EXTI4_15_Callback>:
{
 8001952:	b510      	push	{r4, lr}
	SendButton();
 8001954:	f7ff fff8 	bl	8001948 <SendButton>
}
 8001958:	bd10      	pop	{r4, pc}
	...

0800195c <cmd_onERROR>:

/*
 * @brief "error" will be sent if error during parser or command execution returned error
 * */
static void cmd_onERROR(const char *err, control_t *pcmd)
{
 800195c:	b530      	push	{r4, r5, lr}
 800195e:	4c15      	ldr	r4, [pc, #84]	@ (80019b4 <cmd_onERROR+0x58>)
 8001960:	44a5      	add	sp, r4
 8001962:	0004      	movs	r4, r0
	char str[MAX_STR_SIZE];

    strcpy(str, "error \r\n");
 8001964:	466a      	mov	r2, sp
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <cmd_onERROR+0x5c>)
 8001968:	cb21      	ldmia	r3!, {r0, r5}
 800196a:	c221      	stmia	r2!, {r0, r5}
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	7013      	strb	r3, [r2, #0]
    if ( strlen(err)< (sizeof(str)-6-3-1)) {
 8001970:	0020      	movs	r0, r4
 8001972:	f7fe fbd3 	bl	800011c <strlen>
 8001976:	23fb      	movs	r3, #251	@ 0xfb
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4298      	cmp	r0, r3
 800197c:	d30a      	bcc.n	8001994 <cmd_onERROR+0x38>
        strcpy(&str[6], err);
        strcpy(&str[6 + strlen(err)], "\r\n");
    }
    port_tx_msg(str, strlen(str));
 800197e:	4668      	mov	r0, sp
 8001980:	f7fe fbcc 	bl	800011c <strlen>
 8001984:	0001      	movs	r1, r0
 8001986:	4668      	mov	r0, sp
 8001988:	f7ff fd84 	bl	8001494 <port_tx_msg>
}
 800198c:	2381      	movs	r3, #129	@ 0x81
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	449d      	add	sp, r3
 8001992:	bd30      	pop	{r4, r5, pc}
        strcpy(&str[6], err);
 8001994:	0021      	movs	r1, r4
 8001996:	466b      	mov	r3, sp
 8001998:	1d98      	adds	r0, r3, #6
 800199a:	f002 f9bf 	bl	8003d1c <strcpy>
        strcpy(&str[6 + strlen(err)], "\r\n");
 800199e:	0020      	movs	r0, r4
 80019a0:	f7fe fbbc 	bl	800011c <strlen>
 80019a4:	3006      	adds	r0, #6
 80019a6:	4468      	add	r0, sp
 80019a8:	4904      	ldr	r1, [pc, #16]	@ (80019bc <cmd_onERROR+0x60>)
 80019aa:	2203      	movs	r2, #3
 80019ac:	f002 f9be 	bl	8003d2c <memcpy>
 80019b0:	e7e5      	b.n	800197e <cmd_onERROR+0x22>
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	fffffdfc 	.word	0xfffffdfc
 80019b8:	08004dd4 	.word	0x08004dd4
 80019bc:	08004de0 	.word	0x08004de0

080019c0 <command_parser>:
 * @brief    checks if input "text" string in known "COMMAND" or "PARAMETER VALUE" format,
 *             checks their execution permissions, a VALUE range if restrictions and
 *             executes COMMAND or sets the PARAMETER to the VALUE
 * */
void command_parser(char *text)
{
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	46c6      	mov	lr, r8
 80019c4:	b500      	push	{lr}
 80019c6:	b08a      	sub	sp, #40	@ 0x28
 80019c8:	0005      	movs	r5, r0
    control_t   mcmd_console;
    control_t   *pcmd = &mcmd_console;
    command_t   *pk = NULL;

    memset (&mcmd_console, 0 , sizeof(mcmd_console));
 80019ca:	2224      	movs	r2, #36	@ 0x24
 80019cc:	2100      	movs	r1, #0
 80019ce:	a801      	add	r0, sp, #4
 80019d0:	f002 f95e 	bl	8003c90 <memset>

    pcmd->equal = _NO_COMMAND;
    pcmd->indx = 0;
 80019d4:	e006      	b.n	80019e4 <command_parser+0x24>

    do{
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 80019d6:	700a      	strb	r2, [r1, #0]
    }while(text[ ++pcmd->indx ]);
 80019d8:	9b01      	ldr	r3, [sp, #4]
 80019da:	3301      	adds	r3, #1
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	5ceb      	ldrb	r3, [r5, r3]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00a      	beq.n	80019fa <command_parser+0x3a>
        text[pcmd->indx]=(char)toupper((int)text[pcmd->indx]);
 80019e4:	9b01      	ldr	r3, [sp, #4]
 80019e6:	18e9      	adds	r1, r5, r3
 80019e8:	5cea      	ldrb	r2, [r5, r3]
 80019ea:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa0 <command_parser+0xe0>)
 80019ec:	5c98      	ldrb	r0, [r3, r2]
 80019ee:	2303      	movs	r3, #3
 80019f0:	4003      	ands	r3, r0
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d1ef      	bne.n	80019d6 <command_parser+0x16>
 80019f6:	3a20      	subs	r2, #32
 80019f8:	e7ed      	b.n	80019d6 <command_parser+0x16>

    sscanf(text, CMD_FORMAT(MAX_COMMAND_SIZE), pcmd->cmd, &pcmd->val );
 80019fa:	492a      	ldr	r1, [pc, #168]	@ (8001aa4 <command_parser+0xe4>)
 80019fc:	ab08      	add	r3, sp, #32
 80019fe:	aa03      	add	r2, sp, #12
 8001a00:	0028      	movs	r0, r5
 8001a02:	f002 f919 	bl	8003c38 <siscanf>

    pcmd->indx = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	9301      	str	r3, [sp, #4]
    command_t   *pk = NULL;
 8001a0a:	2600      	movs	r6, #0
    while (known_commands[pcmd->indx].name != NULL)
 8001a0c:	e001      	b.n	8001a12 <command_parser+0x52>
                pcmd->equal = _COMMAND_ALLOWED;
                break;
            }
        }

        pcmd->indx++;
 8001a0e:	3401      	adds	r4, #1
 8001a10:	9401      	str	r4, [sp, #4]
    while (known_commands[pcmd->indx].name != NULL)
 8001a12:	9c01      	ldr	r4, [sp, #4]
 8001a14:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <command_parser+0xe8>)
 8001a16:	0063      	lsls	r3, r4, #1
 8001a18:	191b      	adds	r3, r3, r4
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	589f      	ldr	r7, [r3, r2]
 8001a1e:	2f00      	cmp	r7, #0
 8001a20:	d01a      	beq.n	8001a58 <command_parser+0x98>
        pk = (command_t *) &known_commands[pcmd->indx];
 8001a22:	0063      	lsls	r3, r4, #1
 8001a24:	191b      	adds	r3, r3, r4
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4e1f      	ldr	r6, [pc, #124]	@ (8001aa8 <command_parser+0xe8>)
 8001a2a:	199e      	adds	r6, r3, r6
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8001a2c:	0039      	movs	r1, r7
 8001a2e:	a803      	add	r0, sp, #12
 8001a30:	f7fe fb6a 	bl	8000108 <strcmp>
 8001a34:	2800      	cmp	r0, #0
 8001a36:	d1ea      	bne.n	8001a0e <command_parser+0x4e>
            ( strlen(pcmd->cmd) == strlen(pk->name)) )
 8001a38:	a803      	add	r0, sp, #12
 8001a3a:	f7fe fb6f 	bl	800011c <strlen>
 8001a3e:	4680      	mov	r8, r0
 8001a40:	0038      	movs	r0, r7
 8001a42:	f7fe fb6b 	bl	800011c <strlen>
        if (( strcmp(pcmd->cmd, pk->name) == 0 ) &&\
 8001a46:	4580      	cmp	r8, r0
 8001a48:	d1e1      	bne.n	8001a0e <command_parser+0x4e>
            pcmd->equal = _COMMAND_FOUND;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	9302      	str	r3, [sp, #8]
            if ( pk->mode == mANY )
 8001a4e:	6873      	ldr	r3, [r6, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1dc      	bne.n	8001a0e <command_parser+0x4e>
                pcmd->equal = _COMMAND_ALLOWED;
 8001a54:	3302      	adds	r3, #2
 8001a56:	9302      	str	r3, [sp, #8]
    }


    switch (pcmd->equal)
 8001a58:	9b02      	ldr	r3, [sp, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d005      	beq.n	8001a6a <command_parser+0xaa>
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d008      	beq.n	8001a74 <command_parser+0xb4>
            break;
        }
        default:
            break;
    }
}
 8001a62:	b00a      	add	sp, #40	@ 0x28
 8001a64:	bc80      	pop	{r7}
 8001a66:	46b8      	mov	r8, r7
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
            cmd_onERROR(" incompatible mode", pcmd);
 8001a6a:	4810      	ldr	r0, [pc, #64]	@ (8001aac <command_parser+0xec>)
 8001a6c:	a901      	add	r1, sp, #4
 8001a6e:	f7ff ff75 	bl	800195c <cmd_onERROR>
            break;
 8001a72:	e7f6      	b.n	8001a62 <command_parser+0xa2>
            param_block_t *pbss = get_pbssConfig();
 8001a74:	f000 fbc2 	bl	80021fc <get_pbssConfig>
 8001a78:	0001      	movs	r1, r0
            pcmd->ret = pk->fn(text, pbss, pcmd->val);
 8001a7a:	68b3      	ldr	r3, [r6, #8]
 8001a7c:	9a08      	ldr	r2, [sp, #32]
 8001a7e:	0028      	movs	r0, r5
 8001a80:	4798      	blx	r3
 8001a82:	1e04      	subs	r4, r0, #0
 8001a84:	9009      	str	r0, [sp, #36]	@ 0x24
            if (pcmd->ret)
 8001a86:	d006      	beq.n	8001a96 <command_parser+0xd6>
                port_tx_msg((char *)pcmd->ret, strlen(pcmd->ret));
 8001a88:	f7fe fb48 	bl	800011c <strlen>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	0020      	movs	r0, r4
 8001a90:	f7ff fd00 	bl	8001494 <port_tx_msg>
 8001a94:	e7e5      	b.n	8001a62 <command_parser+0xa2>
                cmd_onERROR(" function", pcmd);
 8001a96:	4806      	ldr	r0, [pc, #24]	@ (8001ab0 <command_parser+0xf0>)
 8001a98:	a901      	add	r1, sp, #4
 8001a9a:	f7ff ff5f 	bl	800195c <cmd_onERROR>
}
 8001a9e:	e7e0      	b.n	8001a62 <command_parser+0xa2>
 8001aa0:	080053fd 	.word	0x080053fd
 8001aa4:	08004de4 	.word	0x08004de4
 8001aa8:	080050b4 	.word	0x080050b4
 8001aac:	08004dec 	.word	0x08004dec
 8001ab0:	08004e00 	.word	0x08004e00

08001ab4 <f_txCode>:
    }
    return (ret);
}
REG_FN(f_txCode)
{
    pbss->dwt_config.txCode = (uint8_t)(val);
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	710a      	strb	r2, [r1, #4]
    pbss->dwt_config.rxCode = (uint8_t)(val);
 8001ab8:	714a      	strb	r2, [r1, #5]
    return (CMD_FN_RET_OK);
 8001aba:	4801      	ldr	r0, [pc, #4]	@ (8001ac0 <f_txCode+0xc>)
}
 8001abc:	4770      	bx	lr
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	080051b0 	.word	0x080051b0

08001ac4 <f_nsSFD>:
REG_FN(f_nsSFD)
{
    pbss->dwt_config.nsSFD = (val == 0)?(0):(1);
 8001ac4:	1e53      	subs	r3, r2, #1
 8001ac6:	419a      	sbcs	r2, r3
 8001ac8:	718a      	strb	r2, [r1, #6]
    return (CMD_FN_RET_OK);
 8001aca:	4801      	ldr	r0, [pc, #4]	@ (8001ad0 <f_nsSFD+0xc>)
}     
 8001acc:	4770      	bx	lr
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	080051b0 	.word	0x080051b0

08001ad4 <f_phrMode>:
    }
    return (ret);
}     
REG_FN(f_phrMode)
{
    pbss->dwt_config.phrMode = (val == 0)?(0):(1);
 8001ad4:	1e53      	subs	r3, r2, #1
 8001ad6:	419a      	sbcs	r2, r3
 8001ad8:	720a      	strb	r2, [r1, #8]
    return (CMD_FN_RET_OK);
 8001ada:	4801      	ldr	r0, [pc, #4]	@ (8001ae0 <f_phrMode+0xc>)
}     
 8001adc:	4770      	bx	lr
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	080051b0 	.word	0x080051b0

08001ae4 <f_sfdTO>:
REG_FN(f_sfdTO)
{
    pbss->dwt_config.sfdTO = (uint16_t)(val);
 8001ae4:	b293      	uxth	r3, r2
 8001ae6:	20ff      	movs	r0, #255	@ 0xff
 8001ae8:	4002      	ands	r2, r0
 8001aea:	728a      	strb	r2, [r1, #10]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	72cb      	strb	r3, [r1, #11]
    return (CMD_FN_RET_OK);
 8001af0:	4800      	ldr	r0, [pc, #0]	@ (8001af4 <f_sfdTO+0x10>)
}     
 8001af2:	4770      	bx	lr
 8001af4:	080051b0 	.word	0x080051b0

08001af8 <f_smartPowerEn>:
REG_FN(f_smartPowerEn)
{
    pbss->smartPowerEn = (val == 0)?(0):(1);
 8001af8:	1e53      	subs	r3, r2, #1
 8001afa:	419a      	sbcs	r2, r3
 8001afc:	760a      	strb	r2, [r1, #24]
 8001afe:	2300      	movs	r3, #0
 8001b00:	764b      	strb	r3, [r1, #25]
    return (CMD_FN_RET_OK);
 8001b02:	4801      	ldr	r0, [pc, #4]	@ (8001b08 <f_smartPowerEn+0x10>)
}     
 8001b04:	4770      	bx	lr
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	080051b0 	.word	0x080051b0

08001b0c <f_interval_in_ms>:
REG_FN(f_interval_in_ms)
{
    pbss->blink.interval_in_ms = (uint32_t)(val);
 8001b0c:	730a      	strb	r2, [r1, #12]
 8001b0e:	0a13      	lsrs	r3, r2, #8
 8001b10:	734b      	strb	r3, [r1, #13]
 8001b12:	0c13      	lsrs	r3, r2, #16
 8001b14:	738b      	strb	r3, [r1, #14]
 8001b16:	0e12      	lsrs	r2, r2, #24
 8001b18:	73ca      	strb	r2, [r1, #15]
    return (CMD_FN_RET_OK);
 8001b1a:	4801      	ldr	r0, [pc, #4]	@ (8001b20 <f_interval_in_ms+0x14>)
}     
 8001b1c:	4770      	bx	lr
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	080051b0 	.word	0x080051b0

08001b24 <f_interval_slow_in_ms>:
REG_FN(f_interval_slow_in_ms)
{
    pbss->blink.interval_slow_in_ms = (uint32_t)(val);
 8001b24:	740a      	strb	r2, [r1, #16]
 8001b26:	0a13      	lsrs	r3, r2, #8
 8001b28:	744b      	strb	r3, [r1, #17]
 8001b2a:	0c13      	lsrs	r3, r2, #16
 8001b2c:	748b      	strb	r3, [r1, #18]
 8001b2e:	0e12      	lsrs	r2, r2, #24
 8001b30:	74ca      	strb	r2, [r1, #19]
    return (CMD_FN_RET_OK);
 8001b32:	4801      	ldr	r0, [pc, #4]	@ (8001b38 <f_interval_slow_in_ms+0x14>)
}     
 8001b34:	4770      	bx	lr
 8001b36:	46c0      	nop			@ (mov r8, r8)
 8001b38:	080051b0 	.word	0x080051b0

08001b3c <f_randomness>:
REG_FN(f_randomness)
{
    pbss->blink.randomness = (uint8_t)(val);
 8001b3c:	750a      	strb	r2, [r1, #20]
    return (CMD_FN_RET_OK);
 8001b3e:	4801      	ldr	r0, [pc, #4]	@ (8001b44 <f_randomness+0x8>)
}     
 8001b40:	4770      	bx	lr
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	080051b0 	.word	0x080051b0

08001b48 <f_tcwm>:
    return (ret);
}

REG_FN(f_tcwm)
{
    return (CMD_FN_RET_OK);
 8001b48:	4800      	ldr	r0, [pc, #0]	@ (8001b4c <f_tcwm+0x4>)
}
 8001b4a:	4770      	bx	lr
 8001b4c:	080051b0 	.word	0x080051b0

08001b50 <f_tcfm>:

REG_FN(f_tcfm)
{
    return (CMD_FN_RET_OK);
 8001b50:	4800      	ldr	r0, [pc, #0]	@ (8001b54 <f_tcfm+0x4>)
}
 8001b52:	4770      	bx	lr
 8001b54:	080051b0 	.word	0x080051b0

08001b58 <f_chan>:
{
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	000c      	movs	r4, r1
 8001b5c:	0010      	movs	r0, r2
    int tmp = chan_to_deca(val);
 8001b5e:	f001 fe53 	bl	8003808 <chan_to_deca>
    if(tmp>=0)
 8001b62:	2800      	cmp	r0, #0
 8001b64:	db02      	blt.n	8001b6c <f_chan+0x14>
      pbss->dwt_config.chan = tmp;
 8001b66:	7020      	strb	r0, [r4, #0]
      ret = CMD_FN_RET_OK;
 8001b68:	4801      	ldr	r0, [pc, #4]	@ (8001b70 <f_chan+0x18>)
}
 8001b6a:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001b6c:	2000      	movs	r0, #0
    return (ret);
 8001b6e:	e7fc      	b.n	8001b6a <f_chan+0x12>
 8001b70:	080051b0 	.word	0x080051b0

08001b74 <f_prf>:
{
 8001b74:	b510      	push	{r4, lr}
 8001b76:	000c      	movs	r4, r1
 8001b78:	0010      	movs	r0, r2
    int tmp = prf_to_deca(val);
 8001b7a:	f001 fe7b 	bl	8003874 <prf_to_deca>
    if(tmp>=0)
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	db02      	blt.n	8001b88 <f_prf+0x14>
      pbss->dwt_config.prf = (uint8_t)(tmp);
 8001b82:	7060      	strb	r0, [r4, #1]
      ret = CMD_FN_RET_OK;
 8001b84:	4801      	ldr	r0, [pc, #4]	@ (8001b8c <f_prf+0x18>)
}
 8001b86:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001b88:	2000      	movs	r0, #0
    return (ret);
 8001b8a:	e7fc      	b.n	8001b86 <f_prf+0x12>
 8001b8c:	080051b0 	.word	0x080051b0

08001b90 <f_plen>:
{
 8001b90:	b510      	push	{r4, lr}
 8001b92:	000c      	movs	r4, r1
 8001b94:	0010      	movs	r0, r2
    int tmp = plen_to_deca(val);
 8001b96:	f001 feb1 	bl	80038fc <plen_to_deca>
    if(tmp>=0)
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	db02      	blt.n	8001ba4 <f_plen+0x14>
      pbss->dwt_config.txPreambLength = (uint16_t)(tmp);
 8001b9e:	70a0      	strb	r0, [r4, #2]
      ret = CMD_FN_RET_OK;
 8001ba0:	4801      	ldr	r0, [pc, #4]	@ (8001ba8 <f_plen+0x18>)
}
 8001ba2:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001ba4:	2000      	movs	r0, #0
    return (ret);
 8001ba6:	e7fc      	b.n	8001ba2 <f_plen+0x12>
 8001ba8:	080051b0 	.word	0x080051b0

08001bac <f_rxPAC>:
{
 8001bac:	b510      	push	{r4, lr}
 8001bae:	000c      	movs	r4, r1
 8001bb0:	0010      	movs	r0, r2
    int tmp = pac_to_deca(val);
 8001bb2:	f001 fe75 	bl	80038a0 <pac_to_deca>
    if(tmp>=0)
 8001bb6:	2800      	cmp	r0, #0
 8001bb8:	db02      	blt.n	8001bc0 <f_rxPAC+0x14>
      pbss->dwt_config.rxPAC = (uint8_t)(tmp);
 8001bba:	70e0      	strb	r0, [r4, #3]
      ret = CMD_FN_RET_OK;
 8001bbc:	4801      	ldr	r0, [pc, #4]	@ (8001bc4 <f_rxPAC+0x18>)
}
 8001bbe:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001bc0:	2000      	movs	r0, #0
    return (ret);
 8001bc2:	e7fc      	b.n	8001bbe <f_rxPAC+0x12>
 8001bc4:	080051b0 	.word	0x080051b0

08001bc8 <f_dataRate>:
{
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	000c      	movs	r4, r1
 8001bcc:	0010      	movs	r0, r2
    int tmp = bitrate_to_deca(val);
 8001bce:	f001 fe27 	bl	8003820 <bitrate_to_deca>
    if(tmp>=0)
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	db02      	blt.n	8001bdc <f_dataRate+0x14>
      pbss->dwt_config.dataRate = (uint8_t)(tmp);
 8001bd6:	71e0      	strb	r0, [r4, #7]
      ret = CMD_FN_RET_OK;
 8001bd8:	4801      	ldr	r0, [pc, #4]	@ (8001be0 <f_dataRate+0x18>)
}     
 8001bda:	bd10      	pop	{r4, pc}
    const char * ret = NULL;
 8001bdc:	2000      	movs	r0, #0
    return (ret);
 8001bde:	e7fc      	b.n	8001bda <f_dataRate+0x12>
 8001be0:	080051b0 	.word	0x080051b0

08001be4 <f_help_app>:
{
 8001be4:	b511      	push	{r0, r4, lr}
 8001be6:	b0ff      	sub	sp, #508	@ 0x1fc
    int        indx = 0;
 8001be8:	2400      	movs	r4, #0
    while (known_commands[indx].name != NULL)
 8001bea:	e00b      	b.n	8001c04 <f_help_app+0x20>
        sprintf(str,"%s \r\n", known_commands[indx].name);
 8001bec:	490a      	ldr	r1, [pc, #40]	@ (8001c18 <f_help_app+0x34>)
 8001bee:	4668      	mov	r0, sp
 8001bf0:	f002 f800 	bl	8003bf4 <siprintf>
        port_tx_msg((char*)str, strlen(str));
 8001bf4:	4668      	mov	r0, sp
 8001bf6:	f7fe fa91 	bl	800011c <strlen>
 8001bfa:	0001      	movs	r1, r0
 8001bfc:	4668      	mov	r0, sp
 8001bfe:	f7ff fc49 	bl	8001494 <port_tx_msg>
        indx++;
 8001c02:	3401      	adds	r4, #1
    while (known_commands[indx].name != NULL)
 8001c04:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <f_help_app+0x38>)
 8001c06:	0063      	lsls	r3, r4, #1
 8001c08:	191b      	adds	r3, r3, r4
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	589a      	ldr	r2, [r3, r2]
 8001c0e:	2a00      	cmp	r2, #0
 8001c10:	d1ec      	bne.n	8001bec <f_help_app+0x8>
    return (ret);
 8001c12:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <f_help_app+0x3c>)
}
 8001c14:	b07f      	add	sp, #508	@ 0x1fc
 8001c16:	bd12      	pop	{r1, r4, pc}
 8001c18:	08004e0c 	.word	0x08004e0c
 8001c1c:	080050b4 	.word	0x080050b4
 8001c20:	080051b0 	.word	0x080051b0

08001c24 <f_restore>:
/*
 * @brief restore NV configuration from defaults
 *
 * */
REG_FN(f_restore)
{
 8001c24:	b510      	push	{r4, lr}
	restore_nvm_fconfig();
 8001c26:	f000 faef 	bl	8002208 <restore_nvm_fconfig>

	return (CMD_FN_RET_OK);
 8001c2a:	4801      	ldr	r0, [pc, #4]	@ (8001c30 <f_restore+0xc>)
}
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	080051b0 	.word	0x080051b0

08001c34 <f_restart>:
/*
 * @brief restart the FW
 *
 * */
REG_FN(f_restart)
{
 8001c34:	b510      	push	{r4, lr}
	Restart();
 8001c36:	f7ff fe65 	bl	8001904 <Restart>
	return (CMD_FN_RET_OK);
 8001c3a:	4801      	ldr	r0, [pc, #4]	@ (8001c40 <f_restart+0xc>)
}
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	46c0      	nop			@ (mov r8, r8)
 8001c40:	080051b0 	.word	0x080051b0

08001c44 <f_save>:
/*
 * @brief save configuration
 *
 * */
REG_FN(f_save)
{
 8001c44:	b510      	push	{r4, lr}
 8001c46:	0008      	movs	r0, r1
    save_bssConfig(pbss);
 8001c48:	f000 fa8e 	bl	8002168 <save_bssConfig>

    return (CMD_FN_RET_OK);
 8001c4c:	4800      	ldr	r0, [pc, #0]	@ (8001c50 <f_save+0xc>)
}
 8001c4e:	bd10      	pop	{r4, pc}
 8001c50:	080051b0 	.word	0x080051b0

08001c54 <f_decaTDoATag>:
{
 8001c54:	b510      	push	{r4, lr}
 8001c56:	4c29      	ldr	r4, [pc, #164]	@ (8001cfc <f_decaTDoATag+0xa8>)
 8001c58:	44a5      	add	sp, r4
    const char ver[] = FULL_VERSION;
 8001c5a:	ac80      	add	r4, sp, #512	@ 0x200
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <f_decaTDoATag+0xac>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	9280      	str	r2, [sp, #512]	@ 0x200
 8001c62:	889b      	ldrh	r3, [r3, #4]
 8001c64:	80a3      	strh	r3, [r4, #4]
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 8001c66:	4927      	ldr	r1, [pc, #156]	@ (8001d04 <f_decaTDoATag+0xb0>)
 8001c68:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <f_decaTDoATag+0xb4>)
 8001c6a:	4668      	mov	r0, sp
 8001c6c:	f001 ffc2 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"{\"Info\":{\r\n");
 8001c70:	4668      	mov	r0, sp
 8001c72:	f7fe fa53 	bl	800011c <strlen>
 8001c76:	4468      	add	r0, sp
 8001c78:	4924      	ldr	r1, [pc, #144]	@ (8001d0c <f_decaTDoATag+0xb8>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	f002 f856 	bl	8003d2c <memcpy>
    sprintf(&str[strlen(str)],"\"Device\":\"DWM1004C TDoA Tag\",\r\n");
 8001c80:	4668      	mov	r0, sp
 8001c82:	f7fe fa4b 	bl	800011c <strlen>
 8001c86:	4468      	add	r0, sp
 8001c88:	4921      	ldr	r1, [pc, #132]	@ (8001d10 <f_decaTDoATag+0xbc>)
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f002 f84e 	bl	8003d2c <memcpy>
    sprintf(&str[strlen(str)],"\"Version\":\"%s\",\r\n", ver);
 8001c90:	4668      	mov	r0, sp
 8001c92:	f7fe fa43 	bl	800011c <strlen>
 8001c96:	491f      	ldr	r1, [pc, #124]	@ (8001d14 <f_decaTDoATag+0xc0>)
 8001c98:	4468      	add	r0, sp
 8001c9a:	0022      	movs	r2, r4
 8001c9c:	f001 ffaa 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"Build\":\"%s %s\",\r\n", __DATE__, __TIME__ );
 8001ca0:	4668      	mov	r0, sp
 8001ca2:	f7fe fa3b 	bl	800011c <strlen>
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <f_decaTDoATag+0xc4>)
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8001d1c <f_decaTDoATag+0xc8>)
 8001caa:	491d      	ldr	r1, [pc, #116]	@ (8001d20 <f_decaTDoATag+0xcc>)
 8001cac:	4468      	add	r0, sp
 8001cae:	f001 ffa1 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"Driver\":\"%s\"}}", DW1000_DEVICE_DRIVER_VER_STRING );
 8001cb2:	4668      	mov	r0, sp
 8001cb4:	f7fe fa32 	bl	800011c <strlen>
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d24 <f_decaTDoATag+0xd0>)
 8001cba:	491b      	ldr	r1, [pc, #108]	@ (8001d28 <f_decaTDoATag+0xd4>)
 8001cbc:	4468      	add	r0, sp
 8001cbe:	f001 ff99 	bl	8003bf4 <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);   //add formatted 4X of length, this will erase first '{'
 8001cc2:	4668      	mov	r0, sp
 8001cc4:	f7fe fa2a 	bl	800011c <strlen>
 8001cc8:	1f82      	subs	r2, r0, #6
 8001cca:	4918      	ldr	r1, [pc, #96]	@ (8001d2c <f_decaTDoATag+0xd8>)
 8001ccc:	466b      	mov	r3, sp
 8001cce:	1c98      	adds	r0, r3, #2
 8001cd0:	f001 ff90 	bl	8003bf4 <siprintf>
    str[hlen]='{';                            //restore the start bracket
 8001cd4:	237b      	movs	r3, #123	@ 0x7b
 8001cd6:	466a      	mov	r2, sp
 8001cd8:	7193      	strb	r3, [r2, #6]
    port_tx_msg(str, strlen(str));
 8001cda:	4668      	mov	r0, sp
 8001cdc:	f7fe fa1e 	bl	800011c <strlen>
 8001ce0:	0001      	movs	r1, r0
 8001ce2:	4668      	mov	r0, sp
 8001ce4:	f7ff fbd6 	bl	8001494 <port_tx_msg>
    port_tx_msg("\r\n", 2);
 8001ce8:	4811      	ldr	r0, [pc, #68]	@ (8001d30 <f_decaTDoATag+0xdc>)
 8001cea:	2102      	movs	r1, #2
 8001cec:	f7ff fbd2 	bl	8001494 <port_tx_msg>
    return (ret);
 8001cf0:	4810      	ldr	r0, [pc, #64]	@ (8001d34 <f_decaTDoATag+0xe0>)
}
 8001cf2:	2382      	movs	r3, #130	@ 0x82
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	449d      	add	sp, r3
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	fffffdf8 	.word	0xfffffdf8
 8001d00:	08004ec8 	.word	0x08004ec8
 8001d04:	08004e14 	.word	0x08004e14
 8001d08:	00005a5a 	.word	0x00005a5a
 8001d0c:	08004e1c 	.word	0x08004e1c
 8001d10:	08004e28 	.word	0x08004e28
 8001d14:	08004e48 	.word	0x08004e48
 8001d18:	08004e5c 	.word	0x08004e5c
 8001d1c:	08004e68 	.word	0x08004e68
 8001d20:	08004e74 	.word	0x08004e74
 8001d24:	08004e88 	.word	0x08004e88
 8001d28:	08004eb0 	.word	0x08004eb0
 8001d2c:	08004ec0 	.word	0x08004ec0
 8001d30:	08004de0 	.word	0x08004de0
 8001d34:	080051b0 	.word	0x080051b0

08001d38 <f_jstat>:
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	46d6      	mov	lr, sl
 8001d3c:	464f      	mov	r7, r9
 8001d3e:	4646      	mov	r6, r8
 8001d40:	b5c0      	push	{r6, r7, lr}
 8001d42:	4c7e      	ldr	r4, [pc, #504]	@ (8001f3c <f_jstat+0x204>)
 8001d44:	44a5      	add	sp, r4
 8001d46:	000c      	movs	r4, r1
    hlen = sprintf(str,"JS%04X", 0x5A5A);    // reserve space for length of JS object
 8001d48:	497d      	ldr	r1, [pc, #500]	@ (8001f40 <f_jstat+0x208>)
 8001d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f44 <f_jstat+0x20c>)
 8001d4c:	a806      	add	r0, sp, #24
 8001d4e:	f001 ff51 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"{\"UWB PARAM\":{\r\n");
 8001d52:	a806      	add	r0, sp, #24
 8001d54:	f7fe f9e2 	bl	800011c <strlen>
 8001d58:	ab06      	add	r3, sp, #24
 8001d5a:	469c      	mov	ip, r3
 8001d5c:	4460      	add	r0, ip
 8001d5e:	497a      	ldr	r1, [pc, #488]	@ (8001f48 <f_jstat+0x210>)
 8001d60:	2211      	movs	r2, #17
 8001d62:	f001 ffe3 	bl	8003d2c <memcpy>
    sprintf(&str[strlen(str)],"\"CHAN\":%d,\r\n",deca_to_chan(pbss->dwt_config.chan));
 8001d66:	a806      	add	r0, sp, #24
 8001d68:	f7fe f9d8 	bl	800011c <strlen>
 8001d6c:	0005      	movs	r5, r0
 8001d6e:	7820      	ldrb	r0, [r4, #0]
 8001d70:	f001 fd51 	bl	8003816 <deca_to_chan>
 8001d74:	0002      	movs	r2, r0
 8001d76:	4975      	ldr	r1, [pc, #468]	@ (8001f4c <f_jstat+0x214>)
 8001d78:	ab06      	add	r3, sp, #24
 8001d7a:	1958      	adds	r0, r3, r5
 8001d7c:	f001 ff3a 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"PRF\":%d,\r\n", deca_to_prf (pbss->dwt_config.prf));
 8001d80:	a806      	add	r0, sp, #24
 8001d82:	f7fe f9cb 	bl	800011c <strlen>
 8001d86:	0005      	movs	r5, r0
 8001d88:	7860      	ldrb	r0, [r4, #1]
 8001d8a:	f001 fd7e 	bl	800388a <deca_to_prf>
 8001d8e:	0002      	movs	r2, r0
 8001d90:	496f      	ldr	r1, [pc, #444]	@ (8001f50 <f_jstat+0x218>)
 8001d92:	ab06      	add	r3, sp, #24
 8001d94:	1958      	adds	r0, r3, r5
 8001d96:	f001 ff2d 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"PLEN\":%d,\r\n",deca_to_plen(pbss->dwt_config.txPreambLength));
 8001d9a:	a806      	add	r0, sp, #24
 8001d9c:	f7fe f9be 	bl	800011c <strlen>
 8001da0:	0005      	movs	r5, r0
 8001da2:	78a0      	ldrb	r0, [r4, #2]
 8001da4:	f001 fdd8 	bl	8003958 <deca_to_plen>
 8001da8:	0002      	movs	r2, r0
 8001daa:	496a      	ldr	r1, [pc, #424]	@ (8001f54 <f_jstat+0x21c>)
 8001dac:	ab06      	add	r3, sp, #24
 8001dae:	1958      	adds	r0, r3, r5
 8001db0:	f001 ff20 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"DATARATE\":%d,\r\n",deca_to_bitrate(pbss->dwt_config.dataRate));
 8001db4:	a806      	add	r0, sp, #24
 8001db6:	f7fe f9b1 	bl	800011c <strlen>
 8001dba:	0005      	movs	r5, r0
 8001dbc:	79e0      	ldrb	r0, [r4, #7]
 8001dbe:	f001 fd45 	bl	800384c <deca_to_bitrate>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	4964      	ldr	r1, [pc, #400]	@ (8001f58 <f_jstat+0x220>)
 8001dc6:	ab06      	add	r3, sp, #24
 8001dc8:	1958      	adds	r0, r3, r5
 8001dca:	f001 ff13 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"TXCODE\":%d,\r\n",pbss->dwt_config.txCode);
 8001dce:	a806      	add	r0, sp, #24
 8001dd0:	f7fe f9a4 	bl	800011c <strlen>
 8001dd4:	7922      	ldrb	r2, [r4, #4]
 8001dd6:	4961      	ldr	r1, [pc, #388]	@ (8001f5c <f_jstat+0x224>)
 8001dd8:	ab06      	add	r3, sp, #24
 8001dda:	469c      	mov	ip, r3
 8001ddc:	4460      	add	r0, ip
 8001dde:	f001 ff09 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"PAC\":%d,\r\n", deca_to_pac (pbss->dwt_config.rxPAC));
 8001de2:	a806      	add	r0, sp, #24
 8001de4:	f7fe f99a 	bl	800011c <strlen>
 8001de8:	0005      	movs	r5, r0
 8001dea:	78e0      	ldrb	r0, [r4, #3]
 8001dec:	f001 fd6f 	bl	80038ce <deca_to_pac>
 8001df0:	0002      	movs	r2, r0
 8001df2:	495b      	ldr	r1, [pc, #364]	@ (8001f60 <f_jstat+0x228>)
 8001df4:	ab06      	add	r3, sp, #24
 8001df6:	1958      	adds	r0, r3, r5
 8001df8:	f001 fefc 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"NSSFD\":%d,\r\n",pbss->dwt_config.nsSFD);
 8001dfc:	a806      	add	r0, sp, #24
 8001dfe:	f7fe f98d 	bl	800011c <strlen>
 8001e02:	79a2      	ldrb	r2, [r4, #6]
 8001e04:	4957      	ldr	r1, [pc, #348]	@ (8001f64 <f_jstat+0x22c>)
 8001e06:	ab06      	add	r3, sp, #24
 8001e08:	469c      	mov	ip, r3
 8001e0a:	4460      	add	r0, ip
 8001e0c:	f001 fef2 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"PHRMODE\":%d,\r\n",pbss->dwt_config.phrMode);
 8001e10:	a806      	add	r0, sp, #24
 8001e12:	f7fe f983 	bl	800011c <strlen>
 8001e16:	7a22      	ldrb	r2, [r4, #8]
 8001e18:	4953      	ldr	r1, [pc, #332]	@ (8001f68 <f_jstat+0x230>)
 8001e1a:	ab06      	add	r3, sp, #24
 8001e1c:	469c      	mov	ip, r3
 8001e1e:	4460      	add	r0, ip
 8001e20:	f001 fee8 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"SMARTPOWER\":%d,\r\n",pbss->smartPowerEn);
 8001e24:	a806      	add	r0, sp, #24
 8001e26:	f7fe f979 	bl	800011c <strlen>
 8001e2a:	7e23      	ldrb	r3, [r4, #24]
 8001e2c:	7e62      	ldrb	r2, [r4, #25]
 8001e2e:	0212      	lsls	r2, r2, #8
 8001e30:	431a      	orrs	r2, r3
 8001e32:	494e      	ldr	r1, [pc, #312]	@ (8001f6c <f_jstat+0x234>)
 8001e34:	ab06      	add	r3, sp, #24
 8001e36:	469c      	mov	ip, r3
 8001e38:	4460      	add	r0, ip
 8001e3a:	f001 fedb 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKFAST\":%lu,\r\n",pbss->blink.interval_in_ms);
 8001e3e:	a806      	add	r0, sp, #24
 8001e40:	f7fe f96c 	bl	800011c <strlen>
 8001e44:	7b23      	ldrb	r3, [r4, #12]
 8001e46:	7b62      	ldrb	r2, [r4, #13]
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	7ba3      	ldrb	r3, [r4, #14]
 8001e4e:	041b      	lsls	r3, r3, #16
 8001e50:	4313      	orrs	r3, r2
 8001e52:	7be2      	ldrb	r2, [r4, #15]
 8001e54:	0612      	lsls	r2, r2, #24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	4945      	ldr	r1, [pc, #276]	@ (8001f70 <f_jstat+0x238>)
 8001e5a:	ab06      	add	r3, sp, #24
 8001e5c:	469c      	mov	ip, r3
 8001e5e:	4460      	add	r0, ip
 8001e60:	f001 fec8 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"BLINKSLOW\":%lu,\r\n",pbss->blink.interval_slow_in_ms);
 8001e64:	a806      	add	r0, sp, #24
 8001e66:	f7fe f959 	bl	800011c <strlen>
 8001e6a:	7c23      	ldrb	r3, [r4, #16]
 8001e6c:	7c62      	ldrb	r2, [r4, #17]
 8001e6e:	0212      	lsls	r2, r2, #8
 8001e70:	431a      	orrs	r2, r3
 8001e72:	7ca3      	ldrb	r3, [r4, #18]
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	4313      	orrs	r3, r2
 8001e78:	7ce2      	ldrb	r2, [r4, #19]
 8001e7a:	0612      	lsls	r2, r2, #24
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	493d      	ldr	r1, [pc, #244]	@ (8001f74 <f_jstat+0x23c>)
 8001e80:	ab06      	add	r3, sp, #24
 8001e82:	469c      	mov	ip, r3
 8001e84:	4460      	add	r0, ip
 8001e86:	f001 feb5 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"RANDOMNESS\":%d,\r\n",pbss->blink.randomness);
 8001e8a:	a806      	add	r0, sp, #24
 8001e8c:	f7fe f946 	bl	800011c <strlen>
 8001e90:	7d22      	ldrb	r2, [r4, #20]
 8001e92:	4939      	ldr	r1, [pc, #228]	@ (8001f78 <f_jstat+0x240>)
 8001e94:	ab06      	add	r3, sp, #24
 8001e96:	469c      	mov	ip, r3
 8001e98:	4460      	add	r0, ip
 8001e9a:	f001 feab 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"TAGIDSET\":%d,\r\n",pbss->tagIDset);
 8001e9e:	a806      	add	r0, sp, #24
 8001ea0:	f7fe f93c 	bl	800011c <strlen>
 8001ea4:	2322      	movs	r3, #34	@ 0x22
 8001ea6:	5ce2      	ldrb	r2, [r4, r3]
 8001ea8:	4934      	ldr	r1, [pc, #208]	@ (8001f7c <f_jstat+0x244>)
 8001eaa:	ab06      	add	r3, sp, #24
 8001eac:	469c      	mov	ip, r3
 8001eae:	4460      	add	r0, ip
 8001eb0:	f001 fea0 	bl	8003bf4 <siprintf>
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x}}",
 8001eb4:	a806      	add	r0, sp, #24
 8001eb6:	f7fe f931 	bl	800011c <strlen>
                                               pbss->tagID[7], pbss->tagID[6], pbss->tagID[5], pbss->tagID[4],
 8001eba:	2321      	movs	r3, #33	@ 0x21
 8001ebc:	5ce2      	ldrb	r2, [r4, r3]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	5ce3      	ldrb	r3, [r4, r3]
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	7fe5      	ldrb	r5, [r4, #31]
 8001ec6:	7fa6      	ldrb	r6, [r4, #30]
                                               pbss->tagID[3], pbss->tagID[2], pbss->tagID[1], pbss->tagID[0]);
 8001ec8:	7f67      	ldrb	r7, [r4, #29]
 8001eca:	7f21      	ldrb	r1, [r4, #28]
 8001ecc:	468c      	mov	ip, r1
 8001ece:	7ee1      	ldrb	r1, [r4, #27]
 8001ed0:	4688      	mov	r8, r1
 8001ed2:	7ea4      	ldrb	r4, [r4, #26]
    sprintf(&str[strlen(str)],"\"TAGID\":0x%02x%02x%02x%02x%02x%02x%02x%02x}}",
 8001ed4:	492a      	ldr	r1, [pc, #168]	@ (8001f80 <f_jstat+0x248>)
 8001ed6:	ab06      	add	r3, sp, #24
 8001ed8:	4699      	mov	r9, r3
 8001eda:	4448      	add	r0, r9
 8001edc:	9405      	str	r4, [sp, #20]
 8001ede:	4643      	mov	r3, r8
 8001ee0:	9304      	str	r3, [sp, #16]
 8001ee2:	4663      	mov	r3, ip
 8001ee4:	9303      	str	r3, [sp, #12]
 8001ee6:	9702      	str	r7, [sp, #8]
 8001ee8:	9601      	str	r6, [sp, #4]
 8001eea:	9500      	str	r5, [sp, #0]
 8001eec:	4653      	mov	r3, sl
 8001eee:	f001 fe81 	bl	8003bf4 <siprintf>
    sprintf(&str[2],"%04X",strlen(str)-hlen);//add formatted 4X of length, this will erase first '{'
 8001ef2:	4648      	mov	r0, r9
 8001ef4:	f7fe f912 	bl	800011c <strlen>
 8001ef8:	1f82      	subs	r2, r0, #6
 8001efa:	4922      	ldr	r1, [pc, #136]	@ (8001f84 <f_jstat+0x24c>)
 8001efc:	201a      	movs	r0, #26
 8001efe:	4468      	add	r0, sp
 8001f00:	f001 fe78 	bl	8003bf4 <siprintf>
    str[hlen]='{';                            //restore the start bracket
 8001f04:	464b      	mov	r3, r9
 8001f06:	227b      	movs	r2, #123	@ 0x7b
 8001f08:	719a      	strb	r2, [r3, #6]
    sprintf(&str[strlen(str)],"\r\n");
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7fe f906 	bl	800011c <strlen>
 8001f10:	4448      	add	r0, r9
 8001f12:	491d      	ldr	r1, [pc, #116]	@ (8001f88 <f_jstat+0x250>)
 8001f14:	2203      	movs	r2, #3
 8001f16:	f001 ff09 	bl	8003d2c <memcpy>
    port_tx_msg(str, strlen(str));
 8001f1a:	4648      	mov	r0, r9
 8001f1c:	f7fe f8fe 	bl	800011c <strlen>
 8001f20:	0001      	movs	r1, r0
 8001f22:	4648      	mov	r0, r9
 8001f24:	f7ff fab6 	bl	8001494 <port_tx_msg>
    return (CMD_FN_RET_OK);
 8001f28:	4818      	ldr	r0, [pc, #96]	@ (8001f8c <f_jstat+0x254>)
}
 8001f2a:	2386      	movs	r3, #134	@ 0x86
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	449d      	add	sp, r3
 8001f30:	bce0      	pop	{r5, r6, r7}
 8001f32:	46ba      	mov	sl, r7
 8001f34:	46b1      	mov	r9, r6
 8001f36:	46a8      	mov	r8, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	fffffde8 	.word	0xfffffde8
 8001f40:	08004e14 	.word	0x08004e14
 8001f44:	00005a5a 	.word	0x00005a5a
 8001f48:	08004ed0 	.word	0x08004ed0
 8001f4c:	08004ee4 	.word	0x08004ee4
 8001f50:	08004ef4 	.word	0x08004ef4
 8001f54:	08004f00 	.word	0x08004f00
 8001f58:	08004f10 	.word	0x08004f10
 8001f5c:	08004f24 	.word	0x08004f24
 8001f60:	08004f34 	.word	0x08004f34
 8001f64:	08004f40 	.word	0x08004f40
 8001f68:	08004f50 	.word	0x08004f50
 8001f6c:	08004f60 	.word	0x08004f60
 8001f70:	08004f74 	.word	0x08004f74
 8001f74:	08004f88 	.word	0x08004f88
 8001f78:	08004f9c 	.word	0x08004f9c
 8001f7c:	08004fb0 	.word	0x08004fb0
 8001f80:	08004fc4 	.word	0x08004fc4
 8001f84:	08004ec0 	.word	0x08004ec0
 8001f88:	08004de0 	.word	0x08004de0
 8001f8c:	080051b0 	.word	0x080051b0

08001f90 <f_stat>:
{
 8001f90:	b570      	push	{r4, r5, r6, lr}
 8001f92:	0004      	movs	r4, r0
 8001f94:	000d      	movs	r5, r1
 8001f96:	0016      	movs	r6, r2
    f_decaTDoATag(text, pbss, val);
 8001f98:	f7ff fe5c 	bl	8001c54 <f_decaTDoATag>
    f_jstat(text, pbss, val);
 8001f9c:	0032      	movs	r2, r6
 8001f9e:	0029      	movs	r1, r5
 8001fa0:	0020      	movs	r0, r4
 8001fa2:	f7ff fec9 	bl	8001d38 <f_jstat>
    return (ret);
 8001fa6:	4801      	ldr	r0, [pc, #4]	@ (8001fac <f_stat+0x1c>)
}
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	080051b0 	.word	0x080051b0

08001fb0 <waitForCommand>:
 *
 * @return  COMMAND_READY : the data for future processing can be found in app.local_buff : app.local_buff_len
 *          NO_DATA : no command yet
 */
uart_data_e waitForCommand(uint8_t *pBuf, uint16_t len)
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	0005      	movs	r5, r0
 8001fb4:	000c      	movs	r4, r1
    static uint8_t cmdLen = 0;
    static uint8_t cmdBuf[COM_RX_BUF_SIZE]; /**< slow command buffer : small size */

    ret = NO_DATA;

    if (len <= 2)
 8001fb6:	2902      	cmp	r1, #2
 8001fb8:	d841      	bhi.n	800203e <waitForCommand+0x8e>
    {/* "slow" command mode: Human interface. Wait until '\r' or '\n' */
        if (cmdLen == 0)
 8001fba:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <waitForCommand+0xc4>)
 8001fbc:	781c      	ldrb	r4, [r3, #0]
 8001fbe:	2c00      	cmp	r4, #0
 8001fc0:	d00f      	beq.n	8001fe2 <waitForCommand+0x32>
        {
            memset(cmdBuf, 0, sizeof(cmdBuf));
        }

        if (cmdLen < (sizeof(local_buff) - 1))
 8001fc2:	2c3e      	cmp	r4, #62	@ 0x3e
 8001fc4:	d832      	bhi.n	800202c <waitForCommand+0x7c>
        {
            if (*pBuf == '\n' || *pBuf == '\r')
 8001fc6:	782b      	ldrb	r3, [r5, #0]
 8001fc8:	2b0a      	cmp	r3, #10
 8001fca:	d010      	beq.n	8001fee <waitForCommand+0x3e>
 8001fcc:	2b0d      	cmp	r3, #13
 8001fce:	d00e      	beq.n	8001fee <waitForCommand+0x3e>

                    ret = COMMAND_READY;
                    cmdLen = 0;
                }
            }
            else if (*pBuf == '\b') //erase of a char in the terminal
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d01c      	beq.n	800200e <waitForCommand+0x5e>
                }

            }
            else
            {
                cmdBuf[cmdLen] = *pBuf;
 8001fd4:	4a28      	ldr	r2, [pc, #160]	@ (8002078 <waitForCommand+0xc8>)
 8001fd6:	5513      	strb	r3, [r2, r4]
                cmdLen++;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <waitForCommand+0xc4>)
 8001fda:	3401      	adds	r4, #1
 8001fdc:	701c      	strb	r4, [r3, #0]
    ret = NO_DATA;
 8001fde:	2400      	movs	r4, #0
 8001fe0:	e03d      	b.n	800205e <waitForCommand+0xae>
            memset(cmdBuf, 0, sizeof(cmdBuf));
 8001fe2:	4825      	ldr	r0, [pc, #148]	@ (8002078 <waitForCommand+0xc8>)
 8001fe4:	2240      	movs	r2, #64	@ 0x40
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f001 fe52 	bl	8003c90 <memset>
 8001fec:	e7e9      	b.n	8001fc2 <waitForCommand+0x12>
                if (cmdLen > 0)
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	d035      	beq.n	800205e <waitForCommand+0xae>
                    memcpy(local_buff, cmdBuf, cmdLen);
 8001ff2:	4d22      	ldr	r5, [pc, #136]	@ (800207c <waitForCommand+0xcc>)
 8001ff4:	4920      	ldr	r1, [pc, #128]	@ (8002078 <waitForCommand+0xc8>)
 8001ff6:	0022      	movs	r2, r4
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	f001 fe97 	bl	8003d2c <memcpy>
                    local_buff_length = cmdLen;
 8001ffe:	4b20      	ldr	r3, [pc, #128]	@ (8002080 <waitForCommand+0xd0>)
 8002000:	801c      	strh	r4, [r3, #0]
                    local_buff[cmdLen] = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	552b      	strb	r3, [r5, r4]
                    cmdLen = 0;
 8002006:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <waitForCommand+0xc4>)
 8002008:	7013      	strb	r3, [r2, #0]
                    ret = COMMAND_READY;
 800200a:	2401      	movs	r4, #1
 800200c:	e027      	b.n	800205e <waitForCommand+0xae>
                if (cmdLen > 0)
 800200e:	2c00      	cmp	r4, #0
 8002010:	d025      	beq.n	800205e <waitForCommand+0xae>
                    --cmdLen;
 8002012:	3c01      	subs	r4, #1
 8002014:	b2e4      	uxtb	r4, r4
 8002016:	4b17      	ldr	r3, [pc, #92]	@ (8002074 <waitForCommand+0xc4>)
 8002018:	701c      	strb	r4, [r3, #0]
                    cmdBuf[cmdLen] = 0;
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <waitForCommand+0xc8>)
 800201c:	2200      	movs	r2, #0
 800201e:	551a      	strb	r2, [r3, r4]
                    port_tx_msg("\033[K", 3);
 8002020:	4818      	ldr	r0, [pc, #96]	@ (8002084 <waitForCommand+0xd4>)
 8002022:	2103      	movs	r1, #3
 8002024:	f7ff fa36 	bl	8001494 <port_tx_msg>
    ret = NO_DATA;
 8002028:	2400      	movs	r4, #0
 800202a:	e018      	b.n	800205e <waitForCommand+0xae>
            }
        }
        else
        {
            /* error in command protocol : flush everything */
            port_tx_msg("\r\n", 2);
 800202c:	4816      	ldr	r0, [pc, #88]	@ (8002088 <waitForCommand+0xd8>)
 800202e:	2102      	movs	r1, #2
 8002030:	f7ff fa30 	bl	8001494 <port_tx_msg>
            cmdLen = 0;
 8002034:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <waitForCommand+0xc4>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 800203a:	2400      	movs	r4, #0
 800203c:	e00f      	b.n	800205e <waitForCommand+0xae>
        }
    }
    else
    {/* "fast" command mode : assume every data buffer is "COMMAND_READY" */

        if (len < (sizeof(local_buff) - 1))
 800203e:	293e      	cmp	r1, #62	@ 0x3e
 8002040:	d80f      	bhi.n	8002062 <waitForCommand+0xb2>
        {
            memcpy(local_buff, pBuf, len);
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <waitForCommand+0xcc>)
 8002044:	000a      	movs	r2, r1
 8002046:	0001      	movs	r1, r0
 8002048:	001d      	movs	r5, r3
 800204a:	0018      	movs	r0, r3
 800204c:	f001 fe6e 	bl	8003d2c <memcpy>

            local_buff_length = len;
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <waitForCommand+0xd0>)
 8002052:	801c      	strh	r4, [r3, #0]
            local_buff[len] = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	552b      	strb	r3, [r5, r4]
            cmdLen = 0;
 8002058:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <waitForCommand+0xc4>)
 800205a:	7013      	strb	r3, [r2, #0]

            ret = COMMAND_READY;
 800205c:	2401      	movs	r4, #1
            cmdLen = 0;
        }
    }

    return (ret);
}
 800205e:	0020      	movs	r0, r4
 8002060:	bd70      	pop	{r4, r5, r6, pc}
            port_tx_msg( "Error: \r\n", 2);
 8002062:	480a      	ldr	r0, [pc, #40]	@ (800208c <waitForCommand+0xdc>)
 8002064:	2102      	movs	r1, #2
 8002066:	f7ff fa15 	bl	8001494 <port_tx_msg>
            cmdLen = 0;
 800206a:	4b02      	ldr	r3, [pc, #8]	@ (8002074 <waitForCommand+0xc4>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
    ret = NO_DATA;
 8002070:	2400      	movs	r4, #0
 8002072:	e7f4      	b.n	800205e <waitForCommand+0xae>
 8002074:	20000380 	.word	0x20000380
 8002078:	20000340 	.word	0x20000340
 800207c:	20000384 	.word	0x20000384
 8002080:	20000382 	.word	0x20000382
 8002084:	080050a4 	.word	0x080050a4
 8002088:	08004de0 	.word	0x08004de0
 800208c:	080050a8 	.word	0x080050a8

08002090 <process_uartmsg>:
 *        into UART_COMMAND mode and perform operation
 *        based on uart input.
 * @param[in] void
 * */
void process_uartmsg(void)
{
 8002090:	b500      	push	{lr}
 8002092:	b091      	sub	sp, #68	@ 0x44
    uint8_t rx_buf[COM_RX_BUF_SIZE];
    int uartLen, res;

    memset(rx_buf,0,sizeof(rx_buf));
 8002094:	2240      	movs	r2, #64	@ 0x40
 8002096:	2100      	movs	r1, #0
 8002098:	4668      	mov	r0, sp
 800209a:	f001 fdf9 	bl	8003c90 <memset>
    uartLen = deca_uart_receive( rx_buf, COM_RX_BUF_SIZE );
 800209e:	2140      	movs	r1, #64	@ 0x40
 80020a0:	4668      	mov	r0, sp
 80020a2:	f7ff f9ff 	bl	80014a4 <deca_uart_receive>
    
    if(uartLen > 0)
 80020a6:	2800      	cmp	r0, #0
 80020a8:	dc01      	bgt.n	80020ae <process_uartmsg+0x1e>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
          local_buff[len+1] = 0;
          command_parser((char *)local_buff);            //parse and execute the command
      }
    }
}
 80020aa:	b011      	add	sp, #68	@ 0x44
 80020ac:	bd00      	pop	{pc}
      res = waitForCommand(rx_buf, uartLen);
 80020ae:	b281      	uxth	r1, r0
 80020b0:	4668      	mov	r0, sp
 80020b2:	f7ff ff7d 	bl	8001fb0 <waitForCommand>
      if (res == COMMAND_READY)
 80020b6:	2801      	cmp	r0, #1
 80020b8:	d1f7      	bne.n	80020aa <process_uartmsg+0x1a>
          int len = MIN((local_buff_length-1), (sizeof(local_buff)-1));
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <process_uartmsg+0x44>)
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	3b01      	subs	r3, #1
 80020c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80020c2:	d900      	bls.n	80020c6 <process_uartmsg+0x36>
 80020c4:	233f      	movs	r3, #63	@ 0x3f
          local_buff[len+1] = 0;
 80020c6:	3301      	adds	r3, #1
 80020c8:	4803      	ldr	r0, [pc, #12]	@ (80020d8 <process_uartmsg+0x48>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	54c2      	strb	r2, [r0, r3]
          command_parser((char *)local_buff);            //parse and execute the command
 80020ce:	f7ff fc77 	bl	80019c0 <command_parser>
}
 80020d2:	e7ea      	b.n	80020aa <process_uartmsg+0x1a>
 80020d4:	20000382 	.word	0x20000382
 80020d8:	20000384 	.word	0x20000384

080020dc <LockEeprom>:
/* Static functions */

/* Lock the EEPROM: */
static void LockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <LockEeprom+0x1c>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	07db      	lsls	r3, r3, #31
 80020e2:	d4fb      	bmi.n	80020dc <LockEeprom>
   {
   }

   FLASH->PECR = FLASH->PECR & ~(FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* disable flash interrupts */
 80020e4:	4b04      	ldr	r3, [pc, #16]	@ (80020f8 <LockEeprom+0x1c>)
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4904      	ldr	r1, [pc, #16]	@ (80020fc <LockEeprom+0x20>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
   FLASH->PECR = FLASH->PECR | FLASH_PECR_PELOCK; /* Lock memory with PELOCK */
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	605a      	str	r2, [r3, #4]
}
 80020f6:	4770      	bx	lr
 80020f8:	40022000 	.word	0x40022000
 80020fc:	fffcffff 	.word	0xfffcffff

08002100 <UnlockEeprom>:
#define FLASH_OPTKEY2              ((uint32_t)0x24252627U) /*!< Flash option key2: used with FLASH_OPTKEY1 to
																unlock the write access to the option byte block */

static void UnlockEeprom(void)
{
   while ((FLASH->SR & FLASH_SR_BSY) != 0) /* Wait for FLASH to be free */
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <UnlockEeprom+0x28>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	07db      	lsls	r3, r3, #31
 8002106:	d4fb      	bmi.n	8002100 <UnlockEeprom>
   {
   }

   if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0) /* If PELOCK is locked */
 8002108:	4b07      	ldr	r3, [pc, #28]	@ (8002128 <UnlockEeprom+0x28>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	07db      	lsls	r3, r3, #31
 800210e:	d504      	bpl.n	800211a <UnlockEeprom+0x1a>
   {
      FLASH->PEKEYR = FLASH_PEKEY1; /* Unlock PELOCK */
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <UnlockEeprom+0x28>)
 8002112:	4a06      	ldr	r2, [pc, #24]	@ (800212c <UnlockEeprom+0x2c>)
 8002114:	60da      	str	r2, [r3, #12]
      FLASH->PEKEYR = FLASH_PEKEY2;
 8002116:	4a06      	ldr	r2, [pc, #24]	@ (8002130 <UnlockEeprom+0x30>)
 8002118:	60da      	str	r2, [r3, #12]
   }
   FLASH->PECR = FLASH->PECR | (FLASH_PECR_ERRIE | FLASH_PECR_EOPIE); /* enable flash interrupts */
 800211a:	4a03      	ldr	r2, [pc, #12]	@ (8002128 <UnlockEeprom+0x28>)
 800211c:	6851      	ldr	r1, [r2, #4]
 800211e:	23c0      	movs	r3, #192	@ 0xc0
 8002120:	029b      	lsls	r3, r3, #10
 8002122:	430b      	orrs	r3, r1
 8002124:	6053      	str	r3, [r2, #4]
}
 8002126:	4770      	bx	lr
 8002128:	40022000 	.word	0x40022000
 800212c:	89abcdef 	.word	0x89abcdef
 8002130:	02030405 	.word	0x02030405

08002134 <EepromProgram>:
* Retval None
*/
static void EepromProgram(uint32_t * addr, const uint32_t ee_data)
{
/* NOTE: The EEPROM must be unlocked and the flash interrupts must have been enabled prior to calling this function.*/
   *addr = ee_data; /* write data to EEPROM */
 8002134:	6001      	str	r1, [r0, #0]
   __WFI();
 8002136:	bf30      	wfi
   if (*addr != ee_data)
   {
   }
}
 8002138:	4770      	bx	lr
	...

0800213c <CRC8_Calculate>:

static uint8_t CRC8_Calculate( uint8_t * pdata, uint32_t size)
{
 800213c:	b510      	push	{r4, lr}
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800213e:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <CRC8_Calculate+0x28>)
 8002140:	6893      	ldr	r3, [r2, #8]
 8002142:	2401      	movs	r4, #1
 8002144:	4323      	orrs	r3, r4
 8002146:	6093      	str	r3, [r2, #8]
}
 8002148:	e004      	b.n	8002154 <CRC8_Calculate+0x18>

	LL_CRC_ResetCRCCalculationUnit(CRC);
	while ( size-- > 0)
	{
		LL_CRC_FeedData8(CRC, *pdata++);
 800214a:	7801      	ldrb	r1, [r0, #0]
  * @param  InData 8 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData8(CRC_TypeDef *CRCx, uint8_t InData)
{
  *(uint8_t __IO *)(&CRCx->DR) = (uint8_t) InData;
 800214c:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <CRC8_Calculate+0x28>)
 800214e:	7011      	strb	r1, [r2, #0]
	while ( size-- > 0)
 8002150:	0019      	movs	r1, r3
		LL_CRC_FeedData8(CRC, *pdata++);
 8002152:	3001      	adds	r0, #1
	while ( size-- > 0)
 8002154:	1e4b      	subs	r3, r1, #1
 8002156:	2900      	cmp	r1, #0
 8002158:	d1f7      	bne.n	800214a <CRC8_Calculate+0xe>
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (8 bits).
  */
__STATIC_INLINE uint8_t LL_CRC_ReadData8(const CRC_TypeDef *CRCx)
{
  return (uint8_t)READ_REG(CRCx->DR);
 800215a:	4b02      	ldr	r3, [pc, #8]	@ (8002164 <CRC8_Calculate+0x28>)
 800215c:	6818      	ldr	r0, [r3, #0]
 800215e:	b2c0      	uxtb	r0, r0
	}
	return LL_CRC_ReadData8(CRC);
}
 8002160:	bd10      	pop	{r4, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	40023000 	.word	0x40023000

08002168 <save_bssConfig>:
/* @brief    Writes buffer to the nonvolatile config location &FConfig
 * assumes data fold to page
 *
 */
void save_bssConfig( const param_block_t * pbuf)
{
 8002168:	b510      	push	{r4, lr}
 800216a:	b0c0      	sub	sp, #256	@ 0x100
 800216c:	0004      	movs	r4, r0
	CRCprotected_param_t temp_protected_config;
	memset(&temp_protected_config.free, 0xFF, sizeof(temp_protected_config.free));
 800216e:	229c      	movs	r2, #156	@ 0x9c
 8002170:	21ff      	movs	r1, #255	@ 0xff
 8002172:	a819      	add	r0, sp, #100	@ 0x64
 8002174:	f001 fd8c 	bl	8003c90 <memset>
	memcpy(&temp_protected_config.params, pbuf, sizeof(temp_protected_config.params));
 8002178:	2263      	movs	r2, #99	@ 0x63
 800217a:	0021      	movs	r1, r4
 800217c:	4668      	mov	r0, sp
 800217e:	f001 fdd5 	bl	8003d2c <memcpy>

	temp_protected_config.CRC8 = CRC8_Calculate( (uint8_t *) &temp_protected_config.params, sizeof(temp_protected_config.params));
 8002182:	2163      	movs	r1, #99	@ 0x63
 8002184:	4668      	mov	r0, sp
 8002186:	f7ff ffd9 	bl	800213c <CRC8_Calculate>
 800218a:	2363      	movs	r3, #99	@ 0x63
 800218c:	466a      	mov	r2, sp
 800218e:	54d0      	strb	r0, [r2, r3]
 8002190:	b672      	cpsid	i
		// extra dword to fit the rest of
		num_dwords++;
	}

	__disable_irq();
    UnlockEeprom();
 8002192:	f7ff ffb5 	bl	8002100 <UnlockEeprom>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 8002196:	2400      	movs	r4, #0
 8002198:	e007      	b.n	80021aa <save_bssConfig+0x42>
    {
    	EepromProgram(FConfig_dword_pointer + i, current_dword_pointer[i] );
 800219a:	00a0      	lsls	r0, r4, #2
 800219c:	466b      	mov	r3, sp
 800219e:	5819      	ldr	r1, [r3, r0]
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <save_bssConfig+0x50>)
 80021a2:	18c0      	adds	r0, r0, r3
 80021a4:	f7ff ffc6 	bl	8002134 <EepromProgram>
    for ( uint32_t i = 0; i<num_dwords; i++ )
 80021a8:	3401      	adds	r4, #1
 80021aa:	2c3f      	cmp	r4, #63	@ 0x3f
 80021ac:	d9f5      	bls.n	800219a <save_bssConfig+0x32>
    }
    LockEeprom();
 80021ae:	f7ff ff95 	bl	80020dc <LockEeprom>
  __ASM volatile ("cpsie i" : : : "memory");
 80021b2:	b662      	cpsie	i
    __enable_irq();
}
 80021b4:	b040      	add	sp, #256	@ 0x100
 80021b6:	bd10      	pop	{r4, pc}
 80021b8:	20000100 	.word	0x20000100

080021bc <load_bssConfig>:

void load_bssConfig(void)
{
 80021bc:	b510      	push	{r4, lr}
	uint8_t tempCRC = CRC8_Calculate( (uint8_t *) &FConfig.params, sizeof(FConfig.params));
 80021be:	4c0b      	ldr	r4, [pc, #44]	@ (80021ec <load_bssConfig+0x30>)
 80021c0:	2163      	movs	r1, #99	@ 0x63
 80021c2:	0020      	movs	r0, r4
 80021c4:	f7ff ffba 	bl	800213c <CRC8_Calculate>

	if ( tempCRC != FConfig.CRC8 ) {
 80021c8:	2363      	movs	r3, #99	@ 0x63
 80021ca:	5ce3      	ldrb	r3, [r4, r3]
 80021cc:	4283      	cmp	r3, r0
 80021ce:	d108      	bne.n	80021e2 <load_bssConfig+0x26>
		save_bssConfig( &defaultFConfig);
	}

	memcpy(&tmpConfig, &FConfig.params, sizeof(tmpConfig));
 80021d0:	4c07      	ldr	r4, [pc, #28]	@ (80021f0 <load_bssConfig+0x34>)
 80021d2:	4906      	ldr	r1, [pc, #24]	@ (80021ec <load_bssConfig+0x30>)
 80021d4:	2263      	movs	r2, #99	@ 0x63
 80021d6:	0020      	movs	r0, r4
 80021d8:	f001 fda8 	bl	8003d2c <memcpy>
    app.pConfig = &tmpConfig;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <load_bssConfig+0x38>)
 80021de:	601c      	str	r4, [r3, #0]
}
 80021e0:	bd10      	pop	{r4, pc}
		save_bssConfig( &defaultFConfig);
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <load_bssConfig+0x3c>)
 80021e4:	f7ff ffc0 	bl	8002168 <save_bssConfig>
 80021e8:	e7f2      	b.n	80021d0 <load_bssConfig+0x14>
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	20000100 	.word	0x20000100
 80021f0:	20000400 	.word	0x20000400
 80021f4:	2000021c 	.word	0x2000021c
 80021f8:	08005600 	.word	0x08005600

080021fc <get_pbssConfig>:

param_block_t *get_pbssConfig(void)
{
  return app.pConfig;
 80021fc:	4b01      	ldr	r3, [pc, #4]	@ (8002204 <get_pbssConfig+0x8>)
 80021fe:	6818      	ldr	r0, [r3, #0]
}
 8002200:	4770      	bx	lr
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	2000021c 	.word	0x2000021c

08002208 <restore_nvm_fconfig>:
/* @fn       restore_nvm_fconfig
 * @brief    init main program run-time configuration parameters from NVM
 *           assumes that memory model .text and .bss the same
 * */
void restore_nvm_fconfig(void)
{    
 8002208:	b510      	push	{r4, lr}
	save_bssConfig( &defaultFConfig);
 800220a:	4803      	ldr	r0, [pc, #12]	@ (8002218 <restore_nvm_fconfig+0x10>)
 800220c:	f7ff ffac 	bl	8002168 <save_bssConfig>
    load_bssConfig();
 8002210:	f7ff ffd4 	bl	80021bc <load_bssConfig>
}
 8002214:	bd10      	pop	{r4, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	08005600 	.word	0x08005600

0800221c <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 800221c:	b530      	push	{r4, r5, lr}
 800221e:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002220:	2900      	cmp	r1, #0
 8002222:	d10a      	bne.n	800223a <dwt_writetodevice+0x1e>
    {
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8002224:	3980      	subs	r1, #128	@ 0x80
 8002226:	4301      	orrs	r1, r0
 8002228:	a801      	add	r0, sp, #4
 800222a:	7001      	strb	r1, [r0, #0]
 800222c:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 800222e:	b280      	uxth	r0, r0
 8002230:	a901      	add	r1, sp, #4
 8002232:	f7fe fff9 	bl	8001228 <writetospi>
} // end dwt_writetodevice()
 8002236:	b003      	add	sp, #12
 8002238:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800223a:	2440      	movs	r4, #64	@ 0x40
 800223c:	4264      	negs	r4, r4
 800223e:	4320      	orrs	r0, r4
 8002240:	ac01      	add	r4, sp, #4
 8002242:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8002244:	297f      	cmp	r1, #127	@ 0x7f
 8002246:	d802      	bhi.n	800224e <dwt_writetodevice+0x32>
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8002248:	7061      	strb	r1, [r4, #1]
 800224a:	2002      	movs	r0, #2
 800224c:	e7ef      	b.n	800222e <dwt_writetodevice+0x12>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 800224e:	b2cd      	uxtb	r5, r1
 8002250:	ac01      	add	r4, sp, #4
 8002252:	2080      	movs	r0, #128	@ 0x80
 8002254:	4240      	negs	r0, r0
 8002256:	4328      	orrs	r0, r5
 8002258:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 800225a:	09c9      	lsrs	r1, r1, #7
 800225c:	70a1      	strb	r1, [r4, #2]
 800225e:	2003      	movs	r0, #3
 8002260:	e7e5      	b.n	800222e <dwt_writetodevice+0x12>

08002262 <dwt_writetxdata>:
{
 8002262:	b510      	push	{r4, lr}
 8002264:	000b      	movs	r3, r1
 8002266:	0011      	movs	r1, r2
    if ((txBufferOffset + txFrameLength) <= 1024)
 8002268:	1814      	adds	r4, r2, r0
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	00d2      	lsls	r2, r2, #3
 800226e:	4294      	cmp	r4, r2
 8002270:	dc05      	bgt.n	800227e <dwt_writetxdata+0x1c>
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8002272:	1e82      	subs	r2, r0, #2
 8002274:	2009      	movs	r0, #9
 8002276:	f7ff ffd1 	bl	800221c <dwt_writetodevice>
        return DWT_SUCCESS;
 800227a:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 800227c:	bd10      	pop	{r4, pc}
        return DWT_ERROR;
 800227e:	2001      	movs	r0, #1
 8002280:	4240      	negs	r0, r0
 8002282:	e7fb      	b.n	800227c <dwt_writetxdata+0x1a>

08002284 <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8002284:	b530      	push	{r4, r5, lr}
 8002286:	b083      	sub	sp, #12
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8002288:	2900      	cmp	r1, #0
 800228a:	d108      	bne.n	800229e <dwt_readfromdevice+0x1a>
    {
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 800228c:	a901      	add	r1, sp, #4
 800228e:	7008      	strb	r0, [r1, #0]
 8002290:	2001      	movs	r0, #1
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8002292:	b280      	uxth	r0, r0
 8002294:	a901      	add	r1, sp, #4
 8002296:	f7ff f813 	bl	80012c0 <readfromspi>
} // end dwt_readfromdevice()
 800229a:	b003      	add	sp, #12
 800229c:	bd30      	pop	{r4, r5, pc}
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 800229e:	2440      	movs	r4, #64	@ 0x40
 80022a0:	4320      	orrs	r0, r4
 80022a2:	ac01      	add	r4, sp, #4
 80022a4:	7020      	strb	r0, [r4, #0]
        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 80022a6:	297f      	cmp	r1, #127	@ 0x7f
 80022a8:	d802      	bhi.n	80022b0 <dwt_readfromdevice+0x2c>
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 80022aa:	7061      	strb	r1, [r4, #1]
 80022ac:	2002      	movs	r0, #2
 80022ae:	e7f0      	b.n	8002292 <dwt_readfromdevice+0xe>
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 80022b0:	b2cd      	uxtb	r5, r1
 80022b2:	ac01      	add	r4, sp, #4
 80022b4:	2080      	movs	r0, #128	@ 0x80
 80022b6:	4240      	negs	r0, r0
 80022b8:	4328      	orrs	r0, r5
 80022ba:	7060      	strb	r0, [r4, #1]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 80022bc:	09c9      	lsrs	r1, r1, #7
 80022be:	70a1      	strb	r1, [r4, #2]
 80022c0:	2003      	movs	r0, #3
 80022c2:	e7e6      	b.n	8002292 <dwt_readfromdevice+0xe>

080022c4 <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 80022c4:	b500      	push	{lr}
 80022c6:	b083      	sub	sp, #12
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 80022c8:	b289      	uxth	r1, r1
 80022ca:	b280      	uxth	r0, r0
 80022cc:	ab01      	add	r3, sp, #4
 80022ce:	2204      	movs	r2, #4
 80022d0:	f7ff ffd8 	bl	8002284 <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 80022d4:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 80022d6:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 80022d8:	e004      	b.n	80022e4 <dwt_read32bitoffsetreg+0x20>
    {
        regval = (regval << 8) + buffer[j] ;
 80022da:	0200      	lsls	r0, r0, #8
 80022dc:	aa01      	add	r2, sp, #4
 80022de:	5cd2      	ldrb	r2, [r2, r3]
 80022e0:	1880      	adds	r0, r0, r2
    for (j = 3 ; j >= 0 ; j --)
 80022e2:	3b01      	subs	r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	daf8      	bge.n	80022da <dwt_read32bitoffsetreg+0x16>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 80022e8:	b003      	add	sp, #12
 80022ea:	bd00      	pop	{pc}

080022ec <dwt_readdevid>:
{
 80022ec:	b510      	push	{r4, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 80022ee:	2100      	movs	r1, #0
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff ffe7 	bl	80022c4 <dwt_read32bitoffsetreg>
}
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 80022f8:	b500      	push	{lr}
 80022fa:	b083      	sub	sp, #12
    uint16  regval = 0 ;
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 80022fc:	b289      	uxth	r1, r1
 80022fe:	b280      	uxth	r0, r0
 8002300:	ab01      	add	r3, sp, #4
 8002302:	2202      	movs	r2, #2
 8002304:	f7ff ffbe 	bl	8002284 <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8002308:	466b      	mov	r3, sp
 800230a:	7958      	ldrb	r0, [r3, #5]
 800230c:	0200      	lsls	r0, r0, #8
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	18c0      	adds	r0, r0, r3
 8002312:	b280      	uxth	r0, r0
    return regval ;

} // end dwt_read16bitoffsetreg()
 8002314:	b003      	add	sp, #12
 8002316:	bd00      	pop	{pc}

08002318 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 8002318:	b510      	push	{r4, lr}
 800231a:	b082      	sub	sp, #8
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 800231c:	466b      	mov	r3, sp
 800231e:	1ddc      	adds	r4, r3, #7
 8002320:	b289      	uxth	r1, r1
 8002322:	b280      	uxth	r0, r0
 8002324:	0023      	movs	r3, r4
 8002326:	2201      	movs	r2, #1
 8002328:	f7ff ffac 	bl	8002284 <dwt_readfromdevice>

    return regval ;
 800232c:	7820      	ldrb	r0, [r4, #0]
}
 800232e:	b002      	add	sp, #8
 8002330:	bd10      	pop	{r4, pc}

08002332 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 8002332:	b500      	push	{lr}
 8002334:	b083      	sub	sp, #12
 8002336:	466b      	mov	r3, sp
 8002338:	3307      	adds	r3, #7
 800233a:	701a      	strb	r2, [r3, #0]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 800233c:	b289      	uxth	r1, r1
 800233e:	b280      	uxth	r0, r0
 8002340:	2201      	movs	r2, #1
 8002342:	f7ff ff6b 	bl	800221c <dwt_writetodevice>
}
 8002346:	b003      	add	sp, #12
 8002348:	bd00      	pop	{pc}

0800234a <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800234a:	b500      	push	{lr}
 800234c:	b083      	sub	sp, #12
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 800234e:	466b      	mov	r3, sp
 8002350:	711a      	strb	r2, [r3, #4]
    buffer[1] = regval >> 8 ;
 8002352:	0a12      	lsrs	r2, r2, #8
 8002354:	715a      	strb	r2, [r3, #5]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002356:	b289      	uxth	r1, r1
 8002358:	b280      	uxth	r0, r0
 800235a:	ab01      	add	r3, sp, #4
 800235c:	2202      	movs	r2, #2
 800235e:	f7ff ff5d 	bl	800221c <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002362:	b003      	add	sp, #12
 8002364:	bd00      	pop	{pc}

08002366 <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 8002366:	b510      	push	{r4, lr}
 8002368:	b082      	sub	sp, #8
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 800236a:	2300      	movs	r3, #0
 800236c:	e003      	b.n	8002376 <dwt_write32bitoffsetreg+0x10>
    {
        buffer[j] = regval & 0xff ;
 800236e:	ac01      	add	r4, sp, #4
 8002370:	54e2      	strb	r2, [r4, r3]
        regval >>= 8 ;
 8002372:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 8002374:	3301      	adds	r3, #1
 8002376:	2b03      	cmp	r3, #3
 8002378:	ddf9      	ble.n	800236e <dwt_write32bitoffsetreg+0x8>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 800237a:	b289      	uxth	r1, r1
 800237c:	b280      	uxth	r0, r0
 800237e:	ab01      	add	r3, sp, #4
 8002380:	2204      	movs	r2, #4
 8002382:	f7ff ff4b 	bl	800221c <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002386:	b002      	add	sp, #8
 8002388:	bd10      	pop	{r4, pc}

0800238a <dwt_configuretxrf>:
{
 800238a:	b510      	push	{r4, lr}
 800238c:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(TX_CAL_ID, TC_PGDELAY_OFFSET, config->PGdly);
 800238e:	7802      	ldrb	r2, [r0, #0]
 8002390:	210b      	movs	r1, #11
 8002392:	202a      	movs	r0, #42	@ 0x2a
 8002394:	f7ff ffcd 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8002398:	6862      	ldr	r2, [r4, #4]
 800239a:	2100      	movs	r1, #0
 800239c:	201e      	movs	r0, #30
 800239e:	f7ff ffe2 	bl	8002366 <dwt_write32bitoffsetreg>
}
 80023a2:	bd10      	pop	{r4, pc}

080023a4 <dwt_writetxfctrl>:
{
 80023a4:	b510      	push	{r4, lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <dwt_writetxfctrl+0x1c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4318      	orrs	r0, r3
 80023ae:	0589      	lsls	r1, r1, #22
 80023b0:	4308      	orrs	r0, r1
 80023b2:	03d2      	lsls	r2, r2, #15
 80023b4:	4302      	orrs	r2, r0
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 80023b6:	2100      	movs	r1, #0
 80023b8:	2008      	movs	r0, #8
 80023ba:	f7ff ffd4 	bl	8002366 <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 80023be:	bd10      	pop	{r4, pc}
 80023c0:	20000010 	.word	0x20000010

080023c4 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 80023c4:	b510      	push	{r4, lr}
 80023c6:	0002      	movs	r2, r0
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 80023c8:	2104      	movs	r1, #4
 80023ca:	202d      	movs	r0, #45	@ 0x2d
 80023cc:	f7ff ffbd 	bl	800234a <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80023d0:	2203      	movs	r2, #3
 80023d2:	2106      	movs	r1, #6
 80023d4:	202d      	movs	r0, #45	@ 0x2d
 80023d6:	f7ff ffac 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80023da:	2200      	movs	r2, #0
 80023dc:	2106      	movs	r1, #6
 80023de:	202d      	movs	r0, #45	@ 0x2d
 80023e0:	f7ff ffa7 	bl	8002332 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80023e4:	210a      	movs	r1, #10
 80023e6:	202d      	movs	r0, #45	@ 0x2d
 80023e8:	f7ff ff6c 	bl	80022c4 <dwt_read32bitoffsetreg>

    // Return the 32bit of read data
    return ret_data;
}
 80023ec:	bd10      	pop	{r4, pc}

080023ee <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80023ee:	b510      	push	{r4, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80023f0:	2200      	movs	r2, #0
 80023f2:	2102      	movs	r1, #2
 80023f4:	202c      	movs	r0, #44	@ 0x2c
 80023f6:	f7ff ff9c 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80023fa:	2202      	movs	r2, #2
 80023fc:	2102      	movs	r1, #2
 80023fe:	202c      	movs	r0, #44	@ 0x2c
 8002400:	f7ff ff97 	bl	8002332 <dwt_write8bitoffsetreg>
}
 8002404:	bd10      	pop	{r4, pc}
	...

08002408 <dwt_configuresleep>:
 * output parameters
 *
 * no return value
 */
void dwt_configuresleep(uint16 mode, uint8 wake)
{
 8002408:	b510      	push	{r4, lr}
 800240a:	000c      	movs	r4, r1
    // Add predefined sleep settings before writing the mode
    mode |= pdw1000local->sleep_mode;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <dwt_configuresleep+0x20>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	8ada      	ldrh	r2, [r3, #22]
 8002412:	4302      	orrs	r2, r0
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, mode);
 8002414:	2100      	movs	r1, #0
 8002416:	202c      	movs	r0, #44	@ 0x2c
 8002418:	f7ff ff97 	bl	800234a <dwt_write16bitoffsetreg>

    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, wake);
 800241c:	0022      	movs	r2, r4
 800241e:	2106      	movs	r1, #6
 8002420:	202c      	movs	r0, #44	@ 0x2c
 8002422:	f7ff ff86 	bl	8002332 <dwt_write8bitoffsetreg>
}
 8002426:	bd10      	pop	{r4, pc}
 8002428:	20000010 	.word	0x20000010

0800242c <dwt_entersleepaftertx>:
 * output parameters
 *
 * no return value
 */
void dwt_entersleepaftertx(int enable)
{
 800242c:	b510      	push	{r4, lr}
 800242e:	0004      	movs	r4, r0
    uint32 reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET);
 8002430:	2104      	movs	r1, #4
 8002432:	2036      	movs	r0, #54	@ 0x36
 8002434:	f7ff ff46 	bl	80022c4 <dwt_read32bitoffsetreg>
 8002438:	0002      	movs	r2, r0
    // Set the auto TX -> sleep bit
    if(enable)
 800243a:	2c00      	cmp	r4, #0
 800243c:	d007      	beq.n	800244e <dwt_entersleepaftertx+0x22>
    {
        reg |= PMSC_CTRL1_ATXSLP;
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	431a      	orrs	r2, r3
    }
    else
    {
        reg &= ~(PMSC_CTRL1_ATXSLP);
    }
    dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, reg);
 8002444:	2104      	movs	r1, #4
 8002446:	2036      	movs	r0, #54	@ 0x36
 8002448:	f7ff ff8d 	bl	8002366 <dwt_write32bitoffsetreg>
}
 800244c:	bd10      	pop	{r4, pc}
        reg &= ~(PMSC_CTRL1_ATXSLP);
 800244e:	4b01      	ldr	r3, [pc, #4]	@ (8002454 <dwt_entersleepaftertx+0x28>)
 8002450:	401a      	ands	r2, r3
 8002452:	e7f7      	b.n	8002444 <dwt_entersleepaftertx+0x18>
 8002454:	fffff7ff 	.word	0xfffff7ff

08002458 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 8002458:	b510      	push	{r4, lr}
 800245a:	0004      	movs	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 800245c:	226d      	movs	r2, #109	@ 0x6d
 800245e:	4909      	ldr	r1, [pc, #36]	@ (8002484 <_dwt_configlde+0x2c>)
 8002460:	202e      	movs	r0, #46	@ 0x2e
 8002462:	f7ff ff66 	bl	8002332 <dwt_write8bitoffsetreg>

    if(prfIndex)
 8002466:	2c00      	cmp	r4, #0
 8002468:	d005      	beq.n	8002476 <_dwt_configlde+0x1e>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 800246a:	4a07      	ldr	r2, [pc, #28]	@ (8002488 <_dwt_configlde+0x30>)
 800246c:	4907      	ldr	r1, [pc, #28]	@ (800248c <_dwt_configlde+0x34>)
 800246e:	202e      	movs	r0, #46	@ 0x2e
 8002470:	f7ff ff6b 	bl	800234a <dwt_write16bitoffsetreg>
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
    }
}
 8002474:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 8002476:	4a06      	ldr	r2, [pc, #24]	@ (8002490 <_dwt_configlde+0x38>)
 8002478:	4904      	ldr	r1, [pc, #16]	@ (800248c <_dwt_configlde+0x34>)
 800247a:	202e      	movs	r0, #46	@ 0x2e
 800247c:	f7ff ff65 	bl	800234a <dwt_write16bitoffsetreg>
}
 8002480:	e7f8      	b.n	8002474 <_dwt_configlde+0x1c>
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	00000806 	.word	0x00000806
 8002488:	00000607 	.word	0x00000607
 800248c:	00001806 	.word	0x00001806
 8002490:	00001607 	.word	0x00001607

08002494 <dwt_configure>:
{
 8002494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002496:	46ce      	mov	lr, r9
 8002498:	4647      	mov	r7, r8
 800249a:	b580      	push	{r7, lr}
 800249c:	0004      	movs	r4, r0
    uint8 chan = config->chan ;
 800249e:	7806      	ldrb	r6, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 80024a0:	7942      	ldrb	r2, [r0, #5]
 80024a2:	4b7f      	ldr	r3, [pc, #508]	@ (80026a0 <dwt_configure+0x20c>)
 80024a4:	0052      	lsls	r2, r2, #1
 80024a6:	5ad7      	ldrh	r7, [r2, r3]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 80024a8:	7845      	ldrb	r5, [r0, #1]
 80024aa:	3d01      	subs	r5, #1
 80024ac:	b2ed      	uxtb	r5, r5
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80024ae:	2e04      	cmp	r6, #4
 80024b0:	d100      	bne.n	80024b4 <dwt_configure+0x20>
 80024b2:	e0d0      	b.n	8002656 <dwt_configure+0x1c2>
 80024b4:	2e07      	cmp	r6, #7
 80024b6:	d100      	bne.n	80024ba <dwt_configure+0x26>
 80024b8:	e0ca      	b.n	8002650 <dwt_configure+0x1bc>
 80024ba:	2300      	movs	r3, #0
 80024bc:	4698      	mov	r8, r3
    if(DWT_BR_110K == config->dataRate)
 80024be:	79e3      	ldrb	r3, [r4, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d000      	beq.n	80024c6 <dwt_configure+0x32>
 80024c4:	e0ca      	b.n	800265c <dwt_configure+0x1c8>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 80024c6:	4b77      	ldr	r3, [pc, #476]	@ (80026a4 <dwt_configure+0x210>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	6911      	ldr	r1, [r2, #16]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	03db      	lsls	r3, r3, #15
 80024d0:	430b      	orrs	r3, r1
 80024d2:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 80024d4:	08ff      	lsrs	r7, r7, #3
    pdw1000local->longFrames = config->phrMode ;
 80024d6:	4b73      	ldr	r3, [pc, #460]	@ (80026a4 <dwt_configure+0x210>)
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	7a23      	ldrb	r3, [r4, #8]
 80024dc:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 80024de:	690a      	ldr	r2, [r1, #16]
 80024e0:	4b71      	ldr	r3, [pc, #452]	@ (80026a8 <dwt_configure+0x214>)
 80024e2:	401a      	ands	r2, r3
 80024e4:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 80024e6:	7a23      	ldrb	r3, [r4, #8]
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	20c0      	movs	r0, #192	@ 0xc0
 80024ec:	0280      	lsls	r0, r0, #10
 80024ee:	4003      	ands	r3, r0
 80024f0:	431a      	orrs	r2, r3
 80024f2:	610a      	str	r2, [r1, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 80024f4:	2100      	movs	r1, #0
 80024f6:	2004      	movs	r0, #4
 80024f8:	f7ff ff35 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 80024fc:	003a      	movs	r2, r7
 80024fe:	496b      	ldr	r1, [pc, #428]	@ (80026ac <dwt_configure+0x218>)
 8002500:	202e      	movs	r0, #46	@ 0x2e
 8002502:	f7ff ff22 	bl	800234a <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 8002506:	0028      	movs	r0, r5
 8002508:	f7ff ffa6 	bl	8002458 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800250c:	4b68      	ldr	r3, [pc, #416]	@ (80026b0 <dwt_configure+0x21c>)
 800250e:	5d9b      	ldrb	r3, [r3, r6]
 8002510:	4699      	mov	r9, r3
 8002512:	4b68      	ldr	r3, [pc, #416]	@ (80026b4 <dwt_configure+0x220>)
 8002514:	464a      	mov	r2, r9
 8002516:	0097      	lsls	r7, r2, #2
 8002518:	58fa      	ldr	r2, [r7, r3]
 800251a:	2107      	movs	r1, #7
 800251c:	202b      	movs	r0, #43	@ 0x2b
 800251e:	f7ff ff22 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 8002522:	4b65      	ldr	r3, [pc, #404]	@ (80026b8 <dwt_configure+0x224>)
 8002524:	464a      	mov	r2, r9
 8002526:	5c9a      	ldrb	r2, [r3, r2]
 8002528:	210b      	movs	r1, #11
 800252a:	202b      	movs	r0, #43	@ 0x2b
 800252c:	f7ff ff01 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 8002530:	4b62      	ldr	r3, [pc, #392]	@ (80026bc <dwt_configure+0x228>)
 8002532:	4642      	mov	r2, r8
 8002534:	5c9a      	ldrb	r2, [r3, r2]
 8002536:	210b      	movs	r1, #11
 8002538:	2028      	movs	r0, #40	@ 0x28
 800253a:	f7ff fefa 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 800253e:	4b60      	ldr	r3, [pc, #384]	@ (80026c0 <dwt_configure+0x22c>)
 8002540:	58fa      	ldr	r2, [r7, r3]
 8002542:	210c      	movs	r1, #12
 8002544:	2028      	movs	r0, #40	@ 0x28
 8002546:	f7ff ff0e 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 800254a:	79e3      	ldrb	r3, [r4, #7]
 800254c:	79a1      	ldrb	r1, [r4, #6]
 800254e:	4a5d      	ldr	r2, [pc, #372]	@ (80026c4 <dwt_configure+0x230>)
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	185b      	adds	r3, r3, r1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	5a9a      	ldrh	r2, [r3, r2]
 8002558:	2102      	movs	r1, #2
 800255a:	2027      	movs	r0, #39	@ 0x27
 800255c:	f7ff fef5 	bl	800234a <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 8002560:	4b59      	ldr	r3, [pc, #356]	@ (80026c8 <dwt_configure+0x234>)
 8002562:	006a      	lsls	r2, r5, #1
 8002564:	5ad2      	ldrh	r2, [r2, r3]
 8002566:	2104      	movs	r1, #4
 8002568:	2027      	movs	r0, #39	@ 0x27
 800256a:	f7ff feee 	bl	800234a <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 800256e:	79e3      	ldrb	r3, [r4, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d100      	bne.n	8002576 <dwt_configure+0xe2>
 8002574:	e079      	b.n	800266a <dwt_configure+0x1d6>
        if(config->txPreambLength == DWT_PLEN_64)
 8002576:	78a3      	ldrb	r3, [r4, #2]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d100      	bne.n	800257e <dwt_configure+0xea>
 800257c:	e07b      	b.n	8002676 <dwt_configure+0x1e2>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 800257e:	2220      	movs	r2, #32
 8002580:	2106      	movs	r1, #6
 8002582:	2027      	movs	r0, #39	@ 0x27
 8002584:	f7ff fee1 	bl	800234a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 8002588:	2228      	movs	r2, #40	@ 0x28
 800258a:	2126      	movs	r1, #38	@ 0x26
 800258c:	2027      	movs	r0, #39	@ 0x27
 800258e:	f7ff fed0 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 8002592:	78e1      	ldrb	r1, [r4, #3]
 8002594:	4a4d      	ldr	r2, [pc, #308]	@ (80026cc <dwt_configure+0x238>)
 8002596:	00ab      	lsls	r3, r5, #2
 8002598:	185b      	adds	r3, r3, r1
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	589a      	ldr	r2, [r3, r2]
 800259e:	2108      	movs	r1, #8
 80025a0:	2027      	movs	r0, #39	@ 0x27
 80025a2:	f7ff fee0 	bl	8002366 <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 80025a6:	8963      	ldrh	r3, [r4, #10]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <dwt_configure+0x11c>
        config->sfdTO = DWT_SFDTOC_DEF;
 80025ac:	4b48      	ldr	r3, [pc, #288]	@ (80026d0 <dwt_configure+0x23c>)
 80025ae:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 80025b0:	8962      	ldrh	r2, [r4, #10]
 80025b2:	2120      	movs	r1, #32
 80025b4:	2027      	movs	r0, #39	@ 0x27
 80025b6:	f7ff fec8 	bl	800234a <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 80025ba:	4f46      	ldr	r7, [pc, #280]	@ (80026d4 <dwt_configure+0x240>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	210c      	movs	r1, #12
 80025c0:	2023      	movs	r0, #35	@ 0x23
 80025c2:	f7ff fed0 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 80025c6:	006d      	lsls	r5, r5, #1
 80025c8:	197f      	adds	r7, r7, r5
 80025ca:	88ba      	ldrh	r2, [r7, #4]
 80025cc:	2104      	movs	r1, #4
 80025ce:	2023      	movs	r0, #35	@ 0x23
 80025d0:	f7ff febb 	bl	800234a <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 80025d4:	79a3      	ldrb	r3, [r4, #6]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d158      	bne.n	800268c <dwt_configure+0x1f8>
    uint8 useDWnsSFD = 0;
 80025da:	0019      	movs	r1, r3
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80025dc:	220f      	movs	r2, #15
 80025de:	4032      	ands	r2, r6
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80025e0:	0136      	lsls	r6, r6, #4
 80025e2:	20ff      	movs	r0, #255	@ 0xff
 80025e4:	4030      	ands	r0, r6
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 80025e6:	4302      	orrs	r2, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80025e8:	7860      	ldrb	r0, [r4, #1]
 80025ea:	0480      	lsls	r0, r0, #18
 80025ec:	25c0      	movs	r5, #192	@ 0xc0
 80025ee:	032d      	lsls	r5, r5, #12
 80025f0:	4028      	ands	r0, r5
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 80025f2:	4302      	orrs	r2, r0
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 80025f4:	051b      	lsls	r3, r3, #20
 80025f6:	20c0      	movs	r0, #192	@ 0xc0
 80025f8:	0380      	lsls	r0, r0, #14
 80025fa:	4003      	ands	r3, r0
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 80025fc:	431a      	orrs	r2, r3
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 80025fe:	044b      	lsls	r3, r1, #17
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	0289      	lsls	r1, r1, #10
 8002604:	400b      	ands	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8002606:	431a      	orrs	r2, r3
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 8002608:	7923      	ldrb	r3, [r4, #4]
 800260a:	059b      	lsls	r3, r3, #22
 800260c:	21f8      	movs	r1, #248	@ 0xf8
 800260e:	04c9      	lsls	r1, r1, #19
 8002610:	400b      	ands	r3, r1
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8002612:	431a      	orrs	r2, r3
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8002614:	7963      	ldrb	r3, [r4, #5]
 8002616:	06db      	lsls	r3, r3, #27
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8002618:	431a      	orrs	r2, r3
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 800261a:	2100      	movs	r1, #0
 800261c:	201f      	movs	r0, #31
 800261e:	f7ff fea2 	bl	8002366 <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8002622:	78a2      	ldrb	r2, [r4, #2]
 8002624:	7863      	ldrb	r3, [r4, #1]
 8002626:	431a      	orrs	r2, r3
 8002628:	0412      	lsls	r2, r2, #16
 800262a:	79e3      	ldrb	r3, [r4, #7]
 800262c:	035b      	lsls	r3, r3, #13
 800262e:	491d      	ldr	r1, [pc, #116]	@ (80026a4 <dwt_configure+0x210>)
 8002630:	6809      	ldr	r1, [r1, #0]
 8002632:	431a      	orrs	r2, r3
 8002634:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8002636:	2100      	movs	r1, #0
 8002638:	2008      	movs	r0, #8
 800263a:	f7ff fe94 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800263e:	2242      	movs	r2, #66	@ 0x42
 8002640:	2100      	movs	r1, #0
 8002642:	200d      	movs	r0, #13
 8002644:	f7ff fe75 	bl	8002332 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 8002648:	bcc0      	pop	{r6, r7}
 800264a:	46b9      	mov	r9, r7
 800264c:	46b0      	mov	r8, r6
 800264e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 8002650:	2301      	movs	r3, #1
 8002652:	4698      	mov	r8, r3
 8002654:	e733      	b.n	80024be <dwt_configure+0x2a>
 8002656:	2301      	movs	r3, #1
 8002658:	4698      	mov	r8, r3
 800265a:	e730      	b.n	80024be <dwt_configure+0x2a>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 800265c:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <dwt_configure+0x210>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	6913      	ldr	r3, [r2, #16]
 8002662:	491d      	ldr	r1, [pc, #116]	@ (80026d8 <dwt_configure+0x244>)
 8002664:	400b      	ands	r3, r1
 8002666:	6113      	str	r3, [r2, #16]
 8002668:	e735      	b.n	80024d6 <dwt_configure+0x42>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 800266a:	2264      	movs	r2, #100	@ 0x64
 800266c:	2106      	movs	r1, #6
 800266e:	2027      	movs	r0, #39	@ 0x27
 8002670:	f7ff fe6b 	bl	800234a <dwt_write16bitoffsetreg>
 8002674:	e78d      	b.n	8002592 <dwt_configure+0xfe>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 8002676:	2210      	movs	r2, #16
 8002678:	2106      	movs	r1, #6
 800267a:	2027      	movs	r0, #39	@ 0x27
 800267c:	f7ff fe65 	bl	800234a <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 8002680:	2210      	movs	r2, #16
 8002682:	2126      	movs	r1, #38	@ 0x26
 8002684:	2027      	movs	r0, #39	@ 0x27
 8002686:	f7ff fe54 	bl	8002332 <dwt_write8bitoffsetreg>
 800268a:	e782      	b.n	8002592 <dwt_configure+0xfe>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 800268c:	79e3      	ldrb	r3, [r4, #7]
 800268e:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <dwt_configure+0x248>)
 8002690:	5cd2      	ldrb	r2, [r2, r3]
 8002692:	2100      	movs	r1, #0
 8002694:	2021      	movs	r0, #33	@ 0x21
 8002696:	f7ff fe4c 	bl	8002332 <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 800269a:	2101      	movs	r1, #1
        nsSfd_result = 3 ;
 800269c:	2303      	movs	r3, #3
 800269e:	e79d      	b.n	80025dc <dwt_configure+0x148>
 80026a0:	080051f4 	.word	0x080051f4
 80026a4:	20000010 	.word	0x20000010
 80026a8:	fffcffff 	.word	0xfffcffff
 80026ac:	00002804 	.word	0x00002804
 80026b0:	080052a0 	.word	0x080052a0
 80026b4:	08005270 	.word	0x08005270
 80026b8:	08005268 	.word	0x08005268
 80026bc:	08005264 	.word	0x08005264
 80026c0:	08005288 	.word	0x08005288
 80026c4:	0800524c 	.word	0x0800524c
 80026c8:	08005248 	.word	0x08005248
 80026cc:	08005228 	.word	0x08005228
 80026d0:	00001041 	.word	0x00001041
 80026d4:	0800525c 	.word	0x0800525c
 80026d8:	ffbfffff 	.word	0xffbfffff
 80026dc:	08005258 	.word	0x08005258

080026e0 <dwt_setsmarttxpower>:
 * output parameters
 *
 * no return value
 */
void dwt_setsmarttxpower(int enable)
{
 80026e0:	b570      	push	{r4, r5, r6, lr}
 80026e2:	0004      	movs	r4, r0
    // Config system register
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 80026e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <dwt_setsmarttxpower+0x44>)
 80026e6:	681d      	ldr	r5, [r3, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	2004      	movs	r0, #4
 80026ec:	f7ff fdea 	bl	80022c4 <dwt_read32bitoffsetreg>
 80026f0:	6128      	str	r0, [r5, #16]

    // Disable smart power configuration
    if(enable)
 80026f2:	2c00      	cmp	r4, #0
 80026f4:	d00d      	beq.n	8002712 <dwt_setsmarttxpower+0x32>
    {
        pdw1000local->sysCFGreg &= ~(SYS_CFG_DIS_STXP) ;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <dwt_setsmarttxpower+0x44>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	6913      	ldr	r3, [r2, #16]
 80026fc:	490a      	ldr	r1, [pc, #40]	@ (8002728 <dwt_setsmarttxpower+0x48>)
 80026fe:	400b      	ands	r3, r1
 8002700:	6113      	str	r3, [r2, #16]
    else
    {
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
    }

    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8002702:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <dwt_setsmarttxpower+0x44>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	2100      	movs	r1, #0
 800270a:	2004      	movs	r0, #4
 800270c:	f7ff fe2b 	bl	8002366 <dwt_write32bitoffsetreg>
}
 8002710:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->sysCFGreg |= SYS_CFG_DIS_STXP ;
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <dwt_setsmarttxpower+0x44>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	6911      	ldr	r1, [r2, #16]
 8002718:	2380      	movs	r3, #128	@ 0x80
 800271a:	02db      	lsls	r3, r3, #11
 800271c:	430b      	orrs	r3, r1
 800271e:	6113      	str	r3, [r2, #16]
 8002720:	e7ef      	b.n	8002702 <dwt_setsmarttxpower+0x22>
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	20000010 	.word	0x20000010
 8002728:	fffbffff 	.word	0xfffbffff

0800272c <dwt_setcallbacks>:
 * output parameters
 *
 * no return value
 */
void dwt_setcallbacks(dwt_cb_t cbTxDone, dwt_cb_t cbRxOk, dwt_cb_t cbRxTo, dwt_cb_t cbRxErr)
{
 800272c:	b510      	push	{r4, lr}
    pdw1000local->cbTxDone = cbTxDone;
 800272e:	4c03      	ldr	r4, [pc, #12]	@ (800273c <dwt_setcallbacks+0x10>)
 8002730:	6824      	ldr	r4, [r4, #0]
 8002732:	62a0      	str	r0, [r4, #40]	@ 0x28
    pdw1000local->cbRxOk = cbRxOk;
 8002734:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdw1000local->cbRxTo = cbRxTo;
 8002736:	6322      	str	r2, [r4, #48]	@ 0x30
    pdw1000local->cbRxErr = cbRxErr;
 8002738:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800273a:	bd10      	pop	{r4, pc}
 800273c:	20000010 	.word	0x20000010

08002740 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	0004      	movs	r4, r0
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 8002744:	07c3      	lsls	r3, r0, #31
 8002746:	d52e      	bpl.n	80027a6 <dwt_setleds+0x66>
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8002748:	2100      	movs	r1, #0
 800274a:	2026      	movs	r0, #38	@ 0x26
 800274c:	f7ff fdba 	bl	80022c4 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 8002750:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <dwt_setleds+0x7c>)
 8002752:	4018      	ands	r0, r3
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
 8002754:	22a0      	movs	r2, #160	@ 0xa0
 8002756:	0152      	lsls	r2, r2, #5
 8002758:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 800275a:	2100      	movs	r1, #0
 800275c:	2026      	movs	r0, #38	@ 0x26
 800275e:	f7ff fe02 	bl	8002366 <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 8002762:	2100      	movs	r1, #0
 8002764:	2036      	movs	r0, #54	@ 0x36
 8002766:	f7ff fdad 	bl	80022c4 <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
 800276a:	2284      	movs	r2, #132	@ 0x84
 800276c:	0412      	lsls	r2, r2, #16
 800276e:	4302      	orrs	r2, r0
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 8002770:	2100      	movs	r1, #0
 8002772:	2036      	movs	r0, #54	@ 0x36
 8002774:	f7ff fdf7 	bl	8002366 <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 8002778:	2302      	movs	r3, #2
 800277a:	001d      	movs	r5, r3
 800277c:	4025      	ands	r5, r4
 800277e:	4223      	tst	r3, r4
 8002780:	d10f      	bne.n	80027a2 <dwt_setleds+0x62>
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8002782:	2488      	movs	r4, #136	@ 0x88
 8002784:	0064      	lsls	r4, r4, #1
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8002786:	0022      	movs	r2, r4
 8002788:	2128      	movs	r1, #40	@ 0x28
 800278a:	2036      	movs	r0, #54	@ 0x36
 800278c:	f7ff fdeb 	bl	8002366 <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8002790:	2d00      	cmp	r5, #0
 8002792:	d012      	beq.n	80027ba <dwt_setleds+0x7a>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <dwt_setleds+0x80>)
 8002796:	4022      	ands	r2, r4
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8002798:	2128      	movs	r1, #40	@ 0x28
 800279a:	2036      	movs	r0, #54	@ 0x36
 800279c:	f7ff fde3 	bl	8002366 <dwt_write32bitoffsetreg>
 80027a0:	e00b      	b.n	80027ba <dwt_setleds+0x7a>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 80027a2:	4c08      	ldr	r4, [pc, #32]	@ (80027c4 <dwt_setleds+0x84>)
 80027a4:	e7ef      	b.n	8002786 <dwt_setleds+0x46>
        }
    }
    else
    {
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 80027a6:	2100      	movs	r1, #0
 80027a8:	2026      	movs	r0, #38	@ 0x26
 80027aa:	f7ff fd8b 	bl	80022c4 <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 80027ae:	4a03      	ldr	r2, [pc, #12]	@ (80027bc <dwt_setleds+0x7c>)
 80027b0:	4002      	ands	r2, r0
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 80027b2:	2100      	movs	r1, #0
 80027b4:	2026      	movs	r0, #38	@ 0x26
 80027b6:	f7ff fdd6 	bl	8002366 <dwt_write32bitoffsetreg>
    }
}
 80027ba:	bd70      	pop	{r4, r5, r6, pc}
 80027bc:	ffffc3ff 	.word	0xffffc3ff
 80027c0:	fff0ffff 	.word	0xfff0ffff
 80027c4:	000f0110 	.word	0x000f0110

080027c8 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 80027c8:	b510      	push	{r4, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	0004      	movs	r4, r0
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 80027ce:	ab01      	add	r3, sp, #4
 80027d0:	2202      	movs	r2, #2
 80027d2:	2100      	movs	r1, #0
 80027d4:	2036      	movs	r0, #54	@ 0x36
 80027d6:	f7ff fd55 	bl	8002284 <dwt_readfromdevice>
    switch(clocks)
 80027da:	2c0e      	cmp	r4, #14
 80027dc:	d80a      	bhi.n	80027f4 <_dwt_enableclocks+0x2c>
 80027de:	00a4      	lsls	r4, r4, #2
 80027e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <_dwt_enableclocks+0xcc>)
 80027e2:	591b      	ldr	r3, [r3, r4]
 80027e4:	469f      	mov	pc, r3
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80027e6:	ab01      	add	r3, sp, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
            reg[1] = reg[1] & 0xfe;
 80027ec:	785a      	ldrb	r2, [r3, #1]
 80027ee:	2101      	movs	r1, #1
 80027f0:	438a      	bics	r2, r1
 80027f2:	705a      	strb	r2, [r3, #1]
        break;
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80027f4:	ab01      	add	r3, sp, #4
 80027f6:	2201      	movs	r2, #1
 80027f8:	2100      	movs	r1, #0
 80027fa:	2036      	movs	r0, #54	@ 0x36
 80027fc:	f7ff fd0e 	bl	800221c <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8002800:	466b      	mov	r3, sp
 8002802:	3305      	adds	r3, #5
 8002804:	2201      	movs	r2, #1
 8002806:	2101      	movs	r1, #1
 8002808:	2036      	movs	r0, #54	@ 0x36
 800280a:	f7ff fd07 	bl	800221c <dwt_writetodevice>

} // end _dwt_enableclocks()
 800280e:	b002      	add	sp, #8
 8002810:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
 8002812:	aa01      	add	r2, sp, #4
 8002814:	7813      	ldrb	r3, [r2, #0]
 8002816:	2103      	movs	r1, #3
 8002818:	438b      	bics	r3, r1
 800281a:	2101      	movs	r1, #1
 800281c:	430b      	orrs	r3, r1
 800281e:	7013      	strb	r3, [r2, #0]
        break;
 8002820:	e7e8      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 8002822:	aa01      	add	r2, sp, #4
 8002824:	7813      	ldrb	r3, [r2, #0]
 8002826:	2103      	movs	r1, #3
 8002828:	438b      	bics	r3, r1
 800282a:	2102      	movs	r1, #2
 800282c:	430b      	orrs	r3, r1
 800282e:	7013      	strb	r3, [r2, #0]
        break;
 8002830:	e7e0      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 8002832:	aa01      	add	r2, sp, #4
 8002834:	7813      	ldrb	r3, [r2, #0]
 8002836:	214c      	movs	r1, #76	@ 0x4c
 8002838:	438b      	bics	r3, r1
 800283a:	2148      	movs	r1, #72	@ 0x48
 800283c:	430b      	orrs	r3, r1
 800283e:	7013      	strb	r3, [r2, #0]
            reg[1] = 0x80 | reg[1];
 8002840:	7851      	ldrb	r1, [r2, #1]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	425b      	negs	r3, r3
 8002846:	430b      	orrs	r3, r1
 8002848:	7053      	strb	r3, [r2, #1]
        break;
 800284a:	e7d3      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[0] = reg[0] & 0xb3;
 800284c:	ab01      	add	r3, sp, #4
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	214c      	movs	r1, #76	@ 0x4c
 8002852:	438a      	bics	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x7f & reg[1];
 8002856:	7859      	ldrb	r1, [r3, #1]
 8002858:	227f      	movs	r2, #127	@ 0x7f
 800285a:	400a      	ands	r2, r1
 800285c:	705a      	strb	r2, [r3, #1]
        break;
 800285e:	e7c9      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[1] = 0x02 | reg[1];
 8002860:	aa01      	add	r2, sp, #4
 8002862:	7853      	ldrb	r3, [r2, #1]
 8002864:	2102      	movs	r1, #2
 8002866:	430b      	orrs	r3, r1
 8002868:	7053      	strb	r3, [r2, #1]
        break;
 800286a:	e7c3      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[1] = reg[1] & 0xfd;
 800286c:	aa01      	add	r2, sp, #4
 800286e:	7853      	ldrb	r3, [r2, #1]
 8002870:	2102      	movs	r1, #2
 8002872:	438b      	bics	r3, r1
 8002874:	7053      	strb	r3, [r2, #1]
        break;
 8002876:	e7bd      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8002878:	aa01      	add	r2, sp, #4
 800287a:	7813      	ldrb	r3, [r2, #0]
 800287c:	2130      	movs	r1, #48	@ 0x30
 800287e:	438b      	bics	r3, r1
 8002880:	2120      	movs	r1, #32
 8002882:	430b      	orrs	r3, r1
 8002884:	7013      	strb	r3, [r2, #0]
        break;
 8002886:	e7b5      	b.n	80027f4 <_dwt_enableclocks+0x2c>
            reg[0] = 0x01;
 8002888:	ab01      	add	r3, sp, #4
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
            reg[1] = 0x03;
 800288e:	3202      	adds	r2, #2
 8002890:	705a      	strb	r2, [r3, #1]
        break;
 8002892:	e7af      	b.n	80027f4 <_dwt_enableclocks+0x2c>
 8002894:	080051b8 	.word	0x080051b8

08002898 <dwt_otpread>:
{
 8002898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289a:	46c6      	mov	lr, r8
 800289c:	b500      	push	{lr}
 800289e:	4680      	mov	r8, r0
 80028a0:	000f      	movs	r7, r1
 80028a2:	0016      	movs	r6, r2
    _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: Set system clock to XTAL - this is necessary to make sure the values read by _dwt_otpread are reliable
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff ff8f 	bl	80027c8 <_dwt_enableclocks>
    for(i=0; i<length; i++)
 80028aa:	2400      	movs	r4, #0
 80028ac:	e008      	b.n	80028c0 <dwt_otpread+0x28>
        array[i] = _dwt_otpread(address + i) ;
 80028ae:	00a5      	lsls	r5, r4, #2
 80028b0:	197d      	adds	r5, r7, r5
 80028b2:	4643      	mov	r3, r8
 80028b4:	1918      	adds	r0, r3, r4
 80028b6:	b280      	uxth	r0, r0
 80028b8:	f7ff fd84 	bl	80023c4 <_dwt_otpread>
 80028bc:	6028      	str	r0, [r5, #0]
    for(i=0; i<length; i++)
 80028be:	3401      	adds	r4, #1
 80028c0:	42a6      	cmp	r6, r4
 80028c2:	dcf4      	bgt.n	80028ae <dwt_otpread+0x16>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Restore system clock to PLL
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7ff ff7f 	bl	80027c8 <_dwt_enableclocks>
}
 80028ca:	bc80      	pop	{r7}
 80028cc:	46b8      	mov	r8, r7
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d0 <_dwt_loaducodefromrom>:
{
 80028d0:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_LDE);
 80028d2:	200e      	movs	r0, #14
 80028d4:	f7ff ff78 	bl	80027c8 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80028d8:	2280      	movs	r2, #128	@ 0x80
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	2106      	movs	r1, #6
 80028de:	202d      	movs	r0, #45	@ 0x2d
 80028e0:	f7ff fd33 	bl	800234a <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fe fc93 	bl	8001210 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7ff ff6c 	bl	80027c8 <_dwt_enableclocks>
}
 80028f0:	bd10      	pop	{r4, pc}

080028f2 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80028f2:	b510      	push	{r4, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80028f4:	2000      	movs	r0, #0
 80028f6:	f7ff ff67 	bl	80027c8 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80028fa:	2200      	movs	r2, #0
 80028fc:	2104      	movs	r1, #4
 80028fe:	2036      	movs	r0, #54	@ 0x36
 8002900:	f7ff fd23 	bl	800234a <dwt_write16bitoffsetreg>
}
 8002904:	bd10      	pop	{r4, pc}
	...

08002908 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 8002908:	b510      	push	{r4, lr}
    int retval = DWT_SUCCESS ;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 800290a:	2302      	movs	r3, #2
 800290c:	001a      	movs	r2, r3
 800290e:	4002      	ands	r2, r0
 8002910:	4203      	tst	r3, r0
 8002912:	d004      	beq.n	800291e <dwt_starttx+0x16>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 8002914:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <dwt_starttx+0x60>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2201      	movs	r2, #1
 800291a:	755a      	strb	r2, [r3, #21]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 800291c:	327f      	adds	r2, #127	@ 0x7f
    }

    if (mode & DWT_START_TX_DELAYED)
 800291e:	07c0      	lsls	r0, r0, #31
 8002920:	d518      	bpl.n	8002954 <dwt_starttx+0x4c>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
 8002922:	2306      	movs	r3, #6
 8002924:	431a      	orrs	r2, r3
 8002926:	b2d2      	uxtb	r2, r2
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8002928:	2100      	movs	r1, #0
 800292a:	200d      	movs	r0, #13
 800292c:	f7ff fd01 	bl	8002332 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8002930:	2103      	movs	r1, #3
 8002932:	200f      	movs	r0, #15
 8002934:	f7ff fce0 	bl	80022f8 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8002938:	2381      	movs	r3, #129	@ 0x81
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4218      	tst	r0, r3
 800293e:	d101      	bne.n	8002944 <dwt_starttx+0x3c>
        {
            retval = DWT_SUCCESS ; // All okay
 8002940:	2000      	movs	r0, #0
    {
        temp |= (uint8)SYS_CTRL_TXSTRT ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
    }

    return retval;
 8002942:	e00f      	b.n	8002964 <dwt_starttx+0x5c>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8002944:	2240      	movs	r2, #64	@ 0x40
 8002946:	2100      	movs	r1, #0
 8002948:	200d      	movs	r0, #13
 800294a:	f7ff fcf2 	bl	8002332 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800294e:	2001      	movs	r0, #1
 8002950:	4240      	negs	r0, r0
 8002952:	e007      	b.n	8002964 <dwt_starttx+0x5c>
        temp |= (uint8)SYS_CTRL_TXSTRT ;
 8002954:	2302      	movs	r3, #2
 8002956:	431a      	orrs	r2, r3
 8002958:	b2d2      	uxtb	r2, r2
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 800295a:	2100      	movs	r1, #0
 800295c:	200d      	movs	r0, #13
 800295e:	f7ff fce8 	bl	8002332 <dwt_write8bitoffsetreg>
    int retval = DWT_SUCCESS ;
 8002962:	2000      	movs	r0, #0

} // end dwt_starttx()
 8002964:	bd10      	pop	{r4, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	20000010 	.word	0x20000010

0800296c <dwt_syncrxbufptrs>:
 * output parameters
 *
 * no return value
 */
void dwt_syncrxbufptrs(void)
{
 800296c:	b510      	push	{r4, lr}
    uint8  buff ;
    // Need to make sure that the host/IC buffer pointers are aligned before starting RX
    buff = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 800296e:	2103      	movs	r1, #3
 8002970:	200f      	movs	r0, #15
 8002972:	f7ff fcd1 	bl	8002318 <dwt_read8bitoffsetreg>

    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
       ((buff & (SYS_STATUS_HSRBP>>24)) << 1) ) // Host Side Receive Buffer Pointer
 8002976:	0043      	lsls	r3, r0, #1
    if((buff & (SYS_STATUS_ICRBP >> 24)) !=     // IC side Receive Buffer Pointer
 8002978:	4058      	eors	r0, r3
 800297a:	0600      	lsls	r0, r0, #24
 800297c:	d400      	bmi.n	8002980 <dwt_syncrxbufptrs+0x14>
    {
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
    }
}
 800297e:	bd10      	pop	{r4, pc}
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET , 0x01) ; // We need to swap RX buffer status reg (write one to toggle internally)
 8002980:	2201      	movs	r2, #1
 8002982:	2103      	movs	r1, #3
 8002984:	200d      	movs	r0, #13
 8002986:	f7ff fcd4 	bl	8002332 <dwt_write8bitoffsetreg>
}
 800298a:	e7f8      	b.n	800297e <dwt_syncrxbufptrs+0x12>

0800298c <dwt_forcetrxoff>:
{
 800298c:	b570      	push	{r4, r5, r6, lr}
    mask = dwt_read32bitreg(SYS_MASK_ID) ; // Read set interrupt mask
 800298e:	2100      	movs	r1, #0
 8002990:	200e      	movs	r0, #14
 8002992:	f7ff fc97 	bl	80022c4 <dwt_read32bitoffsetreg>
 8002996:	0005      	movs	r5, r0
    stat = decamutexon() ;
 8002998:	f7fe fdfa 	bl	8001590 <decamutexon>
 800299c:	0004      	movs	r4, r0
    dwt_write32bitreg(SYS_MASK_ID, 0) ; // Clear interrupt mask - so we don't get any unwanted events
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	200e      	movs	r0, #14
 80029a4:	f7ff fcdf 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF) ; // Disable the radio
 80029a8:	2240      	movs	r2, #64	@ 0x40
 80029aa:	2100      	movs	r1, #0
 80029ac:	200d      	movs	r0, #13
 80029ae:	f7ff fcc0 	bl	8002332 <dwt_write8bitoffsetreg>
    dwt_write32bitreg(SYS_STATUS_ID, (SYS_STATUS_ALL_TX | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_GOOD));
 80029b2:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <dwt_forcetrxoff+0x50>)
 80029b4:	2100      	movs	r1, #0
 80029b6:	200f      	movs	r0, #15
 80029b8:	f7ff fcd5 	bl	8002366 <dwt_write32bitoffsetreg>
    dwt_syncrxbufptrs();
 80029bc:	f7ff ffd6 	bl	800296c <dwt_syncrxbufptrs>
    dwt_write32bitreg(SYS_MASK_ID, mask) ; // Set interrupt mask to what it was
 80029c0:	002a      	movs	r2, r5
 80029c2:	2100      	movs	r1, #0
 80029c4:	200e      	movs	r0, #14
 80029c6:	f7ff fcce 	bl	8002366 <dwt_write32bitoffsetreg>
    decamutexoff(stat) ;
 80029ca:	0020      	movs	r0, r4
 80029cc:	f7fe fde2 	bl	8001594 <decamutexoff>
    pdw1000local->wait4resp = 0;
 80029d0:	4b03      	ldr	r3, [pc, #12]	@ (80029e0 <dwt_forcetrxoff+0x54>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	755a      	strb	r2, [r3, #21]
} // end deviceforcetrxoff()
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	2427fff8 	.word	0x2427fff8
 80029e0:	20000010 	.word	0x20000010

080029e4 <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80029e4:	b510      	push	{r4, lr}
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80029e6:	22e0      	movs	r2, #224	@ 0xe0
 80029e8:	2103      	movs	r1, #3
 80029ea:	2036      	movs	r0, #54	@ 0x36
 80029ec:	f7ff fca1 	bl	8002332 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80029f0:	22f0      	movs	r2, #240	@ 0xf0
 80029f2:	2103      	movs	r1, #3
 80029f4:	2036      	movs	r0, #54	@ 0x36
 80029f6:	f7ff fc9c 	bl	8002332 <dwt_write8bitoffsetreg>
}
 80029fa:	bd10      	pop	{r4, pc}

080029fc <dwt_isr>:
{
 80029fc:	b570      	push	{r4, r5, r6, lr}
    uint32 status = pdw1000local->cbData.status = dwt_read32bitreg(SYS_STATUS_ID); // Read status register low 32bits
 80029fe:	4b53      	ldr	r3, [pc, #332]	@ (8002b4c <dwt_isr+0x150>)
 8002a00:	681d      	ldr	r5, [r3, #0]
 8002a02:	2100      	movs	r1, #0
 8002a04:	200f      	movs	r0, #15
 8002a06:	f7ff fc5d 	bl	80022c4 <dwt_read32bitoffsetreg>
 8002a0a:	0004      	movs	r4, r0
 8002a0c:	61e8      	str	r0, [r5, #28]
    if(status & SYS_STATUS_RXFCG)
 8002a0e:	0443      	lsls	r3, r0, #17
 8002a10:	d40a      	bmi.n	8002a28 <dwt_isr+0x2c>
    if(status & SYS_STATUS_TXFRS)
 8002a12:	0623      	lsls	r3, r4, #24
 8002a14:	d455      	bmi.n	8002ac2 <dwt_isr+0xc6>
    if(status & SYS_STATUS_ALL_RX_TO)
 8002a16:	2388      	movs	r3, #136	@ 0x88
 8002a18:	039b      	lsls	r3, r3, #14
 8002a1a:	421c      	tst	r4, r3
 8002a1c:	d16a      	bne.n	8002af4 <dwt_isr+0xf8>
    if(status & SYS_STATUS_ALL_RX_ERR)
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8002b50 <dwt_isr+0x154>)
 8002a20:	421c      	tst	r4, r3
 8002a22:	d000      	beq.n	8002a26 <dwt_isr+0x2a>
 8002a24:	e07c      	b.n	8002b20 <dwt_isr+0x124>
}
 8002a26:	bd70      	pop	{r4, r5, r6, pc}
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_GOOD); // Clear all receive status bits
 8002a28:	22de      	movs	r2, #222	@ 0xde
 8002a2a:	01d2      	lsls	r2, r2, #7
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	200f      	movs	r0, #15
 8002a30:	f7ff fc99 	bl	8002366 <dwt_write32bitoffsetreg>
        pdw1000local->cbData.rx_flags = 0;
 8002a34:	4d45      	ldr	r5, [pc, #276]	@ (8002b4c <dwt_isr+0x150>)
 8002a36:	682a      	ldr	r2, [r5, #0]
 8002a38:	2324      	movs	r3, #36	@ 0x24
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	54d1      	strb	r1, [r2, r3]
        finfo16 = dwt_read16bitoffsetreg(RX_FINFO_ID, RX_FINFO_OFFSET);
 8002a3e:	2010      	movs	r0, #16
 8002a40:	f7ff fc5a 	bl	80022f8 <dwt_read16bitoffsetreg>
        len = finfo16 & RX_FINFO_RXFL_MASK_1023;
 8002a44:	0582      	lsls	r2, r0, #22
 8002a46:	0d92      	lsrs	r2, r2, #22
        if(pdw1000local->longFrames == 0)
 8002a48:	682b      	ldr	r3, [r5, #0]
 8002a4a:	7a99      	ldrb	r1, [r3, #10]
 8002a4c:	2900      	cmp	r1, #0
 8002a4e:	d101      	bne.n	8002a54 <dwt_isr+0x58>
            len &= RX_FINFO_RXFLEN_MASK;
 8002a50:	227f      	movs	r2, #127	@ 0x7f
 8002a52:	4002      	ands	r2, r0
        pdw1000local->cbData.datalength = len;
 8002a54:	841a      	strh	r2, [r3, #32]
        if(finfo16 & RX_FINFO_RNG)
 8002a56:	0400      	lsls	r0, r0, #16
 8002a58:	d41f      	bmi.n	8002a9a <dwt_isr+0x9e>
        dwt_readfromdevice(RX_BUFFER_ID, 0, FCTRL_LEN_MAX, pdw1000local->cbData.fctrl);
 8002a5a:	3322      	adds	r3, #34	@ 0x22
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2011      	movs	r0, #17
 8002a62:	f7ff fc0f 	bl	8002284 <dwt_readfromdevice>
        if((status & SYS_STATUS_AAT) && ((pdw1000local->cbData.fctrl[0] & FCTRL_ACK_REQ_MASK) == 0))
 8002a66:	0723      	lsls	r3, r4, #28
 8002a68:	d505      	bpl.n	8002a76 <dwt_isr+0x7a>
 8002a6a:	4b38      	ldr	r3, [pc, #224]	@ (8002b4c <dwt_isr+0x150>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2322      	movs	r3, #34	@ 0x22
 8002a70:	5cd3      	ldrb	r3, [r2, r3]
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	d517      	bpl.n	8002aa6 <dwt_isr+0xaa>
        if(pdw1000local->cbRxOk != NULL)
 8002a76:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <dwt_isr+0x150>)
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <dwt_isr+0x88>
            pdw1000local->cbRxOk(&pdw1000local->cbData);
 8002a80:	301c      	adds	r0, #28
 8002a82:	4798      	blx	r3
        if (pdw1000local->dblbuffon)
 8002a84:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <dwt_isr+0x150>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	7d1b      	ldrb	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0c1      	beq.n	8002a12 <dwt_isr+0x16>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_HRBT_OFFSET, 1);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2103      	movs	r1, #3
 8002a92:	200d      	movs	r0, #13
 8002a94:	f7ff fc4d 	bl	8002332 <dwt_write8bitoffsetreg>
 8002a98:	e7bb      	b.n	8002a12 <dwt_isr+0x16>
            pdw1000local->cbData.rx_flags |= DWT_CB_DATA_RX_FLAG_RNG;
 8002a9a:	2124      	movs	r1, #36	@ 0x24
 8002a9c:	5c5a      	ldrb	r2, [r3, r1]
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	4302      	orrs	r2, r0
 8002aa2:	545a      	strb	r2, [r3, r1]
 8002aa4:	e7d9      	b.n	8002a5a <dwt_isr+0x5e>
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_AAT); // Clear AAT status bit in register
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	200f      	movs	r0, #15
 8002aac:	f7ff fc5b 	bl	8002366 <dwt_write32bitoffsetreg>
            pdw1000local->cbData.status &= ~SYS_STATUS_AAT; // Clear AAT status bit in callback data register copy
 8002ab0:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <dwt_isr+0x150>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	438a      	bics	r2, r1
 8002aba:	61da      	str	r2, [r3, #28]
            pdw1000local->wait4resp = 0;
 8002abc:	2200      	movs	r2, #0
 8002abe:	755a      	strb	r2, [r3, #21]
 8002ac0:	e7d9      	b.n	8002a76 <dwt_isr+0x7a>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_TX); // Clear TX event bits
 8002ac2:	22f8      	movs	r2, #248	@ 0xf8
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	200f      	movs	r0, #15
 8002ac8:	f7ff fc4d 	bl	8002366 <dwt_write32bitoffsetreg>
        if((status & SYS_STATUS_AAT) && pdw1000local->wait4resp)
 8002acc:	0723      	lsls	r3, r4, #28
 8002ace:	d504      	bpl.n	8002ada <dwt_isr+0xde>
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b4c <dwt_isr+0x150>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	7d5b      	ldrb	r3, [r3, #21]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <dwt_isr+0xee>
        if(pdw1000local->cbTxDone != NULL)
 8002ada:	4b1c      	ldr	r3, [pc, #112]	@ (8002b4c <dwt_isr+0x150>)
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d098      	beq.n	8002a16 <dwt_isr+0x1a>
            pdw1000local->cbTxDone(&pdw1000local->cbData);
 8002ae4:	301c      	adds	r0, #28
 8002ae6:	4798      	blx	r3
 8002ae8:	e795      	b.n	8002a16 <dwt_isr+0x1a>
            dwt_forcetrxoff(); // Turn the RX off
 8002aea:	f7ff ff4f 	bl	800298c <dwt_forcetrxoff>
            dwt_rxreset(); // Reset in case we were late and a frame was already being received
 8002aee:	f7ff ff79 	bl	80029e4 <dwt_rxreset>
 8002af2:	e7f2      	b.n	8002ada <dwt_isr+0xde>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXRFTO); // Clear RX timeout event bits
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	0292      	lsls	r2, r2, #10
 8002af8:	2100      	movs	r1, #0
 8002afa:	200f      	movs	r0, #15
 8002afc:	f7ff fc33 	bl	8002366 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8002b00:	4d12      	ldr	r5, [pc, #72]	@ (8002b4c <dwt_isr+0x150>)
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	2200      	movs	r2, #0
 8002b06:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 8002b08:	f7ff ff40 	bl	800298c <dwt_forcetrxoff>
        dwt_rxreset();
 8002b0c:	f7ff ff6a 	bl	80029e4 <dwt_rxreset>
        if(pdw1000local->cbRxTo != NULL)
 8002b10:	6828      	ldr	r0, [r5, #0]
 8002b12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <dwt_isr+0x11e>
 8002b18:	e781      	b.n	8002a1e <dwt_isr+0x22>
            pdw1000local->cbRxTo(&pdw1000local->cbData);
 8002b1a:	301c      	adds	r0, #28
 8002b1c:	4798      	blx	r3
 8002b1e:	e77e      	b.n	8002a1e <dwt_isr+0x22>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR); // Clear RX error event bits
 8002b20:	001a      	movs	r2, r3
 8002b22:	2100      	movs	r1, #0
 8002b24:	200f      	movs	r0, #15
 8002b26:	f7ff fc1e 	bl	8002366 <dwt_write32bitoffsetreg>
        pdw1000local->wait4resp = 0;
 8002b2a:	4c08      	ldr	r4, [pc, #32]	@ (8002b4c <dwt_isr+0x150>)
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	755a      	strb	r2, [r3, #21]
        dwt_forcetrxoff();
 8002b32:	f7ff ff2b 	bl	800298c <dwt_forcetrxoff>
        dwt_rxreset();
 8002b36:	f7ff ff55 	bl	80029e4 <dwt_rxreset>
        if(pdw1000local->cbRxErr != NULL)
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d100      	bne.n	8002b44 <dwt_isr+0x148>
 8002b42:	e770      	b.n	8002a26 <dwt_isr+0x2a>
            pdw1000local->cbRxErr(&pdw1000local->cbData);
 8002b44:	301c      	adds	r0, #28
 8002b46:	4798      	blx	r3
}
 8002b48:	e76d      	b.n	8002a26 <dwt_isr+0x2a>
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	20000010 	.word	0x20000010
 8002b50:	24059000 	.word	0x24059000

08002b54 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 8002b54:	b510      	push	{r4, lr}
    _dwt_disablesequencing();
 8002b56:	f7ff fecc 	bl	80028f2 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	202c      	movs	r0, #44	@ 0x2c
 8002b60:	f7ff fbf3 	bl	800234a <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 8002b64:	2200      	movs	r2, #0
 8002b66:	2106      	movs	r1, #6
 8002b68:	202c      	movs	r0, #44	@ 0x2c
 8002b6a:	f7ff fbe2 	bl	8002332 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 8002b6e:	f7ff fc3e 	bl	80023ee <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2103      	movs	r1, #3
 8002b76:	2036      	movs	r0, #54	@ 0x36
 8002b78:	f7ff fbdb 	bl	8002332 <dwt_write8bitoffsetreg>
    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
//    deca_sleep(1);

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8002b7c:	22f0      	movs	r2, #240	@ 0xf0
 8002b7e:	2103      	movs	r1, #3
 8002b80:	2036      	movs	r0, #54	@ 0x36
 8002b82:	f7ff fbd6 	bl	8002332 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 8002b86:	4b02      	ldr	r3, [pc, #8]	@ (8002b90 <dwt_softreset+0x3c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	755a      	strb	r2, [r3, #21]
}
 8002b8e:	bd10      	pop	{r4, pc}
 8002b90:	20000010 	.word	0x20000010

08002b94 <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 8002b94:	b510      	push	{r4, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8002b96:	221f      	movs	r2, #31
 8002b98:	4002      	ands	r2, r0
 8002b9a:	2360      	movs	r3, #96	@ 0x60
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	210e      	movs	r1, #14
 8002ba2:	202b      	movs	r0, #43	@ 0x2b
 8002ba4:	f7ff fbc5 	bl	8002332 <dwt_write8bitoffsetreg>
}
 8002ba8:	bd10      	pop	{r4, pc}
	...

08002bac <dwt_initialise>:
{
 8002bac:	b570      	push	{r4, r5, r6, lr}
 8002bae:	0004      	movs	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8002bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 8002bb8:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 8002bba:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28
    pdw1000local->cbRxOk = NULL;
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
    pdw1000local->cbRxTo = NULL;
 8002bc0:	631a      	str	r2, [r3, #48]	@ 0x30
    pdw1000local->cbRxErr = NULL;
 8002bc2:	635a      	str	r2, [r3, #52]	@ 0x34
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8002bc4:	f7ff fb92 	bl	80022ec <dwt_readdevid>
 8002bc8:	4b67      	ldr	r3, [pc, #412]	@ (8002d68 <dwt_initialise+0x1bc>)
 8002bca:	4298      	cmp	r0, r3
 8002bcc:	d000      	beq.n	8002bd0 <dwt_initialise+0x24>
 8002bce:	e0c6      	b.n	8002d5e <dwt_initialise+0x1b2>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	001d      	movs	r5, r3
 8002bd4:	4025      	ands	r5, r4
 8002bd6:	4223      	tst	r3, r4
 8002bd8:	d020      	beq.n	8002c1c <dwt_initialise+0x70>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 8002bda:	2d00      	cmp	r5, #0
 8002bdc:	d002      	beq.n	8002be4 <dwt_initialise+0x38>
 8002bde:	23f8      	movs	r3, #248	@ 0xf8
 8002be0:	4223      	tst	r3, r4
 8002be2:	d102      	bne.n	8002bea <dwt_initialise+0x3e>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff fdef 	bl	80027c8 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8002bea:	2204      	movs	r2, #4
 8002bec:	2100      	movs	r1, #0
 8002bee:	2024      	movs	r0, #36	@ 0x24
 8002bf0:	f7ff fb9f 	bl	8002332 <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	d121      	bne.n	8002c3c <dwt_initialise+0x90>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8002bf8:	2004      	movs	r0, #4
 8002bfa:	f7ff fbe3 	bl	80023c4 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 8002bfe:	23ff      	movs	r3, #255	@ 0xff
 8002c00:	4203      	tst	r3, r0
 8002c02:	d10e      	bne.n	8002c22 <dwt_initialise+0x76>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 8002c04:	2d00      	cmp	r5, #0
 8002c06:	d028      	beq.n	8002c5a <dwt_initialise+0xae>
 8002c08:	230a      	movs	r3, #10
 8002c0a:	4023      	ands	r3, r4
 8002c0c:	2b0a      	cmp	r3, #10
 8002c0e:	d024      	beq.n	8002c5a <dwt_initialise+0xae>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8002c10:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2200      	movs	r2, #0
 8002c16:	72da      	strb	r2, [r3, #11]
    uint16 otp_xtaltrim_and_rev = 0;
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e026      	b.n	8002c6a <dwt_initialise+0xbe>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8002c1c:	f7ff ff9a 	bl	8002b54 <dwt_softreset>
 8002c20:	e7db      	b.n	8002bda <dwt_initialise+0x2e>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8002c22:	2202      	movs	r2, #2
 8002c24:	2112      	movs	r1, #18
 8002c26:	202d      	movs	r0, #45	@ 0x2d
 8002c28:	f7ff fb83 	bl	8002332 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 8002c2c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	8ad1      	ldrh	r1, [r2, #22]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	015b      	lsls	r3, r3, #5
 8002c36:	430b      	orrs	r3, r1
 8002c38:	82d3      	strh	r3, [r2, #22]
 8002c3a:	e7e3      	b.n	8002c04 <dwt_initialise+0x58>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 8002c3c:	2130      	movs	r1, #48	@ 0x30
 8002c3e:	2028      	movs	r0, #40	@ 0x28
 8002c40:	f7ff fb40 	bl	80022c4 <dwt_read32bitoffsetreg>
 8002c44:	4b49      	ldr	r3, [pc, #292]	@ (8002d6c <dwt_initialise+0x1c0>)
 8002c46:	4298      	cmp	r0, r3
 8002c48:	d0dc      	beq.n	8002c04 <dwt_initialise+0x58>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 8002c4a:	4b46      	ldr	r3, [pc, #280]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	8ad1      	ldrh	r1, [r2, #22]
 8002c50:	2380      	movs	r3, #128	@ 0x80
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	430b      	orrs	r3, r1
 8002c56:	82d3      	strh	r3, [r2, #22]
 8002c58:	e7d4      	b.n	8002c04 <dwt_initialise+0x58>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 8002c5a:	201e      	movs	r0, #30
 8002c5c:	f7ff fbb2 	bl	80023c4 <_dwt_otpread>
 8002c60:	b280      	uxth	r0, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 8002c62:	4b40      	ldr	r3, [pc, #256]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0a02      	lsrs	r2, r0, #8
 8002c68:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	d105      	bne.n	8002c7a <dwt_initialise+0xce>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 8002c6e:	06c3      	lsls	r3, r0, #27
 8002c70:	d100      	bne.n	8002c74 <dwt_initialise+0xc8>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 8002c72:	2010      	movs	r0, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 8002c74:	b2c0      	uxtb	r0, r0
 8002c76:	f7ff ff8d 	bl	8002b94 <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
 8002c7a:	06e3      	lsls	r3, r4, #27
 8002c7c:	d43d      	bmi.n	8002cfa <dwt_initialise+0x14e>
        pdw1000local->partID = 0;
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
 8002c86:	06a3      	lsls	r3, r4, #26
 8002c88:	d43e      	bmi.n	8002d08 <dwt_initialise+0x15c>
        pdw1000local->lotID = 0;
 8002c8a:	4b36      	ldr	r3, [pc, #216]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
 8002c92:	0663      	lsls	r3, r4, #25
 8002c94:	d43f      	bmi.n	8002d16 <dwt_initialise+0x16a>
        pdw1000local->vBatP = 0;
 8002c96:	4b33      	ldr	r3, [pc, #204]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 8002c9e:	0623      	lsls	r3, r4, #24
 8002ca0:	d440      	bmi.n	8002d24 <dwt_initialise+0x178>
        pdw1000local->tempP = 0;
 8002ca2:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	d14d      	bne.n	8002d4a <dwt_initialise+0x19e>
        if(DWT_LOADUCODE & config)
 8002cae:	07e4      	lsls	r4, r4, #31
 8002cb0:	d53f      	bpl.n	8002d32 <dwt_initialise+0x186>
            _dwt_loaducodefromrom();
 8002cb2:	f7ff fe0d 	bl	80028d0 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	8ad1      	ldrh	r1, [r2, #22]
 8002cbc:	2380      	movs	r3, #128	@ 0x80
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff fd7f 	bl	80027c8 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	210a      	movs	r1, #10
 8002cce:	202c      	movs	r0, #44	@ 0x2c
 8002cd0:	f7ff fb2f 	bl	8002332 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 8002cd4:	4c23      	ldr	r4, [pc, #140]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002cd6:	6825      	ldr	r5, [r4, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2004      	movs	r0, #4
 8002cdc:	f7ff faf2 	bl	80022c4 <dwt_read32bitoffsetreg>
 8002ce0:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 8002ce2:	6824      	ldr	r4, [r4, #0]
 8002ce4:	8a62      	ldrh	r2, [r4, #18]
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	4013      	ands	r3, r2
 8002cea:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8002cec:	2100      	movs	r1, #0
 8002cee:	2008      	movs	r0, #8
 8002cf0:	f7ff fae8 	bl	80022c4 <dwt_read32bitoffsetreg>
 8002cf4:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
 8002cf6:	2000      	movs	r0, #0
} // end dwt_initialise()
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002cfc:	681e      	ldr	r6, [r3, #0]
 8002cfe:	2006      	movs	r0, #6
 8002d00:	f7ff fb60 	bl	80023c4 <_dwt_otpread>
 8002d04:	6030      	str	r0, [r6, #0]
 8002d06:	e7be      	b.n	8002c86 <dwt_initialise+0xda>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8002d08:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002d0a:	681e      	ldr	r6, [r3, #0]
 8002d0c:	2007      	movs	r0, #7
 8002d0e:	f7ff fb59 	bl	80023c4 <_dwt_otpread>
 8002d12:	6070      	str	r0, [r6, #4]
 8002d14:	e7bd      	b.n	8002c92 <dwt_initialise+0xe6>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8002d16:	2008      	movs	r0, #8
 8002d18:	f7ff fb54 	bl	80023c4 <_dwt_otpread>
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	7218      	strb	r0, [r3, #8]
 8002d22:	e7bc      	b.n	8002c9e <dwt_initialise+0xf2>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 8002d24:	2009      	movs	r0, #9
 8002d26:	f7ff fb4d 	bl	80023c4 <_dwt_otpread>
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	7258      	strb	r0, [r3, #9]
 8002d30:	e7bb      	b.n	8002caa <dwt_initialise+0xfe>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 8002d32:	2105      	movs	r1, #5
 8002d34:	2036      	movs	r0, #54	@ 0x36
 8002d36:	f7ff fadf 	bl	80022f8 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <dwt_initialise+0x1c4>)
 8002d3c:	4018      	ands	r0, r3
 8002d3e:	b282      	uxth	r2, r0
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 8002d40:	2105      	movs	r1, #5
 8002d42:	2036      	movs	r0, #54	@ 0x36
 8002d44:	f7ff fb01 	bl	800234a <dwt_write16bitoffsetreg>
 8002d48:	e7bc      	b.n	8002cc4 <dwt_initialise+0x118>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 8002d4a:	0764      	lsls	r4, r4, #29
 8002d4c:	d4ba      	bmi.n	8002cc4 <dwt_initialise+0x118>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 8002d4e:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <dwt_initialise+0x1b8>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	8ad1      	ldrh	r1, [r2, #22]
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	82d3      	strh	r3, [r2, #22]
 8002d5c:	e7b2      	b.n	8002cc4 <dwt_initialise+0x118>
        return DWT_ERROR ;
 8002d5e:	2001      	movs	r0, #1
 8002d60:	4240      	negs	r0, r0
 8002d62:	e7c9      	b.n	8002cf8 <dwt_initialise+0x14c>
 8002d64:	20000010 	.word	0x20000010
 8002d68:	deca0130 	.word	0xdeca0130
 8002d6c:	88888888 	.word	0x88888888
 8002d70:	fffffdff 	.word	0xfffffdff

08002d74 <instance_txcallback>:
 *
 * */
void instance_txcallback(const dwt_cb_data_t *txd)
{
    //empty function
}
 8002d74:	4770      	bx	lr

08002d76 <instance_rxgood>:
 *
 * */
void instance_rxgood(const dwt_cb_data_t *rxd)
{
   //empty function
}
 8002d76:	4770      	bx	lr

08002d78 <instance_rxtimeout>:
 *
 * */
void instance_rxtimeout(const dwt_cb_data_t *rxd)
{
    //empty function
}
 8002d78:	4770      	bx	lr

08002d7a <instance_rxerror>:
 *
 * */
void instance_rxerror(const dwt_cb_data_t *rxd)
{
    //empty function
}
 8002d7a:	4770      	bx	lr

08002d7c <instance_init>:
{
 8002d7c:	b570      	push	{r4, r5, r6, lr}
 8002d7e:	0006      	movs	r6, r0
    param_block_t * pbss = get_pbssConfig();
 8002d80:	f7ff fa3c 	bl	80021fc <get_pbssConfig>
 8002d84:	0005      	movs	r5, r0
    instance_data.testAppState = TA_INIT ;
 8002d86:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <instance_init+0xa0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    dwt_softreset();
 8002d8c:	f7ff fee2 	bl	8002b54 <dwt_softreset>
    result = dwt_initialise( DWT_READ_OTP_PID ) ;
 8002d90:	2010      	movs	r0, #16
 8002d92:	f7ff ff0b 	bl	8002bac <dwt_initialise>
 8002d96:	0004      	movs	r4, r0
    if (sleep_enable) {
 8002d98:	2e00      	cmp	r6, #0
 8002d9a:	d030      	beq.n	8002dfe <instance_init+0x82>
        dwt_configuresleep(AON_WCFG_ONW_LLDE | DWT_PRESRV_SLEEP|DWT_CONFIG ,
 8002d9c:	2094      	movs	r0, #148	@ 0x94
 8002d9e:	2105      	movs	r1, #5
 8002da0:	0100      	lsls	r0, r0, #4
 8002da2:	f7ff fb31 	bl	8002408 <dwt_configuresleep>
    dwt_setleds(3);
 8002da6:	2003      	movs	r0, #3
 8002da8:	f7ff fcca 	bl	8002740 <dwt_setleds>
    dwt_setsmarttxpower( (pbss->smartPowerEn != 0) );
 8002dac:	7e2a      	ldrb	r2, [r5, #24]
 8002dae:	7e68      	ldrb	r0, [r5, #25]
 8002db0:	0200      	lsls	r0, r0, #8
 8002db2:	4310      	orrs	r0, r2
 8002db4:	1e43      	subs	r3, r0, #1
 8002db6:	4198      	sbcs	r0, r3
 8002db8:	f7ff fc92 	bl	80026e0 <dwt_setsmarttxpower>
    if((ref.power == 0) && (ref.pgcnt == 0) && (ref.temp == 0) && (ref.pgdly == 0))
 8002dbc:	4b18      	ldr	r3, [pc, #96]	@ (8002e20 <instance_init+0xa4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d108      	bne.n	8002dd6 <instance_init+0x5a>
 8002dc4:	4b16      	ldr	r3, [pc, #88]	@ (8002e20 <instance_init+0xa4>)
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <instance_init+0xa8>)
 8002dca:	421a      	tst	r2, r3
 8002dcc:	d103      	bne.n	8002dd6 <instance_init+0x5a>
 8002dce:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <instance_init+0xa4>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d019      	beq.n	8002e0a <instance_init+0x8e>
    dwt_entersleepaftertx(1);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7ff fb28 	bl	800242c <dwt_entersleepaftertx>
    if (DWT_SUCCESS != result)
 8002ddc:	2c00      	cmp	r4, #0
 8002dde:	d119      	bne.n	8002e14 <instance_init+0x98>
    dwt_setcallbacks(instance_txcallback,
 8002de0:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <instance_init+0xac>)
 8002de2:	4a12      	ldr	r2, [pc, #72]	@ (8002e2c <instance_init+0xb0>)
 8002de4:	4912      	ldr	r1, [pc, #72]	@ (8002e30 <instance_init+0xb4>)
 8002de6:	4813      	ldr	r0, [pc, #76]	@ (8002e34 <instance_init+0xb8>)
 8002de8:	f7ff fca0 	bl	800272c <dwt_setcallbacks>
    instance_data.frame_sn = 0;
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <instance_init+0xa0>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	759a      	strb	r2, [r3, #22]
    instance_data.timeron = 0;
 8002df2:	769a      	strb	r2, [r3, #26]
    instance_data.event[0] = 0;
 8002df4:	75da      	strb	r2, [r3, #23]
    instance_data.event[1] = 0;
 8002df6:	761a      	strb	r2, [r3, #24]
    instance_data.eventCnt = 0;
 8002df8:	765a      	strb	r2, [r3, #25]
}
 8002dfa:	0020      	movs	r0, r4
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
        dwt_configuresleep(AON_WCFG_ONW_LLDE | DWT_PRESRV_SLEEP|DWT_CONFIG ,
 8002dfe:	2094      	movs	r0, #148	@ 0x94
 8002e00:	2104      	movs	r1, #4
 8002e02:	0100      	lsls	r0, r0, #4
 8002e04:	f7ff fb00 	bl	8002408 <dwt_configuresleep>
 8002e08:	e7cd      	b.n	8002da6 <instance_init+0x2a>
      tvc_otp_read_txcfgref(&ref, pbss->dwt_config.chan);
 8002e0a:	7829      	ldrb	r1, [r5, #0]
 8002e0c:	4804      	ldr	r0, [pc, #16]	@ (8002e20 <instance_init+0xa4>)
 8002e0e:	f000 fdc3 	bl	8003998 <tvc_otp_read_txcfgref>
 8002e12:	e7e0      	b.n	8002dd6 <instance_init+0x5a>
        return (DWT_ERROR) ;        // device initialize has failed
 8002e14:	2401      	movs	r4, #1
 8002e16:	4264      	negs	r4, r4
 8002e18:	e7ef      	b.n	8002dfa <instance_init+0x7e>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	2000049c 	.word	0x2000049c
 8002e20:	200004c0 	.word	0x200004c0
 8002e24:	ffff00ff 	.word	0xffff00ff
 8002e28:	08002d7b 	.word	0x08002d7b
 8002e2c:	08002d79 	.word	0x08002d79
 8002e30:	08002d77 	.word	0x08002d77
 8002e34:	08002d75 	.word	0x08002d75

08002e38 <instance_config>:
{
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	0004      	movs	r4, r0
    dwt_configure(&pbss->dwt_config) ;
 8002e3e:	f7ff fb29 	bl	8002494 <dwt_configure>
    configTx.PGdly = ref.pgdly;
 8002e42:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <instance_config+0x3c>)
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4669      	mov	r1, sp
 8002e48:	700a      	strb	r2, [r1, #0]
    configTx.power = ref.power;
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	9101      	str	r1, [sp, #4]
    if(pbss->smartPowerEn == 0)
 8002e4e:	7e22      	ldrb	r2, [r4, #24]
 8002e50:	7e63      	ldrb	r3, [r4, #25]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	4313      	orrs	r3, r2
 8002e56:	d107      	bne.n	8002e68 <instance_config+0x30>
        uint32 pow = configTx.power & 0xff;
 8002e58:	22ff      	movs	r2, #255	@ 0xff
 8002e5a:	400a      	ands	r2, r1
        configTx.power = (pow << 24) + (pow << 16) + (pow << 8) + pow;
 8002e5c:	0211      	lsls	r1, r2, #8
 8002e5e:	188b      	adds	r3, r1, r2
 8002e60:	041b      	lsls	r3, r3, #16
 8002e62:	185b      	adds	r3, r3, r1
 8002e64:	189b      	adds	r3, r3, r2
 8002e66:	9301      	str	r3, [sp, #4]
    dwt_configuretxrf(&configTx);
 8002e68:	4668      	mov	r0, sp
 8002e6a:	f7ff fa8e 	bl	800238a <dwt_configuretxrf>
}
 8002e6e:	b002      	add	sp, #8
 8002e70:	bd10      	pop	{r4, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	200004c0 	.word	0x200004c0

08002e78 <lis3dh_i2c_read>:


#define I2C_AUTO_INCREMENT (0x80)

static bool lis3dh_i2c_read(lis3dh_sensor_t* dev, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002e78:	b530      	push	{r4, r5, lr}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	0004      	movs	r4, r0
 8002e7e:	000d      	movs	r5, r1
    if (!dev || !data) return false;
 8002e80:	2800      	cmp	r0, #0
 8002e82:	d019      	beq.n	8002eb8 <lis3dh_i2c_read+0x40>
 8002e84:	2a00      	cmp	r2, #0
 8002e86:	d019      	beq.n	8002ebc <lis3dh_i2c_read+0x44>

    debug_dev ("Read %d byte from i2c slave register %02x.", __FUNCTION__, dev, len, reg);

    if (len > 1)
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d903      	bls.n	8002e94 <lis3dh_i2c_read+0x1c>
        reg |= I2C_AUTO_INCREMENT;
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	4249      	negs	r1, r1
 8002e90:	430d      	orrs	r5, r1
 8002e92:	b2ed      	uxtb	r5, r5
    
    int result = i2c_slave_read(dev->bus, dev->addr, reg, data, len);
 8002e94:	7961      	ldrb	r1, [r4, #5]
 8002e96:	7920      	ldrb	r0, [r4, #4]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	002a      	movs	r2, r5
 8002e9e:	f7fe fbf1 	bl	8001684 <i2c_slave_read>

    if (result)
 8002ea2:	2800      	cmp	r0, #0
 8002ea4:	d102      	bne.n	8002eac <lis3dh_i2c_read+0x34>
    for (int i=0; i < len; i++)
        printf("%02x ", data[i]);
    printf("\n");
#   endif

    return true;
 8002ea6:	2001      	movs	r0, #1
}
 8002ea8:	b003      	add	sp, #12
 8002eaa:	bd30      	pop	{r4, r5, pc}
        dev->error_code |= (result == -EBUSY) ? LIS3DH_I2C_BUSY : LIS3DH_I2C_READ_FAILED;
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	6023      	str	r3, [r4, #0]
        return false;
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	e7f7      	b.n	8002ea8 <lis3dh_i2c_read+0x30>
    if (!dev || !data) return false;
 8002eb8:	2000      	movs	r0, #0
 8002eba:	e7f5      	b.n	8002ea8 <lis3dh_i2c_read+0x30>
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	e7f3      	b.n	8002ea8 <lis3dh_i2c_read+0x30>

08002ec0 <lis3dh_spi_read>:
{
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	46ce      	mov	lr, r9
 8002ec4:	4647      	mov	r7, r8
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	0006      	movs	r6, r0
 8002ecc:	0015      	movs	r5, r2
 8002ece:	001c      	movs	r4, r3
    if (!dev || !data) return false;
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d03b      	beq.n	8002f4c <lis3dh_spi_read+0x8c>
 8002ed4:	2a00      	cmp	r2, #0
 8002ed6:	d03b      	beq.n	8002f50 <lis3dh_spi_read+0x90>
    if (len >= LIS3DH_SPI_BUF_SIZE)
 8002ed8:	2b3f      	cmp	r3, #63	@ 0x3f
 8002eda:	d909      	bls.n	8002ef0 <lis3dh_spi_read+0x30>
        dev->error_code |= LIS3DH_SPI_BUFFER_OVERFLOW;
 8002edc:	6803      	ldr	r3, [r0, #0]
 8002ede:	2206      	movs	r2, #6
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	6003      	str	r3, [r0, #0]
        return false;
 8002ee4:	2000      	movs	r0, #0
}
 8002ee6:	b003      	add	sp, #12
 8002ee8:	bcc0      	pop	{r6, r7}
 8002eea:	46b9      	mov	r9, r7
 8002eec:	46b0      	mov	r8, r6
 8002eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t addr = (reg & 0x3f) | LIS3DH_SPI_READ_FLAG | LIS3DH_SPI_AUTO_INC_FLAG;
 8002ef0:	2340      	movs	r3, #64	@ 0x40
 8002ef2:	425b      	negs	r3, r3
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4698      	mov	r8, r3
    memset (mosi, 0xff, LIS3DH_SPI_BUF_SIZE);
 8002efa:	4f16      	ldr	r7, [pc, #88]	@ (8002f54 <lis3dh_spi_read+0x94>)
 8002efc:	2240      	movs	r2, #64	@ 0x40
 8002efe:	21ff      	movs	r1, #255	@ 0xff
 8002f00:	0038      	movs	r0, r7
 8002f02:	f000 fec5 	bl	8003c90 <memset>
    memset (miso, 0xff, LIS3DH_SPI_BUF_SIZE);
 8002f06:	4b14      	ldr	r3, [pc, #80]	@ (8002f58 <lis3dh_spi_read+0x98>)
 8002f08:	2240      	movs	r2, #64	@ 0x40
 8002f0a:	21ff      	movs	r1, #255	@ 0xff
 8002f0c:	4699      	mov	r9, r3
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 febe 	bl	8003c90 <memset>
    mosi[0] = addr;
 8002f14:	4643      	mov	r3, r8
 8002f16:	703b      	strb	r3, [r7, #0]
    if (!spi_transfer_pf (dev->bus, dev->cs, mosi, miso, len+1))
 8002f18:	79b1      	ldrb	r1, [r6, #6]
 8002f1a:	7930      	ldrb	r0, [r6, #4]
 8002f1c:	1c63      	adds	r3, r4, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	464b      	mov	r3, r9
 8002f24:	003a      	movs	r2, r7
 8002f26:	f7fe fbab 	bl	8001680 <spi_transfer_pf>
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d001      	beq.n	8002f32 <lis3dh_spi_read+0x72>
    for (int i=0; i < len; i++)
 8002f2e:	2100      	movs	r1, #0
 8002f30:	e009      	b.n	8002f46 <lis3dh_spi_read+0x86>
        dev->error_code |= LIS3DH_SPI_READ_FAILED;
 8002f32:	6833      	ldr	r3, [r6, #0]
 8002f34:	2205      	movs	r2, #5
 8002f36:	4313      	orrs	r3, r2
 8002f38:	6033      	str	r3, [r6, #0]
        return false;
 8002f3a:	e7d4      	b.n	8002ee6 <lis3dh_spi_read+0x26>
      data[i] = miso[i+1];
 8002f3c:	1c4b      	adds	r3, r1, #1
 8002f3e:	4a06      	ldr	r2, [pc, #24]	@ (8002f58 <lis3dh_spi_read+0x98>)
 8002f40:	5cd2      	ldrb	r2, [r2, r3]
 8002f42:	546a      	strb	r2, [r5, r1]
    for (int i=0; i < len; i++)
 8002f44:	0019      	movs	r1, r3
 8002f46:	428c      	cmp	r4, r1
 8002f48:	dcf8      	bgt.n	8002f3c <lis3dh_spi_read+0x7c>
 8002f4a:	e7cc      	b.n	8002ee6 <lis3dh_spi_read+0x26>
    if (!dev || !data) return false;
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e7ca      	b.n	8002ee6 <lis3dh_spi_read+0x26>
 8002f50:	2000      	movs	r0, #0
 8002f52:	e7c8      	b.n	8002ee6 <lis3dh_spi_read+0x26>
 8002f54:	20000550 	.word	0x20000550
 8002f58:	20000510 	.word	0x20000510

08002f5c <lis3dh_spi_write>:
{
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	0006      	movs	r6, r0
 8002f62:	0008      	movs	r0, r1
    if (!dev || !data) return false;
 8002f64:	2e00      	cmp	r6, #0
 8002f66:	d02b      	beq.n	8002fc0 <lis3dh_spi_write+0x64>
 8002f68:	2a00      	cmp	r2, #0
 8002f6a:	d02b      	beq.n	8002fc4 <lis3dh_spi_write+0x68>
    uint8_t addr = (reg & 0x3f) | LIS3DH_SPI_WRITE_FLAG | LIS3DH_SPI_AUTO_INC_FLAG;
 8002f6c:	213f      	movs	r1, #63	@ 0x3f
 8002f6e:	4001      	ands	r1, r0
 8002f70:	2040      	movs	r0, #64	@ 0x40
 8002f72:	4301      	orrs	r1, r0
 8002f74:	b2c9      	uxtb	r1, r1
    if (len >= LIS3DH_SPI_BUF_SIZE)
 8002f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f78:	d803      	bhi.n	8002f82 <lis3dh_spi_write+0x26>
    mosi[0] = addr;
 8002f7a:	4813      	ldr	r0, [pc, #76]	@ (8002fc8 <lis3dh_spi_write+0x6c>)
 8002f7c:	7001      	strb	r1, [r0, #0]
    for (int i = 0; i < len; i++)
 8002f7e:	2100      	movs	r1, #0
 8002f80:	e00a      	b.n	8002f98 <lis3dh_spi_write+0x3c>
        dev->error_code |= LIS3DH_SPI_BUFFER_OVERFLOW;
 8002f82:	6833      	ldr	r3, [r6, #0]
 8002f84:	2206      	movs	r2, #6
 8002f86:	4313      	orrs	r3, r2
 8002f88:	6033      	str	r3, [r6, #0]
        return false;
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	e011      	b.n	8002fb2 <lis3dh_spi_write+0x56>
        mosi[i+1] = data[i];
 8002f8e:	1854      	adds	r4, r2, r1
 8002f90:	3101      	adds	r1, #1
 8002f92:	7825      	ldrb	r5, [r4, #0]
 8002f94:	4c0c      	ldr	r4, [pc, #48]	@ (8002fc8 <lis3dh_spi_write+0x6c>)
 8002f96:	5465      	strb	r5, [r4, r1]
    for (int i = 0; i < len; i++)
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	dcf8      	bgt.n	8002f8e <lis3dh_spi_write+0x32>
    if (!spi_transfer_pf (dev->bus, dev->cs, mosi, NULL, len+1))
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <lis3dh_spi_write+0x6c>)
 8002f9e:	79b1      	ldrb	r1, [r6, #6]
 8002fa0:	7930      	ldrb	r0, [r6, #4]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f7fe fb69 	bl	8001680 <spi_transfer_pf>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <lis3dh_spi_write+0x5a>
}
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
        dev->error_code |= LIS3DH_SPI_WRITE_FAILED;
 8002fb6:	6833      	ldr	r3, [r6, #0]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	6033      	str	r3, [r6, #0]
        return false;
 8002fbe:	e7f8      	b.n	8002fb2 <lis3dh_spi_write+0x56>
    if (!dev || !data) return false;
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7f6      	b.n	8002fb2 <lis3dh_spi_write+0x56>
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e7f4      	b.n	8002fb2 <lis3dh_spi_write+0x56>
 8002fc8:	200004d0 	.word	0x200004d0

08002fcc <lis3dh_i2c_write>:


static bool lis3dh_i2c_write(lis3dh_sensor_t* dev, uint8_t reg, uint8_t *data, uint16_t len)
{
 8002fcc:	b530      	push	{r4, r5, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	0004      	movs	r4, r0
 8002fd2:	000d      	movs	r5, r1
    if (!dev || !data) return false;
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d019      	beq.n	800300c <lis3dh_i2c_write+0x40>
 8002fd8:	2a00      	cmp	r2, #0
 8002fda:	d019      	beq.n	8003010 <lis3dh_i2c_write+0x44>

    debug_dev ("Write %d byte to i2c slave register %02x.", __FUNCTION__, dev, len, reg);

    if (len > 1)
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d903      	bls.n	8002fe8 <lis3dh_i2c_write+0x1c>
        reg |= I2C_AUTO_INCREMENT;
 8002fe0:	2180      	movs	r1, #128	@ 0x80
 8002fe2:	4249      	negs	r1, r1
 8002fe4:	430d      	orrs	r5, r1
 8002fe6:	b2ed      	uxtb	r5, r5

    int result = i2c_slave_write(dev->bus, dev->addr, reg, data, len);
 8002fe8:	7961      	ldrb	r1, [r4, #5]
 8002fea:	7920      	ldrb	r0, [r4, #4]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	0013      	movs	r3, r2
 8002ff0:	002a      	movs	r2, r5
 8002ff2:	f7fe fbd9 	bl	80017a8 <i2c_slave_write>

    if (result)
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d102      	bne.n	8003000 <lis3dh_i2c_write+0x34>
    for (int i=0; i < len; i++)
        printf("%02x ", data[i]);
    printf("\n");
#   endif

    return true;
 8002ffa:	2001      	movs	r0, #1
}
 8002ffc:	b003      	add	sp, #12
 8002ffe:	bd30      	pop	{r4, r5, pc}
        dev->error_code |= (result == -EBUSY) ? LIS3DH_I2C_BUSY : LIS3DH_I2C_WRITE_FAILED;
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	2202      	movs	r2, #2
 8003004:	4313      	orrs	r3, r2
 8003006:	6023      	str	r3, [r4, #0]
        return false;
 8003008:	2000      	movs	r0, #0
 800300a:	e7f7      	b.n	8002ffc <lis3dh_i2c_write+0x30>
    if (!dev || !data) return false;
 800300c:	2000      	movs	r0, #0
 800300e:	e7f5      	b.n	8002ffc <lis3dh_i2c_write+0x30>
 8003010:	2000      	movs	r0, #0
 8003012:	e7f3      	b.n	8002ffc <lis3dh_i2c_write+0x30>

08003014 <lis3dh_reg_read>:
{
 8003014:	b510      	push	{r4, lr}
    if (!dev || !data) return false;
 8003016:	2800      	cmp	r0, #0
 8003018:	d00a      	beq.n	8003030 <lis3dh_reg_read+0x1c>
 800301a:	2a00      	cmp	r2, #0
 800301c:	d00a      	beq.n	8003034 <lis3dh_reg_read+0x20>
    return (dev->addr) ? lis3dh_i2c_read (dev, reg, data, len)
 800301e:	7944      	ldrb	r4, [r0, #5]
                       : lis3dh_spi_read (dev, reg, data, len);
 8003020:	2c00      	cmp	r4, #0
 8003022:	d002      	beq.n	800302a <lis3dh_reg_read+0x16>
    return (dev->addr) ? lis3dh_i2c_read (dev, reg, data, len)
 8003024:	f7ff ff28 	bl	8002e78 <lis3dh_i2c_read>
}
 8003028:	bd10      	pop	{r4, pc}
                       : lis3dh_spi_read (dev, reg, data, len);
 800302a:	f7ff ff49 	bl	8002ec0 <lis3dh_spi_read>
 800302e:	e7fb      	b.n	8003028 <lis3dh_reg_read+0x14>
    if (!dev || !data) return false;
 8003030:	2000      	movs	r0, #0
 8003032:	e7f9      	b.n	8003028 <lis3dh_reg_read+0x14>
 8003034:	2000      	movs	r0, #0
 8003036:	e7f7      	b.n	8003028 <lis3dh_reg_read+0x14>

08003038 <lis3dh_is_available>:
{
 8003038:	b510      	push	{r4, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	1e04      	subs	r4, r0, #0
    if (!dev)
 800303e:	d013      	beq.n	8003068 <lis3dh_is_available+0x30>
    dev->error_code = LIS3DH_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	6003      	str	r3, [r0, #0]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_WHO_AM_I, &chip_id, 1))
 8003044:	3301      	adds	r3, #1
 8003046:	466a      	mov	r2, sp
 8003048:	3207      	adds	r2, #7
 800304a:	210f      	movs	r1, #15
 800304c:	f7ff ffe2 	bl	8003014 <lis3dh_reg_read>
 8003050:	2800      	cmp	r0, #0
 8003052:	d00a      	beq.n	800306a <lis3dh_is_available+0x32>
    if (chip_id != LIS3DH_CHIP_ID)
 8003054:	466b      	mov	r3, sp
 8003056:	3307      	adds	r3, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b33      	cmp	r3, #51	@ 0x33
 800305c:	d005      	beq.n	800306a <lis3dh_is_available+0x32>
        dev->error_code = LIS3DH_WRONG_CHIP_ID;
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	6023      	str	r3, [r4, #0]
        return false;
 8003064:	2000      	movs	r0, #0
 8003066:	e000      	b.n	800306a <lis3dh_is_available+0x32>
		return false;
 8003068:	2000      	movs	r0, #0
}
 800306a:	b002      	add	sp, #8
 800306c:	bd10      	pop	{r4, pc}

0800306e <lis3dh_get_hpf_ref>:
{
 800306e:	b510      	push	{r4, lr}
 8003070:	b082      	sub	sp, #8
 8003072:	1e04      	subs	r4, r0, #0
    if (!dev) return 0;
 8003074:	d014      	beq.n	80030a0 <lis3dh_get_hpf_ref+0x32>
    dev->error_code = LIS3DH_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	6003      	str	r3, [r0, #0]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_REFERENCE, (uint8_t*)&ref, 1))
 800307a:	3301      	adds	r3, #1
 800307c:	466a      	mov	r2, sp
 800307e:	3207      	adds	r2, #7
 8003080:	2126      	movs	r1, #38	@ 0x26
 8003082:	f7ff ffc7 	bl	8003014 <lis3dh_reg_read>
 8003086:	2800      	cmp	r0, #0
 8003088:	d004      	beq.n	8003094 <lis3dh_get_hpf_ref+0x26>
    return ref;
 800308a:	466b      	mov	r3, sp
 800308c:	2007      	movs	r0, #7
 800308e:	5618      	ldrsb	r0, [r3, r0]
}
 8003090:	b002      	add	sp, #8
 8003092:	bd10      	pop	{r4, pc}
        dev->error_code |= LIS3DH_CONFIG_HPF_FAILED;
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	2390      	movs	r3, #144	@ 0x90
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	4313      	orrs	r3, r2
 800309c:	6023      	str	r3, [r4, #0]
        return 0;
 800309e:	e7f7      	b.n	8003090 <lis3dh_get_hpf_ref+0x22>
    if (!dev) return 0;
 80030a0:	2000      	movs	r0, #0
 80030a2:	e7f5      	b.n	8003090 <lis3dh_get_hpf_ref+0x22>

080030a4 <lis3dh_reg_write>:
{
 80030a4:	b510      	push	{r4, lr}
    if (!dev || !data) return false;
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d00a      	beq.n	80030c0 <lis3dh_reg_write+0x1c>
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d00a      	beq.n	80030c4 <lis3dh_reg_write+0x20>
    return (dev->addr) ? lis3dh_i2c_write (dev, reg, data, len)
 80030ae:	7944      	ldrb	r4, [r0, #5]
                       : lis3dh_spi_write (dev, reg, data, len);
 80030b0:	2c00      	cmp	r4, #0
 80030b2:	d002      	beq.n	80030ba <lis3dh_reg_write+0x16>
    return (dev->addr) ? lis3dh_i2c_write (dev, reg, data, len)
 80030b4:	f7ff ff8a 	bl	8002fcc <lis3dh_i2c_write>
}
 80030b8:	bd10      	pop	{r4, pc}
                       : lis3dh_spi_write (dev, reg, data, len);
 80030ba:	f7ff ff4f 	bl	8002f5c <lis3dh_spi_write>
 80030be:	e7fb      	b.n	80030b8 <lis3dh_reg_write+0x14>
    if (!dev || !data) return false;
 80030c0:	2000      	movs	r0, #0
 80030c2:	e7f9      	b.n	80030b8 <lis3dh_reg_write+0x14>
 80030c4:	2000      	movs	r0, #0
 80030c6:	e7f7      	b.n	80030b8 <lis3dh_reg_write+0x14>

080030c8 <lis3dh_reset>:
{
 80030c8:	b510      	push	{r4, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	1e04      	subs	r4, r0, #0
    if (!dev) return false;
 80030ce:	d039      	beq.n	8003144 <lis3dh_reset+0x7c>
    dev->error_code = LIS3DH_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	6003      	str	r3, [r0, #0]
    uint8_t reg[8] = { 0 };
 80030d4:	2208      	movs	r2, #8
 80030d6:	2100      	movs	r1, #0
 80030d8:	4668      	mov	r0, sp
 80030da:	f000 fdd9 	bl	8003c90 <memset>
    lis3dh_reg_write (dev, LIS3DH_REG_TEMP_CFG , reg, 8);
 80030de:	2308      	movs	r3, #8
 80030e0:	466a      	mov	r2, sp
 80030e2:	211f      	movs	r1, #31
 80030e4:	0020      	movs	r0, r4
 80030e6:	f7ff ffdd 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_FIFO_CTRL, reg, 1);
 80030ea:	2301      	movs	r3, #1
 80030ec:	466a      	mov	r2, sp
 80030ee:	212e      	movs	r1, #46	@ 0x2e
 80030f0:	0020      	movs	r0, r4
 80030f2:	f7ff ffd7 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT1_CFG , reg, 1);
 80030f6:	2301      	movs	r3, #1
 80030f8:	466a      	mov	r2, sp
 80030fa:	2130      	movs	r1, #48	@ 0x30
 80030fc:	0020      	movs	r0, r4
 80030fe:	f7ff ffd1 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT1_THS , reg, 2);
 8003102:	2302      	movs	r3, #2
 8003104:	466a      	mov	r2, sp
 8003106:	2132      	movs	r1, #50	@ 0x32
 8003108:	0020      	movs	r0, r4
 800310a:	f7ff ffcb 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT2_CFG , reg, 1);
 800310e:	2301      	movs	r3, #1
 8003110:	466a      	mov	r2, sp
 8003112:	2134      	movs	r1, #52	@ 0x34
 8003114:	0020      	movs	r0, r4
 8003116:	f7ff ffc5 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_INT2_THS , reg, 2);
 800311a:	2302      	movs	r3, #2
 800311c:	466a      	mov	r2, sp
 800311e:	2136      	movs	r1, #54	@ 0x36
 8003120:	0020      	movs	r0, r4
 8003122:	f7ff ffbf 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_CLICK_CFG, reg, 1);
 8003126:	2301      	movs	r3, #1
 8003128:	466a      	mov	r2, sp
 800312a:	2138      	movs	r1, #56	@ 0x38
 800312c:	0020      	movs	r0, r4
 800312e:	f7ff ffb9 	bl	80030a4 <lis3dh_reg_write>
    lis3dh_reg_write (dev, LIS3DH_REG_CLICK_THS, reg, 4);
 8003132:	2304      	movs	r3, #4
 8003134:	466a      	mov	r2, sp
 8003136:	213a      	movs	r1, #58	@ 0x3a
 8003138:	0020      	movs	r0, r4
 800313a:	f7ff ffb3 	bl	80030a4 <lis3dh_reg_write>
    return true;
 800313e:	2001      	movs	r0, #1
}
 8003140:	b002      	add	sp, #8
 8003142:	bd10      	pop	{r4, pc}
    if (!dev) return false;
 8003144:	2000      	movs	r0, #0
 8003146:	e7fb      	b.n	8003140 <lis3dh_reset+0x78>

08003148 <lis3dh_init_sensor>:
{
 8003148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314a:	b083      	sub	sp, #12
 800314c:	0007      	movs	r7, r0
 800314e:	000e      	movs	r6, r1
 8003150:	0015      	movs	r5, r2
    if ((dev = malloc (sizeof(lis3dh_sensor_t))) == NULL)
 8003152:	200c      	movs	r0, #12
 8003154:	f000 fc88 	bl	8003a68 <malloc>
 8003158:	1e04      	subs	r4, r0, #0
 800315a:	d064      	beq.n	8003226 <lis3dh_init_sensor+0xde>
    sensor = dev;
 800315c:	4b33      	ldr	r3, [pc, #204]	@ (800322c <lis3dh_init_sensor+0xe4>)
 800315e:	6018      	str	r0, [r3, #0]
    dev->bus    = bus;
 8003160:	7107      	strb	r7, [r0, #4]
    dev->addr   = addr;
 8003162:	7146      	strb	r6, [r0, #5]
    dev->cs     = cs;
 8003164:	7185      	strb	r5, [r0, #6]
    dev->error_code = LIS3DH_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	6003      	str	r3, [r0, #0]
    dev->scale      = lis3dh_scale_2_g;
 800316a:	71c3      	strb	r3, [r0, #7]
    dev->fifo_mode  = lis3dh_bypass;
 800316c:	7243      	strb	r3, [r0, #9]
    dev->fifo_first = true;
 800316e:	3301      	adds	r3, #1
 8003170:	7283      	strb	r3, [r0, #10]
    if (!addr && !spi_device_init (bus, cs))
 8003172:	2e00      	cmp	r6, #0
 8003174:	d105      	bne.n	8003182 <lis3dh_init_sensor+0x3a>
 8003176:	0029      	movs	r1, r5
 8003178:	0038      	movs	r0, r7
 800317a:	f7fe fa7f 	bl	800167c <spi_device_init>
 800317e:	2800      	cmp	r0, #0
 8003180:	d038      	beq.n	80031f4 <lis3dh_init_sensor+0xac>
    if (!lis3dh_is_available (dev))
 8003182:	0020      	movs	r0, r4
 8003184:	f7ff ff58 	bl	8003038 <lis3dh_is_available>
 8003188:	2800      	cmp	r0, #0
 800318a:	d03b      	beq.n	8003204 <lis3dh_init_sensor+0xbc>
    if (!lis3dh_reset(dev))
 800318c:	0020      	movs	r0, r4
 800318e:	f7ff ff9b 	bl	80030c8 <lis3dh_reset>
 8003192:	2800      	cmp	r0, #0
 8003194:	d03e      	beq.n	8003214 <lis3dh_init_sensor+0xcc>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, lis3dh_scale_2_g);
 8003196:	2301      	movs	r3, #1
 8003198:	aa01      	add	r2, sp, #4
 800319a:	2123      	movs	r1, #35	@ 0x23
 800319c:	0020      	movs	r0, r4
 800319e:	f7ff ff39 	bl	8003014 <lis3dh_reg_read>
 80031a2:	2800      	cmp	r0, #0
 80031a4:	d03e      	beq.n	8003224 <lis3dh_init_sensor+0xdc>
 80031a6:	466b      	mov	r3, sp
 80031a8:	791b      	ldrb	r3, [r3, #4]
 80031aa:	2230      	movs	r2, #48	@ 0x30
 80031ac:	4393      	bics	r3, r2
 80031ae:	466a      	mov	r2, sp
 80031b0:	7113      	strb	r3, [r2, #4]
 80031b2:	2301      	movs	r3, #1
 80031b4:	aa01      	add	r2, sp, #4
 80031b6:	2123      	movs	r1, #35	@ 0x23
 80031b8:	0020      	movs	r0, r4
 80031ba:	f7ff ff73 	bl	80030a4 <lis3dh_reg_write>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d030      	beq.n	8003224 <lis3dh_init_sensor+0xdc>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, BDU, 1);
 80031c2:	2301      	movs	r3, #1
 80031c4:	aa01      	add	r2, sp, #4
 80031c6:	2123      	movs	r1, #35	@ 0x23
 80031c8:	0020      	movs	r0, r4
 80031ca:	f7ff ff23 	bl	8003014 <lis3dh_reg_read>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d00e      	beq.n	80031f0 <lis3dh_init_sensor+0xa8>
 80031d2:	466b      	mov	r3, sp
 80031d4:	791a      	ldrb	r2, [r3, #4]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	425b      	negs	r3, r3
 80031da:	4313      	orrs	r3, r2
 80031dc:	466a      	mov	r2, sp
 80031de:	7113      	strb	r3, [r2, #4]
 80031e0:	2301      	movs	r3, #1
 80031e2:	aa01      	add	r2, sp, #4
 80031e4:	2123      	movs	r1, #35	@ 0x23
 80031e6:	0020      	movs	r0, r4
 80031e8:	f7ff ff5c 	bl	80030a4 <lis3dh_reg_write>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d11a      	bne.n	8003226 <lis3dh_init_sensor+0xde>
 80031f0:	2400      	movs	r4, #0
 80031f2:	e018      	b.n	8003226 <lis3dh_init_sensor+0xde>
        free (dev);
 80031f4:	0020      	movs	r0, r4
 80031f6:	f000 fc41 	bl	8003a7c <free>
        sensor = NULL;
 80031fa:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <lis3dh_init_sensor+0xe4>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
        return NULL;
 8003200:	2400      	movs	r4, #0
 8003202:	e010      	b.n	8003226 <lis3dh_init_sensor+0xde>
        free (dev);
 8003204:	0020      	movs	r0, r4
 8003206:	f000 fc39 	bl	8003a7c <free>
        sensor = NULL;
 800320a:	4b08      	ldr	r3, [pc, #32]	@ (800322c <lis3dh_init_sensor+0xe4>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
        return NULL;
 8003210:	2400      	movs	r4, #0
 8003212:	e008      	b.n	8003226 <lis3dh_init_sensor+0xde>
        free (dev);
 8003214:	0020      	movs	r0, r4
 8003216:	f000 fc31 	bl	8003a7c <free>
        sensor = NULL;
 800321a:	4b04      	ldr	r3, [pc, #16]	@ (800322c <lis3dh_init_sensor+0xe4>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
        return NULL;
 8003220:	2400      	movs	r4, #0
 8003222:	e000      	b.n	8003226 <lis3dh_init_sensor+0xde>
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, lis3dh_scale_2_g);
 8003224:	2400      	movs	r4, #0
}
 8003226:	0020      	movs	r0, r4
 8003228:	b003      	add	sp, #12
 800322a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800322c:	20000590 	.word	0x20000590

08003230 <lis3dh_set_mode>:
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	46d6      	mov	lr, sl
 8003234:	4647      	mov	r7, r8
 8003236:	b580      	push	{r7, lr}
 8003238:	b085      	sub	sp, #20
 800323a:	0004      	movs	r4, r0
 800323c:	9101      	str	r1, [sp, #4]
 800323e:	0015      	movs	r5, r2
 8003240:	001e      	movs	r6, r3
 8003242:	ab0c      	add	r3, sp, #48	@ 0x30
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	469a      	mov	sl, r3
 8003248:	ab0d      	add	r3, sp, #52	@ 0x34
 800324a:	781f      	ldrb	r7, [r3, #0]
    if (!dev) return false;
 800324c:	2800      	cmp	r0, #0
 800324e:	d009      	beq.n	8003264 <lis3dh_set_mode+0x34>
    dev->error_code = LIS3DH_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	6003      	str	r3, [r0, #0]
    dev->res = res;
 8003254:	7202      	strb	r2, [r0, #8]
    if (!lis3dh_reg_read (dev, LIS3DH_REG_CTRL1, (uint8_t*)&reg, 1))
 8003256:	3301      	adds	r3, #1
 8003258:	aa03      	add	r2, sp, #12
 800325a:	2120      	movs	r1, #32
 800325c:	f7ff feda 	bl	8003014 <lis3dh_reg_read>
 8003260:	2800      	cmp	r0, #0
 8003262:	d105      	bne.n	8003270 <lis3dh_set_mode+0x40>
}
 8003264:	2000      	movs	r0, #0
 8003266:	b005      	add	sp, #20
 8003268:	bcc0      	pop	{r6, r7}
 800326a:	46ba      	mov	sl, r7
 800326c:	46b0      	mov	r8, r6
 800326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    old_odr = reg.ODR;
 8003270:	ab03      	add	r3, sp, #12
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	0910      	lsrs	r0, r2, #4
 8003276:	4680      	mov	r8, r0
    reg.Xen  = x;
 8003278:	2101      	movs	r1, #1
 800327a:	400e      	ands	r6, r1
 800327c:	2001      	movs	r0, #1
 800327e:	4382      	bics	r2, r0
 8003280:	4332      	orrs	r2, r6
 8003282:	701a      	strb	r2, [r3, #0]
    reg.Yen  = y;
 8003284:	4652      	mov	r2, sl
 8003286:	400a      	ands	r2, r1
 8003288:	0052      	lsls	r2, r2, #1
 800328a:	7818      	ldrb	r0, [r3, #0]
 800328c:	2602      	movs	r6, #2
 800328e:	43b0      	bics	r0, r6
 8003290:	4302      	orrs	r2, r0
 8003292:	701a      	strb	r2, [r3, #0]
    reg.Zen  = z;
 8003294:	003a      	movs	r2, r7
 8003296:	400a      	ands	r2, r1
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	7818      	ldrb	r0, [r3, #0]
 800329c:	3602      	adds	r6, #2
 800329e:	43b0      	bics	r0, r6
 80032a0:	4302      	orrs	r2, r0
 80032a2:	701a      	strb	r2, [r3, #0]
    reg.ODR  = odr;
 80032a4:	9f01      	ldr	r7, [sp, #4]
 80032a6:	0138      	lsls	r0, r7, #4
 80032a8:	b2d6      	uxtb	r6, r2
 80032aa:	220f      	movs	r2, #15
 80032ac:	4032      	ands	r2, r6
 80032ae:	4302      	orrs	r2, r0
 80032b0:	701a      	strb	r2, [r3, #0]
    reg.LPen = (res == lis3dh_low_power);
 80032b2:	426a      	negs	r2, r5
 80032b4:	416a      	adcs	r2, r5
 80032b6:	4011      	ands	r1, r2
 80032b8:	00c9      	lsls	r1, r1, #3
 80032ba:	781a      	ldrb	r2, [r3, #0]
 80032bc:	2008      	movs	r0, #8
 80032be:	4382      	bics	r2, r0
 80032c0:	430a      	orrs	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4,
 80032c4:	2301      	movs	r3, #1
 80032c6:	aa02      	add	r2, sp, #8
 80032c8:	2123      	movs	r1, #35	@ 0x23
 80032ca:	0020      	movs	r0, r4
 80032cc:	f7ff fea2 	bl	8003014 <lis3dh_reg_read>
 80032d0:	2800      	cmp	r0, #0
 80032d2:	d0c7      	beq.n	8003264 <lis3dh_set_mode+0x34>
 80032d4:	3d02      	subs	r5, #2
 80032d6:	426b      	negs	r3, r5
 80032d8:	415d      	adcs	r5, r3
 80032da:	00ed      	lsls	r5, r5, #3
 80032dc:	ab02      	add	r3, sp, #8
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2208      	movs	r2, #8
 80032e2:	4393      	bics	r3, r2
 80032e4:	432b      	orrs	r3, r5
 80032e6:	aa02      	add	r2, sp, #8
 80032e8:	7013      	strb	r3, [r2, #0]
 80032ea:	2301      	movs	r3, #1
 80032ec:	2123      	movs	r1, #35	@ 0x23
 80032ee:	0020      	movs	r0, r4
 80032f0:	f7ff fed8 	bl	80030a4 <lis3dh_reg_write>
 80032f4:	2800      	cmp	r0, #0
 80032f6:	d0b5      	beq.n	8003264 <lis3dh_set_mode+0x34>
    if (!lis3dh_reg_write (dev, LIS3DH_REG_CTRL1, (uint8_t*)&reg, 1))
 80032f8:	2301      	movs	r3, #1
 80032fa:	aa03      	add	r2, sp, #12
 80032fc:	2120      	movs	r1, #32
 80032fe:	0020      	movs	r0, r4
 8003300:	f7ff fed0 	bl	80030a4 <lis3dh_reg_write>
 8003304:	2800      	cmp	r0, #0
 8003306:	d0ad      	beq.n	8003264 <lis3dh_set_mode+0x34>
    if (old_odr == lis3dh_power_down && odr != lis3dh_power_down)
 8003308:	4643      	mov	r3, r8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1aa      	bne.n	8003264 <lis3dh_set_mode+0x34>
 800330e:	2f00      	cmp	r7, #0
 8003310:	d0a8      	beq.n	8003264 <lis3dh_set_mode+0x34>
    	LL_mDelay(100);
 8003312:	2064      	movs	r0, #100	@ 0x64
 8003314:	f7fd ff62 	bl	80011dc <LL_mDelay>
 8003318:	e7a4      	b.n	8003264 <lis3dh_set_mode+0x34>

0800331a <lis3dh_set_scale>:
{
 800331a:	b530      	push	{r4, r5, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	0004      	movs	r4, r0
 8003320:	000d      	movs	r5, r1
    if (!dev) return false;
 8003322:	2800      	cmp	r0, #0
 8003324:	d01f      	beq.n	8003366 <lis3dh_set_scale+0x4c>
    dev->error_code = LIS3DH_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	6003      	str	r3, [r0, #0]
    dev->scale = scale;
 800332a:	71c1      	strb	r1, [r0, #7]
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, scale);
 800332c:	3301      	adds	r3, #1
 800332e:	aa01      	add	r2, sp, #4
 8003330:	2123      	movs	r1, #35	@ 0x23
 8003332:	f7ff fe6f 	bl	8003014 <lis3dh_reg_read>
 8003336:	2800      	cmp	r0, #0
 8003338:	d102      	bne.n	8003340 <lis3dh_set_scale+0x26>
 800333a:	2000      	movs	r0, #0
}
 800333c:	b003      	add	sp, #12
 800333e:	bd30      	pop	{r4, r5, pc}
    lis3dh_update_reg (dev, LIS3DH_REG_CTRL4, lis3dh_reg_ctrl4, FS, scale);
 8003340:	2203      	movs	r2, #3
 8003342:	402a      	ands	r2, r5
 8003344:	0112      	lsls	r2, r2, #4
 8003346:	466b      	mov	r3, sp
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	2130      	movs	r1, #48	@ 0x30
 800334c:	438b      	bics	r3, r1
 800334e:	4313      	orrs	r3, r2
 8003350:	466a      	mov	r2, sp
 8003352:	7113      	strb	r3, [r2, #4]
 8003354:	2301      	movs	r3, #1
 8003356:	aa01      	add	r2, sp, #4
 8003358:	390d      	subs	r1, #13
 800335a:	0020      	movs	r0, r4
 800335c:	f7ff fea2 	bl	80030a4 <lis3dh_reg_write>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1eb      	bne.n	800333c <lis3dh_set_scale+0x22>
 8003364:	e7e9      	b.n	800333a <lis3dh_set_scale+0x20>
    if (!dev) return false;
 8003366:	2000      	movs	r0, #0
 8003368:	e7e8      	b.n	800333c <lis3dh_set_scale+0x22>
	...

0800336c <lis3dh_enable_int>:
{
 800336c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336e:	46ce      	mov	lr, r9
 8003370:	4647      	mov	r7, r8
 8003372:	b580      	push	{r7, lr}
 8003374:	b083      	sub	sp, #12
 8003376:	0004      	movs	r4, r0
 8003378:	000f      	movs	r7, r1
 800337a:	0015      	movs	r5, r2
 800337c:	001e      	movs	r6, r3
    if (!dev) return false;
 800337e:	2800      	cmp	r0, #0
 8003380:	d100      	bne.n	8003384 <lis3dh_enable_int+0x18>
 8003382:	e09d      	b.n	80034c0 <lis3dh_enable_int+0x154>
    dev->error_code = LIS3DH_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	6003      	str	r3, [r0, #0]
    if (type == lis3dh_int_data_ready     ||
 8003388:	2902      	cmp	r1, #2
 800338a:	d906      	bls.n	800339a <lis3dh_enable_int+0x2e>
    else if (signal == lis3dh_int1_signal)
 800338c:	2a00      	cmp	r2, #0
 800338e:	d117      	bne.n	80033c0 <lis3dh_enable_int+0x54>
        addr = LIS3DH_REG_CTRL3;
 8003390:	3322      	adds	r3, #34	@ 0x22
 8003392:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl3;
 8003394:	ab01      	add	r3, sp, #4
 8003396:	4699      	mov	r9, r3
 8003398:	e003      	b.n	80033a2 <lis3dh_enable_int+0x36>
        addr = LIS3DH_REG_CTRL3;
 800339a:	2322      	movs	r3, #34	@ 0x22
 800339c:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl3;
 800339e:	ab01      	add	r3, sp, #4
 80033a0:	4699      	mov	r9, r3
    if (!lis3dh_reg_read (dev, addr, reg, 1))
 80033a2:	2301      	movs	r3, #1
 80033a4:	464a      	mov	r2, r9
 80033a6:	4641      	mov	r1, r8
 80033a8:	0020      	movs	r0, r4
 80033aa:	f7ff fe33 	bl	8003014 <lis3dh_reg_read>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d00a      	beq.n	80033c8 <lis3dh_enable_int+0x5c>
    switch (type)
 80033b2:	2f05      	cmp	r7, #5
 80033b4:	d900      	bls.n	80033b8 <lis3dh_enable_int+0x4c>
 80033b6:	e078      	b.n	80034aa <lis3dh_enable_int+0x13e>
 80033b8:	00bf      	lsls	r7, r7, #2
 80033ba:	4b42      	ldr	r3, [pc, #264]	@ (80034c4 <lis3dh_enable_int+0x158>)
 80033bc:	59db      	ldr	r3, [r3, r7]
 80033be:	469f      	mov	pc, r3
        addr = LIS3DH_REG_CTRL6;
 80033c0:	2325      	movs	r3, #37	@ 0x25
 80033c2:	4698      	mov	r8, r3
        reg  = (uint8_t*)&ctrl6;
 80033c4:	46e9      	mov	r9, sp
 80033c6:	e7ec      	b.n	80033a2 <lis3dh_enable_int+0x36>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 80033c8:	6822      	ldr	r2, [r4, #0]
 80033ca:	23e0      	movs	r3, #224	@ 0xe0
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4313      	orrs	r3, r2
 80033d0:	6023      	str	r3, [r4, #0]
        return false;
 80033d2:	e010      	b.n	80033f6 <lis3dh_enable_int+0x8a>
        case lis3dh_int_data_ready:     ctrl3.IT_DRDY1 = value;
 80033d4:	aa01      	add	r2, sp, #4
 80033d6:	2101      	movs	r1, #1
 80033d8:	4031      	ands	r1, r6
 80033da:	0109      	lsls	r1, r1, #4
 80033dc:	7813      	ldrb	r3, [r2, #0]
 80033de:	2010      	movs	r0, #16
 80033e0:	4383      	bics	r3, r0
 80033e2:	430b      	orrs	r3, r1
 80033e4:	7013      	strb	r3, [r2, #0]
    if (!lis3dh_reg_write (dev, addr, reg, 1))
 80033e6:	2301      	movs	r3, #1
 80033e8:	464a      	mov	r2, r9
 80033ea:	4641      	mov	r1, r8
 80033ec:	0020      	movs	r0, r4
 80033ee:	f7ff fe59 	bl	80030a4 <lis3dh_reg_write>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d05e      	beq.n	80034b4 <lis3dh_enable_int+0x148>
}
 80033f6:	b003      	add	sp, #12
 80033f8:	bcc0      	pop	{r6, r7}
 80033fa:	46b9      	mov	r9, r7
 80033fc:	46b0      	mov	r8, r6
 80033fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case lis3dh_int_fifo_watermark: ctrl3.I1_WTM1 = value;
 8003400:	aa01      	add	r2, sp, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4031      	ands	r1, r6
 8003406:	0089      	lsls	r1, r1, #2
 8003408:	7813      	ldrb	r3, [r2, #0]
 800340a:	2004      	movs	r0, #4
 800340c:	4383      	bics	r3, r0
 800340e:	430b      	orrs	r3, r1
 8003410:	7013      	strb	r3, [r2, #0]
                                        break;
 8003412:	e7e8      	b.n	80033e6 <lis3dh_enable_int+0x7a>
        case lis3dh_int_fifo_overrun:   ctrl3.I1_OVERRUN = value;
 8003414:	aa01      	add	r2, sp, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4031      	ands	r1, r6
 800341a:	0049      	lsls	r1, r1, #1
 800341c:	7813      	ldrb	r3, [r2, #0]
 800341e:	2002      	movs	r0, #2
 8003420:	4383      	bics	r3, r0
 8003422:	430b      	orrs	r3, r1
 8003424:	7013      	strb	r3, [r2, #0]
                                        break;
 8003426:	e7de      	b.n	80033e6 <lis3dh_enable_int+0x7a>
        case lis3dh_int_event1:         if (signal == lis3dh_int1_signal)
 8003428:	2d00      	cmp	r5, #0
 800342a:	d109      	bne.n	8003440 <lis3dh_enable_int+0xd4>
                                            ctrl3.I1_AOI1 = value;
 800342c:	aa01      	add	r2, sp, #4
 800342e:	2101      	movs	r1, #1
 8003430:	4031      	ands	r1, r6
 8003432:	0189      	lsls	r1, r1, #6
 8003434:	7813      	ldrb	r3, [r2, #0]
 8003436:	2040      	movs	r0, #64	@ 0x40
 8003438:	4383      	bics	r3, r0
 800343a:	430b      	orrs	r3, r1
 800343c:	7013      	strb	r3, [r2, #0]
 800343e:	e7d2      	b.n	80033e6 <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_AOI1 = value;
 8003440:	2201      	movs	r2, #1
 8003442:	4032      	ands	r2, r6
 8003444:	0192      	lsls	r2, r2, #6
 8003446:	466b      	mov	r3, sp
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2140      	movs	r1, #64	@ 0x40
 800344c:	438b      	bics	r3, r1
 800344e:	4313      	orrs	r3, r2
 8003450:	466a      	mov	r2, sp
 8003452:	7013      	strb	r3, [r2, #0]
 8003454:	e7c7      	b.n	80033e6 <lis3dh_enable_int+0x7a>
        case lis3dh_int_event2:         if (signal == lis3dh_int1_signal)
 8003456:	2d00      	cmp	r5, #0
 8003458:	d109      	bne.n	800346e <lis3dh_enable_int+0x102>
                                            ctrl3.I1_AOI2 = value;
 800345a:	aa01      	add	r2, sp, #4
 800345c:	2101      	movs	r1, #1
 800345e:	4031      	ands	r1, r6
 8003460:	0149      	lsls	r1, r1, #5
 8003462:	7813      	ldrb	r3, [r2, #0]
 8003464:	2020      	movs	r0, #32
 8003466:	4383      	bics	r3, r0
 8003468:	430b      	orrs	r3, r1
 800346a:	7013      	strb	r3, [r2, #0]
 800346c:	e7bb      	b.n	80033e6 <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_AOI2 = value;
 800346e:	2201      	movs	r2, #1
 8003470:	4032      	ands	r2, r6
 8003472:	0152      	lsls	r2, r2, #5
 8003474:	466b      	mov	r3, sp
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2120      	movs	r1, #32
 800347a:	438b      	bics	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	466a      	mov	r2, sp
 8003480:	7013      	strb	r3, [r2, #0]
 8003482:	e7b0      	b.n	80033e6 <lis3dh_enable_int+0x7a>
        case lis3dh_int_click:          if (signal == lis3dh_int1_signal)
 8003484:	2d00      	cmp	r5, #0
 8003486:	d107      	bne.n	8003498 <lis3dh_enable_int+0x12c>
                                            ctrl3.I1_CLICK = value;
 8003488:	ab01      	add	r3, sp, #4
 800348a:	01f2      	lsls	r2, r6, #7
 800348c:	7819      	ldrb	r1, [r3, #0]
 800348e:	267f      	movs	r6, #127	@ 0x7f
 8003490:	400e      	ands	r6, r1
 8003492:	4316      	orrs	r6, r2
 8003494:	701e      	strb	r6, [r3, #0]
 8003496:	e7a6      	b.n	80033e6 <lis3dh_enable_int+0x7a>
                                            ctrl6.I2_CLICK = value;
 8003498:	01f6      	lsls	r6, r6, #7
 800349a:	466b      	mov	r3, sp
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	237f      	movs	r3, #127	@ 0x7f
 80034a0:	4013      	ands	r3, r2
 80034a2:	4333      	orrs	r3, r6
 80034a4:	466a      	mov	r2, sp
 80034a6:	7013      	strb	r3, [r2, #0]
 80034a8:	e79d      	b.n	80033e6 <lis3dh_enable_int+0x7a>
        default: dev->error_code = LIS3DH_WRONG_INT_TYPE; 
 80034aa:	23a0      	movs	r3, #160	@ 0xa0
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	6023      	str	r3, [r4, #0]
                 return false;
 80034b0:	2000      	movs	r0, #0
 80034b2:	e7a0      	b.n	80033f6 <lis3dh_enable_int+0x8a>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 80034b4:	6822      	ldr	r2, [r4, #0]
 80034b6:	23e0      	movs	r3, #224	@ 0xe0
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4313      	orrs	r3, r2
 80034bc:	6023      	str	r3, [r4, #0]
        return false;
 80034be:	e79a      	b.n	80033f6 <lis3dh_enable_int+0x8a>
    if (!dev) return false;
 80034c0:	2000      	movs	r0, #0
 80034c2:	e798      	b.n	80033f6 <lis3dh_enable_int+0x8a>
 80034c4:	080052a8 	.word	0x080052a8

080034c8 <lis3dh_set_int_event_config>:
{
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ca:	46ce      	mov	lr, r9
 80034cc:	4647      	mov	r7, r8
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b083      	sub	sp, #12
 80034d2:	0005      	movs	r5, r0
 80034d4:	000c      	movs	r4, r1
 80034d6:	0016      	movs	r6, r2
    if (!dev || !config) return false;
 80034d8:	2800      	cmp	r0, #0
 80034da:	d100      	bne.n	80034de <lis3dh_set_int_event_config+0x16>
 80034dc:	e115      	b.n	800370a <lis3dh_set_int_event_config+0x242>
 80034de:	2900      	cmp	r1, #0
 80034e0:	d100      	bne.n	80034e4 <lis3dh_set_int_event_config+0x1c>
 80034e2:	e114      	b.n	800370e <lis3dh_set_int_event_config+0x246>
    dev->error_code = LIS3DH_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	6003      	str	r3, [r0, #0]
    intx_cfg.XLIE = config->x_low_enabled;
 80034e8:	7888      	ldrb	r0, [r1, #2]
 80034ea:	ab01      	add	r3, sp, #4
 80034ec:	2101      	movs	r1, #1
 80034ee:	4008      	ands	r0, r1
 80034f0:	781a      	ldrb	r2, [r3, #0]
 80034f2:	2701      	movs	r7, #1
 80034f4:	43ba      	bics	r2, r7
 80034f6:	4302      	orrs	r2, r0
 80034f8:	701a      	strb	r2, [r3, #0]
    intx_cfg.XHIE = config->x_high_enabled;
 80034fa:	78e0      	ldrb	r0, [r4, #3]
 80034fc:	4008      	ands	r0, r1
 80034fe:	0040      	lsls	r0, r0, #1
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	3701      	adds	r7, #1
 8003504:	43ba      	bics	r2, r7
 8003506:	4302      	orrs	r2, r0
 8003508:	701a      	strb	r2, [r3, #0]
    intx_cfg.YLIE = config->y_low_enabled;
 800350a:	7920      	ldrb	r0, [r4, #4]
 800350c:	4008      	ands	r0, r1
 800350e:	0080      	lsls	r0, r0, #2
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	3702      	adds	r7, #2
 8003514:	43ba      	bics	r2, r7
 8003516:	4302      	orrs	r2, r0
 8003518:	701a      	strb	r2, [r3, #0]
    intx_cfg.YHIE = config->y_high_enabled;
 800351a:	7960      	ldrb	r0, [r4, #5]
 800351c:	4008      	ands	r0, r1
 800351e:	00c0      	lsls	r0, r0, #3
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	3704      	adds	r7, #4
 8003524:	43ba      	bics	r2, r7
 8003526:	4302      	orrs	r2, r0
 8003528:	701a      	strb	r2, [r3, #0]
    intx_cfg.ZLIE = config->z_low_enabled;
 800352a:	79a0      	ldrb	r0, [r4, #6]
 800352c:	4008      	ands	r0, r1
 800352e:	0100      	lsls	r0, r0, #4
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	3708      	adds	r7, #8
 8003534:	43ba      	bics	r2, r7
 8003536:	4302      	orrs	r2, r0
 8003538:	701a      	strb	r2, [r3, #0]
    intx_cfg.ZHIE = config->z_high_enabled;
 800353a:	79e2      	ldrb	r2, [r4, #7]
 800353c:	4011      	ands	r1, r2
 800353e:	0149      	lsls	r1, r1, #5
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	2020      	movs	r0, #32
 8003544:	4382      	bics	r2, r0
 8003546:	4311      	orrs	r1, r2
 8003548:	7019      	strb	r1, [r3, #0]
    switch (config->mode)
 800354a:	7823      	ldrb	r3, [r4, #0]
 800354c:	2b05      	cmp	r3, #5
 800354e:	d852      	bhi.n	80035f6 <lis3dh_set_int_event_config+0x12e>
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a70      	ldr	r2, [pc, #448]	@ (8003714 <lis3dh_set_int_event_config+0x24c>)
 8003554:	58d3      	ldr	r3, [r2, r3]
 8003556:	469f      	mov	pc, r3
 8003558:	2300      	movs	r3, #0
 800355a:	4699      	mov	r9, r3
        case lis3dh_6d_position : intx_cfg.AOI = 1; intx_cfg.SIXD = 1; break;
 800355c:	ab01      	add	r3, sp, #4
 800355e:	7819      	ldrb	r1, [r3, #0]
 8003560:	2280      	movs	r2, #128	@ 0x80
 8003562:	4252      	negs	r2, r2
 8003564:	430a      	orrs	r2, r1
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	2140      	movs	r1, #64	@ 0x40
 800356c:	430a      	orrs	r2, r1
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e00a      	b.n	8003588 <lis3dh_set_int_event_config+0xc0>
    switch (config->mode)
 8003572:	2300      	movs	r3, #0
 8003574:	4699      	mov	r9, r3
        case lis3dh_6d_movement : intx_cfg.AOI = 0; intx_cfg.SIXD = 1; break;
 8003576:	ab01      	add	r3, sp, #4
 8003578:	7819      	ldrb	r1, [r3, #0]
 800357a:	227f      	movs	r2, #127	@ 0x7f
 800357c:	400a      	ands	r2, r1
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	2140      	movs	r1, #64	@ 0x40
 8003584:	430a      	orrs	r2, r1
 8003586:	701a      	strb	r2, [r3, #0]
    uint8_t intx_cfg_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_CFG : LIS3DH_REG_INT2_CFG;
 8003588:	2e00      	cmp	r6, #0
 800358a:	d137      	bne.n	80035fc <lis3dh_set_int_event_config+0x134>
 800358c:	2132      	movs	r1, #50	@ 0x32
 800358e:	2330      	movs	r3, #48	@ 0x30
 8003590:	4698      	mov	r8, r3
    uint8_t intx_dur_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_DUR : LIS3DH_REG_INT2_DUR;
 8003592:	2733      	movs	r7, #51	@ 0x33
        !lis3dh_reg_write (dev, intx_ths_addr, &config->threshold, 1) ||
 8003594:	1c62      	adds	r2, r4, #1
 8003596:	2301      	movs	r3, #1
 8003598:	0028      	movs	r0, r5
 800359a:	f7ff fd83 	bl	80030a4 <lis3dh_reg_write>
    if (// write the thresholds to registers IG_THS_*
 800359e:	2800      	cmp	r0, #0
 80035a0:	d131      	bne.n	8003606 <lis3dh_set_int_event_config+0x13e>
        dev->error_code |= LIS3DH_CONFIG_INT_FAILED;
 80035a2:	682a      	ldr	r2, [r5, #0]
 80035a4:	23e0      	movs	r3, #224	@ 0xe0
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4313      	orrs	r3, r2
 80035aa:	602b      	str	r3, [r5, #0]
        return false;
 80035ac:	2000      	movs	r0, #0
}
 80035ae:	b003      	add	sp, #12
 80035b0:	bcc0      	pop	{r6, r7}
 80035b2:	46b9      	mov	r9, r7
 80035b4:	46b0      	mov	r8, r6
 80035b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case lis3dh_wake_up     : intx_cfg.AOI = 0; intx_cfg.SIXD = 0; break;
 80035b8:	ab01      	add	r3, sp, #4
 80035ba:	7819      	ldrb	r1, [r3, #0]
 80035bc:	227f      	movs	r2, #127	@ 0x7f
 80035be:	400a      	ands	r2, r1
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	2140      	movs	r1, #64	@ 0x40
 80035c6:	438a      	bics	r2, r1
 80035c8:	701a      	strb	r2, [r3, #0]
    bool d4d_int = false;
 80035ca:	2300      	movs	r3, #0
 80035cc:	4699      	mov	r9, r3
        case lis3dh_wake_up     : intx_cfg.AOI = 0; intx_cfg.SIXD = 0; break;
 80035ce:	e7db      	b.n	8003588 <lis3dh_set_int_event_config+0xc0>
        case lis3dh_free_fall   : intx_cfg.AOI = 1; intx_cfg.SIXD = 0; break;
 80035d0:	ab01      	add	r3, sp, #4
 80035d2:	7819      	ldrb	r1, [r3, #0]
 80035d4:	2280      	movs	r2, #128	@ 0x80
 80035d6:	4252      	negs	r2, r2
 80035d8:	430a      	orrs	r2, r1
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	2140      	movs	r1, #64	@ 0x40
 80035e0:	438a      	bics	r2, r1
 80035e2:	701a      	strb	r2, [r3, #0]
    bool d4d_int = false;
 80035e4:	2300      	movs	r3, #0
 80035e6:	4699      	mov	r9, r3
        case lis3dh_free_fall   : intx_cfg.AOI = 1; intx_cfg.SIXD = 0; break;
 80035e8:	e7ce      	b.n	8003588 <lis3dh_set_int_event_config+0xc0>
        case lis3dh_4d_movement : d4d_int = true;
 80035ea:	2301      	movs	r3, #1
 80035ec:	4699      	mov	r9, r3
 80035ee:	e7c2      	b.n	8003576 <lis3dh_set_int_event_config+0xae>
        case lis3dh_4d_position : d4d_int = true;
 80035f0:	2301      	movs	r3, #1
 80035f2:	4699      	mov	r9, r3
 80035f4:	e7b2      	b.n	800355c <lis3dh_set_int_event_config+0x94>
    switch (config->mode)
 80035f6:	2300      	movs	r3, #0
 80035f8:	4699      	mov	r9, r3
 80035fa:	e7c5      	b.n	8003588 <lis3dh_set_int_event_config+0xc0>
 80035fc:	2136      	movs	r1, #54	@ 0x36
 80035fe:	2334      	movs	r3, #52	@ 0x34
 8003600:	4698      	mov	r8, r3
    uint8_t intx_dur_addr = (gen == lis3dh_int_event1_gen) ? LIS3DH_REG_INT1_DUR : LIS3DH_REG_INT2_DUR;
 8003602:	2737      	movs	r7, #55	@ 0x37
 8003604:	e7c6      	b.n	8003594 <lis3dh_set_int_event_config+0xcc>
        !lis3dh_reg_write (dev, intx_dur_addr, &config->duration, 1) ||
 8003606:	2301      	movs	r3, #1
 8003608:	0022      	movs	r2, r4
 800360a:	3209      	adds	r2, #9
 800360c:	0039      	movs	r1, r7
 800360e:	0028      	movs	r0, r5
 8003610:	f7ff fd48 	bl	80030a4 <lis3dh_reg_write>
        !lis3dh_reg_write (dev, intx_ths_addr, &config->threshold, 1) ||
 8003614:	2800      	cmp	r0, #0
 8003616:	d0c4      	beq.n	80035a2 <lis3dh_set_int_event_config+0xda>
        !lis3dh_reg_write (dev, intx_cfg_addr, (uint8_t*)&intx_cfg, 1))
 8003618:	2301      	movs	r3, #1
 800361a:	aa01      	add	r2, sp, #4
 800361c:	4641      	mov	r1, r8
 800361e:	0028      	movs	r0, r5
 8003620:	f7ff fd40 	bl	80030a4 <lis3dh_reg_write>
        !lis3dh_reg_write (dev, intx_dur_addr, &config->duration, 1) ||
 8003624:	2800      	cmp	r0, #0
 8003626:	d0bc      	beq.n	80035a2 <lis3dh_set_int_event_config+0xda>
    if (gen == lis3dh_int_event1_gen)
 8003628:	2e00      	cmp	r6, #0
 800362a:	d137      	bne.n	800369c <lis3dh_set_int_event_config+0x1d4>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, LIR_INT1, config->latch);
 800362c:	2301      	movs	r3, #1
 800362e:	466a      	mov	r2, sp
 8003630:	2124      	movs	r1, #36	@ 0x24
 8003632:	0028      	movs	r0, r5
 8003634:	f7ff fcee 	bl	8003014 <lis3dh_reg_read>
 8003638:	2800      	cmp	r0, #0
 800363a:	d101      	bne.n	8003640 <lis3dh_set_int_event_config+0x178>
 800363c:	2000      	movs	r0, #0
 800363e:	e7b6      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 8003640:	7a23      	ldrb	r3, [r4, #8]
 8003642:	2201      	movs	r2, #1
 8003644:	401a      	ands	r2, r3
 8003646:	00d2      	lsls	r2, r2, #3
 8003648:	466b      	mov	r3, sp
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2108      	movs	r1, #8
 800364e:	438b      	bics	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	466a      	mov	r2, sp
 8003654:	7013      	strb	r3, [r2, #0]
 8003656:	2301      	movs	r3, #1
 8003658:	311c      	adds	r1, #28
 800365a:	0028      	movs	r0, r5
 800365c:	f7ff fd22 	bl	80030a4 <lis3dh_reg_write>
 8003660:	2800      	cmp	r0, #0
 8003662:	d0eb      	beq.n	800363c <lis3dh_set_int_event_config+0x174>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, D4D_INT1, d4d_int);
 8003664:	2301      	movs	r3, #1
 8003666:	466a      	mov	r2, sp
 8003668:	2124      	movs	r1, #36	@ 0x24
 800366a:	0028      	movs	r0, r5
 800366c:	f7ff fcd2 	bl	8003014 <lis3dh_reg_read>
 8003670:	2800      	cmp	r0, #0
 8003672:	d101      	bne.n	8003678 <lis3dh_set_int_event_config+0x1b0>
 8003674:	2000      	movs	r0, #0
 8003676:	e79a      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 8003678:	464b      	mov	r3, r9
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	466b      	mov	r3, sp
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2104      	movs	r1, #4
 8003682:	438b      	bics	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	466a      	mov	r2, sp
 8003688:	7013      	strb	r3, [r2, #0]
 800368a:	2301      	movs	r3, #1
 800368c:	3120      	adds	r1, #32
 800368e:	0028      	movs	r0, r5
 8003690:	f7ff fd08 	bl	80030a4 <lis3dh_reg_write>
 8003694:	2800      	cmp	r0, #0
 8003696:	d000      	beq.n	800369a <lis3dh_set_int_event_config+0x1d2>
 8003698:	e789      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 800369a:	e7eb      	b.n	8003674 <lis3dh_set_int_event_config+0x1ac>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, LIR_INT2, config->latch);
 800369c:	2301      	movs	r3, #1
 800369e:	466a      	mov	r2, sp
 80036a0:	2124      	movs	r1, #36	@ 0x24
 80036a2:	0028      	movs	r0, r5
 80036a4:	f7ff fcb6 	bl	8003014 <lis3dh_reg_read>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d101      	bne.n	80036b0 <lis3dh_set_int_event_config+0x1e8>
 80036ac:	2000      	movs	r0, #0
 80036ae:	e77e      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 80036b0:	7a23      	ldrb	r3, [r4, #8]
 80036b2:	2201      	movs	r2, #1
 80036b4:	401a      	ands	r2, r3
 80036b6:	0052      	lsls	r2, r2, #1
 80036b8:	466b      	mov	r3, sp
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2102      	movs	r1, #2
 80036be:	438b      	bics	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	466a      	mov	r2, sp
 80036c4:	7013      	strb	r3, [r2, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	3122      	adds	r1, #34	@ 0x22
 80036ca:	0028      	movs	r0, r5
 80036cc:	f7ff fcea 	bl	80030a4 <lis3dh_reg_write>
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d0eb      	beq.n	80036ac <lis3dh_set_int_event_config+0x1e4>
        lis3dh_update_reg (dev, LIS3DH_REG_CTRL5, lis3dh_reg_ctrl5, D4D_INT2, d4d_int);
 80036d4:	2301      	movs	r3, #1
 80036d6:	466a      	mov	r2, sp
 80036d8:	2124      	movs	r1, #36	@ 0x24
 80036da:	0028      	movs	r0, r5
 80036dc:	f7ff fc9a 	bl	8003014 <lis3dh_reg_read>
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d101      	bne.n	80036e8 <lis3dh_set_int_event_config+0x220>
 80036e4:	2000      	movs	r0, #0
 80036e6:	e762      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 80036e8:	466b      	mov	r3, sp
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4393      	bics	r3, r2
 80036f0:	464a      	mov	r2, r9
 80036f2:	4313      	orrs	r3, r2
 80036f4:	466a      	mov	r2, sp
 80036f6:	7013      	strb	r3, [r2, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	2124      	movs	r1, #36	@ 0x24
 80036fc:	0028      	movs	r0, r5
 80036fe:	f7ff fcd1 	bl	80030a4 <lis3dh_reg_write>
 8003702:	2800      	cmp	r0, #0
 8003704:	d000      	beq.n	8003708 <lis3dh_set_int_event_config+0x240>
 8003706:	e752      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 8003708:	e7ec      	b.n	80036e4 <lis3dh_set_int_event_config+0x21c>
    if (!dev || !config) return false;
 800370a:	2000      	movs	r0, #0
 800370c:	e74f      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 800370e:	2000      	movs	r0, #0
 8003710:	e74d      	b.n	80035ae <lis3dh_set_int_event_config+0xe6>
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	080052c0 	.word	0x080052c0

08003718 <lis3dh_config_hpf>:
{
 8003718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800371a:	46ce      	mov	lr, r9
 800371c:	4647      	mov	r7, r8
 800371e:	b580      	push	{r7, lr}
 8003720:	b083      	sub	sp, #12
 8003722:	0004      	movs	r4, r0
 8003724:	0016      	movs	r6, r2
 8003726:	aa0a      	add	r2, sp, #40	@ 0x28
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	4691      	mov	r9, r2
 800372c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800372e:	7817      	ldrb	r7, [r2, #0]
 8003730:	aa0c      	add	r2, sp, #48	@ 0x30
 8003732:	7815      	ldrb	r5, [r2, #0]
    if (!dev) return false;
 8003734:	2800      	cmp	r0, #0
 8003736:	d043      	beq.n	80037c0 <lis3dh_config_hpf+0xa8>
    dev->error_code = LIS3DH_OK;
 8003738:	2200      	movs	r2, #0
 800373a:	6002      	str	r2, [r0, #0]
    reg.HPM  = mode;
 800373c:	aa01      	add	r2, sp, #4
 800373e:	0189      	lsls	r1, r1, #6
 8003740:	468c      	mov	ip, r1
 8003742:	7811      	ldrb	r1, [r2, #0]
 8003744:	4688      	mov	r8, r1
 8003746:	213f      	movs	r1, #63	@ 0x3f
 8003748:	4640      	mov	r0, r8
 800374a:	4001      	ands	r1, r0
 800374c:	4660      	mov	r0, ip
 800374e:	4301      	orrs	r1, r0
 8003750:	7011      	strb	r1, [r2, #0]
    reg.HPCF = cutoff;
 8003752:	2103      	movs	r1, #3
 8003754:	400e      	ands	r6, r1
 8003756:	0136      	lsls	r6, r6, #4
 8003758:	7811      	ldrb	r1, [r2, #0]
 800375a:	2030      	movs	r0, #48	@ 0x30
 800375c:	4381      	bics	r1, r0
 800375e:	4331      	orrs	r1, r6
 8003760:	7011      	strb	r1, [r2, #0]
    reg.FDS  = data;
 8003762:	2101      	movs	r1, #1
 8003764:	400b      	ands	r3, r1
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	7816      	ldrb	r6, [r2, #0]
 800376a:	3828      	subs	r0, #40	@ 0x28
 800376c:	4386      	bics	r6, r0
 800376e:	4333      	orrs	r3, r6
 8003770:	7013      	strb	r3, [r2, #0]
    reg.HPCLICK = click;
 8003772:	4648      	mov	r0, r9
 8003774:	4008      	ands	r0, r1
 8003776:	0080      	lsls	r0, r0, #2
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2604      	movs	r6, #4
 800377c:	43b3      	bics	r3, r6
 800377e:	4303      	orrs	r3, r0
 8003780:	7013      	strb	r3, [r2, #0]
    reg.HPIS1   = int1;
 8003782:	400f      	ands	r7, r1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2001      	movs	r0, #1
 8003788:	4383      	bics	r3, r0
 800378a:	433b      	orrs	r3, r7
 800378c:	7013      	strb	r3, [r2, #0]
    reg.HPIS2   = int2;
 800378e:	4029      	ands	r1, r5
 8003790:	0049      	lsls	r1, r1, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	3001      	adds	r0, #1
 8003796:	4383      	bics	r3, r0
 8003798:	430b      	orrs	r3, r1
 800379a:	7013      	strb	r3, [r2, #0]
    if (!lis3dh_reg_write (dev, LIS3DH_REG_CTRL2, (uint8_t*)&reg, 1))
 800379c:	2301      	movs	r3, #1
 800379e:	2121      	movs	r1, #33	@ 0x21
 80037a0:	0020      	movs	r0, r4
 80037a2:	f7ff fc7f 	bl	80030a4 <lis3dh_reg_write>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d004      	beq.n	80037b4 <lis3dh_config_hpf+0x9c>
}
 80037aa:	b003      	add	sp, #12
 80037ac:	bcc0      	pop	{r6, r7}
 80037ae:	46b9      	mov	r9, r7
 80037b0:	46b0      	mov	r8, r6
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dev->error_code |= LIS3DH_CONFIG_HPF_FAILED;
 80037b4:	6822      	ldr	r2, [r4, #0]
 80037b6:	2390      	movs	r3, #144	@ 0x90
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	4313      	orrs	r3, r2
 80037bc:	6023      	str	r3, [r4, #0]
        return false;
 80037be:	e7f4      	b.n	80037aa <lis3dh_config_hpf+0x92>
    if (!dev) return false;
 80037c0:	2000      	movs	r0, #0
 80037c2:	e7f2      	b.n	80037aa <lis3dh_config_hpf+0x92>

080037c4 <lis3dh_powerdown>:

void lis3dh_powerdown()
{
 80037c4:	b500      	push	{lr}
 80037c6:	b083      	sub	sp, #12
	if (sensor == NULL ) {
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <lis3dh_powerdown+0x34>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <lis3dh_powerdown+0x22>
		sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
	}

    lis3dh_set_mode (sensor, lis3dh_power_down, lis3dh_low_power, false, false, false);
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <lis3dh_powerdown+0x34>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	2100      	movs	r1, #0
 80037de:	f7ff fd27 	bl	8003230 <lis3dh_set_mode>
//    lis3dh_power_OFF();
}
 80037e2:	b003      	add	sp, #12
 80037e4:	bd00      	pop	{pc}
		sensor = lis3dh_init_sensor (I2C_BUS, LIS3DH_I2C_ADDRESS_2, 0);
 80037e6:	2200      	movs	r2, #0
 80037e8:	2132      	movs	r1, #50	@ 0x32
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7ff fcac 	bl	8003148 <lis3dh_init_sensor>
 80037f0:	4b01      	ldr	r3, [pc, #4]	@ (80037f8 <lis3dh_powerdown+0x34>)
 80037f2:	6018      	str	r0, [r3, #0]
 80037f4:	e7ec      	b.n	80037d0 <lis3dh_powerdown+0xc>
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	20000590 	.word	0x20000590

080037fc <lis3dh_get_device>:
 */


lis3dh_sensor_t* lis3dh_get_device()
{
		return sensor;
 80037fc:	4b01      	ldr	r3, [pc, #4]	@ (8003804 <lis3dh_get_device+0x8>)
 80037fe:	6818      	ldr	r0, [r3, #0]
}
 8003800:	4770      	bx	lr
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	20000590 	.word	0x20000590

08003808 <chan_to_deca>:

/* Channel */
// Only channels 2 and 5 are supported
int chan_to_deca(int i)
{
    switch (i)
 8003808:	2802      	cmp	r0, #2
 800380a:	d003      	beq.n	8003814 <chan_to_deca+0xc>
 800380c:	2805      	cmp	r0, #5
 800380e:	d001      	beq.n	8003814 <chan_to_deca+0xc>
    case 2 :
        return 2;
    case 5 :
        return 5;
    default :
        return -1;
 8003810:	2001      	movs	r0, #1
 8003812:	4240      	negs	r0, r0
    }
}
 8003814:	4770      	bx	lr

08003816 <deca_to_chan>:

int deca_to_chan(int i)
{
 8003816:	b510      	push	{r4, lr}
    return(chan_to_deca(i));
 8003818:	f7ff fff6 	bl	8003808 <chan_to_deca>
}
 800381c:	bd10      	pop	{r4, pc}
	...

08003820 <bitrate_to_deca>:


/* Bitrate */
int bitrate_to_deca(int i)
{
    switch (i)
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <bitrate_to_deca+0x24>)
 8003822:	4298      	cmp	r0, r3
 8003824:	d006      	beq.n	8003834 <bitrate_to_deca+0x14>
 8003826:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <bitrate_to_deca+0x28>)
 8003828:	4298      	cmp	r0, r3
 800382a:	d005      	beq.n	8003838 <bitrate_to_deca+0x18>
 800382c:	286e      	cmp	r0, #110	@ 0x6e
 800382e:	d105      	bne.n	800383c <bitrate_to_deca+0x1c>
 8003830:	2000      	movs	r0, #0
 8003832:	e002      	b.n	800383a <bitrate_to_deca+0x1a>
    {
    case 110 :
        return DWT_BR_110K;
    case 850 :
        return DWT_BR_850K;
 8003834:	2001      	movs	r0, #1
 8003836:	e000      	b.n	800383a <bitrate_to_deca+0x1a>
    case 6810 :
        return DWT_BR_6M8;
 8003838:	2002      	movs	r0, #2
    default :
        return -1;
    }
}
 800383a:	4770      	bx	lr
        return -1;
 800383c:	2001      	movs	r0, #1
 800383e:	4240      	negs	r0, r0
 8003840:	e7fb      	b.n	800383a <bitrate_to_deca+0x1a>
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	00000352 	.word	0x00000352
 8003848:	00001a9a 	.word	0x00001a9a

0800384c <deca_to_bitrate>:

int deca_to_bitrate(int i)
{
    switch (i)
 800384c:	2801      	cmp	r0, #1
 800384e:	d005      	beq.n	800385c <deca_to_bitrate+0x10>
 8003850:	2802      	cmp	r0, #2
 8003852:	d005      	beq.n	8003860 <deca_to_bitrate+0x14>
 8003854:	2800      	cmp	r0, #0
 8003856:	d105      	bne.n	8003864 <deca_to_bitrate+0x18>
 8003858:	306e      	adds	r0, #110	@ 0x6e
 800385a:	e002      	b.n	8003862 <deca_to_bitrate+0x16>
    {
    case DWT_BR_110K :
        return 110;
    case DWT_BR_850K :
        return 850;
 800385c:	4803      	ldr	r0, [pc, #12]	@ (800386c <deca_to_bitrate+0x20>)
 800385e:	e000      	b.n	8003862 <deca_to_bitrate+0x16>
    case DWT_BR_6M8 :
        return 6810;
 8003860:	4803      	ldr	r0, [pc, #12]	@ (8003870 <deca_to_bitrate+0x24>)
    default :
        return -1;
    }
}
 8003862:	4770      	bx	lr
        return -1;
 8003864:	2001      	movs	r0, #1
 8003866:	4240      	negs	r0, r0
 8003868:	e7fb      	b.n	8003862 <deca_to_bitrate+0x16>
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	00000352 	.word	0x00000352
 8003870:	00001a9a 	.word	0x00001a9a

08003874 <prf_to_deca>:


/* PRF */
int prf_to_deca(int i)
{
    switch (i)
 8003874:	2810      	cmp	r0, #16
 8003876:	d003      	beq.n	8003880 <prf_to_deca+0xc>
 8003878:	2840      	cmp	r0, #64	@ 0x40
 800387a:	d103      	bne.n	8003884 <prf_to_deca+0x10>
    {
    case 16 :
        return DWT_PRF_16M;
    case 64 :
        return DWT_PRF_64M;
 800387c:	383e      	subs	r0, #62	@ 0x3e
 800387e:	e000      	b.n	8003882 <prf_to_deca+0xe>
    switch (i)
 8003880:	2001      	movs	r0, #1
    default :
        return -1;
    }
}
 8003882:	4770      	bx	lr
        return -1;
 8003884:	2001      	movs	r0, #1
 8003886:	4240      	negs	r0, r0
 8003888:	e7fb      	b.n	8003882 <prf_to_deca+0xe>

0800388a <deca_to_prf>:


int deca_to_prf(int i)
{
    switch (i)
 800388a:	2801      	cmp	r0, #1
 800388c:	d003      	beq.n	8003896 <deca_to_prf+0xc>
 800388e:	2802      	cmp	r0, #2
 8003890:	d103      	bne.n	800389a <deca_to_prf+0x10>
    {
    case  DWT_PRF_16M:
        return 16;
    case  DWT_PRF_64M:
        return 64;
 8003892:	303e      	adds	r0, #62	@ 0x3e
 8003894:	e000      	b.n	8003898 <deca_to_prf+0xe>
    switch (i)
 8003896:	2010      	movs	r0, #16
    default :
        return -1;
    }
}
 8003898:	4770      	bx	lr
        return -1;
 800389a:	2001      	movs	r0, #1
 800389c:	4240      	negs	r0, r0
 800389e:	e7fb      	b.n	8003898 <deca_to_prf+0xe>

080038a0 <pac_to_deca>:


/* PAC */
int pac_to_deca(int i)
{
    switch (i)
 80038a0:	2820      	cmp	r0, #32
 80038a2:	d00a      	beq.n	80038ba <pac_to_deca+0x1a>
 80038a4:	dc05      	bgt.n	80038b2 <pac_to_deca+0x12>
 80038a6:	2808      	cmp	r0, #8
 80038a8:	d009      	beq.n	80038be <pac_to_deca+0x1e>
 80038aa:	2810      	cmp	r0, #16
 80038ac:	d109      	bne.n	80038c2 <pac_to_deca+0x22>
    {
    case 8 :
        return DWT_PAC8;
    case 16 :
        return DWT_PAC16;
 80038ae:	380f      	subs	r0, #15
 80038b0:	e004      	b.n	80038bc <pac_to_deca+0x1c>
    switch (i)
 80038b2:	2840      	cmp	r0, #64	@ 0x40
 80038b4:	d108      	bne.n	80038c8 <pac_to_deca+0x28>
    case 32 :
        return DWT_PAC32;
    case 64 :
        return DWT_PAC64;
 80038b6:	383d      	subs	r0, #61	@ 0x3d
 80038b8:	e000      	b.n	80038bc <pac_to_deca+0x1c>
        return DWT_PAC32;
 80038ba:	2002      	movs	r0, #2
    default :
        return -1;
    }
}
 80038bc:	4770      	bx	lr
    switch (i)
 80038be:	2000      	movs	r0, #0
 80038c0:	e7fc      	b.n	80038bc <pac_to_deca+0x1c>
        return -1;
 80038c2:	2001      	movs	r0, #1
 80038c4:	4240      	negs	r0, r0
 80038c6:	e7f9      	b.n	80038bc <pac_to_deca+0x1c>
 80038c8:	2001      	movs	r0, #1
 80038ca:	4240      	negs	r0, r0
 80038cc:	e7f6      	b.n	80038bc <pac_to_deca+0x1c>

080038ce <deca_to_pac>:

int deca_to_pac(int i)
{
    switch (i)
 80038ce:	2802      	cmp	r0, #2
 80038d0:	d00a      	beq.n	80038e8 <deca_to_pac+0x1a>
 80038d2:	dc05      	bgt.n	80038e0 <deca_to_pac+0x12>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d009      	beq.n	80038ec <deca_to_pac+0x1e>
 80038d8:	2801      	cmp	r0, #1
 80038da:	d109      	bne.n	80038f0 <deca_to_pac+0x22>
    {
    case DWT_PAC8 :
        return 8;
    case DWT_PAC16 :
        return 16;
 80038dc:	300f      	adds	r0, #15
 80038de:	e004      	b.n	80038ea <deca_to_pac+0x1c>
    switch (i)
 80038e0:	2803      	cmp	r0, #3
 80038e2:	d108      	bne.n	80038f6 <deca_to_pac+0x28>
    case DWT_PAC32 :
        return 32;
    case DWT_PAC64 :
        return 64;
 80038e4:	303d      	adds	r0, #61	@ 0x3d
 80038e6:	e000      	b.n	80038ea <deca_to_pac+0x1c>
        return 32;
 80038e8:	2020      	movs	r0, #32
    default :
        return -1;
    }
}
 80038ea:	4770      	bx	lr
    switch (i)
 80038ec:	2008      	movs	r0, #8
 80038ee:	e7fc      	b.n	80038ea <deca_to_pac+0x1c>
        return -1;
 80038f0:	2001      	movs	r0, #1
 80038f2:	4240      	negs	r0, r0
 80038f4:	e7f9      	b.n	80038ea <deca_to_pac+0x1c>
 80038f6:	2001      	movs	r0, #1
 80038f8:	4240      	negs	r0, r0
 80038fa:	e7f6      	b.n	80038ea <deca_to_pac+0x1c>

080038fc <plen_to_deca>:


/* PLEN */
int plen_to_deca(int i)
{
    switch (i)
 80038fc:	2380      	movs	r3, #128	@ 0x80
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4298      	cmp	r0, r3
 8003902:	d018      	beq.n	8003936 <plen_to_deca+0x3a>
 8003904:	dc09      	bgt.n	800391a <plen_to_deca+0x1e>
 8003906:	2880      	cmp	r0, #128	@ 0x80
 8003908:	d017      	beq.n	800393a <plen_to_deca+0x3e>
 800390a:	3b01      	subs	r3, #1
 800390c:	3bff      	subs	r3, #255	@ 0xff
 800390e:	4298      	cmp	r0, r3
 8003910:	d015      	beq.n	800393e <plen_to_deca+0x42>
 8003912:	2840      	cmp	r0, #64	@ 0x40
 8003914:	d115      	bne.n	8003942 <plen_to_deca+0x46>
    case 256 :
        return DWT_PLEN_256;
    case 128 :
        return DWT_PLEN_128;
    case 64 :
        return DWT_PLEN_64;
 8003916:	383c      	subs	r0, #60	@ 0x3c
    default :
        return -1;
    }
}
 8003918:	4770      	bx	lr
    switch (i)
 800391a:	23c0      	movs	r3, #192	@ 0xc0
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4298      	cmp	r0, r3
 8003920:	d012      	beq.n	8003948 <plen_to_deca+0x4c>
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	4298      	cmp	r0, r3
 8003928:	d010      	beq.n	800394c <plen_to_deca+0x50>
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4298      	cmp	r0, r3
 8003930:	d10e      	bne.n	8003950 <plen_to_deca+0x54>
        return DWT_PLEN_1024;
 8003932:	2008      	movs	r0, #8
 8003934:	e7f0      	b.n	8003918 <plen_to_deca+0x1c>
        return DWT_PLEN_512;
 8003936:	2034      	movs	r0, #52	@ 0x34
 8003938:	e7ee      	b.n	8003918 <plen_to_deca+0x1c>
        return DWT_PLEN_128;
 800393a:	2014      	movs	r0, #20
 800393c:	e7ec      	b.n	8003918 <plen_to_deca+0x1c>
        return DWT_PLEN_256;
 800393e:	2024      	movs	r0, #36	@ 0x24
 8003940:	e7ea      	b.n	8003918 <plen_to_deca+0x1c>
        return -1;
 8003942:	2001      	movs	r0, #1
 8003944:	4240      	negs	r0, r0
 8003946:	e7e7      	b.n	8003918 <plen_to_deca+0x1c>
        return DWT_PLEN_1536;
 8003948:	2018      	movs	r0, #24
 800394a:	e7e5      	b.n	8003918 <plen_to_deca+0x1c>
    switch (i)
 800394c:	2028      	movs	r0, #40	@ 0x28
 800394e:	e7e3      	b.n	8003918 <plen_to_deca+0x1c>
        return -1;
 8003950:	2001      	movs	r0, #1
 8003952:	4240      	negs	r0, r0
 8003954:	e7e0      	b.n	8003918 <plen_to_deca+0x1c>
	...

08003958 <deca_to_plen>:

int deca_to_plen(int i)
{
    switch (i)
 8003958:	3804      	subs	r0, #4
 800395a:	2830      	cmp	r0, #48	@ 0x30
 800395c:	d813      	bhi.n	8003986 <deca_to_plen+0x2e>
 800395e:	0080      	lsls	r0, r0, #2
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <deca_to_plen+0x3c>)
 8003962:	581b      	ldr	r3, [r3, r0]
 8003964:	469f      	mov	pc, r3
 8003966:	2080      	movs	r0, #128	@ 0x80
 8003968:	0100      	lsls	r0, r0, #4
 800396a:	e001      	b.n	8003970 <deca_to_plen+0x18>
    case DWT_PLEN_2048 :
        return 2048;
    case DWT_PLEN_1536 :
        return 1536;
    case DWT_PLEN_1024 :
        return 1024;
 800396c:	2080      	movs	r0, #128	@ 0x80
 800396e:	00c0      	lsls	r0, r0, #3
    case DWT_PLEN_64 :
        return 64;
    default :
        return -1;
    }
}
 8003970:	4770      	bx	lr
        return 512;
 8003972:	2080      	movs	r0, #128	@ 0x80
 8003974:	0080      	lsls	r0, r0, #2
 8003976:	e7fb      	b.n	8003970 <deca_to_plen+0x18>
        return 256;
 8003978:	2080      	movs	r0, #128	@ 0x80
 800397a:	0040      	lsls	r0, r0, #1
 800397c:	e7f8      	b.n	8003970 <deca_to_plen+0x18>
        return 128;
 800397e:	2080      	movs	r0, #128	@ 0x80
 8003980:	e7f6      	b.n	8003970 <deca_to_plen+0x18>
        return 64;
 8003982:	2040      	movs	r0, #64	@ 0x40
 8003984:	e7f4      	b.n	8003970 <deca_to_plen+0x18>
        return -1;
 8003986:	2001      	movs	r0, #1
 8003988:	4240      	negs	r0, r0
 800398a:	e7f1      	b.n	8003970 <deca_to_plen+0x18>
        return 1536;
 800398c:	20c0      	movs	r0, #192	@ 0xc0
 800398e:	00c0      	lsls	r0, r0, #3
 8003990:	e7ee      	b.n	8003970 <deca_to_plen+0x18>
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	080052d8 	.word	0x080052d8

08003998 <tvc_otp_read_txcfgref>:
 * @param[in] ref_values_t pointer to the reference structure
 * @param[out] ref values
 * @return  1 if CH2/CH5, 0 for other channels
 */
uint8_t tvc_otp_read_txcfgref(ref_values_t* ref, uint8 chan)
{
 8003998:	b530      	push	{r4, r5, lr}
 800399a:	b087      	sub	sp, #28
 800399c:	0005      	movs	r5, r0
 800399e:	000c      	movs	r4, r1
  /* OTP reading: transmission parameters */
  uint32 val[5];
  uint8 txp_address ;

  switch (chan)
 80039a0:	2902      	cmp	r1, #2
 80039a2:	d003      	beq.n	80039ac <tvc_otp_read_txcfgref+0x14>
 80039a4:	2905      	cmp	r1, #5
 80039a6:	d005      	beq.n	80039b4 <tvc_otp_read_txcfgref+0x1c>
 80039a8:	2000      	movs	r0, #0
 80039aa:	e056      	b.n	8003a5a <tvc_otp_read_txcfgref+0xc2>

  default:
      return 0;
  }

  if(chan == 5 || chan == 2)
 80039ac:	2902      	cmp	r1, #2
 80039ae:	d156      	bne.n	8003a5e <tvc_otp_read_txcfgref+0xc6>
      txp_address = OTP_TXPWR_CH2_PRF64_ADDRESS;
 80039b0:	2013      	movs	r0, #19
 80039b2:	e000      	b.n	80039b6 <tvc_otp_read_txcfgref+0x1e>
  switch (chan)
 80039b4:	2019      	movs	r0, #25
  {
      /* OTP reading: from reference registers, should be calibrated during production test */
      dwt_otpread(txp_address, val, 1);
 80039b6:	2201      	movs	r2, #1
 80039b8:	a901      	add	r1, sp, #4
 80039ba:	f7fe ff6d 	bl	8002898 <dwt_otpread>
      dwt_otpread(OTP_PGCNT_ADDRESS, val+1, 1);
 80039be:	2201      	movs	r2, #1
 80039c0:	a902      	add	r1, sp, #8
 80039c2:	201b      	movs	r0, #27
 80039c4:	f7fe ff68 	bl	8002898 <dwt_otpread>
      dwt_otpread(OTP_XTRIM_ADDRESS, val+2, 1);
 80039c8:	2201      	movs	r2, #1
 80039ca:	a903      	add	r1, sp, #12
 80039cc:	201e      	movs	r0, #30
 80039ce:	f7fe ff63 	bl	8002898 <dwt_otpread>
      dwt_otpread(OTP_TEMP_VBAT_ADDRESS, val+3, 1);
 80039d2:	2201      	movs	r2, #1
 80039d4:	a904      	add	r1, sp, #16
 80039d6:	201d      	movs	r0, #29
 80039d8:	f7fe ff5e 	bl	8002898 <dwt_otpread>
      dwt_otpread(OTP_ANT_DLY, val+4, 1);
 80039dc:	2201      	movs	r2, #1
 80039de:	a905      	add	r1, sp, #20
 80039e0:	201c      	movs	r0, #28
 80039e2:	f7fe ff59 	bl	8002898 <dwt_otpread>

      if (OTP_VALID(val[0]) && OTP_VALID(val[1]) && OTP_VALID(val[2]) && OTP_VALID(val[3]) && OTP_VALID(val[4]) ) {
 80039e6:	9a01      	ldr	r2, [sp, #4]
 80039e8:	1e53      	subs	r3, r2, #1
 80039ea:	3303      	adds	r3, #3
 80039ec:	d827      	bhi.n	8003a3e <tvc_otp_read_txcfgref+0xa6>
 80039ee:	9b02      	ldr	r3, [sp, #8]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	3303      	adds	r3, #3
 80039f4:	d823      	bhi.n	8003a3e <tvc_otp_read_txcfgref+0xa6>
 80039f6:	9b03      	ldr	r3, [sp, #12]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	3303      	adds	r3, #3
 80039fc:	d81f      	bhi.n	8003a3e <tvc_otp_read_txcfgref+0xa6>
 80039fe:	9b04      	ldr	r3, [sp, #16]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	3303      	adds	r3, #3
 8003a04:	d81b      	bhi.n	8003a3e <tvc_otp_read_txcfgref+0xa6>
 8003a06:	9b05      	ldr	r3, [sp, #20]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	3303      	adds	r3, #3
 8003a0c:	d817      	bhi.n	8003a3e <tvc_otp_read_txcfgref+0xa6>
          ref->power = val[0];
 8003a0e:	606a      	str	r2, [r5, #4]

          if (chan == 5)
 8003a10:	2c05      	cmp	r4, #5
 8003a12:	d00c      	beq.n	8003a2e <tvc_otp_read_txcfgref+0x96>
              ref->pgdly = (val[2] >> 16) & 0xff;
              ref->antdly = (val[4]) & 0xffff;
          }
          else
          {
              ref->pgcnt = (val[1] >> 16) & 0xffff;
 8003a14:	ab01      	add	r3, sp, #4
 8003a16:	88da      	ldrh	r2, [r3, #6]
 8003a18:	816a      	strh	r2, [r5, #10]
              ref->pgdly = (val[2] >> 24) & 0xff;
 8003a1a:	7ada      	ldrb	r2, [r3, #11]
 8003a1c:	702a      	strb	r2, [r5, #0]
              ref->antdly = (val[4] >> 16) & 0xffff;
 8003a1e:	8a5b      	ldrh	r3, [r3, #18]
 8003a20:	81eb      	strh	r3, [r5, #14]
          }
          ref->temp  = val[3] & 0xff;
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	722b      	strb	r3, [r5, #8]
          ref->vbat  = (val[3] >> 8) & 0xff;
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	732b      	strb	r3, [r5, #12]
  else
  {
      // Error channel must be either 2 or 5 with DWM1001 TDoA Tag project
	  return 0;
  }
  return 1;
 8003a2a:	2001      	movs	r0, #1
          ref->vbat  = (val[3] >> 8) & 0xff;
 8003a2c:	e015      	b.n	8003a5a <tvc_otp_read_txcfgref+0xc2>
              ref->pgcnt = (val[1]) & 0xffff;
 8003a2e:	ab01      	add	r3, sp, #4
 8003a30:	9a02      	ldr	r2, [sp, #8]
 8003a32:	816a      	strh	r2, [r5, #10]
              ref->pgdly = (val[2] >> 16) & 0xff;
 8003a34:	895a      	ldrh	r2, [r3, #10]
 8003a36:	702a      	strb	r2, [r5, #0]
              ref->antdly = (val[4]) & 0xffff;
 8003a38:	9b05      	ldr	r3, [sp, #20]
 8003a3a:	81eb      	strh	r3, [r5, #14]
 8003a3c:	e7f1      	b.n	8003a22 <tvc_otp_read_txcfgref+0x8a>
          ref->power = ref_goldenval[chan].power;
 8003a3e:	4a09      	ldr	r2, [pc, #36]	@ (8003a64 <tvc_otp_read_txcfgref+0xcc>)
 8003a40:	0124      	lsls	r4, r4, #4
 8003a42:	1913      	adds	r3, r2, r4
 8003a44:	6859      	ldr	r1, [r3, #4]
 8003a46:	6069      	str	r1, [r5, #4]
          ref->pgcnt = ref_goldenval[chan].pgcnt;
 8003a48:	8959      	ldrh	r1, [r3, #10]
 8003a4a:	8169      	strh	r1, [r5, #10]
          ref->temp  = ref_goldenval[chan].temp;
 8003a4c:	7a19      	ldrb	r1, [r3, #8]
 8003a4e:	7229      	strb	r1, [r5, #8]
          ref->pgdly = ref_goldenval[chan].pgdly;    
 8003a50:	5ca2      	ldrb	r2, [r4, r2]
 8003a52:	702a      	strb	r2, [r5, #0]
          ref->vbat  = ref_goldenval[chan].vbat;
 8003a54:	7b1b      	ldrb	r3, [r3, #12]
 8003a56:	732b      	strb	r3, [r5, #12]
  return 1;
 8003a58:	2001      	movs	r0, #1
}
 8003a5a:	b007      	add	sp, #28
 8003a5c:	bd30      	pop	{r4, r5, pc}
	  return 0;
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e7fb      	b.n	8003a5a <tvc_otp_read_txcfgref+0xc2>
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	0800539c 	.word	0x0800539c

08003a68 <malloc>:
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4b03      	ldr	r3, [pc, #12]	@ (8003a78 <malloc+0x10>)
 8003a6c:	0001      	movs	r1, r0
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	f000 f830 	bl	8003ad4 <_malloc_r>
 8003a74:	bd10      	pop	{r4, pc}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	20000014 	.word	0x20000014

08003a7c <free>:
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <free+0x10>)
 8003a80:	0001      	movs	r1, r0
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	f000 f95c 	bl	8003d40 <_free_r>
 8003a88:	bd10      	pop	{r4, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	20000014 	.word	0x20000014

08003a90 <sbrk_aligned>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4e0f      	ldr	r6, [pc, #60]	@ (8003ad0 <sbrk_aligned+0x40>)
 8003a94:	000d      	movs	r5, r1
 8003a96:	6831      	ldr	r1, [r6, #0]
 8003a98:	0004      	movs	r4, r0
 8003a9a:	2900      	cmp	r1, #0
 8003a9c:	d102      	bne.n	8003aa4 <sbrk_aligned+0x14>
 8003a9e:	f000 f8ff 	bl	8003ca0 <_sbrk_r>
 8003aa2:	6030      	str	r0, [r6, #0]
 8003aa4:	0029      	movs	r1, r5
 8003aa6:	0020      	movs	r0, r4
 8003aa8:	f000 f8fa 	bl	8003ca0 <_sbrk_r>
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d103      	bne.n	8003ab8 <sbrk_aligned+0x28>
 8003ab0:	2501      	movs	r5, #1
 8003ab2:	426d      	negs	r5, r5
 8003ab4:	0028      	movs	r0, r5
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	2303      	movs	r3, #3
 8003aba:	1cc5      	adds	r5, r0, #3
 8003abc:	439d      	bics	r5, r3
 8003abe:	42a8      	cmp	r0, r5
 8003ac0:	d0f8      	beq.n	8003ab4 <sbrk_aligned+0x24>
 8003ac2:	1a29      	subs	r1, r5, r0
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	f000 f8eb 	bl	8003ca0 <_sbrk_r>
 8003aca:	3001      	adds	r0, #1
 8003acc:	d1f2      	bne.n	8003ab4 <sbrk_aligned+0x24>
 8003ace:	e7ef      	b.n	8003ab0 <sbrk_aligned+0x20>
 8003ad0:	20000594 	.word	0x20000594

08003ad4 <_malloc_r>:
 8003ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	1ccb      	adds	r3, r1, #3
 8003ada:	4393      	bics	r3, r2
 8003adc:	3308      	adds	r3, #8
 8003ade:	0005      	movs	r5, r0
 8003ae0:	001f      	movs	r7, r3
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d234      	bcs.n	8003b50 <_malloc_r+0x7c>
 8003ae6:	270c      	movs	r7, #12
 8003ae8:	42b9      	cmp	r1, r7
 8003aea:	d833      	bhi.n	8003b54 <_malloc_r+0x80>
 8003aec:	0028      	movs	r0, r5
 8003aee:	f000 f871 	bl	8003bd4 <__malloc_lock>
 8003af2:	4e37      	ldr	r6, [pc, #220]	@ (8003bd0 <_malloc_r+0xfc>)
 8003af4:	6833      	ldr	r3, [r6, #0]
 8003af6:	001c      	movs	r4, r3
 8003af8:	2c00      	cmp	r4, #0
 8003afa:	d12f      	bne.n	8003b5c <_malloc_r+0x88>
 8003afc:	0039      	movs	r1, r7
 8003afe:	0028      	movs	r0, r5
 8003b00:	f7ff ffc6 	bl	8003a90 <sbrk_aligned>
 8003b04:	0004      	movs	r4, r0
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	d15f      	bne.n	8003bca <_malloc_r+0xf6>
 8003b0a:	6834      	ldr	r4, [r6, #0]
 8003b0c:	9400      	str	r4, [sp, #0]
 8003b0e:	9b00      	ldr	r3, [sp, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d14a      	bne.n	8003baa <_malloc_r+0xd6>
 8003b14:	2c00      	cmp	r4, #0
 8003b16:	d052      	beq.n	8003bbe <_malloc_r+0xea>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	0028      	movs	r0, r5
 8003b1c:	18e3      	adds	r3, r4, r3
 8003b1e:	9900      	ldr	r1, [sp, #0]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	f000 f8bd 	bl	8003ca0 <_sbrk_r>
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	4283      	cmp	r3, r0
 8003b2a:	d148      	bne.n	8003bbe <_malloc_r+0xea>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	0028      	movs	r0, r5
 8003b30:	1aff      	subs	r7, r7, r3
 8003b32:	0039      	movs	r1, r7
 8003b34:	f7ff ffac 	bl	8003a90 <sbrk_aligned>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d040      	beq.n	8003bbe <_malloc_r+0xea>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	6833      	ldr	r3, [r6, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	2a00      	cmp	r2, #0
 8003b48:	d133      	bne.n	8003bb2 <_malloc_r+0xde>
 8003b4a:	9b00      	ldr	r3, [sp, #0]
 8003b4c:	6033      	str	r3, [r6, #0]
 8003b4e:	e019      	b.n	8003b84 <_malloc_r+0xb0>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dac9      	bge.n	8003ae8 <_malloc_r+0x14>
 8003b54:	230c      	movs	r3, #12
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	2000      	movs	r0, #0
 8003b5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	1bc9      	subs	r1, r1, r7
 8003b60:	d420      	bmi.n	8003ba4 <_malloc_r+0xd0>
 8003b62:	290b      	cmp	r1, #11
 8003b64:	d90a      	bls.n	8003b7c <_malloc_r+0xa8>
 8003b66:	19e2      	adds	r2, r4, r7
 8003b68:	6027      	str	r7, [r4, #0]
 8003b6a:	42a3      	cmp	r3, r4
 8003b6c:	d104      	bne.n	8003b78 <_malloc_r+0xa4>
 8003b6e:	6032      	str	r2, [r6, #0]
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	6011      	str	r1, [r2, #0]
 8003b74:	6053      	str	r3, [r2, #4]
 8003b76:	e005      	b.n	8003b84 <_malloc_r+0xb0>
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	e7f9      	b.n	8003b70 <_malloc_r+0x9c>
 8003b7c:	6862      	ldr	r2, [r4, #4]
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	d10e      	bne.n	8003ba0 <_malloc_r+0xcc>
 8003b82:	6032      	str	r2, [r6, #0]
 8003b84:	0028      	movs	r0, r5
 8003b86:	f000 f82d 	bl	8003be4 <__malloc_unlock>
 8003b8a:	0020      	movs	r0, r4
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	300b      	adds	r0, #11
 8003b90:	1d23      	adds	r3, r4, #4
 8003b92:	4390      	bics	r0, r2
 8003b94:	1ac2      	subs	r2, r0, r3
 8003b96:	4298      	cmp	r0, r3
 8003b98:	d0df      	beq.n	8003b5a <_malloc_r+0x86>
 8003b9a:	1a1b      	subs	r3, r3, r0
 8003b9c:	50a3      	str	r3, [r4, r2]
 8003b9e:	e7dc      	b.n	8003b5a <_malloc_r+0x86>
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	e7ef      	b.n	8003b84 <_malloc_r+0xb0>
 8003ba4:	0023      	movs	r3, r4
 8003ba6:	6864      	ldr	r4, [r4, #4]
 8003ba8:	e7a6      	b.n	8003af8 <_malloc_r+0x24>
 8003baa:	9c00      	ldr	r4, [sp, #0]
 8003bac:	6863      	ldr	r3, [r4, #4]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	e7ad      	b.n	8003b0e <_malloc_r+0x3a>
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	42a3      	cmp	r3, r4
 8003bb8:	d1fb      	bne.n	8003bb2 <_malloc_r+0xde>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e7da      	b.n	8003b74 <_malloc_r+0xa0>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	0028      	movs	r0, r5
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	f000 f80e 	bl	8003be4 <__malloc_unlock>
 8003bc8:	e7c6      	b.n	8003b58 <_malloc_r+0x84>
 8003bca:	6007      	str	r7, [r0, #0]
 8003bcc:	e7da      	b.n	8003b84 <_malloc_r+0xb0>
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	20000598 	.word	0x20000598

08003bd4 <__malloc_lock>:
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	4802      	ldr	r0, [pc, #8]	@ (8003be0 <__malloc_lock+0xc>)
 8003bd8:	f000 f89e 	bl	8003d18 <__retarget_lock_acquire_recursive>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	200006d8 	.word	0x200006d8

08003be4 <__malloc_unlock>:
 8003be4:	b510      	push	{r4, lr}
 8003be6:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <__malloc_unlock+0xc>)
 8003be8:	f000 f897 	bl	8003d1a <__retarget_lock_release_recursive>
 8003bec:	bd10      	pop	{r4, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	200006d8 	.word	0x200006d8

08003bf4 <siprintf>:
 8003bf4:	b40e      	push	{r1, r2, r3}
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	2400      	movs	r4, #0
 8003bfa:	490c      	ldr	r1, [pc, #48]	@ (8003c2c <siprintf+0x38>)
 8003bfc:	b09d      	sub	sp, #116	@ 0x74
 8003bfe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003c00:	9002      	str	r0, [sp, #8]
 8003c02:	9006      	str	r0, [sp, #24]
 8003c04:	9107      	str	r1, [sp, #28]
 8003c06:	9104      	str	r1, [sp, #16]
 8003c08:	4809      	ldr	r0, [pc, #36]	@ (8003c30 <siprintf+0x3c>)
 8003c0a:	490a      	ldr	r1, [pc, #40]	@ (8003c34 <siprintf+0x40>)
 8003c0c:	cb04      	ldmia	r3!, {r2}
 8003c0e:	9105      	str	r1, [sp, #20]
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	a902      	add	r1, sp, #8
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003c18:	f000 f93c 	bl	8003e94 <_svfiprintf_r>
 8003c1c:	9b02      	ldr	r3, [sp, #8]
 8003c1e:	701c      	strb	r4, [r3, #0]
 8003c20:	b01d      	add	sp, #116	@ 0x74
 8003c22:	bc10      	pop	{r4}
 8003c24:	bc08      	pop	{r3}
 8003c26:	b003      	add	sp, #12
 8003c28:	4718      	bx	r3
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	7fffffff 	.word	0x7fffffff
 8003c30:	20000014 	.word	0x20000014
 8003c34:	ffff0208 	.word	0xffff0208

08003c38 <siscanf>:
 8003c38:	b40e      	push	{r1, r2, r3}
 8003c3a:	b570      	push	{r4, r5, r6, lr}
 8003c3c:	2381      	movs	r3, #129	@ 0x81
 8003c3e:	b09d      	sub	sp, #116	@ 0x74
 8003c40:	466a      	mov	r2, sp
 8003c42:	2500      	movs	r5, #0
 8003c44:	ac21      	add	r4, sp, #132	@ 0x84
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	cc40      	ldmia	r4!, {r6}
 8003c4a:	8293      	strh	r3, [r2, #20]
 8003c4c:	951b      	str	r5, [sp, #108]	@ 0x6c
 8003c4e:	9002      	str	r0, [sp, #8]
 8003c50:	9006      	str	r0, [sp, #24]
 8003c52:	f7fc fa63 	bl	800011c <strlen>
 8003c56:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <siscanf+0x4c>)
 8003c58:	466a      	mov	r2, sp
 8003c5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	9003      	str	r0, [sp, #12]
 8003c60:	9007      	str	r0, [sp, #28]
 8003c62:	4809      	ldr	r0, [pc, #36]	@ (8003c88 <siscanf+0x50>)
 8003c64:	425b      	negs	r3, r3
 8003c66:	82d3      	strh	r3, [r2, #22]
 8003c68:	a902      	add	r1, sp, #8
 8003c6a:	0023      	movs	r3, r4
 8003c6c:	0032      	movs	r2, r6
 8003c6e:	6800      	ldr	r0, [r0, #0]
 8003c70:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003c72:	9514      	str	r5, [sp, #80]	@ 0x50
 8003c74:	9401      	str	r4, [sp, #4]
 8003c76:	f000 fa67 	bl	8004148 <__ssvfiscanf_r>
 8003c7a:	b01d      	add	sp, #116	@ 0x74
 8003c7c:	bc70      	pop	{r4, r5, r6}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	b003      	add	sp, #12
 8003c82:	4718      	bx	r3
 8003c84:	08003c8d 	.word	0x08003c8d
 8003c88:	20000014 	.word	0x20000014

08003c8c <__seofread>:
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	4770      	bx	lr

08003c90 <memset>:
 8003c90:	0003      	movs	r3, r0
 8003c92:	1882      	adds	r2, r0, r2
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d100      	bne.n	8003c9a <memset+0xa>
 8003c98:	4770      	bx	lr
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	e7f9      	b.n	8003c94 <memset+0x4>

08003ca0 <_sbrk_r>:
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	b570      	push	{r4, r5, r6, lr}
 8003ca4:	4d06      	ldr	r5, [pc, #24]	@ (8003cc0 <_sbrk_r+0x20>)
 8003ca6:	0004      	movs	r4, r0
 8003ca8:	0008      	movs	r0, r1
 8003caa:	602b      	str	r3, [r5, #0]
 8003cac:	f7fc ff8e 	bl	8000bcc <_sbrk>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d103      	bne.n	8003cbc <_sbrk_r+0x1c>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d000      	beq.n	8003cbc <_sbrk_r+0x1c>
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	46c0      	nop			@ (mov r8, r8)
 8003cc0:	200006d4 	.word	0x200006d4

08003cc4 <__errno>:
 8003cc4:	4b01      	ldr	r3, [pc, #4]	@ (8003ccc <__errno+0x8>)
 8003cc6:	6818      	ldr	r0, [r3, #0]
 8003cc8:	4770      	bx	lr
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	20000014 	.word	0x20000014

08003cd0 <__libc_init_array>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	4c0c      	ldr	r4, [pc, #48]	@ (8003d08 <__libc_init_array+0x38>)
 8003cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8003d0c <__libc_init_array+0x3c>)
 8003cd8:	1b64      	subs	r4, r4, r5
 8003cda:	10a4      	asrs	r4, r4, #2
 8003cdc:	42a6      	cmp	r6, r4
 8003cde:	d109      	bne.n	8003cf4 <__libc_init_array+0x24>
 8003ce0:	2600      	movs	r6, #0
 8003ce2:	f001 f853 	bl	8004d8c <_init>
 8003ce6:	4c0a      	ldr	r4, [pc, #40]	@ (8003d10 <__libc_init_array+0x40>)
 8003ce8:	4d0a      	ldr	r5, [pc, #40]	@ (8003d14 <__libc_init_array+0x44>)
 8003cea:	1b64      	subs	r4, r4, r5
 8003cec:	10a4      	asrs	r4, r4, #2
 8003cee:	42a6      	cmp	r6, r4
 8003cf0:	d105      	bne.n	8003cfe <__libc_init_array+0x2e>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	00b3      	lsls	r3, r6, #2
 8003cf6:	58eb      	ldr	r3, [r5, r3]
 8003cf8:	4798      	blx	r3
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7ee      	b.n	8003cdc <__libc_init_array+0xc>
 8003cfe:	00b3      	lsls	r3, r6, #2
 8003d00:	58eb      	ldr	r3, [r5, r3]
 8003d02:	4798      	blx	r3
 8003d04:	3601      	adds	r6, #1
 8003d06:	e7f2      	b.n	8003cee <__libc_init_array+0x1e>
 8003d08:	08005664 	.word	0x08005664
 8003d0c:	08005664 	.word	0x08005664
 8003d10:	08005668 	.word	0x08005668
 8003d14:	08005664 	.word	0x08005664

08003d18 <__retarget_lock_acquire_recursive>:
 8003d18:	4770      	bx	lr

08003d1a <__retarget_lock_release_recursive>:
 8003d1a:	4770      	bx	lr

08003d1c <strcpy>:
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	780a      	ldrb	r2, [r1, #0]
 8003d20:	3101      	adds	r1, #1
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	3301      	adds	r3, #1
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	d1f9      	bne.n	8003d1e <strcpy+0x2>
 8003d2a:	4770      	bx	lr

08003d2c <memcpy>:
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	b510      	push	{r4, lr}
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d100      	bne.n	8003d36 <memcpy+0xa>
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	5ccc      	ldrb	r4, [r1, r3]
 8003d38:	54c4      	strb	r4, [r0, r3]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	e7f8      	b.n	8003d30 <memcpy+0x4>
	...

08003d40 <_free_r>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	0005      	movs	r5, r0
 8003d44:	1e0c      	subs	r4, r1, #0
 8003d46:	d010      	beq.n	8003d6a <_free_r+0x2a>
 8003d48:	3c04      	subs	r4, #4
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	da00      	bge.n	8003d52 <_free_r+0x12>
 8003d50:	18e4      	adds	r4, r4, r3
 8003d52:	0028      	movs	r0, r5
 8003d54:	f7ff ff3e 	bl	8003bd4 <__malloc_lock>
 8003d58:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <_free_r+0x90>)
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <_free_r+0x2c>
 8003d60:	6063      	str	r3, [r4, #4]
 8003d62:	6014      	str	r4, [r2, #0]
 8003d64:	0028      	movs	r0, r5
 8003d66:	f7ff ff3d 	bl	8003be4 <__malloc_unlock>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	d908      	bls.n	8003d82 <_free_r+0x42>
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	1821      	adds	r1, r4, r0
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d1f3      	bne.n	8003d60 <_free_r+0x20>
 8003d78:	6819      	ldr	r1, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	1809      	adds	r1, r1, r0
 8003d7e:	6021      	str	r1, [r4, #0]
 8003d80:	e7ee      	b.n	8003d60 <_free_r+0x20>
 8003d82:	001a      	movs	r2, r3
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <_free_r+0x4e>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d9f9      	bls.n	8003d82 <_free_r+0x42>
 8003d8e:	6811      	ldr	r1, [r2, #0]
 8003d90:	1850      	adds	r0, r2, r1
 8003d92:	42a0      	cmp	r0, r4
 8003d94:	d10b      	bne.n	8003dae <_free_r+0x6e>
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	1809      	adds	r1, r1, r0
 8003d9a:	1850      	adds	r0, r2, r1
 8003d9c:	6011      	str	r1, [r2, #0]
 8003d9e:	4283      	cmp	r3, r0
 8003da0:	d1e0      	bne.n	8003d64 <_free_r+0x24>
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	1841      	adds	r1, r0, r1
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	6053      	str	r3, [r2, #4]
 8003dac:	e7da      	b.n	8003d64 <_free_r+0x24>
 8003dae:	42a0      	cmp	r0, r4
 8003db0:	d902      	bls.n	8003db8 <_free_r+0x78>
 8003db2:	230c      	movs	r3, #12
 8003db4:	602b      	str	r3, [r5, #0]
 8003db6:	e7d5      	b.n	8003d64 <_free_r+0x24>
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	1821      	adds	r1, r4, r0
 8003dbc:	428b      	cmp	r3, r1
 8003dbe:	d103      	bne.n	8003dc8 <_free_r+0x88>
 8003dc0:	6819      	ldr	r1, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	1809      	adds	r1, r1, r0
 8003dc6:	6021      	str	r1, [r4, #0]
 8003dc8:	6063      	str	r3, [r4, #4]
 8003dca:	6054      	str	r4, [r2, #4]
 8003dcc:	e7ca      	b.n	8003d64 <_free_r+0x24>
 8003dce:	46c0      	nop			@ (mov r8, r8)
 8003dd0:	20000598 	.word	0x20000598

08003dd4 <__ssputs_r>:
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	688e      	ldr	r6, [r1, #8]
 8003dd8:	b085      	sub	sp, #20
 8003dda:	001f      	movs	r7, r3
 8003ddc:	000c      	movs	r4, r1
 8003dde:	680b      	ldr	r3, [r1, #0]
 8003de0:	9002      	str	r0, [sp, #8]
 8003de2:	9203      	str	r2, [sp, #12]
 8003de4:	42be      	cmp	r6, r7
 8003de6:	d830      	bhi.n	8003e4a <__ssputs_r+0x76>
 8003de8:	210c      	movs	r1, #12
 8003dea:	5e62      	ldrsh	r2, [r4, r1]
 8003dec:	2190      	movs	r1, #144	@ 0x90
 8003dee:	00c9      	lsls	r1, r1, #3
 8003df0:	420a      	tst	r2, r1
 8003df2:	d028      	beq.n	8003e46 <__ssputs_r+0x72>
 8003df4:	2003      	movs	r0, #3
 8003df6:	6921      	ldr	r1, [r4, #16]
 8003df8:	1a5b      	subs	r3, r3, r1
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6963      	ldr	r3, [r4, #20]
 8003dfe:	4343      	muls	r3, r0
 8003e00:	9801      	ldr	r0, [sp, #4]
 8003e02:	0fdd      	lsrs	r5, r3, #31
 8003e04:	18ed      	adds	r5, r5, r3
 8003e06:	1c7b      	adds	r3, r7, #1
 8003e08:	181b      	adds	r3, r3, r0
 8003e0a:	106d      	asrs	r5, r5, #1
 8003e0c:	42ab      	cmp	r3, r5
 8003e0e:	d900      	bls.n	8003e12 <__ssputs_r+0x3e>
 8003e10:	001d      	movs	r5, r3
 8003e12:	0552      	lsls	r2, r2, #21
 8003e14:	d528      	bpl.n	8003e68 <__ssputs_r+0x94>
 8003e16:	0029      	movs	r1, r5
 8003e18:	9802      	ldr	r0, [sp, #8]
 8003e1a:	f7ff fe5b 	bl	8003ad4 <_malloc_r>
 8003e1e:	1e06      	subs	r6, r0, #0
 8003e20:	d02c      	beq.n	8003e7c <__ssputs_r+0xa8>
 8003e22:	9a01      	ldr	r2, [sp, #4]
 8003e24:	6921      	ldr	r1, [r4, #16]
 8003e26:	f7ff ff81 	bl	8003d2c <memcpy>
 8003e2a:	89a2      	ldrh	r2, [r4, #12]
 8003e2c:	4b18      	ldr	r3, [pc, #96]	@ (8003e90 <__ssputs_r+0xbc>)
 8003e2e:	401a      	ands	r2, r3
 8003e30:	2380      	movs	r3, #128	@ 0x80
 8003e32:	4313      	orrs	r3, r2
 8003e34:	81a3      	strh	r3, [r4, #12]
 8003e36:	9b01      	ldr	r3, [sp, #4]
 8003e38:	6126      	str	r6, [r4, #16]
 8003e3a:	18f6      	adds	r6, r6, r3
 8003e3c:	6026      	str	r6, [r4, #0]
 8003e3e:	003e      	movs	r6, r7
 8003e40:	6165      	str	r5, [r4, #20]
 8003e42:	1aed      	subs	r5, r5, r3
 8003e44:	60a5      	str	r5, [r4, #8]
 8003e46:	42be      	cmp	r6, r7
 8003e48:	d900      	bls.n	8003e4c <__ssputs_r+0x78>
 8003e4a:	003e      	movs	r6, r7
 8003e4c:	0032      	movs	r2, r6
 8003e4e:	9903      	ldr	r1, [sp, #12]
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	f000 fe31 	bl	8004ab8 <memmove>
 8003e56:	2000      	movs	r0, #0
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	1b9b      	subs	r3, r3, r6
 8003e5c:	60a3      	str	r3, [r4, #8]
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	199b      	adds	r3, r3, r6
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	b005      	add	sp, #20
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e68:	002a      	movs	r2, r5
 8003e6a:	9802      	ldr	r0, [sp, #8]
 8003e6c:	f000 fe41 	bl	8004af2 <_realloc_r>
 8003e70:	1e06      	subs	r6, r0, #0
 8003e72:	d1e0      	bne.n	8003e36 <__ssputs_r+0x62>
 8003e74:	6921      	ldr	r1, [r4, #16]
 8003e76:	9802      	ldr	r0, [sp, #8]
 8003e78:	f7ff ff62 	bl	8003d40 <_free_r>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	2001      	movs	r0, #1
 8003e80:	9a02      	ldr	r2, [sp, #8]
 8003e82:	4240      	negs	r0, r0
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	89a2      	ldrh	r2, [r4, #12]
 8003e88:	3334      	adds	r3, #52	@ 0x34
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	e7e9      	b.n	8003e64 <__ssputs_r+0x90>
 8003e90:	fffffb7f 	.word	0xfffffb7f

08003e94 <_svfiprintf_r>:
 8003e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e96:	b0a1      	sub	sp, #132	@ 0x84
 8003e98:	9003      	str	r0, [sp, #12]
 8003e9a:	001d      	movs	r5, r3
 8003e9c:	898b      	ldrh	r3, [r1, #12]
 8003e9e:	000f      	movs	r7, r1
 8003ea0:	0016      	movs	r6, r2
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	d511      	bpl.n	8003eca <_svfiprintf_r+0x36>
 8003ea6:	690b      	ldr	r3, [r1, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10e      	bne.n	8003eca <_svfiprintf_r+0x36>
 8003eac:	2140      	movs	r1, #64	@ 0x40
 8003eae:	f7ff fe11 	bl	8003ad4 <_malloc_r>
 8003eb2:	6038      	str	r0, [r7, #0]
 8003eb4:	6138      	str	r0, [r7, #16]
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d105      	bne.n	8003ec6 <_svfiprintf_r+0x32>
 8003eba:	230c      	movs	r3, #12
 8003ebc:	9a03      	ldr	r2, [sp, #12]
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	4240      	negs	r0, r0
 8003ec4:	e0cf      	b.n	8004066 <_svfiprintf_r+0x1d2>
 8003ec6:	2340      	movs	r3, #64	@ 0x40
 8003ec8:	617b      	str	r3, [r7, #20]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	ac08      	add	r4, sp, #32
 8003ece:	6163      	str	r3, [r4, #20]
 8003ed0:	3320      	adds	r3, #32
 8003ed2:	7663      	strb	r3, [r4, #25]
 8003ed4:	3310      	adds	r3, #16
 8003ed6:	76a3      	strb	r3, [r4, #26]
 8003ed8:	9507      	str	r5, [sp, #28]
 8003eda:	0035      	movs	r5, r6
 8003edc:	782b      	ldrb	r3, [r5, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <_svfiprintf_r+0x52>
 8003ee2:	2b25      	cmp	r3, #37	@ 0x25
 8003ee4:	d148      	bne.n	8003f78 <_svfiprintf_r+0xe4>
 8003ee6:	1bab      	subs	r3, r5, r6
 8003ee8:	9305      	str	r3, [sp, #20]
 8003eea:	42b5      	cmp	r5, r6
 8003eec:	d00b      	beq.n	8003f06 <_svfiprintf_r+0x72>
 8003eee:	0032      	movs	r2, r6
 8003ef0:	0039      	movs	r1, r7
 8003ef2:	9803      	ldr	r0, [sp, #12]
 8003ef4:	f7ff ff6e 	bl	8003dd4 <__ssputs_r>
 8003ef8:	3001      	adds	r0, #1
 8003efa:	d100      	bne.n	8003efe <_svfiprintf_r+0x6a>
 8003efc:	e0ae      	b.n	800405c <_svfiprintf_r+0x1c8>
 8003efe:	6963      	ldr	r3, [r4, #20]
 8003f00:	9a05      	ldr	r2, [sp, #20]
 8003f02:	189b      	adds	r3, r3, r2
 8003f04:	6163      	str	r3, [r4, #20]
 8003f06:	782b      	ldrb	r3, [r5, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d100      	bne.n	8003f0e <_svfiprintf_r+0x7a>
 8003f0c:	e0a6      	b.n	800405c <_svfiprintf_r+0x1c8>
 8003f0e:	2201      	movs	r2, #1
 8003f10:	2300      	movs	r3, #0
 8003f12:	4252      	negs	r2, r2
 8003f14:	6062      	str	r2, [r4, #4]
 8003f16:	a904      	add	r1, sp, #16
 8003f18:	3254      	adds	r2, #84	@ 0x54
 8003f1a:	1852      	adds	r2, r2, r1
 8003f1c:	1c6e      	adds	r6, r5, #1
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	60e3      	str	r3, [r4, #12]
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	7013      	strb	r3, [r2, #0]
 8003f26:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003f28:	4b54      	ldr	r3, [pc, #336]	@ (800407c <_svfiprintf_r+0x1e8>)
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	7831      	ldrb	r1, [r6, #0]
 8003f30:	9305      	str	r3, [sp, #20]
 8003f32:	f000 fdd3 	bl	8004adc <memchr>
 8003f36:	1c75      	adds	r5, r6, #1
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d11f      	bne.n	8003f7c <_svfiprintf_r+0xe8>
 8003f3c:	6822      	ldr	r2, [r4, #0]
 8003f3e:	06d3      	lsls	r3, r2, #27
 8003f40:	d504      	bpl.n	8003f4c <_svfiprintf_r+0xb8>
 8003f42:	2353      	movs	r3, #83	@ 0x53
 8003f44:	a904      	add	r1, sp, #16
 8003f46:	185b      	adds	r3, r3, r1
 8003f48:	2120      	movs	r1, #32
 8003f4a:	7019      	strb	r1, [r3, #0]
 8003f4c:	0713      	lsls	r3, r2, #28
 8003f4e:	d504      	bpl.n	8003f5a <_svfiprintf_r+0xc6>
 8003f50:	2353      	movs	r3, #83	@ 0x53
 8003f52:	a904      	add	r1, sp, #16
 8003f54:	185b      	adds	r3, r3, r1
 8003f56:	212b      	movs	r1, #43	@ 0x2b
 8003f58:	7019      	strb	r1, [r3, #0]
 8003f5a:	7833      	ldrb	r3, [r6, #0]
 8003f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f5e:	d016      	beq.n	8003f8e <_svfiprintf_r+0xfa>
 8003f60:	0035      	movs	r5, r6
 8003f62:	2100      	movs	r1, #0
 8003f64:	200a      	movs	r0, #10
 8003f66:	68e3      	ldr	r3, [r4, #12]
 8003f68:	782a      	ldrb	r2, [r5, #0]
 8003f6a:	1c6e      	adds	r6, r5, #1
 8003f6c:	3a30      	subs	r2, #48	@ 0x30
 8003f6e:	2a09      	cmp	r2, #9
 8003f70:	d950      	bls.n	8004014 <_svfiprintf_r+0x180>
 8003f72:	2900      	cmp	r1, #0
 8003f74:	d111      	bne.n	8003f9a <_svfiprintf_r+0x106>
 8003f76:	e017      	b.n	8003fa8 <_svfiprintf_r+0x114>
 8003f78:	3501      	adds	r5, #1
 8003f7a:	e7af      	b.n	8003edc <_svfiprintf_r+0x48>
 8003f7c:	9b05      	ldr	r3, [sp, #20]
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	1ac0      	subs	r0, r0, r3
 8003f82:	2301      	movs	r3, #1
 8003f84:	4083      	lsls	r3, r0
 8003f86:	4313      	orrs	r3, r2
 8003f88:	002e      	movs	r6, r5
 8003f8a:	6023      	str	r3, [r4, #0]
 8003f8c:	e7cc      	b.n	8003f28 <_svfiprintf_r+0x94>
 8003f8e:	9b07      	ldr	r3, [sp, #28]
 8003f90:	1d19      	adds	r1, r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	9107      	str	r1, [sp, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db01      	blt.n	8003f9e <_svfiprintf_r+0x10a>
 8003f9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f9c:	e004      	b.n	8003fa8 <_svfiprintf_r+0x114>
 8003f9e:	425b      	negs	r3, r3
 8003fa0:	60e3      	str	r3, [r4, #12]
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	782b      	ldrb	r3, [r5, #0]
 8003faa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fac:	d10c      	bne.n	8003fc8 <_svfiprintf_r+0x134>
 8003fae:	786b      	ldrb	r3, [r5, #1]
 8003fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fb2:	d134      	bne.n	800401e <_svfiprintf_r+0x18a>
 8003fb4:	9b07      	ldr	r3, [sp, #28]
 8003fb6:	3502      	adds	r5, #2
 8003fb8:	1d1a      	adds	r2, r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	9207      	str	r2, [sp, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da01      	bge.n	8003fc6 <_svfiprintf_r+0x132>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fc8:	4e2d      	ldr	r6, [pc, #180]	@ (8004080 <_svfiprintf_r+0x1ec>)
 8003fca:	2203      	movs	r2, #3
 8003fcc:	0030      	movs	r0, r6
 8003fce:	7829      	ldrb	r1, [r5, #0]
 8003fd0:	f000 fd84 	bl	8004adc <memchr>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d006      	beq.n	8003fe6 <_svfiprintf_r+0x152>
 8003fd8:	2340      	movs	r3, #64	@ 0x40
 8003fda:	1b80      	subs	r0, r0, r6
 8003fdc:	4083      	lsls	r3, r0
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	3501      	adds	r5, #1
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	7829      	ldrb	r1, [r5, #0]
 8003fe8:	2206      	movs	r2, #6
 8003fea:	4826      	ldr	r0, [pc, #152]	@ (8004084 <_svfiprintf_r+0x1f0>)
 8003fec:	1c6e      	adds	r6, r5, #1
 8003fee:	7621      	strb	r1, [r4, #24]
 8003ff0:	f000 fd74 	bl	8004adc <memchr>
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d038      	beq.n	800406a <_svfiprintf_r+0x1d6>
 8003ff8:	4b23      	ldr	r3, [pc, #140]	@ (8004088 <_svfiprintf_r+0x1f4>)
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d122      	bne.n	8004044 <_svfiprintf_r+0x1b0>
 8003ffe:	2207      	movs	r2, #7
 8004000:	9b07      	ldr	r3, [sp, #28]
 8004002:	3307      	adds	r3, #7
 8004004:	4393      	bics	r3, r2
 8004006:	3308      	adds	r3, #8
 8004008:	9307      	str	r3, [sp, #28]
 800400a:	6963      	ldr	r3, [r4, #20]
 800400c:	9a04      	ldr	r2, [sp, #16]
 800400e:	189b      	adds	r3, r3, r2
 8004010:	6163      	str	r3, [r4, #20]
 8004012:	e762      	b.n	8003eda <_svfiprintf_r+0x46>
 8004014:	4343      	muls	r3, r0
 8004016:	0035      	movs	r5, r6
 8004018:	2101      	movs	r1, #1
 800401a:	189b      	adds	r3, r3, r2
 800401c:	e7a4      	b.n	8003f68 <_svfiprintf_r+0xd4>
 800401e:	2300      	movs	r3, #0
 8004020:	200a      	movs	r0, #10
 8004022:	0019      	movs	r1, r3
 8004024:	3501      	adds	r5, #1
 8004026:	6063      	str	r3, [r4, #4]
 8004028:	782a      	ldrb	r2, [r5, #0]
 800402a:	1c6e      	adds	r6, r5, #1
 800402c:	3a30      	subs	r2, #48	@ 0x30
 800402e:	2a09      	cmp	r2, #9
 8004030:	d903      	bls.n	800403a <_svfiprintf_r+0x1a6>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0c8      	beq.n	8003fc8 <_svfiprintf_r+0x134>
 8004036:	9109      	str	r1, [sp, #36]	@ 0x24
 8004038:	e7c6      	b.n	8003fc8 <_svfiprintf_r+0x134>
 800403a:	4341      	muls	r1, r0
 800403c:	0035      	movs	r5, r6
 800403e:	2301      	movs	r3, #1
 8004040:	1889      	adds	r1, r1, r2
 8004042:	e7f1      	b.n	8004028 <_svfiprintf_r+0x194>
 8004044:	aa07      	add	r2, sp, #28
 8004046:	9200      	str	r2, [sp, #0]
 8004048:	0021      	movs	r1, r4
 800404a:	003a      	movs	r2, r7
 800404c:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <_svfiprintf_r+0x1f8>)
 800404e:	9803      	ldr	r0, [sp, #12]
 8004050:	e000      	b.n	8004054 <_svfiprintf_r+0x1c0>
 8004052:	bf00      	nop
 8004054:	9004      	str	r0, [sp, #16]
 8004056:	9b04      	ldr	r3, [sp, #16]
 8004058:	3301      	adds	r3, #1
 800405a:	d1d6      	bne.n	800400a <_svfiprintf_r+0x176>
 800405c:	89bb      	ldrh	r3, [r7, #12]
 800405e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004060:	065b      	lsls	r3, r3, #25
 8004062:	d500      	bpl.n	8004066 <_svfiprintf_r+0x1d2>
 8004064:	e72c      	b.n	8003ec0 <_svfiprintf_r+0x2c>
 8004066:	b021      	add	sp, #132	@ 0x84
 8004068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800406a:	aa07      	add	r2, sp, #28
 800406c:	9200      	str	r2, [sp, #0]
 800406e:	0021      	movs	r1, r4
 8004070:	003a      	movs	r2, r7
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <_svfiprintf_r+0x1f8>)
 8004074:	9803      	ldr	r0, [sp, #12]
 8004076:	f000 fa3b 	bl	80044f0 <_printf_i>
 800407a:	e7eb      	b.n	8004054 <_svfiprintf_r+0x1c0>
 800407c:	080054fd 	.word	0x080054fd
 8004080:	08005503 	.word	0x08005503
 8004084:	08005507 	.word	0x08005507
 8004088:	00000000 	.word	0x00000000
 800408c:	08003dd5 	.word	0x08003dd5

08004090 <_sungetc_r>:
 8004090:	b570      	push	{r4, r5, r6, lr}
 8004092:	0014      	movs	r4, r2
 8004094:	1c4b      	adds	r3, r1, #1
 8004096:	d103      	bne.n	80040a0 <_sungetc_r+0x10>
 8004098:	2501      	movs	r5, #1
 800409a:	426d      	negs	r5, r5
 800409c:	0028      	movs	r0, r5
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	8993      	ldrh	r3, [r2, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	4393      	bics	r3, r2
 80040a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	b2ce      	uxtb	r6, r1
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	b2cd      	uxtb	r5, r1
 80040b0:	2a00      	cmp	r2, #0
 80040b2:	d010      	beq.n	80040d6 <_sungetc_r+0x46>
 80040b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80040b6:	429a      	cmp	r2, r3
 80040b8:	dd07      	ble.n	80040ca <_sungetc_r+0x3a>
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	3b01      	subs	r3, #1
 80040be:	6023      	str	r3, [r4, #0]
 80040c0:	701e      	strb	r6, [r3, #0]
 80040c2:	6863      	ldr	r3, [r4, #4]
 80040c4:	3301      	adds	r3, #1
 80040c6:	6063      	str	r3, [r4, #4]
 80040c8:	e7e8      	b.n	800409c <_sungetc_r+0xc>
 80040ca:	0021      	movs	r1, r4
 80040cc:	f000 fcb6 	bl	8004a3c <__submore>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d0f2      	beq.n	80040ba <_sungetc_r+0x2a>
 80040d4:	e7e0      	b.n	8004098 <_sungetc_r+0x8>
 80040d6:	6921      	ldr	r1, [r4, #16]
 80040d8:	6822      	ldr	r2, [r4, #0]
 80040da:	2900      	cmp	r1, #0
 80040dc:	d007      	beq.n	80040ee <_sungetc_r+0x5e>
 80040de:	4291      	cmp	r1, r2
 80040e0:	d205      	bcs.n	80040ee <_sungetc_r+0x5e>
 80040e2:	1e51      	subs	r1, r2, #1
 80040e4:	7808      	ldrb	r0, [r1, #0]
 80040e6:	42a8      	cmp	r0, r5
 80040e8:	d101      	bne.n	80040ee <_sungetc_r+0x5e>
 80040ea:	6021      	str	r1, [r4, #0]
 80040ec:	e7ea      	b.n	80040c4 <_sungetc_r+0x34>
 80040ee:	6423      	str	r3, [r4, #64]	@ 0x40
 80040f0:	0023      	movs	r3, r4
 80040f2:	3344      	adds	r3, #68	@ 0x44
 80040f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80040f6:	2303      	movs	r3, #3
 80040f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80040fa:	0023      	movs	r3, r4
 80040fc:	3346      	adds	r3, #70	@ 0x46
 80040fe:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8004100:	701e      	strb	r6, [r3, #0]
 8004102:	6023      	str	r3, [r4, #0]
 8004104:	2301      	movs	r3, #1
 8004106:	e7de      	b.n	80040c6 <_sungetc_r+0x36>

08004108 <__ssrefill_r>:
 8004108:	b510      	push	{r4, lr}
 800410a:	000c      	movs	r4, r1
 800410c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800410e:	2900      	cmp	r1, #0
 8004110:	d00e      	beq.n	8004130 <__ssrefill_r+0x28>
 8004112:	0023      	movs	r3, r4
 8004114:	3344      	adds	r3, #68	@ 0x44
 8004116:	4299      	cmp	r1, r3
 8004118:	d001      	beq.n	800411e <__ssrefill_r+0x16>
 800411a:	f7ff fe11 	bl	8003d40 <_free_r>
 800411e:	2000      	movs	r0, #0
 8004120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004122:	6360      	str	r0, [r4, #52]	@ 0x34
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	4283      	cmp	r3, r0
 8004128:	d002      	beq.n	8004130 <__ssrefill_r+0x28>
 800412a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	bd10      	pop	{r4, pc}
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	2001      	movs	r0, #1
 8004134:	6023      	str	r3, [r4, #0]
 8004136:	2300      	movs	r3, #0
 8004138:	89a2      	ldrh	r2, [r4, #12]
 800413a:	6063      	str	r3, [r4, #4]
 800413c:	3320      	adds	r3, #32
 800413e:	4313      	orrs	r3, r2
 8004140:	81a3      	strh	r3, [r4, #12]
 8004142:	4240      	negs	r0, r0
 8004144:	e7f3      	b.n	800412e <__ssrefill_r+0x26>
	...

08004148 <__ssvfiscanf_r>:
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	4cab      	ldr	r4, [pc, #684]	@ (80043f8 <__ssvfiscanf_r+0x2b0>)
 800414c:	44a5      	add	sp, r4
 800414e:	000c      	movs	r4, r1
 8004150:	2100      	movs	r1, #0
 8004152:	9000      	str	r0, [sp, #0]
 8004154:	20be      	movs	r0, #190	@ 0xbe
 8004156:	9146      	str	r1, [sp, #280]	@ 0x118
 8004158:	9147      	str	r1, [sp, #284]	@ 0x11c
 800415a:	a903      	add	r1, sp, #12
 800415c:	9148      	str	r1, [sp, #288]	@ 0x120
 800415e:	49a7      	ldr	r1, [pc, #668]	@ (80043fc <__ssvfiscanf_r+0x2b4>)
 8004160:	0040      	lsls	r0, r0, #1
 8004162:	ad43      	add	r5, sp, #268	@ 0x10c
 8004164:	5029      	str	r1, [r5, r0]
 8004166:	49a6      	ldr	r1, [pc, #664]	@ (8004400 <__ssvfiscanf_r+0x2b8>)
 8004168:	3004      	adds	r0, #4
 800416a:	ad43      	add	r5, sp, #268	@ 0x10c
 800416c:	5029      	str	r1, [r5, r0]
 800416e:	9302      	str	r3, [sp, #8]
 8004170:	7816      	ldrb	r6, [r2, #0]
 8004172:	2e00      	cmp	r6, #0
 8004174:	d100      	bne.n	8004178 <__ssvfiscanf_r+0x30>
 8004176:	e13c      	b.n	80043f2 <__ssvfiscanf_r+0x2aa>
 8004178:	2308      	movs	r3, #8
 800417a:	2008      	movs	r0, #8
 800417c:	4da1      	ldr	r5, [pc, #644]	@ (8004404 <__ssvfiscanf_r+0x2bc>)
 800417e:	1c57      	adds	r7, r2, #1
 8004180:	5da9      	ldrb	r1, [r5, r6]
 8004182:	400b      	ands	r3, r1
 8004184:	4201      	tst	r1, r0
 8004186:	d01d      	beq.n	80041c4 <__ssvfiscanf_r+0x7c>
 8004188:	0006      	movs	r6, r0
 800418a:	6863      	ldr	r3, [r4, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	dd0f      	ble.n	80041b0 <__ssvfiscanf_r+0x68>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	5caa      	ldrb	r2, [r5, r2]
 8004196:	4232      	tst	r2, r6
 8004198:	d101      	bne.n	800419e <__ssvfiscanf_r+0x56>
 800419a:	003a      	movs	r2, r7
 800419c:	e7e8      	b.n	8004170 <__ssvfiscanf_r+0x28>
 800419e:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80041a0:	3301      	adds	r3, #1
 80041a2:	3201      	adds	r2, #1
 80041a4:	9247      	str	r2, [sp, #284]	@ 0x11c
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	3a01      	subs	r2, #1
 80041ac:	6062      	str	r2, [r4, #4]
 80041ae:	e7ec      	b.n	800418a <__ssvfiscanf_r+0x42>
 80041b0:	22c0      	movs	r2, #192	@ 0xc0
 80041b2:	ab43      	add	r3, sp, #268	@ 0x10c
 80041b4:	0052      	lsls	r2, r2, #1
 80041b6:	0021      	movs	r1, r4
 80041b8:	589b      	ldr	r3, [r3, r2]
 80041ba:	9800      	ldr	r0, [sp, #0]
 80041bc:	4798      	blx	r3
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0e6      	beq.n	8004190 <__ssvfiscanf_r+0x48>
 80041c2:	e7ea      	b.n	800419a <__ssvfiscanf_r+0x52>
 80041c4:	2e25      	cmp	r6, #37	@ 0x25
 80041c6:	d162      	bne.n	800428e <__ssvfiscanf_r+0x146>
 80041c8:	9345      	str	r3, [sp, #276]	@ 0x114
 80041ca:	9343      	str	r3, [sp, #268]	@ 0x10c
 80041cc:	7853      	ldrb	r3, [r2, #1]
 80041ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80041d0:	d102      	bne.n	80041d8 <__ssvfiscanf_r+0x90>
 80041d2:	3b1a      	subs	r3, #26
 80041d4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80041d6:	1c97      	adds	r7, r2, #2
 80041d8:	003d      	movs	r5, r7
 80041da:	220a      	movs	r2, #10
 80041dc:	7829      	ldrb	r1, [r5, #0]
 80041de:	1c6f      	adds	r7, r5, #1
 80041e0:	000b      	movs	r3, r1
 80041e2:	3b30      	subs	r3, #48	@ 0x30
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d91f      	bls.n	8004228 <__ssvfiscanf_r+0xe0>
 80041e8:	4b87      	ldr	r3, [pc, #540]	@ (8004408 <__ssvfiscanf_r+0x2c0>)
 80041ea:	2203      	movs	r2, #3
 80041ec:	0018      	movs	r0, r3
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	f000 fc74 	bl	8004adc <memchr>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d007      	beq.n	8004208 <__ssvfiscanf_r+0xc0>
 80041f8:	9b01      	ldr	r3, [sp, #4]
 80041fa:	003d      	movs	r5, r7
 80041fc:	1ac0      	subs	r0, r0, r3
 80041fe:	2301      	movs	r3, #1
 8004200:	4083      	lsls	r3, r0
 8004202:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004204:	4313      	orrs	r3, r2
 8004206:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004208:	782b      	ldrb	r3, [r5, #0]
 800420a:	1c6f      	adds	r7, r5, #1
 800420c:	2b78      	cmp	r3, #120	@ 0x78
 800420e:	d806      	bhi.n	800421e <__ssvfiscanf_r+0xd6>
 8004210:	2b57      	cmp	r3, #87	@ 0x57
 8004212:	d810      	bhi.n	8004236 <__ssvfiscanf_r+0xee>
 8004214:	2b25      	cmp	r3, #37	@ 0x25
 8004216:	d03a      	beq.n	800428e <__ssvfiscanf_r+0x146>
 8004218:	d834      	bhi.n	8004284 <__ssvfiscanf_r+0x13c>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d055      	beq.n	80042ca <__ssvfiscanf_r+0x182>
 800421e:	2303      	movs	r3, #3
 8004220:	9349      	str	r3, [sp, #292]	@ 0x124
 8004222:	3307      	adds	r3, #7
 8004224:	9344      	str	r3, [sp, #272]	@ 0x110
 8004226:	e069      	b.n	80042fc <__ssvfiscanf_r+0x1b4>
 8004228:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800422a:	003d      	movs	r5, r7
 800422c:	4353      	muls	r3, r2
 800422e:	3b30      	subs	r3, #48	@ 0x30
 8004230:	185b      	adds	r3, r3, r1
 8004232:	9345      	str	r3, [sp, #276]	@ 0x114
 8004234:	e7d2      	b.n	80041dc <__ssvfiscanf_r+0x94>
 8004236:	0018      	movs	r0, r3
 8004238:	3858      	subs	r0, #88	@ 0x58
 800423a:	2820      	cmp	r0, #32
 800423c:	d8ef      	bhi.n	800421e <__ssvfiscanf_r+0xd6>
 800423e:	f7fb ff75 	bl	800012c <__gnu_thumb1_case_shi>
 8004242:	004b      	.short	0x004b
 8004244:	ffeeffee 	.word	0xffeeffee
 8004248:	ffee007d 	.word	0xffee007d
 800424c:	ffeeffee 	.word	0xffeeffee
 8004250:	ffeeffee 	.word	0xffeeffee
 8004254:	ffeeffee 	.word	0xffeeffee
 8004258:	007b0088 	.word	0x007b0088
 800425c:	00240024 	.word	0x00240024
 8004260:	ffee0024 	.word	0xffee0024
 8004264:	ffee0055 	.word	0xffee0055
 8004268:	ffeeffee 	.word	0xffeeffee
 800426c:	0090ffee 	.word	0x0090ffee
 8004270:	00470059 	.word	0x00470059
 8004274:	ffeeffee 	.word	0xffeeffee
 8004278:	ffee008e 	.word	0xffee008e
 800427c:	ffee007b 	.word	0xffee007b
 8004280:	004bffee 	.word	0x004bffee
 8004284:	3b45      	subs	r3, #69	@ 0x45
 8004286:	2b02      	cmp	r3, #2
 8004288:	d8c9      	bhi.n	800421e <__ssvfiscanf_r+0xd6>
 800428a:	2305      	movs	r3, #5
 800428c:	e035      	b.n	80042fa <__ssvfiscanf_r+0x1b2>
 800428e:	6863      	ldr	r3, [r4, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	dd0d      	ble.n	80042b0 <__ssvfiscanf_r+0x168>
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	781a      	ldrb	r2, [r3, #0]
 8004298:	42b2      	cmp	r2, r6
 800429a:	d000      	beq.n	800429e <__ssvfiscanf_r+0x156>
 800429c:	e0a9      	b.n	80043f2 <__ssvfiscanf_r+0x2aa>
 800429e:	3301      	adds	r3, #1
 80042a0:	6862      	ldr	r2, [r4, #4]
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80042a6:	3a01      	subs	r2, #1
 80042a8:	3301      	adds	r3, #1
 80042aa:	6062      	str	r2, [r4, #4]
 80042ac:	9347      	str	r3, [sp, #284]	@ 0x11c
 80042ae:	e774      	b.n	800419a <__ssvfiscanf_r+0x52>
 80042b0:	23c0      	movs	r3, #192	@ 0xc0
 80042b2:	aa43      	add	r2, sp, #268	@ 0x10c
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	0021      	movs	r1, r4
 80042b8:	58d3      	ldr	r3, [r2, r3]
 80042ba:	9800      	ldr	r0, [sp, #0]
 80042bc:	4798      	blx	r3
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0e8      	beq.n	8004294 <__ssvfiscanf_r+0x14c>
 80042c2:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80042c4:	2800      	cmp	r0, #0
 80042c6:	d000      	beq.n	80042ca <__ssvfiscanf_r+0x182>
 80042c8:	e08b      	b.n	80043e2 <__ssvfiscanf_r+0x29a>
 80042ca:	2001      	movs	r0, #1
 80042cc:	4240      	negs	r0, r0
 80042ce:	e08c      	b.n	80043ea <__ssvfiscanf_r+0x2a2>
 80042d0:	2220      	movs	r2, #32
 80042d2:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80042d4:	430a      	orrs	r2, r1
 80042d6:	9243      	str	r2, [sp, #268]	@ 0x10c
 80042d8:	2280      	movs	r2, #128	@ 0x80
 80042da:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 80042dc:	0092      	lsls	r2, r2, #2
 80042de:	430a      	orrs	r2, r1
 80042e0:	9243      	str	r2, [sp, #268]	@ 0x10c
 80042e2:	2210      	movs	r2, #16
 80042e4:	9244      	str	r2, [sp, #272]	@ 0x110
 80042e6:	2b6e      	cmp	r3, #110	@ 0x6e
 80042e8:	d902      	bls.n	80042f0 <__ssvfiscanf_r+0x1a8>
 80042ea:	e005      	b.n	80042f8 <__ssvfiscanf_r+0x1b0>
 80042ec:	2300      	movs	r3, #0
 80042ee:	9344      	str	r3, [sp, #272]	@ 0x110
 80042f0:	2303      	movs	r3, #3
 80042f2:	e002      	b.n	80042fa <__ssvfiscanf_r+0x1b2>
 80042f4:	2308      	movs	r3, #8
 80042f6:	9344      	str	r3, [sp, #272]	@ 0x110
 80042f8:	2304      	movs	r3, #4
 80042fa:	9349      	str	r3, [sp, #292]	@ 0x124
 80042fc:	6863      	ldr	r3, [r4, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	dd3e      	ble.n	8004380 <__ssvfiscanf_r+0x238>
 8004302:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004304:	065b      	lsls	r3, r3, #25
 8004306:	d408      	bmi.n	800431a <__ssvfiscanf_r+0x1d2>
 8004308:	26c0      	movs	r6, #192	@ 0xc0
 800430a:	2508      	movs	r5, #8
 800430c:	0076      	lsls	r6, r6, #1
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	493c      	ldr	r1, [pc, #240]	@ (8004404 <__ssvfiscanf_r+0x2bc>)
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	5c8a      	ldrb	r2, [r1, r2]
 8004316:	422a      	tst	r2, r5
 8004318:	d13c      	bne.n	8004394 <__ssvfiscanf_r+0x24c>
 800431a:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800431c:	2b02      	cmp	r3, #2
 800431e:	dc4c      	bgt.n	80043ba <__ssvfiscanf_r+0x272>
 8004320:	0022      	movs	r2, r4
 8004322:	9800      	ldr	r0, [sp, #0]
 8004324:	ab02      	add	r3, sp, #8
 8004326:	a943      	add	r1, sp, #268	@ 0x10c
 8004328:	f000 f9ee 	bl	8004708 <_scanf_chars>
 800432c:	2801      	cmp	r0, #1
 800432e:	d060      	beq.n	80043f2 <__ssvfiscanf_r+0x2aa>
 8004330:	2802      	cmp	r0, #2
 8004332:	d000      	beq.n	8004336 <__ssvfiscanf_r+0x1ee>
 8004334:	e731      	b.n	800419a <__ssvfiscanf_r+0x52>
 8004336:	e7c4      	b.n	80042c2 <__ssvfiscanf_r+0x17a>
 8004338:	220a      	movs	r2, #10
 800433a:	e7d3      	b.n	80042e4 <__ssvfiscanf_r+0x19c>
 800433c:	0039      	movs	r1, r7
 800433e:	a803      	add	r0, sp, #12
 8004340:	f000 fb42 	bl	80049c8 <__sccl>
 8004344:	2340      	movs	r3, #64	@ 0x40
 8004346:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004348:	0007      	movs	r7, r0
 800434a:	4313      	orrs	r3, r2
 800434c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800434e:	2301      	movs	r3, #1
 8004350:	e7d3      	b.n	80042fa <__ssvfiscanf_r+0x1b2>
 8004352:	2340      	movs	r3, #64	@ 0x40
 8004354:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004356:	4313      	orrs	r3, r2
 8004358:	9343      	str	r3, [sp, #268]	@ 0x10c
 800435a:	2300      	movs	r3, #0
 800435c:	e7cd      	b.n	80042fa <__ssvfiscanf_r+0x1b2>
 800435e:	2302      	movs	r3, #2
 8004360:	e7cb      	b.n	80042fa <__ssvfiscanf_r+0x1b2>
 8004362:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004364:	06d3      	lsls	r3, r2, #27
 8004366:	d500      	bpl.n	800436a <__ssvfiscanf_r+0x222>
 8004368:	e717      	b.n	800419a <__ssvfiscanf_r+0x52>
 800436a:	9b02      	ldr	r3, [sp, #8]
 800436c:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800436e:	1d18      	adds	r0, r3, #4
 8004370:	9002      	str	r0, [sp, #8]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	07d5      	lsls	r5, r2, #31
 8004376:	d501      	bpl.n	800437c <__ssvfiscanf_r+0x234>
 8004378:	8019      	strh	r1, [r3, #0]
 800437a:	e70e      	b.n	800419a <__ssvfiscanf_r+0x52>
 800437c:	6019      	str	r1, [r3, #0]
 800437e:	e70c      	b.n	800419a <__ssvfiscanf_r+0x52>
 8004380:	23c0      	movs	r3, #192	@ 0xc0
 8004382:	aa43      	add	r2, sp, #268	@ 0x10c
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	0021      	movs	r1, r4
 8004388:	58d3      	ldr	r3, [r2, r3]
 800438a:	9800      	ldr	r0, [sp, #0]
 800438c:	4798      	blx	r3
 800438e:	2800      	cmp	r0, #0
 8004390:	d0b7      	beq.n	8004302 <__ssvfiscanf_r+0x1ba>
 8004392:	e796      	b.n	80042c2 <__ssvfiscanf_r+0x17a>
 8004394:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004396:	3201      	adds	r2, #1
 8004398:	9247      	str	r2, [sp, #284]	@ 0x11c
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	3a01      	subs	r2, #1
 800439e:	6062      	str	r2, [r4, #4]
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	dd02      	ble.n	80043aa <__ssvfiscanf_r+0x262>
 80043a4:	3301      	adds	r3, #1
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	e7b1      	b.n	800430e <__ssvfiscanf_r+0x1c6>
 80043aa:	ab43      	add	r3, sp, #268	@ 0x10c
 80043ac:	0021      	movs	r1, r4
 80043ae:	599b      	ldr	r3, [r3, r6]
 80043b0:	9800      	ldr	r0, [sp, #0]
 80043b2:	4798      	blx	r3
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d0aa      	beq.n	800430e <__ssvfiscanf_r+0x1c6>
 80043b8:	e783      	b.n	80042c2 <__ssvfiscanf_r+0x17a>
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	dc06      	bgt.n	80043cc <__ssvfiscanf_r+0x284>
 80043be:	0022      	movs	r2, r4
 80043c0:	9800      	ldr	r0, [sp, #0]
 80043c2:	ab02      	add	r3, sp, #8
 80043c4:	a943      	add	r1, sp, #268	@ 0x10c
 80043c6:	f000 f9ff 	bl	80047c8 <_scanf_i>
 80043ca:	e7af      	b.n	800432c <__ssvfiscanf_r+0x1e4>
 80043cc:	4b0f      	ldr	r3, [pc, #60]	@ (800440c <__ssvfiscanf_r+0x2c4>)
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d100      	bne.n	80043d4 <__ssvfiscanf_r+0x28c>
 80043d2:	e6e2      	b.n	800419a <__ssvfiscanf_r+0x52>
 80043d4:	0022      	movs	r2, r4
 80043d6:	9800      	ldr	r0, [sp, #0]
 80043d8:	ab02      	add	r3, sp, #8
 80043da:	a943      	add	r1, sp, #268	@ 0x10c
 80043dc:	e000      	b.n	80043e0 <__ssvfiscanf_r+0x298>
 80043de:	bf00      	nop
 80043e0:	e7a4      	b.n	800432c <__ssvfiscanf_r+0x1e4>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	065b      	lsls	r3, r3, #25
 80043e6:	d500      	bpl.n	80043ea <__ssvfiscanf_r+0x2a2>
 80043e8:	e76f      	b.n	80042ca <__ssvfiscanf_r+0x182>
 80043ea:	23a5      	movs	r3, #165	@ 0xa5
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	449d      	add	sp, r3
 80043f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f2:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80043f4:	e7f9      	b.n	80043ea <__ssvfiscanf_r+0x2a2>
 80043f6:	46c0      	nop			@ (mov r8, r8)
 80043f8:	fffffd6c 	.word	0xfffffd6c
 80043fc:	08004091 	.word	0x08004091
 8004400:	08004109 	.word	0x08004109
 8004404:	080053fd 	.word	0x080053fd
 8004408:	08005503 	.word	0x08005503
 800440c:	00000000 	.word	0x00000000

08004410 <_printf_common>:
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	0016      	movs	r6, r2
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	688a      	ldr	r2, [r1, #8]
 8004418:	690b      	ldr	r3, [r1, #16]
 800441a:	000c      	movs	r4, r1
 800441c:	9000      	str	r0, [sp, #0]
 800441e:	4293      	cmp	r3, r2
 8004420:	da00      	bge.n	8004424 <_printf_common+0x14>
 8004422:	0013      	movs	r3, r2
 8004424:	0022      	movs	r2, r4
 8004426:	6033      	str	r3, [r6, #0]
 8004428:	3243      	adds	r2, #67	@ 0x43
 800442a:	7812      	ldrb	r2, [r2, #0]
 800442c:	2a00      	cmp	r2, #0
 800442e:	d001      	beq.n	8004434 <_printf_common+0x24>
 8004430:	3301      	adds	r3, #1
 8004432:	6033      	str	r3, [r6, #0]
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	069b      	lsls	r3, r3, #26
 8004438:	d502      	bpl.n	8004440 <_printf_common+0x30>
 800443a:	6833      	ldr	r3, [r6, #0]
 800443c:	3302      	adds	r3, #2
 800443e:	6033      	str	r3, [r6, #0]
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	2306      	movs	r3, #6
 8004444:	0015      	movs	r5, r2
 8004446:	401d      	ands	r5, r3
 8004448:	421a      	tst	r2, r3
 800444a:	d027      	beq.n	800449c <_printf_common+0x8c>
 800444c:	0023      	movs	r3, r4
 800444e:	3343      	adds	r3, #67	@ 0x43
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	4193      	sbcs	r3, r2
 8004456:	6822      	ldr	r2, [r4, #0]
 8004458:	0692      	lsls	r2, r2, #26
 800445a:	d430      	bmi.n	80044be <_printf_common+0xae>
 800445c:	0022      	movs	r2, r4
 800445e:	9901      	ldr	r1, [sp, #4]
 8004460:	9800      	ldr	r0, [sp, #0]
 8004462:	9d08      	ldr	r5, [sp, #32]
 8004464:	3243      	adds	r2, #67	@ 0x43
 8004466:	47a8      	blx	r5
 8004468:	3001      	adds	r0, #1
 800446a:	d025      	beq.n	80044b8 <_printf_common+0xa8>
 800446c:	2206      	movs	r2, #6
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	2500      	movs	r5, #0
 8004472:	4013      	ands	r3, r2
 8004474:	2b04      	cmp	r3, #4
 8004476:	d105      	bne.n	8004484 <_printf_common+0x74>
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	68e5      	ldr	r5, [r4, #12]
 800447c:	1aed      	subs	r5, r5, r3
 800447e:	43eb      	mvns	r3, r5
 8004480:	17db      	asrs	r3, r3, #31
 8004482:	401d      	ands	r5, r3
 8004484:	68a3      	ldr	r3, [r4, #8]
 8004486:	6922      	ldr	r2, [r4, #16]
 8004488:	4293      	cmp	r3, r2
 800448a:	dd01      	ble.n	8004490 <_printf_common+0x80>
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	18ed      	adds	r5, r5, r3
 8004490:	2600      	movs	r6, #0
 8004492:	42b5      	cmp	r5, r6
 8004494:	d120      	bne.n	80044d8 <_printf_common+0xc8>
 8004496:	2000      	movs	r0, #0
 8004498:	e010      	b.n	80044bc <_printf_common+0xac>
 800449a:	3501      	adds	r5, #1
 800449c:	68e3      	ldr	r3, [r4, #12]
 800449e:	6832      	ldr	r2, [r6, #0]
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	42ab      	cmp	r3, r5
 80044a4:	ddd2      	ble.n	800444c <_printf_common+0x3c>
 80044a6:	0022      	movs	r2, r4
 80044a8:	2301      	movs	r3, #1
 80044aa:	9901      	ldr	r1, [sp, #4]
 80044ac:	9800      	ldr	r0, [sp, #0]
 80044ae:	9f08      	ldr	r7, [sp, #32]
 80044b0:	3219      	adds	r2, #25
 80044b2:	47b8      	blx	r7
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1f0      	bne.n	800449a <_printf_common+0x8a>
 80044b8:	2001      	movs	r0, #1
 80044ba:	4240      	negs	r0, r0
 80044bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044be:	2030      	movs	r0, #48	@ 0x30
 80044c0:	18e1      	adds	r1, r4, r3
 80044c2:	3143      	adds	r1, #67	@ 0x43
 80044c4:	7008      	strb	r0, [r1, #0]
 80044c6:	0021      	movs	r1, r4
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	3145      	adds	r1, #69	@ 0x45
 80044cc:	7809      	ldrb	r1, [r1, #0]
 80044ce:	18a2      	adds	r2, r4, r2
 80044d0:	3243      	adds	r2, #67	@ 0x43
 80044d2:	3302      	adds	r3, #2
 80044d4:	7011      	strb	r1, [r2, #0]
 80044d6:	e7c1      	b.n	800445c <_printf_common+0x4c>
 80044d8:	0022      	movs	r2, r4
 80044da:	2301      	movs	r3, #1
 80044dc:	9901      	ldr	r1, [sp, #4]
 80044de:	9800      	ldr	r0, [sp, #0]
 80044e0:	9f08      	ldr	r7, [sp, #32]
 80044e2:	321a      	adds	r2, #26
 80044e4:	47b8      	blx	r7
 80044e6:	3001      	adds	r0, #1
 80044e8:	d0e6      	beq.n	80044b8 <_printf_common+0xa8>
 80044ea:	3601      	adds	r6, #1
 80044ec:	e7d1      	b.n	8004492 <_printf_common+0x82>
	...

080044f0 <_printf_i>:
 80044f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044f2:	b08b      	sub	sp, #44	@ 0x2c
 80044f4:	9206      	str	r2, [sp, #24]
 80044f6:	000a      	movs	r2, r1
 80044f8:	3243      	adds	r2, #67	@ 0x43
 80044fa:	9307      	str	r3, [sp, #28]
 80044fc:	9005      	str	r0, [sp, #20]
 80044fe:	9203      	str	r2, [sp, #12]
 8004500:	7e0a      	ldrb	r2, [r1, #24]
 8004502:	000c      	movs	r4, r1
 8004504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004506:	2a78      	cmp	r2, #120	@ 0x78
 8004508:	d809      	bhi.n	800451e <_printf_i+0x2e>
 800450a:	2a62      	cmp	r2, #98	@ 0x62
 800450c:	d80b      	bhi.n	8004526 <_printf_i+0x36>
 800450e:	2a00      	cmp	r2, #0
 8004510:	d100      	bne.n	8004514 <_printf_i+0x24>
 8004512:	e0ba      	b.n	800468a <_printf_i+0x19a>
 8004514:	497a      	ldr	r1, [pc, #488]	@ (8004700 <_printf_i+0x210>)
 8004516:	9104      	str	r1, [sp, #16]
 8004518:	2a58      	cmp	r2, #88	@ 0x58
 800451a:	d100      	bne.n	800451e <_printf_i+0x2e>
 800451c:	e08e      	b.n	800463c <_printf_i+0x14c>
 800451e:	0025      	movs	r5, r4
 8004520:	3542      	adds	r5, #66	@ 0x42
 8004522:	702a      	strb	r2, [r5, #0]
 8004524:	e022      	b.n	800456c <_printf_i+0x7c>
 8004526:	0010      	movs	r0, r2
 8004528:	3863      	subs	r0, #99	@ 0x63
 800452a:	2815      	cmp	r0, #21
 800452c:	d8f7      	bhi.n	800451e <_printf_i+0x2e>
 800452e:	f7fb fdfd 	bl	800012c <__gnu_thumb1_case_shi>
 8004532:	0016      	.short	0x0016
 8004534:	fff6001f 	.word	0xfff6001f
 8004538:	fff6fff6 	.word	0xfff6fff6
 800453c:	001ffff6 	.word	0x001ffff6
 8004540:	fff6fff6 	.word	0xfff6fff6
 8004544:	fff6fff6 	.word	0xfff6fff6
 8004548:	0036009f 	.word	0x0036009f
 800454c:	fff6007e 	.word	0xfff6007e
 8004550:	00b0fff6 	.word	0x00b0fff6
 8004554:	0036fff6 	.word	0x0036fff6
 8004558:	fff6fff6 	.word	0xfff6fff6
 800455c:	0082      	.short	0x0082
 800455e:	0025      	movs	r5, r4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	3542      	adds	r5, #66	@ 0x42
 8004564:	1d11      	adds	r1, r2, #4
 8004566:	6019      	str	r1, [r3, #0]
 8004568:	6813      	ldr	r3, [r2, #0]
 800456a:	702b      	strb	r3, [r5, #0]
 800456c:	2301      	movs	r3, #1
 800456e:	e09e      	b.n	80046ae <_printf_i+0x1be>
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	6809      	ldr	r1, [r1, #0]
 8004574:	1d02      	adds	r2, r0, #4
 8004576:	060d      	lsls	r5, r1, #24
 8004578:	d50b      	bpl.n	8004592 <_printf_i+0xa2>
 800457a:	6806      	ldr	r6, [r0, #0]
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	2e00      	cmp	r6, #0
 8004580:	da03      	bge.n	800458a <_printf_i+0x9a>
 8004582:	232d      	movs	r3, #45	@ 0x2d
 8004584:	9a03      	ldr	r2, [sp, #12]
 8004586:	4276      	negs	r6, r6
 8004588:	7013      	strb	r3, [r2, #0]
 800458a:	4b5d      	ldr	r3, [pc, #372]	@ (8004700 <_printf_i+0x210>)
 800458c:	270a      	movs	r7, #10
 800458e:	9304      	str	r3, [sp, #16]
 8004590:	e018      	b.n	80045c4 <_printf_i+0xd4>
 8004592:	6806      	ldr	r6, [r0, #0]
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	0649      	lsls	r1, r1, #25
 8004598:	d5f1      	bpl.n	800457e <_printf_i+0x8e>
 800459a:	b236      	sxth	r6, r6
 800459c:	e7ef      	b.n	800457e <_printf_i+0x8e>
 800459e:	6808      	ldr	r0, [r1, #0]
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	c940      	ldmia	r1!, {r6}
 80045a4:	0605      	lsls	r5, r0, #24
 80045a6:	d402      	bmi.n	80045ae <_printf_i+0xbe>
 80045a8:	0640      	lsls	r0, r0, #25
 80045aa:	d500      	bpl.n	80045ae <_printf_i+0xbe>
 80045ac:	b2b6      	uxth	r6, r6
 80045ae:	6019      	str	r1, [r3, #0]
 80045b0:	4b53      	ldr	r3, [pc, #332]	@ (8004700 <_printf_i+0x210>)
 80045b2:	270a      	movs	r7, #10
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	2a6f      	cmp	r2, #111	@ 0x6f
 80045b8:	d100      	bne.n	80045bc <_printf_i+0xcc>
 80045ba:	3f02      	subs	r7, #2
 80045bc:	0023      	movs	r3, r4
 80045be:	2200      	movs	r2, #0
 80045c0:	3343      	adds	r3, #67	@ 0x43
 80045c2:	701a      	strb	r2, [r3, #0]
 80045c4:	6863      	ldr	r3, [r4, #4]
 80045c6:	60a3      	str	r3, [r4, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	db06      	blt.n	80045da <_printf_i+0xea>
 80045cc:	2104      	movs	r1, #4
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	9d03      	ldr	r5, [sp, #12]
 80045d2:	438a      	bics	r2, r1
 80045d4:	6022      	str	r2, [r4, #0]
 80045d6:	4333      	orrs	r3, r6
 80045d8:	d00c      	beq.n	80045f4 <_printf_i+0x104>
 80045da:	9d03      	ldr	r5, [sp, #12]
 80045dc:	0030      	movs	r0, r6
 80045de:	0039      	movs	r1, r7
 80045e0:	f7fb fe34 	bl	800024c <__aeabi_uidivmod>
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	3d01      	subs	r5, #1
 80045e8:	5c5b      	ldrb	r3, [r3, r1]
 80045ea:	702b      	strb	r3, [r5, #0]
 80045ec:	0033      	movs	r3, r6
 80045ee:	0006      	movs	r6, r0
 80045f0:	429f      	cmp	r7, r3
 80045f2:	d9f3      	bls.n	80045dc <_printf_i+0xec>
 80045f4:	2f08      	cmp	r7, #8
 80045f6:	d109      	bne.n	800460c <_printf_i+0x11c>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	07db      	lsls	r3, r3, #31
 80045fc:	d506      	bpl.n	800460c <_printf_i+0x11c>
 80045fe:	6862      	ldr	r2, [r4, #4]
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	429a      	cmp	r2, r3
 8004604:	dc02      	bgt.n	800460c <_printf_i+0x11c>
 8004606:	2330      	movs	r3, #48	@ 0x30
 8004608:	3d01      	subs	r5, #1
 800460a:	702b      	strb	r3, [r5, #0]
 800460c:	9b03      	ldr	r3, [sp, #12]
 800460e:	1b5b      	subs	r3, r3, r5
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	9b07      	ldr	r3, [sp, #28]
 8004614:	0021      	movs	r1, r4
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	9805      	ldr	r0, [sp, #20]
 800461a:	9b06      	ldr	r3, [sp, #24]
 800461c:	aa09      	add	r2, sp, #36	@ 0x24
 800461e:	f7ff fef7 	bl	8004410 <_printf_common>
 8004622:	3001      	adds	r0, #1
 8004624:	d148      	bne.n	80046b8 <_printf_i+0x1c8>
 8004626:	2001      	movs	r0, #1
 8004628:	4240      	negs	r0, r0
 800462a:	b00b      	add	sp, #44	@ 0x2c
 800462c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462e:	2220      	movs	r2, #32
 8004630:	6809      	ldr	r1, [r1, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	6022      	str	r2, [r4, #0]
 8004636:	2278      	movs	r2, #120	@ 0x78
 8004638:	4932      	ldr	r1, [pc, #200]	@ (8004704 <_printf_i+0x214>)
 800463a:	9104      	str	r1, [sp, #16]
 800463c:	0021      	movs	r1, r4
 800463e:	3145      	adds	r1, #69	@ 0x45
 8004640:	700a      	strb	r2, [r1, #0]
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	c940      	ldmia	r1!, {r6}
 8004648:	0610      	lsls	r0, r2, #24
 800464a:	d402      	bmi.n	8004652 <_printf_i+0x162>
 800464c:	0650      	lsls	r0, r2, #25
 800464e:	d500      	bpl.n	8004652 <_printf_i+0x162>
 8004650:	b2b6      	uxth	r6, r6
 8004652:	6019      	str	r1, [r3, #0]
 8004654:	07d3      	lsls	r3, r2, #31
 8004656:	d502      	bpl.n	800465e <_printf_i+0x16e>
 8004658:	2320      	movs	r3, #32
 800465a:	4313      	orrs	r3, r2
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	2e00      	cmp	r6, #0
 8004660:	d001      	beq.n	8004666 <_printf_i+0x176>
 8004662:	2710      	movs	r7, #16
 8004664:	e7aa      	b.n	80045bc <_printf_i+0xcc>
 8004666:	2220      	movs	r2, #32
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	4393      	bics	r3, r2
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	e7f8      	b.n	8004662 <_printf_i+0x172>
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	680d      	ldr	r5, [r1, #0]
 8004674:	1d10      	adds	r0, r2, #4
 8004676:	6949      	ldr	r1, [r1, #20]
 8004678:	6018      	str	r0, [r3, #0]
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	062e      	lsls	r6, r5, #24
 800467e:	d501      	bpl.n	8004684 <_printf_i+0x194>
 8004680:	6019      	str	r1, [r3, #0]
 8004682:	e002      	b.n	800468a <_printf_i+0x19a>
 8004684:	066d      	lsls	r5, r5, #25
 8004686:	d5fb      	bpl.n	8004680 <_printf_i+0x190>
 8004688:	8019      	strh	r1, [r3, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	9d03      	ldr	r5, [sp, #12]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	e7bf      	b.n	8004612 <_printf_i+0x122>
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	1d11      	adds	r1, r2, #4
 8004696:	6019      	str	r1, [r3, #0]
 8004698:	6815      	ldr	r5, [r2, #0]
 800469a:	2100      	movs	r1, #0
 800469c:	0028      	movs	r0, r5
 800469e:	6862      	ldr	r2, [r4, #4]
 80046a0:	f000 fa1c 	bl	8004adc <memchr>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d001      	beq.n	80046ac <_printf_i+0x1bc>
 80046a8:	1b40      	subs	r0, r0, r5
 80046aa:	6060      	str	r0, [r4, #4]
 80046ac:	6863      	ldr	r3, [r4, #4]
 80046ae:	6123      	str	r3, [r4, #16]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9a03      	ldr	r2, [sp, #12]
 80046b4:	7013      	strb	r3, [r2, #0]
 80046b6:	e7ac      	b.n	8004612 <_printf_i+0x122>
 80046b8:	002a      	movs	r2, r5
 80046ba:	6923      	ldr	r3, [r4, #16]
 80046bc:	9906      	ldr	r1, [sp, #24]
 80046be:	9805      	ldr	r0, [sp, #20]
 80046c0:	9d07      	ldr	r5, [sp, #28]
 80046c2:	47a8      	blx	r5
 80046c4:	3001      	adds	r0, #1
 80046c6:	d0ae      	beq.n	8004626 <_printf_i+0x136>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	079b      	lsls	r3, r3, #30
 80046cc:	d415      	bmi.n	80046fa <_printf_i+0x20a>
 80046ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046d0:	68e0      	ldr	r0, [r4, #12]
 80046d2:	4298      	cmp	r0, r3
 80046d4:	daa9      	bge.n	800462a <_printf_i+0x13a>
 80046d6:	0018      	movs	r0, r3
 80046d8:	e7a7      	b.n	800462a <_printf_i+0x13a>
 80046da:	0022      	movs	r2, r4
 80046dc:	2301      	movs	r3, #1
 80046de:	9906      	ldr	r1, [sp, #24]
 80046e0:	9805      	ldr	r0, [sp, #20]
 80046e2:	9e07      	ldr	r6, [sp, #28]
 80046e4:	3219      	adds	r2, #25
 80046e6:	47b0      	blx	r6
 80046e8:	3001      	adds	r0, #1
 80046ea:	d09c      	beq.n	8004626 <_printf_i+0x136>
 80046ec:	3501      	adds	r5, #1
 80046ee:	68e3      	ldr	r3, [r4, #12]
 80046f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	42ab      	cmp	r3, r5
 80046f6:	dcf0      	bgt.n	80046da <_printf_i+0x1ea>
 80046f8:	e7e9      	b.n	80046ce <_printf_i+0x1de>
 80046fa:	2500      	movs	r5, #0
 80046fc:	e7f7      	b.n	80046ee <_printf_i+0x1fe>
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	0800550e 	.word	0x0800550e
 8004704:	0800551f 	.word	0x0800551f

08004708 <_scanf_chars>:
 8004708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470a:	0015      	movs	r5, r2
 800470c:	688a      	ldr	r2, [r1, #8]
 800470e:	000c      	movs	r4, r1
 8004710:	9001      	str	r0, [sp, #4]
 8004712:	2a00      	cmp	r2, #0
 8004714:	d104      	bne.n	8004720 <_scanf_chars+0x18>
 8004716:	698a      	ldr	r2, [r1, #24]
 8004718:	2a00      	cmp	r2, #0
 800471a:	d117      	bne.n	800474c <_scanf_chars+0x44>
 800471c:	3201      	adds	r2, #1
 800471e:	60a2      	str	r2, [r4, #8]
 8004720:	6822      	ldr	r2, [r4, #0]
 8004722:	06d2      	lsls	r2, r2, #27
 8004724:	d403      	bmi.n	800472e <_scanf_chars+0x26>
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	1d11      	adds	r1, r2, #4
 800472a:	6019      	str	r1, [r3, #0]
 800472c:	6817      	ldr	r7, [r2, #0]
 800472e:	2600      	movs	r6, #0
 8004730:	69a0      	ldr	r0, [r4, #24]
 8004732:	2800      	cmp	r0, #0
 8004734:	d016      	beq.n	8004764 <_scanf_chars+0x5c>
 8004736:	2801      	cmp	r0, #1
 8004738:	d10b      	bne.n	8004752 <_scanf_chars+0x4a>
 800473a:	682b      	ldr	r3, [r5, #0]
 800473c:	6962      	ldr	r2, [r4, #20]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	5cd3      	ldrb	r3, [r2, r3]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10e      	bne.n	8004764 <_scanf_chars+0x5c>
 8004746:	2e00      	cmp	r6, #0
 8004748:	d03b      	beq.n	80047c2 <_scanf_chars+0xba>
 800474a:	e029      	b.n	80047a0 <_scanf_chars+0x98>
 800474c:	2201      	movs	r2, #1
 800474e:	4252      	negs	r2, r2
 8004750:	e7e5      	b.n	800471e <_scanf_chars+0x16>
 8004752:	2802      	cmp	r0, #2
 8004754:	d124      	bne.n	80047a0 <_scanf_chars+0x98>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	4a1a      	ldr	r2, [pc, #104]	@ (80047c4 <_scanf_chars+0xbc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	2208      	movs	r2, #8
 8004760:	4213      	tst	r3, r2
 8004762:	d11d      	bne.n	80047a0 <_scanf_chars+0x98>
 8004764:	2210      	movs	r2, #16
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	3601      	adds	r6, #1
 800476a:	4213      	tst	r3, r2
 800476c:	d103      	bne.n	8004776 <_scanf_chars+0x6e>
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	703b      	strb	r3, [r7, #0]
 8004774:	3701      	adds	r7, #1
 8004776:	682a      	ldr	r2, [r5, #0]
 8004778:	686b      	ldr	r3, [r5, #4]
 800477a:	3201      	adds	r2, #1
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	68a2      	ldr	r2, [r4, #8]
 8004780:	3b01      	subs	r3, #1
 8004782:	3a01      	subs	r2, #1
 8004784:	606b      	str	r3, [r5, #4]
 8004786:	60a2      	str	r2, [r4, #8]
 8004788:	2a00      	cmp	r2, #0
 800478a:	d009      	beq.n	80047a0 <_scanf_chars+0x98>
 800478c:	2b00      	cmp	r3, #0
 800478e:	dccf      	bgt.n	8004730 <_scanf_chars+0x28>
 8004790:	23c0      	movs	r3, #192	@ 0xc0
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	0029      	movs	r1, r5
 8004796:	58e3      	ldr	r3, [r4, r3]
 8004798:	9801      	ldr	r0, [sp, #4]
 800479a:	4798      	blx	r3
 800479c:	2800      	cmp	r0, #0
 800479e:	d0c7      	beq.n	8004730 <_scanf_chars+0x28>
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	2310      	movs	r3, #16
 80047a4:	0011      	movs	r1, r2
 80047a6:	4019      	ands	r1, r3
 80047a8:	421a      	tst	r2, r3
 80047aa:	d106      	bne.n	80047ba <_scanf_chars+0xb2>
 80047ac:	68e3      	ldr	r3, [r4, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60e3      	str	r3, [r4, #12]
 80047b2:	69a3      	ldr	r3, [r4, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d000      	beq.n	80047ba <_scanf_chars+0xb2>
 80047b8:	7039      	strb	r1, [r7, #0]
 80047ba:	2000      	movs	r0, #0
 80047bc:	6923      	ldr	r3, [r4, #16]
 80047be:	199b      	adds	r3, r3, r6
 80047c0:	6123      	str	r3, [r4, #16]
 80047c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047c4:	080053fd 	.word	0x080053fd

080047c8 <_scanf_i>:
 80047c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ca:	b08b      	sub	sp, #44	@ 0x2c
 80047cc:	9301      	str	r3, [sp, #4]
 80047ce:	4b78      	ldr	r3, [pc, #480]	@ (80049b0 <_scanf_i+0x1e8>)
 80047d0:	0016      	movs	r6, r2
 80047d2:	9004      	str	r0, [sp, #16]
 80047d4:	aa07      	add	r2, sp, #28
 80047d6:	cba1      	ldmia	r3!, {r0, r5, r7}
 80047d8:	c2a1      	stmia	r2!, {r0, r5, r7}
 80047da:	4a76      	ldr	r2, [pc, #472]	@ (80049b4 <_scanf_i+0x1ec>)
 80047dc:	698b      	ldr	r3, [r1, #24]
 80047de:	000c      	movs	r4, r1
 80047e0:	9205      	str	r2, [sp, #20]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d101      	bne.n	80047ea <_scanf_i+0x22>
 80047e6:	4b74      	ldr	r3, [pc, #464]	@ (80049b8 <_scanf_i+0x1f0>)
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	22ae      	movs	r2, #174	@ 0xae
 80047ec:	2000      	movs	r0, #0
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	0052      	lsls	r2, r2, #1
 80047f2:	1e59      	subs	r1, r3, #1
 80047f4:	9003      	str	r0, [sp, #12]
 80047f6:	4291      	cmp	r1, r2
 80047f8:	d905      	bls.n	8004806 <_scanf_i+0x3e>
 80047fa:	3b5e      	subs	r3, #94	@ 0x5e
 80047fc:	3bff      	subs	r3, #255	@ 0xff
 80047fe:	9303      	str	r3, [sp, #12]
 8004800:	235e      	movs	r3, #94	@ 0x5e
 8004802:	33ff      	adds	r3, #255	@ 0xff
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	0023      	movs	r3, r4
 8004808:	331c      	adds	r3, #28
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	23d0      	movs	r3, #208	@ 0xd0
 800480e:	2700      	movs	r7, #0
 8004810:	6822      	ldr	r2, [r4, #0]
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	4313      	orrs	r3, r2
 8004816:	6023      	str	r3, [r4, #0]
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	a807      	add	r0, sp, #28
 8004820:	7819      	ldrb	r1, [r3, #0]
 8004822:	00bb      	lsls	r3, r7, #2
 8004824:	2202      	movs	r2, #2
 8004826:	5818      	ldr	r0, [r3, r0]
 8004828:	f000 f958 	bl	8004adc <memchr>
 800482c:	2800      	cmp	r0, #0
 800482e:	d029      	beq.n	8004884 <_scanf_i+0xbc>
 8004830:	2f01      	cmp	r7, #1
 8004832:	d15e      	bne.n	80048f2 <_scanf_i+0x12a>
 8004834:	6863      	ldr	r3, [r4, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <_scanf_i+0x80>
 800483a:	3308      	adds	r3, #8
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	6063      	str	r3, [r4, #4]
 8004840:	33f9      	adds	r3, #249	@ 0xf9
 8004842:	33ff      	adds	r3, #255	@ 0xff
 8004844:	4313      	orrs	r3, r2
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	4a5c      	ldr	r2, [pc, #368]	@ (80049bc <_scanf_i+0x1f4>)
 800484c:	4013      	ands	r3, r2
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	68a3      	ldr	r3, [r4, #8]
 8004852:	1e5a      	subs	r2, r3, #1
 8004854:	60a2      	str	r2, [r4, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d014      	beq.n	8004884 <_scanf_i+0xbc>
 800485a:	6833      	ldr	r3, [r6, #0]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	6032      	str	r2, [r6, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	9a02      	ldr	r2, [sp, #8]
 8004864:	7013      	strb	r3, [r2, #0]
 8004866:	6873      	ldr	r3, [r6, #4]
 8004868:	1c55      	adds	r5, r2, #1
 800486a:	3b01      	subs	r3, #1
 800486c:	6073      	str	r3, [r6, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	dc07      	bgt.n	8004882 <_scanf_i+0xba>
 8004872:	23c0      	movs	r3, #192	@ 0xc0
 8004874:	005b      	lsls	r3, r3, #1
 8004876:	0031      	movs	r1, r6
 8004878:	58e3      	ldr	r3, [r4, r3]
 800487a:	9804      	ldr	r0, [sp, #16]
 800487c:	4798      	blx	r3
 800487e:	2800      	cmp	r0, #0
 8004880:	d17e      	bne.n	8004980 <_scanf_i+0x1b8>
 8004882:	9502      	str	r5, [sp, #8]
 8004884:	3701      	adds	r7, #1
 8004886:	2f03      	cmp	r7, #3
 8004888:	d1c8      	bne.n	800481c <_scanf_i+0x54>
 800488a:	6863      	ldr	r3, [r4, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <_scanf_i+0xcc>
 8004890:	330a      	adds	r3, #10
 8004892:	6063      	str	r3, [r4, #4]
 8004894:	2700      	movs	r7, #0
 8004896:	6863      	ldr	r3, [r4, #4]
 8004898:	4949      	ldr	r1, [pc, #292]	@ (80049c0 <_scanf_i+0x1f8>)
 800489a:	6960      	ldr	r0, [r4, #20]
 800489c:	1ac9      	subs	r1, r1, r3
 800489e:	f000 f893 	bl	80049c8 <__sccl>
 80048a2:	9d02      	ldr	r5, [sp, #8]
 80048a4:	68a3      	ldr	r3, [r4, #8]
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	9302      	str	r3, [sp, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03f      	beq.n	800492e <_scanf_i+0x166>
 80048ae:	6831      	ldr	r1, [r6, #0]
 80048b0:	6963      	ldr	r3, [r4, #20]
 80048b2:	780a      	ldrb	r2, [r1, #0]
 80048b4:	5c9b      	ldrb	r3, [r3, r2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d039      	beq.n	800492e <_scanf_i+0x166>
 80048ba:	2a30      	cmp	r2, #48	@ 0x30
 80048bc:	d128      	bne.n	8004910 <_scanf_i+0x148>
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	4218      	tst	r0, r3
 80048c4:	d024      	beq.n	8004910 <_scanf_i+0x148>
 80048c6:	9b03      	ldr	r3, [sp, #12]
 80048c8:	3701      	adds	r7, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <_scanf_i+0x112>
 80048ce:	001a      	movs	r2, r3
 80048d0:	9b02      	ldr	r3, [sp, #8]
 80048d2:	3a01      	subs	r2, #1
 80048d4:	3301      	adds	r3, #1
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	60a3      	str	r3, [r4, #8]
 80048da:	6873      	ldr	r3, [r6, #4]
 80048dc:	3b01      	subs	r3, #1
 80048de:	6073      	str	r3, [r6, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dd1c      	ble.n	800491e <_scanf_i+0x156>
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	e7d8      	b.n	80048a4 <_scanf_i+0xdc>
 80048f2:	2f02      	cmp	r7, #2
 80048f4:	d1ac      	bne.n	8004850 <_scanf_i+0x88>
 80048f6:	23c0      	movs	r3, #192	@ 0xc0
 80048f8:	2180      	movs	r1, #128	@ 0x80
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	4013      	ands	r3, r2
 8004900:	0089      	lsls	r1, r1, #2
 8004902:	428b      	cmp	r3, r1
 8004904:	d1c1      	bne.n	800488a <_scanf_i+0xc2>
 8004906:	2310      	movs	r3, #16
 8004908:	6063      	str	r3, [r4, #4]
 800490a:	33f0      	adds	r3, #240	@ 0xf0
 800490c:	4313      	orrs	r3, r2
 800490e:	e79e      	b.n	800484e <_scanf_i+0x86>
 8004910:	4b2c      	ldr	r3, [pc, #176]	@ (80049c4 <_scanf_i+0x1fc>)
 8004912:	4003      	ands	r3, r0
 8004914:	6023      	str	r3, [r4, #0]
 8004916:	780b      	ldrb	r3, [r1, #0]
 8004918:	702b      	strb	r3, [r5, #0]
 800491a:	3501      	adds	r5, #1
 800491c:	e7dd      	b.n	80048da <_scanf_i+0x112>
 800491e:	23c0      	movs	r3, #192	@ 0xc0
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	0031      	movs	r1, r6
 8004924:	58e3      	ldr	r3, [r4, r3]
 8004926:	9804      	ldr	r0, [sp, #16]
 8004928:	4798      	blx	r3
 800492a:	2800      	cmp	r0, #0
 800492c:	d0dd      	beq.n	80048ea <_scanf_i+0x122>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	05db      	lsls	r3, r3, #23
 8004932:	d50e      	bpl.n	8004952 <_scanf_i+0x18a>
 8004934:	9b00      	ldr	r3, [sp, #0]
 8004936:	429d      	cmp	r5, r3
 8004938:	d907      	bls.n	800494a <_scanf_i+0x182>
 800493a:	23be      	movs	r3, #190	@ 0xbe
 800493c:	3d01      	subs	r5, #1
 800493e:	005b      	lsls	r3, r3, #1
 8004940:	0032      	movs	r2, r6
 8004942:	7829      	ldrb	r1, [r5, #0]
 8004944:	58e3      	ldr	r3, [r4, r3]
 8004946:	9804      	ldr	r0, [sp, #16]
 8004948:	4798      	blx	r3
 800494a:	9b00      	ldr	r3, [sp, #0]
 800494c:	2001      	movs	r0, #1
 800494e:	429d      	cmp	r5, r3
 8004950:	d029      	beq.n	80049a6 <_scanf_i+0x1de>
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	2310      	movs	r3, #16
 8004956:	000a      	movs	r2, r1
 8004958:	401a      	ands	r2, r3
 800495a:	4219      	tst	r1, r3
 800495c:	d11c      	bne.n	8004998 <_scanf_i+0x1d0>
 800495e:	702a      	strb	r2, [r5, #0]
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	9900      	ldr	r1, [sp, #0]
 8004964:	9804      	ldr	r0, [sp, #16]
 8004966:	9e05      	ldr	r6, [sp, #20]
 8004968:	47b0      	blx	r6
 800496a:	9b01      	ldr	r3, [sp, #4]
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	0691      	lsls	r1, r2, #26
 8004972:	d507      	bpl.n	8004984 <_scanf_i+0x1bc>
 8004974:	9901      	ldr	r1, [sp, #4]
 8004976:	1d1a      	adds	r2, r3, #4
 8004978:	600a      	str	r2, [r1, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6018      	str	r0, [r3, #0]
 800497e:	e008      	b.n	8004992 <_scanf_i+0x1ca>
 8004980:	2700      	movs	r7, #0
 8004982:	e7d4      	b.n	800492e <_scanf_i+0x166>
 8004984:	1d19      	adds	r1, r3, #4
 8004986:	07d6      	lsls	r6, r2, #31
 8004988:	d50f      	bpl.n	80049aa <_scanf_i+0x1e2>
 800498a:	9a01      	ldr	r2, [sp, #4]
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	8018      	strh	r0, [r3, #0]
 8004992:	68e3      	ldr	r3, [r4, #12]
 8004994:	3301      	adds	r3, #1
 8004996:	60e3      	str	r3, [r4, #12]
 8004998:	2000      	movs	r0, #0
 800499a:	9b00      	ldr	r3, [sp, #0]
 800499c:	1aed      	subs	r5, r5, r3
 800499e:	6923      	ldr	r3, [r4, #16]
 80049a0:	19ed      	adds	r5, r5, r7
 80049a2:	195b      	adds	r3, r3, r5
 80049a4:	6123      	str	r3, [r4, #16]
 80049a6:	b00b      	add	sp, #44	@ 0x2c
 80049a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049aa:	9a01      	ldr	r2, [sp, #4]
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	e7e4      	b.n	800497a <_scanf_i+0x1b2>
 80049b0:	08004da4 	.word	0x08004da4
 80049b4:	08004d75 	.word	0x08004d75
 80049b8:	08004c69 	.word	0x08004c69
 80049bc:	fffffaff 	.word	0xfffffaff
 80049c0:	08005540 	.word	0x08005540
 80049c4:	fffff6ff 	.word	0xfffff6ff

080049c8 <__sccl>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	780b      	ldrb	r3, [r1, #0]
 80049cc:	0004      	movs	r4, r0
 80049ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80049d0:	d019      	beq.n	8004a06 <__sccl+0x3e>
 80049d2:	1c4d      	adds	r5, r1, #1
 80049d4:	2100      	movs	r1, #0
 80049d6:	0022      	movs	r2, r4
 80049d8:	1c60      	adds	r0, r4, #1
 80049da:	30ff      	adds	r0, #255	@ 0xff
 80049dc:	7011      	strb	r1, [r2, #0]
 80049de:	3201      	adds	r2, #1
 80049e0:	4282      	cmp	r2, r0
 80049e2:	d1fb      	bne.n	80049dc <__sccl+0x14>
 80049e4:	1e68      	subs	r0, r5, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d026      	beq.n	8004a38 <__sccl+0x70>
 80049ea:	2601      	movs	r6, #1
 80049ec:	404e      	eors	r6, r1
 80049ee:	0028      	movs	r0, r5
 80049f0:	54e6      	strb	r6, [r4, r3]
 80049f2:	7801      	ldrb	r1, [r0, #0]
 80049f4:	1c45      	adds	r5, r0, #1
 80049f6:	292d      	cmp	r1, #45	@ 0x2d
 80049f8:	d009      	beq.n	8004a0e <__sccl+0x46>
 80049fa:	295d      	cmp	r1, #93	@ 0x5d
 80049fc:	d01b      	beq.n	8004a36 <__sccl+0x6e>
 80049fe:	2900      	cmp	r1, #0
 8004a00:	d01a      	beq.n	8004a38 <__sccl+0x70>
 8004a02:	000b      	movs	r3, r1
 8004a04:	e7f3      	b.n	80049ee <__sccl+0x26>
 8004a06:	784b      	ldrb	r3, [r1, #1]
 8004a08:	1c8d      	adds	r5, r1, #2
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	e7e3      	b.n	80049d6 <__sccl+0xe>
 8004a0e:	7842      	ldrb	r2, [r0, #1]
 8004a10:	2a5d      	cmp	r2, #93	@ 0x5d
 8004a12:	d0f6      	beq.n	8004a02 <__sccl+0x3a>
 8004a14:	4293      	cmp	r3, r2
 8004a16:	dcf4      	bgt.n	8004a02 <__sccl+0x3a>
 8004a18:	0019      	movs	r1, r3
 8004a1a:	3002      	adds	r0, #2
 8004a1c:	3101      	adds	r1, #1
 8004a1e:	5466      	strb	r6, [r4, r1]
 8004a20:	428a      	cmp	r2, r1
 8004a22:	dcfb      	bgt.n	8004a1c <__sccl+0x54>
 8004a24:	1c59      	adds	r1, r3, #1
 8004a26:	4293      	cmp	r3, r2
 8004a28:	db02      	blt.n	8004a30 <__sccl+0x68>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	188b      	adds	r3, r1, r2
 8004a2e:	e7e0      	b.n	80049f2 <__sccl+0x2a>
 8004a30:	1ad2      	subs	r2, r2, r3
 8004a32:	3a01      	subs	r2, #1
 8004a34:	e7fa      	b.n	8004a2c <__sccl+0x64>
 8004a36:	0028      	movs	r0, r5
 8004a38:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a3c <__submore>:
 8004a3c:	000b      	movs	r3, r1
 8004a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a40:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8004a42:	3344      	adds	r3, #68	@ 0x44
 8004a44:	000c      	movs	r4, r1
 8004a46:	429d      	cmp	r5, r3
 8004a48:	d11c      	bne.n	8004a84 <__submore+0x48>
 8004a4a:	2680      	movs	r6, #128	@ 0x80
 8004a4c:	00f6      	lsls	r6, r6, #3
 8004a4e:	0031      	movs	r1, r6
 8004a50:	f7ff f840 	bl	8003ad4 <_malloc_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d102      	bne.n	8004a5e <__submore+0x22>
 8004a58:	2001      	movs	r0, #1
 8004a5a:	4240      	negs	r0, r0
 8004a5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a5e:	0023      	movs	r3, r4
 8004a60:	6360      	str	r0, [r4, #52]	@ 0x34
 8004a62:	63a6      	str	r6, [r4, #56]	@ 0x38
 8004a64:	3346      	adds	r3, #70	@ 0x46
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	4b10      	ldr	r3, [pc, #64]	@ (8004aac <__submore+0x70>)
 8004a6a:	54c2      	strb	r2, [r0, r3]
 8004a6c:	0023      	movs	r3, r4
 8004a6e:	3345      	adds	r3, #69	@ 0x45
 8004a70:	781a      	ldrb	r2, [r3, #0]
 8004a72:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab0 <__submore+0x74>)
 8004a74:	54c2      	strb	r2, [r0, r3]
 8004a76:	782a      	ldrb	r2, [r5, #0]
 8004a78:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab4 <__submore+0x78>)
 8004a7a:	54c2      	strb	r2, [r0, r3]
 8004a7c:	18c0      	adds	r0, r0, r3
 8004a7e:	6020      	str	r0, [r4, #0]
 8004a80:	2000      	movs	r0, #0
 8004a82:	e7eb      	b.n	8004a5c <__submore+0x20>
 8004a84:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8004a86:	0029      	movs	r1, r5
 8004a88:	0073      	lsls	r3, r6, #1
 8004a8a:	001a      	movs	r2, r3
 8004a8c:	9301      	str	r3, [sp, #4]
 8004a8e:	f000 f830 	bl	8004af2 <_realloc_r>
 8004a92:	1e05      	subs	r5, r0, #0
 8004a94:	d0e0      	beq.n	8004a58 <__submore+0x1c>
 8004a96:	1987      	adds	r7, r0, r6
 8004a98:	0001      	movs	r1, r0
 8004a9a:	0032      	movs	r2, r6
 8004a9c:	0038      	movs	r0, r7
 8004a9e:	f7ff f945 	bl	8003d2c <memcpy>
 8004aa2:	9b01      	ldr	r3, [sp, #4]
 8004aa4:	6027      	str	r7, [r4, #0]
 8004aa6:	6365      	str	r5, [r4, #52]	@ 0x34
 8004aa8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004aaa:	e7e9      	b.n	8004a80 <__submore+0x44>
 8004aac:	000003ff 	.word	0x000003ff
 8004ab0:	000003fe 	.word	0x000003fe
 8004ab4:	000003fd 	.word	0x000003fd

08004ab8 <memmove>:
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	4288      	cmp	r0, r1
 8004abc:	d902      	bls.n	8004ac4 <memmove+0xc>
 8004abe:	188b      	adds	r3, r1, r2
 8004ac0:	4298      	cmp	r0, r3
 8004ac2:	d308      	bcc.n	8004ad6 <memmove+0x1e>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d007      	beq.n	8004ada <memmove+0x22>
 8004aca:	5ccc      	ldrb	r4, [r1, r3]
 8004acc:	54c4      	strb	r4, [r0, r3]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	e7f9      	b.n	8004ac6 <memmove+0xe>
 8004ad2:	5c8b      	ldrb	r3, [r1, r2]
 8004ad4:	5483      	strb	r3, [r0, r2]
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	d2fb      	bcs.n	8004ad2 <memmove+0x1a>
 8004ada:	bd10      	pop	{r4, pc}

08004adc <memchr>:
 8004adc:	b2c9      	uxtb	r1, r1
 8004ade:	1882      	adds	r2, r0, r2
 8004ae0:	4290      	cmp	r0, r2
 8004ae2:	d101      	bne.n	8004ae8 <memchr+0xc>
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	4770      	bx	lr
 8004ae8:	7803      	ldrb	r3, [r0, #0]
 8004aea:	428b      	cmp	r3, r1
 8004aec:	d0fb      	beq.n	8004ae6 <memchr+0xa>
 8004aee:	3001      	adds	r0, #1
 8004af0:	e7f6      	b.n	8004ae0 <memchr+0x4>

08004af2 <_realloc_r>:
 8004af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004af4:	0006      	movs	r6, r0
 8004af6:	000c      	movs	r4, r1
 8004af8:	0015      	movs	r5, r2
 8004afa:	2900      	cmp	r1, #0
 8004afc:	d105      	bne.n	8004b0a <_realloc_r+0x18>
 8004afe:	0011      	movs	r1, r2
 8004b00:	f7fe ffe8 	bl	8003ad4 <_malloc_r>
 8004b04:	0004      	movs	r4, r0
 8004b06:	0020      	movs	r0, r4
 8004b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b0a:	2a00      	cmp	r2, #0
 8004b0c:	d103      	bne.n	8004b16 <_realloc_r+0x24>
 8004b0e:	f7ff f917 	bl	8003d40 <_free_r>
 8004b12:	002c      	movs	r4, r5
 8004b14:	e7f7      	b.n	8004b06 <_realloc_r+0x14>
 8004b16:	f000 f931 	bl	8004d7c <_malloc_usable_size_r>
 8004b1a:	0007      	movs	r7, r0
 8004b1c:	4285      	cmp	r5, r0
 8004b1e:	d802      	bhi.n	8004b26 <_realloc_r+0x34>
 8004b20:	0843      	lsrs	r3, r0, #1
 8004b22:	42ab      	cmp	r3, r5
 8004b24:	d3ef      	bcc.n	8004b06 <_realloc_r+0x14>
 8004b26:	0029      	movs	r1, r5
 8004b28:	0030      	movs	r0, r6
 8004b2a:	f7fe ffd3 	bl	8003ad4 <_malloc_r>
 8004b2e:	9001      	str	r0, [sp, #4]
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d101      	bne.n	8004b38 <_realloc_r+0x46>
 8004b34:	9c01      	ldr	r4, [sp, #4]
 8004b36:	e7e6      	b.n	8004b06 <_realloc_r+0x14>
 8004b38:	002a      	movs	r2, r5
 8004b3a:	42bd      	cmp	r5, r7
 8004b3c:	d900      	bls.n	8004b40 <_realloc_r+0x4e>
 8004b3e:	003a      	movs	r2, r7
 8004b40:	0021      	movs	r1, r4
 8004b42:	9801      	ldr	r0, [sp, #4]
 8004b44:	f7ff f8f2 	bl	8003d2c <memcpy>
 8004b48:	0021      	movs	r1, r4
 8004b4a:	0030      	movs	r0, r6
 8004b4c:	f7ff f8f8 	bl	8003d40 <_free_r>
 8004b50:	e7f0      	b.n	8004b34 <_realloc_r+0x42>
	...

08004b54 <_strtol_l.isra.0>:
 8004b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b56:	b085      	sub	sp, #20
 8004b58:	0017      	movs	r7, r2
 8004b5a:	001e      	movs	r6, r3
 8004b5c:	9003      	str	r0, [sp, #12]
 8004b5e:	9101      	str	r1, [sp, #4]
 8004b60:	2b24      	cmp	r3, #36	@ 0x24
 8004b62:	d823      	bhi.n	8004bac <_strtol_l.isra.0+0x58>
 8004b64:	000c      	movs	r4, r1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d020      	beq.n	8004bac <_strtol_l.isra.0+0x58>
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <_strtol_l.isra.0+0x10c>)
 8004b6c:	2208      	movs	r2, #8
 8004b6e:	469c      	mov	ip, r3
 8004b70:	0023      	movs	r3, r4
 8004b72:	4661      	mov	r1, ip
 8004b74:	781d      	ldrb	r5, [r3, #0]
 8004b76:	3401      	adds	r4, #1
 8004b78:	5d48      	ldrb	r0, [r1, r5]
 8004b7a:	0001      	movs	r1, r0
 8004b7c:	4011      	ands	r1, r2
 8004b7e:	4210      	tst	r0, r2
 8004b80:	d1f6      	bne.n	8004b70 <_strtol_l.isra.0+0x1c>
 8004b82:	2d2d      	cmp	r5, #45	@ 0x2d
 8004b84:	d119      	bne.n	8004bba <_strtol_l.isra.0+0x66>
 8004b86:	7825      	ldrb	r5, [r4, #0]
 8004b88:	1c9c      	adds	r4, r3, #2
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	0033      	movs	r3, r6
 8004b92:	4393      	bics	r3, r2
 8004b94:	d11d      	bne.n	8004bd2 <_strtol_l.isra.0+0x7e>
 8004b96:	2d30      	cmp	r5, #48	@ 0x30
 8004b98:	d115      	bne.n	8004bc6 <_strtol_l.isra.0+0x72>
 8004b9a:	2120      	movs	r1, #32
 8004b9c:	7823      	ldrb	r3, [r4, #0]
 8004b9e:	438b      	bics	r3, r1
 8004ba0:	2b58      	cmp	r3, #88	@ 0x58
 8004ba2:	d110      	bne.n	8004bc6 <_strtol_l.isra.0+0x72>
 8004ba4:	7865      	ldrb	r5, [r4, #1]
 8004ba6:	3402      	adds	r4, #2
 8004ba8:	2610      	movs	r6, #16
 8004baa:	e012      	b.n	8004bd2 <_strtol_l.isra.0+0x7e>
 8004bac:	f7ff f88a 	bl	8003cc4 <__errno>
 8004bb0:	2316      	movs	r3, #22
 8004bb2:	6003      	str	r3, [r0, #0]
 8004bb4:	2000      	movs	r0, #0
 8004bb6:	b005      	add	sp, #20
 8004bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bba:	9100      	str	r1, [sp, #0]
 8004bbc:	2d2b      	cmp	r5, #43	@ 0x2b
 8004bbe:	d1e6      	bne.n	8004b8e <_strtol_l.isra.0+0x3a>
 8004bc0:	7825      	ldrb	r5, [r4, #0]
 8004bc2:	1c9c      	adds	r4, r3, #2
 8004bc4:	e7e3      	b.n	8004b8e <_strtol_l.isra.0+0x3a>
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	d1ee      	bne.n	8004ba8 <_strtol_l.isra.0+0x54>
 8004bca:	360a      	adds	r6, #10
 8004bcc:	2d30      	cmp	r5, #48	@ 0x30
 8004bce:	d100      	bne.n	8004bd2 <_strtol_l.isra.0+0x7e>
 8004bd0:	3e02      	subs	r6, #2
 8004bd2:	4a24      	ldr	r2, [pc, #144]	@ (8004c64 <_strtol_l.isra.0+0x110>)
 8004bd4:	9b00      	ldr	r3, [sp, #0]
 8004bd6:	4694      	mov	ip, r2
 8004bd8:	4463      	add	r3, ip
 8004bda:	0031      	movs	r1, r6
 8004bdc:	0018      	movs	r0, r3
 8004bde:	9302      	str	r3, [sp, #8]
 8004be0:	f7fb fb34 	bl	800024c <__aeabi_uidivmod>
 8004be4:	2200      	movs	r2, #0
 8004be6:	4684      	mov	ip, r0
 8004be8:	0010      	movs	r0, r2
 8004bea:	002b      	movs	r3, r5
 8004bec:	3b30      	subs	r3, #48	@ 0x30
 8004bee:	2b09      	cmp	r3, #9
 8004bf0:	d811      	bhi.n	8004c16 <_strtol_l.isra.0+0xc2>
 8004bf2:	001d      	movs	r5, r3
 8004bf4:	42ae      	cmp	r6, r5
 8004bf6:	dd1d      	ble.n	8004c34 <_strtol_l.isra.0+0xe0>
 8004bf8:	1c53      	adds	r3, r2, #1
 8004bfa:	d009      	beq.n	8004c10 <_strtol_l.isra.0+0xbc>
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4252      	negs	r2, r2
 8004c00:	4584      	cmp	ip, r0
 8004c02:	d305      	bcc.n	8004c10 <_strtol_l.isra.0+0xbc>
 8004c04:	d101      	bne.n	8004c0a <_strtol_l.isra.0+0xb6>
 8004c06:	42a9      	cmp	r1, r5
 8004c08:	db11      	blt.n	8004c2e <_strtol_l.isra.0+0xda>
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	4370      	muls	r0, r6
 8004c0e:	1828      	adds	r0, r5, r0
 8004c10:	7825      	ldrb	r5, [r4, #0]
 8004c12:	3401      	adds	r4, #1
 8004c14:	e7e9      	b.n	8004bea <_strtol_l.isra.0+0x96>
 8004c16:	002b      	movs	r3, r5
 8004c18:	3b41      	subs	r3, #65	@ 0x41
 8004c1a:	2b19      	cmp	r3, #25
 8004c1c:	d801      	bhi.n	8004c22 <_strtol_l.isra.0+0xce>
 8004c1e:	3d37      	subs	r5, #55	@ 0x37
 8004c20:	e7e8      	b.n	8004bf4 <_strtol_l.isra.0+0xa0>
 8004c22:	002b      	movs	r3, r5
 8004c24:	3b61      	subs	r3, #97	@ 0x61
 8004c26:	2b19      	cmp	r3, #25
 8004c28:	d804      	bhi.n	8004c34 <_strtol_l.isra.0+0xe0>
 8004c2a:	3d57      	subs	r5, #87	@ 0x57
 8004c2c:	e7e2      	b.n	8004bf4 <_strtol_l.isra.0+0xa0>
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4252      	negs	r2, r2
 8004c32:	e7ed      	b.n	8004c10 <_strtol_l.isra.0+0xbc>
 8004c34:	1c53      	adds	r3, r2, #1
 8004c36:	d108      	bne.n	8004c4a <_strtol_l.isra.0+0xf6>
 8004c38:	2322      	movs	r3, #34	@ 0x22
 8004c3a:	9a03      	ldr	r2, [sp, #12]
 8004c3c:	9802      	ldr	r0, [sp, #8]
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	d0b8      	beq.n	8004bb6 <_strtol_l.isra.0+0x62>
 8004c44:	1e63      	subs	r3, r4, #1
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	e007      	b.n	8004c5a <_strtol_l.isra.0+0x106>
 8004c4a:	9b00      	ldr	r3, [sp, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d000      	beq.n	8004c52 <_strtol_l.isra.0+0xfe>
 8004c50:	4240      	negs	r0, r0
 8004c52:	2f00      	cmp	r7, #0
 8004c54:	d0af      	beq.n	8004bb6 <_strtol_l.isra.0+0x62>
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	d1f4      	bne.n	8004c44 <_strtol_l.isra.0+0xf0>
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	e7aa      	b.n	8004bb6 <_strtol_l.isra.0+0x62>
 8004c60:	080053fd 	.word	0x080053fd
 8004c64:	7fffffff 	.word	0x7fffffff

08004c68 <_strtol_r>:
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	f7ff ff73 	bl	8004b54 <_strtol_l.isra.0>
 8004c6e:	bd10      	pop	{r4, pc}

08004c70 <_strtoul_l.isra.0>:
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c72:	001e      	movs	r6, r3
 8004c74:	4b3e      	ldr	r3, [pc, #248]	@ (8004d70 <_strtoul_l.isra.0+0x100>)
 8004c76:	0017      	movs	r7, r2
 8004c78:	000c      	movs	r4, r1
 8004c7a:	469c      	mov	ip, r3
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	b085      	sub	sp, #20
 8004c80:	9003      	str	r0, [sp, #12]
 8004c82:	9100      	str	r1, [sp, #0]
 8004c84:	0023      	movs	r3, r4
 8004c86:	4661      	mov	r1, ip
 8004c88:	781d      	ldrb	r5, [r3, #0]
 8004c8a:	3401      	adds	r4, #1
 8004c8c:	5d48      	ldrb	r0, [r1, r5]
 8004c8e:	0001      	movs	r1, r0
 8004c90:	4011      	ands	r1, r2
 8004c92:	4210      	tst	r0, r2
 8004c94:	d1f6      	bne.n	8004c84 <_strtoul_l.isra.0+0x14>
 8004c96:	2d2d      	cmp	r5, #45	@ 0x2d
 8004c98:	d112      	bne.n	8004cc0 <_strtoul_l.isra.0+0x50>
 8004c9a:	7825      	ldrb	r5, [r4, #0]
 8004c9c:	1c9c      	adds	r4, r3, #2
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	9302      	str	r3, [sp, #8]
 8004ca2:	2210      	movs	r2, #16
 8004ca4:	0033      	movs	r3, r6
 8004ca6:	4393      	bics	r3, r2
 8004ca8:	d116      	bne.n	8004cd8 <_strtoul_l.isra.0+0x68>
 8004caa:	2d30      	cmp	r5, #48	@ 0x30
 8004cac:	d10e      	bne.n	8004ccc <_strtoul_l.isra.0+0x5c>
 8004cae:	2120      	movs	r1, #32
 8004cb0:	7823      	ldrb	r3, [r4, #0]
 8004cb2:	438b      	bics	r3, r1
 8004cb4:	2b58      	cmp	r3, #88	@ 0x58
 8004cb6:	d109      	bne.n	8004ccc <_strtoul_l.isra.0+0x5c>
 8004cb8:	7865      	ldrb	r5, [r4, #1]
 8004cba:	3402      	adds	r4, #2
 8004cbc:	2610      	movs	r6, #16
 8004cbe:	e00b      	b.n	8004cd8 <_strtoul_l.isra.0+0x68>
 8004cc0:	9102      	str	r1, [sp, #8]
 8004cc2:	2d2b      	cmp	r5, #43	@ 0x2b
 8004cc4:	d1ed      	bne.n	8004ca2 <_strtoul_l.isra.0+0x32>
 8004cc6:	7825      	ldrb	r5, [r4, #0]
 8004cc8:	1c9c      	adds	r4, r3, #2
 8004cca:	e7ea      	b.n	8004ca2 <_strtoul_l.isra.0+0x32>
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	d1f5      	bne.n	8004cbc <_strtoul_l.isra.0+0x4c>
 8004cd0:	360a      	adds	r6, #10
 8004cd2:	2d30      	cmp	r5, #48	@ 0x30
 8004cd4:	d100      	bne.n	8004cd8 <_strtoul_l.isra.0+0x68>
 8004cd6:	3e02      	subs	r6, #2
 8004cd8:	2001      	movs	r0, #1
 8004cda:	0031      	movs	r1, r6
 8004cdc:	4240      	negs	r0, r0
 8004cde:	f7fb fa2f 	bl	8000140 <__udivsi3>
 8004ce2:	9001      	str	r0, [sp, #4]
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	0031      	movs	r1, r6
 8004ce8:	4240      	negs	r0, r0
 8004cea:	f7fb faaf 	bl	800024c <__aeabi_uidivmod>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	4694      	mov	ip, r2
 8004cf6:	002a      	movs	r2, r5
 8004cf8:	3a30      	subs	r2, #48	@ 0x30
 8004cfa:	2a09      	cmp	r2, #9
 8004cfc:	d812      	bhi.n	8004d24 <_strtoul_l.isra.0+0xb4>
 8004cfe:	0015      	movs	r5, r2
 8004d00:	42ae      	cmp	r6, r5
 8004d02:	dd1e      	ble.n	8004d42 <_strtoul_l.isra.0+0xd2>
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	d00a      	beq.n	8004d1e <_strtoul_l.isra.0+0xae>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	9a01      	ldr	r2, [sp, #4]
 8004d0c:	425b      	negs	r3, r3
 8004d0e:	4282      	cmp	r2, r0
 8004d10:	d305      	bcc.n	8004d1e <_strtoul_l.isra.0+0xae>
 8004d12:	d101      	bne.n	8004d18 <_strtoul_l.isra.0+0xa8>
 8004d14:	42a9      	cmp	r1, r5
 8004d16:	db11      	blt.n	8004d3c <_strtoul_l.isra.0+0xcc>
 8004d18:	4663      	mov	r3, ip
 8004d1a:	4370      	muls	r0, r6
 8004d1c:	1828      	adds	r0, r5, r0
 8004d1e:	7825      	ldrb	r5, [r4, #0]
 8004d20:	3401      	adds	r4, #1
 8004d22:	e7e8      	b.n	8004cf6 <_strtoul_l.isra.0+0x86>
 8004d24:	002a      	movs	r2, r5
 8004d26:	3a41      	subs	r2, #65	@ 0x41
 8004d28:	2a19      	cmp	r2, #25
 8004d2a:	d801      	bhi.n	8004d30 <_strtoul_l.isra.0+0xc0>
 8004d2c:	3d37      	subs	r5, #55	@ 0x37
 8004d2e:	e7e7      	b.n	8004d00 <_strtoul_l.isra.0+0x90>
 8004d30:	002a      	movs	r2, r5
 8004d32:	3a61      	subs	r2, #97	@ 0x61
 8004d34:	2a19      	cmp	r2, #25
 8004d36:	d804      	bhi.n	8004d42 <_strtoul_l.isra.0+0xd2>
 8004d38:	3d57      	subs	r5, #87	@ 0x57
 8004d3a:	e7e1      	b.n	8004d00 <_strtoul_l.isra.0+0x90>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	425b      	negs	r3, r3
 8004d40:	e7ed      	b.n	8004d1e <_strtoul_l.isra.0+0xae>
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	d107      	bne.n	8004d56 <_strtoul_l.isra.0+0xe6>
 8004d46:	2222      	movs	r2, #34	@ 0x22
 8004d48:	9903      	ldr	r1, [sp, #12]
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	600a      	str	r2, [r1, #0]
 8004d4e:	2f00      	cmp	r7, #0
 8004d50:	d109      	bne.n	8004d66 <_strtoul_l.isra.0+0xf6>
 8004d52:	b005      	add	sp, #20
 8004d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d56:	9a02      	ldr	r2, [sp, #8]
 8004d58:	2a00      	cmp	r2, #0
 8004d5a:	d000      	beq.n	8004d5e <_strtoul_l.isra.0+0xee>
 8004d5c:	4240      	negs	r0, r0
 8004d5e:	2f00      	cmp	r7, #0
 8004d60:	d0f7      	beq.n	8004d52 <_strtoul_l.isra.0+0xe2>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <_strtoul_l.isra.0+0xfa>
 8004d66:	1e63      	subs	r3, r4, #1
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	9b00      	ldr	r3, [sp, #0]
 8004d6c:	603b      	str	r3, [r7, #0]
 8004d6e:	e7f0      	b.n	8004d52 <_strtoul_l.isra.0+0xe2>
 8004d70:	080053fd 	.word	0x080053fd

08004d74 <_strtoul_r>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	f7ff ff7b 	bl	8004c70 <_strtoul_l.isra.0>
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <_malloc_usable_size_r>:
 8004d7c:	1f0b      	subs	r3, r1, #4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1f18      	subs	r0, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da01      	bge.n	8004d8a <_malloc_usable_size_r+0xe>
 8004d86:	580b      	ldr	r3, [r1, r0]
 8004d88:	18c0      	adds	r0, r0, r3
 8004d8a:	4770      	bx	lr

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	46c0      	nop			@ (mov r8, r8)
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr
