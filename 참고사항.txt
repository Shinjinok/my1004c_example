/*****************************************************************************************************************************************************
* 참고 사항:
*
* 1. 이 항목은 FreeRTOS를 사용할 때의 태스크 지연 설정입니다. 태스크는 주어진 틱(tick) 수만큼 지연됩니다. RTOS가 타이밍에 미치는 영향을
*    관찰할 수 있도록 외부에서 이 값을 정의할 수 있게 했습니다.
*
* 2. 여기서 사용되는 프레임들은 Decawave 전용 거리 측정 프레임으로, IEEE 802.15.4 표준의 데이터 프레임 인코딩을 따릅니다.
*    사용되는 프레임은 다음과 같습니다:
*     - Initiator(시작 장치)가 전송하는 poll 메시지로 거리 측정 절차를 시작합니다.
*     - Responder(응답 장치)가 전송하는 response 메시지로, initiator가 왕복 시간(Time-of-Flight)을 계산하는 데 필요한 모든 정보를 제공합니다.
*
*    이들 프레임의 처음 10바이트는 공통된 구조를 가지며, 다음과 같은 필드로 구성됩니다:
*     - 바이트 0/1: 프레임 제어 필드 (`0x8841`, 데이터 프레임이며 16비트 주소 사용을 나타냄).
*     - 바이트 2: 시퀀스 번호 (프레임마다 증가).
*     - 바이트 3/4: PAN ID (`0xDECA`).
*     - 바이트 5/6: 목적지 주소 (NOTE 3 참조).
*     - 바이트 7/8: 출발지 주소 (NOTE 3 참조).
*     - 바이트 9: 기능 코드 (거리 측정 과정 중 어떤 메시지인지를 나타냄).
*
*    이후 바이트는 각 메시지 유형에 따라 다릅니다:
*     - **Poll 메시지**: 이후 데이터 없음.
*     - **Response 메시지**:
*         - 바이트 10~13: poll 메시지 수신 타임스탬프.
*         - 바이트 14~17: response 메시지 전송 타임스탬프.
*
*    모든 메시지의 끝에는 DW1000이 자동으로 붙이는 2바이트 체크섬이 있습니다.
*
* 3. 예제에서는 출발지 및 목적지 주소를 하드코딩된 상수로 설정하여 단순화했습니다. 하지만 실제 제품에서는 각 장치에 고유 ID를 부여해야 합니다.
*    이 예제에서는 메시지를 짧게 유지하기 위해 16비트 주소를 사용하지만, 실제 응용에서는 각 장치 간의 협의를 통해 이 단축 주소를 정의해야 합니다.
*
* 4. `dwt_writetxdata()`는 전체 메시지 길이를 인자로 받지만, 실제로는 (길이 - 2) 바이트만 복사하며, 프레임의 마지막 2바이트 체크섬은 DW1000이
*    자동으로 추가합니다. 따라서 변수 크기를 두 바이트 줄여도 데이터 손실은 없지만, `sizeof` 연산자 사용 시 실제 길이를 명확히 지정해야 합니다.
*
* 5. 이 예제는 가능한 단순화를 위해 polling 방식으로 동작하지만, 모든 상태 이벤트는 인터럽트로 처리할 수도 있습니다.
*    인터럽트에 대한 자세한 내용은 DW1000 사용자 매뉴얼의 "인터럽트" 항목을 참고하십시오.
*    또한 STATUS 레지스터는 5바이트 길이지만, 필요한 이벤트는 처음 몇 바이트에 포함되어 있어 `dwt_read32bitreg()` API를 이용해 간단히 접근할 수 있습니다.
*
* 6. `POLL_RX_TO_RESP_TX_DLY_UUS` 값은 다른 플랫폼으로 포팅할 때 매우 중요한 값입니다. 예를 들어, SPI 속도가 느리거나 프로세서 클럭이 낮은 시스템(STM32F 기준 SPI 18MHz, CPU 72MHz)에서는 이 값을 늘려야 합니다.
*    응답 장치가 응답을 보낼 정확한 시간을 알고 있어야 ToF 계산이 정확해집니다. 응답 시간을 충분히 늦게 설정하면, 프로세서가 계산을 마치고 TX 버퍼에 패킷을 넣을 시간을 확보할 수 있습니다.
*
* 7. FINAL 메시지에 최종 TX 타임스탬프를 포함시키려면, DW1000의 레지스터에서 직접 읽는 대신 사전에 계산해야 합니다.
*    타임스탬프와 지연 전송 시간은 모두 장치 시간 단위(DTU)로 표현되므로, 응답 수신 시각에 원하는 지연 시간을 더하면 최종 전송 시점을 얻을 수 있습니다.
*    지연 전송 시간은 512 DTU 단위로만 설정 가능하므로 계산된 값의 하위 9비트를 0으로 맞춰야 합니다.
*    이렇게 하면 하위 8비트가 0인 40비트 값을 32비트로 압축해서 사용할 수도 있습니다.
*
* 8. 이 작업에서는 40비트 타임스탬프의 최상위 바이트는 버려집니다.
*    이는 각 타임스탬프 간 차이가 2^32 DTU (약 67ms)를 넘지 않기 때문에 가능하며, 왕복 시간 계산을 32비트 정수 연산으로 처리할 수 있습니다.
*
* 9. `dwt_writetxdata()`는 프레임 전체 길이를 인자로 받지만, 실제로는 마지막 2바이트 체크섬은 자동으로 추가되므로, 변수의 실제 크기는 2바이트 더 짧아도 무방합니다.
*    하지만 여전히 전체 길이를 정확히 지정해야 하므로 `sizeof`를 사용하는 경우 주의가 필요합니다.
*
*10. 실제 사용 예제는 EVK1000 제품과 함께 제공되는 DecaRanging ARM 애플리케이션을 참조하시고, DW1000 드라이버 함수에 대한 자세한 정보는
*    DW1000 API 가이드를 참고하시기 바랍니다.
****************************************************************************************************************************************************/

